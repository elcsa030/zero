// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::recursion {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 96> host_args;
  std::array<Fp, 32> host_outs;
  // loc(unknown)
  Fp x0(1040977421);
  // loc(unknown)
  Fp x1(1792450386);
  // loc(unknown)
  Fp x2(1470845646);
  // loc(unknown)
  Fp x3(1363837384);
  // loc(unknown)
  Fp x4(1878280202);
  // loc(unknown)
  Fp x5(434078361);
  // loc(unknown)
  Fp x6(1946596189);
  // loc(unknown)
  Fp x7(875839332);
  // loc(unknown)
  Fp x8(463976218);
  // loc(unknown)
  Fp x9(976057819);
  // loc(unknown)
  Fp x10(48375137);
  // loc(unknown)
  Fp x11(1549779579);
  // loc(unknown)
  Fp x12(1679178250);
  // loc(unknown)
  Fp x13(530151394);
  // loc(unknown)
  Fp x14(1629316321);
  // loc(unknown)
  Fp x15(1854174607);
  // loc(unknown)
  Fp x16(720724951);
  // loc(unknown)
  Fp x17(14387587);
  // loc(unknown)
  Fp x18(1883820770);
  // loc(unknown)
  Fp x19(205609311);
  // loc(unknown)
  Fp x20(1136469704);
  // loc(unknown)
  Fp x21(1439947916);
  // loc(unknown)
  Fp x22(723038058);
  // loc(unknown)
  Fp x23(53041581);
  // loc(unknown)
  Fp x24(1810596765);
  // loc(unknown)
  Fp x25(1210751726);
  // loc(unknown)
  Fp x26(1327682690);
  // loc(unknown)
  Fp x27(1886977120);
  // loc(unknown)
  Fp x28(1551596046);
  // loc(unknown)
  Fp x29(1186174623);
  // loc(unknown)
  Fp x30(1199068823);
  // loc(unknown)
  Fp x31(1240419708);
  // loc(unknown)
  Fp x32(1708681573);
  // loc(unknown)
  Fp x33(308575117);
  // loc(unknown)
  Fp x34(1111544260);
  // loc(unknown)
  Fp x35(822033215);
  // loc(unknown)
  Fp x36(1891545577);
  // loc(unknown)
  Fp x37(440300254);
  // loc(unknown)
  Fp x38(1726563304);
  // loc(unknown)
  Fp x39(1365519753);
  // loc(unknown)
  Fp x40(924863639);
  // loc(unknown)
  Fp x41(1540960371);
  // loc(unknown)
  Fp x42(1052077299);
  // loc(unknown)
  Fp x43(1930103076);
  // loc(unknown)
  Fp x44(918610824);
  // loc(unknown)
  Fp x45(13683276);
  // loc(unknown)
  Fp x46(606789471);
  // loc(unknown)
  Fp x47(1974912880);
  // loc(unknown)
  Fp x48(65998480);
  // loc(unknown)
  Fp x49(1461037801);
  // loc(unknown)
  Fp x50(1997365680);
  // loc(unknown)
  Fp x51(801504236);
  // loc(unknown)
  Fp x52(1792686146);
  // loc(unknown)
  Fp x53(1001081699);
  // loc(unknown)
  Fp x54(98371040);
  // loc(unknown)
  Fp x55(1389833583);
  // loc(unknown)
  Fp x56(106789798);
  // loc(unknown)
  Fp x57(1188752902);
  // loc(unknown)
  Fp x58(20525701);
  // loc(unknown)
  Fp x59(1558116381);
  // loc(unknown)
  Fp x60(1942928017);
  // loc(unknown)
  Fp x61(1928969209);
  // loc(unknown)
  Fp x62(51866717);
  // loc(unknown)
  Fp x63(658182609);
  // loc(unknown)
  Fp x64(1867716110);
  // loc(unknown)
  Fp x65(111593398);
  // loc(unknown)
  Fp x66(375892129);
  // loc(unknown)
  Fp x67(1083257840);
  // loc(unknown)
  Fp x68(497520322);
  // loc(unknown)
  Fp x69(1827572010);
  // loc(unknown)
  Fp x70(862495875);
  // loc(unknown)
  Fp x71(1507649755);
  // loc(unknown)
  Fp x72(447555988);
  // loc(unknown)
  Fp x73(1042892522);
  // loc(unknown)
  Fp x74(1910423126);
  // loc(unknown)
  Fp x75(760115692);
  // loc(unknown)
  Fp x76(1099252725);
  // loc(unknown)
  Fp x77(1841795381);
  // loc(unknown)
  Fp x78(1584033957);
  // loc(unknown)
  Fp x79(457372011);
  // loc(unknown)
  Fp x80(1079030649);
  // loc(unknown)
  Fp x81(1748789933);
  // loc(unknown)
  Fp x82(1622328571);
  // loc(unknown)
  Fp x83(1478577620);
  // loc(unknown)
  Fp x84(1908416316);
  // loc(unknown)
  Fp x85(76770019);
  // loc(unknown)
  Fp x86(1549062383);
  // loc(unknown)
  Fp x87(1293938517);
  // loc(unknown)
  Fp x88(623051854);
  // loc(unknown)
  Fp x89(1150410028);
  // loc(unknown)
  Fp x90(162510541);
  // loc(unknown)
  Fp x91(1065075039);
  // loc(unknown)
  Fp x92(1608853840);
  // loc(unknown)
  Fp x93(1198261138);
  // loc(unknown)
  Fp x94(538103555);
  // loc(unknown)
  Fp x95(59510015);
  // loc(unknown)
  Fp x96(1424297384);
  // loc(unknown)
  Fp x97(1402624179);
  // loc(unknown)
  Fp x98(552696906);
  // loc(unknown)
  Fp x99(158646617);
  // loc(unknown)
  Fp x100(946500736);
  // loc(unknown)
  Fp x101(890243564);
  // loc(unknown)
  Fp x102(1215259350);
  // loc(unknown)
  Fp x103(1463323727);
  // loc(unknown)
  Fp x104(855276054);
  // loc(unknown)
  Fp x105(1080533265);
  // loc(unknown)
  Fp x106(1664590951);
  // loc(unknown)
  Fp x107(192082241);
  // loc(unknown)
  Fp x108(217046702);
  // loc(unknown)
  Fp x109(1891637550);
  // loc(unknown)
  Fp x110(142102402);
  // loc(unknown)
  Fp x111(1950429111);
  // loc(unknown)
  Fp x112(1257820264);
  // loc(unknown)
  Fp x113(1663353317);
  // loc(unknown)
  Fp x114(27129487);
  // loc(unknown)
  Fp x115(1567618575);
  // loc(unknown)
  Fp x116(1147522062);
  // loc(unknown)
  Fp x117(1380248020);
  // loc(unknown)
  Fp x118(150307788);
  // loc(unknown)
  Fp x119(1291790245);
  // loc(unknown)
  Fp x120(989176635);
  // loc(unknown)
  Fp x121(1608891156);
  // loc(unknown)
  Fp x122(755691969);
  // loc(unknown)
  Fp x123(1781980094);
  // loc(unknown)
  Fp x124(241306552);
  // loc(unknown)
  Fp x125(1672219447);
  // loc(unknown)
  Fp x126(1715719711);
  // loc(unknown)
  Fp x127(273790406);
  // loc(unknown)
  Fp x128(1507936940);
  // loc(unknown)
  Fp x129(1262312258);
  // loc(unknown)
  Fp x130(1545325389);
  // loc(unknown)
  Fp x131(1239734761);
  // loc(unknown)
  Fp x132(1687379185);
  // loc(unknown)
  Fp x133(162506101);
  // loc(unknown)
  Fp x134(989618631);
  // loc(unknown)
  Fp x135(1221257987);
  // loc(unknown)
  Fp x136(1150912935);
  // loc(unknown)
  Fp x137(809508074);
  // loc(unknown)
  Fp x138(1401020792);
  // loc(unknown)
  Fp x139(51256176);
  // loc(unknown)
  Fp x140(1917549072);
  // loc(unknown)
  Fp x141(1303271640);
  // loc(unknown)
  Fp x142(930036496);
  // loc(unknown)
  Fp x143(172614232);
  // loc(unknown)
  Fp x144(1201063290);
  // loc(unknown)
  Fp x145(1393671120);
  // loc(unknown)
  Fp x146(238616145);
  // loc(unknown)
  Fp x147(306391314);
  // loc(unknown)
  Fp x148(395622276);
  // loc(unknown)
  Fp x149(641665156);
  // loc(unknown)
  Fp x150(1006235079);
  // loc(unknown)
  Fp x151(1647670797);
  // loc(unknown)
  Fp x152(1997503974);
  // loc(unknown)
  Fp x153(1090783436);
  // loc(unknown)
  Fp x154(942439428);
  // loc(unknown)
  Fp x155(53007114);
  // loc(unknown)
  Fp x156(716894289);
  // loc(unknown)
  Fp x157(1111203133);
  // loc(unknown)
  Fp x158(1649953458);
  // loc(unknown)
  Fp x159(1269493554);
  // loc(unknown)
  Fp x160(897025192);
  // loc(unknown)
  Fp x161(1296144415);
  // loc(unknown)
  Fp x162(1647665372);
  // loc(unknown)
  Fp x163(1338899225);
  // loc(unknown)
  Fp x164(1282239129);
  // loc(unknown)
  Fp x165(202271745);
  // loc(unknown)
  Fp x166(708123747);
  // loc(unknown)
  Fp x167(1740472809);
  // loc(unknown)
  Fp x168(1737016378);
  // loc(unknown)
  Fp x169(459826664);
  // loc(unknown)
  Fp x170(925018226);
  // loc(unknown)
  Fp x171(1454563174);
  // loc(unknown)
  Fp x172(686842369);
  // loc(unknown)
  Fp x173(781141772);
  // loc(unknown)
  Fp x174(78845751);
  // loc(unknown)
  Fp x175(204228775);
  // loc(unknown)
  Fp x176(622609176);
  // loc(unknown)
  Fp x177(1832911930);
  // loc(unknown)
  Fp x178(1889603648);
  // loc(unknown)
  Fp x179(588764636);
  // loc(unknown)
  Fp x180(1339793538);
  // loc(unknown)
  Fp x181(228520958);
  // loc(unknown)
  Fp x182(993455846);
  // loc(unknown)
  Fp x183(1718628547);
  // loc(unknown)
  Fp x184(1518763784);
  // loc(unknown)
  Fp x185(813674331);
  // loc(unknown)
  Fp x186(140621810);
  // loc(unknown)
  Fp x187(427731030);
  // loc(unknown)
  Fp x188(1989924532);
  // loc(unknown)
  Fp x189(1889898);
  // loc(unknown)
  Fp x190(117294666);
  // loc(unknown)
  Fp x191(825405577);
  // loc(unknown)
  Fp x192(1170029417);
  // loc(unknown)
  Fp x193(1124078057);
  // loc(unknown)
  Fp x194(790726260);
  // loc(unknown)
  Fp x195(342857858);
  // loc(unknown)
  Fp x196(1917861751);
  // loc(unknown)
  Fp x197(738091882);
  // loc(unknown)
  Fp x198(1213686459);
  // loc(unknown)
  Fp x199(1290028279);
  // loc(unknown)
  Fp x200(1333667262);
  // loc(unknown)
  Fp x201(1003792297);
  // loc(unknown)
  Fp x202(390340387);
  // loc(unknown)
  Fp x203(608401422);
  // loc(unknown)
  Fp x204(540703332);
  // loc(unknown)
  Fp x205(1896271507);
  // loc(unknown)
  Fp x206(714957516);
  // loc(unknown)
  Fp x207(1587822577);
  // loc(unknown)
  Fp x208(1845603984);
  // loc(unknown)
  Fp x209(1206940496);
  // loc(unknown)
  Fp x210(1209164052);
  // loc(unknown)
  Fp x211(128479034);
  // loc(unknown)
  Fp x212(695835963);
  // loc(unknown)
  Fp x213(831813382);
  // loc(unknown)
  Fp x214(1421525369);
  // loc(unknown)
  Fp x215(1751797115);
  // loc(unknown)
  Fp x216(1964135730);
  // loc(unknown)
  Fp x217(525458520);
  // loc(unknown)
  Fp x218(638242172);
  // loc(unknown)
  Fp x219(1307439985);
  // loc(unknown)
  Fp x220(343354132);
  // loc(unknown)
  Fp x221(1389166148);
  // loc(unknown)
  Fp x222(1660766320);
  // loc(unknown)
  Fp x223(1464793095);
  // loc(unknown)
  Fp x224(1180307149);
  // loc(unknown)
  Fp x225(1930780904);
  // loc(unknown)
  Fp x226(1066694495);
  // loc(unknown)
  Fp x227(1773108264);
  // loc(unknown)
  Fp x228(1004040026);
  // loc(unknown)
  Fp x229(815798990);
  // loc(unknown)
  Fp x230(454905424);
  // loc(unknown)
  Fp x231(118043943);
  // loc(unknown)
  Fp x232(157582794);
  // loc(unknown)
  Fp x233(246143118);
  // loc(unknown)
  Fp x234(314968988);
  // loc(unknown)
  Fp x235(127253399);
  // loc(unknown)
  Fp x236(262278199);
  // loc(unknown)
  Fp x237(943718400);
  // loc(unknown)
  Fp x238(268435454);
  // loc(unknown)
  Fp x239(1761607679);
  // loc(unknown)
  Fp x240(1073741824);
  // loc(unknown)
  Fp x241(1509949437);
  // loc(unknown)
  Fp x242(536870912);
  // loc(unknown)
  Fp x243(1006632953);
  // loc(unknown)
  Fp x244(268435456);
  // loc(unknown)
  Fp x245(2013265906);
  // loc(unknown)
  Fp x246(134217728);
  // loc(unknown)
  Fp x247(2013265891);
  // loc(unknown)
  Fp x248(67108864);
  // loc(unknown)
  Fp x249(2013265861);
  // loc(unknown)
  Fp x250(33554432);
  // loc(unknown)
  Fp x251(2013265801);
  // loc(unknown)
  Fp x252(16777216);
  // loc(unknown)
  Fp x253(2013265681);
  // loc(unknown)
  Fp x254(8388608);
  // loc(unknown)
  Fp x255(2013265441);
  // loc(unknown)
  Fp x256(4194304);
  // loc(unknown)
  Fp x257(2013264961);
  // loc(unknown)
  Fp x258(2097152);
  // loc(unknown)
  Fp x259(2013264001);
  // loc(unknown)
  Fp x260(1048576);
  // loc(unknown)
  Fp x261(2013262081);
  // loc(unknown)
  Fp x262(524288);
  // loc(unknown)
  Fp x263(2013258241);
  // loc(unknown)
  Fp x264(262144);
  // loc(unknown)
  Fp x265(2013250561);
  // loc(unknown)
  Fp x266(131072);
  // loc(unknown)
  Fp x267(2013235201);
  // loc(unknown)
  Fp x268(2013204481);
  // loc(unknown)
  Fp x269(32768);
  // loc(unknown)
  Fp x270(2013143041);
  // loc(unknown)
  Fp x271(16384);
  // loc(unknown)
  Fp x272(2013020161);
  // loc(unknown)
  Fp x273(8192);
  // loc(unknown)
  Fp x274(2012774401);
  // loc(unknown)
  Fp x275(4096);
  // loc(unknown)
  Fp x276(2012282881);
  // loc(unknown)
  Fp x277(2048);
  // loc(unknown)
  Fp x278(2011299841);
  // loc(unknown)
  Fp x279(1024);
  // loc(unknown)
  Fp x280(2009333761);
  // loc(unknown)
  Fp x281(512);
  // loc(unknown)
  Fp x282(2005401601);
  // loc(unknown)
  Fp x283(256);
  // loc(unknown)
  Fp x284(1997537281);
  // loc(unknown)
  Fp x285(128);
  // loc(unknown)
  Fp x286(1981808641);
  // loc(unknown)
  Fp x287(64);
  // loc(unknown)
  Fp x288(1950351361);
  // loc(unknown)
  Fp x289(32);
  // loc(unknown)
  Fp x290(1887436801);
  // loc(unknown)
  Fp x291(16);
  // loc(unknown)
  Fp x292(1761607681);
  // loc(unknown)
  Fp x293(1509949441);
  // loc(unknown)
  Fp x294(1006632961);
  // loc(unknown)
  Fp x295(65536);
  // loc(unknown)
  Fp x296(2013265910);
  // loc(unknown)
  Fp x297(11);
  // loc(unknown)
  Fp x298(10);
  // loc(unknown)
  Fp x299(9);
  // loc(unknown)
  Fp x300(8);
  // loc(unknown)
  Fp x301(7);
  // loc(unknown)
  Fp x302(6);
  // loc(unknown)
  Fp x303(5);
  // loc(unknown)
  Fp x304(4);
  // loc(unknown)
  Fp x305(3);
  // loc(unknown)
  Fp x306(2);
  // loc(unknown)
  Fp x307(1);
  // loc(unknown)
  Fp x308(0);
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/micro_ops(Reg)"("./zirgen/components/mux.h":49:25))
  auto x309 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x309 != Fp::invalid());
  if (x309 != 0) {
    // loc("top(recursion::Top)/code(recursion::Code)/write_addr(Reg)"("zirgen/circuit/recursion/top.cpp":22:49))
    auto x310 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x310 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[0](recursion::MicroInst)/opcode(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x311 = args[0][7 * steps + ((cycle - 0) & mask)];
    assert(x311 != Fp::invalid());
    {
      // loc("./zirgen/components/onehot.h":37:26)
      auto x312 = (x311 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x312);
        reg = x312;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x313 = x311 - x307;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x314 = (x313 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x314);
        reg = x314;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x315 = x311 - x306;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x316 = (x315 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x316);
        reg = x316;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x317 = x311 - x305;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x318 = (x317 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x318);
        reg = x318;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x319 = x311 - x304;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x320 = (x319 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][94 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x320);
        reg = x320;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x321 = x311 - x303;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x322 = (x321 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][95 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x322);
        reg = x322;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x323 = x311 - x302;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x324 = (x323 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][96 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x324);
        reg = x324;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x325 = x311 - x301;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x326 = (x325 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][97 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x326);
        reg = x326;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x327 = x311 - x300;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x328 = (x327 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x328);
        reg = x328;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x329 = x311 - x299;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x330 = (x329 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x330);
        reg = x330;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x331 = x311 - x298;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x332 = (x331 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][100 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x332);
        reg = x332;
      }
    }
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/add(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x333 = args[2][91 * steps + ((cycle - 0) & mask)];
    assert(x333 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/sub(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x334 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x334 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/mul(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x335 = args[2][93 * steps + ((cycle - 0) & mask)];
    assert(x335 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/inv(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x336 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x336 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/eq(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x337 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x337 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/read_iop_header(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x338 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x338 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/read_iop_body(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x339 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x339 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/mix_rng(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x340 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x340 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/select(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x341 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x341 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/extract(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x342 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x342 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[0](recursion::MicroInst)/operand[0](Reg)"("zirgen/circuit/recursion/micro.cpp":14:17))
    auto x343 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x343 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[0](recursion::MicroInst)/operand[1](Reg)"("zirgen/circuit/recursion/micro.cpp":15:17))
    auto x344 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x344 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[0](recursion::MicroInst)/operand[2](Reg)"("zirgen/circuit/recursion/micro.cpp":16:17))
    auto x345 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x345 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/constop(Reg)"("zirgen/circuit/recursion/micro.cpp":19:44))
    auto x346 = args[2][90 * steps + ((cycle - 0) & mask)];
    assert(x346 != Fp::invalid());
    if (x346 != 0) {
      host_args.at(0) = x310;
      host_args.at(1) = x343;
      host_args.at(2) = x344;
      host_args.at(3) = x345;
      host_args.at(4) = x308;
      host(ctx, "log", "%u> CONST: %e", host_args.data(), 5, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x310);
        reg = x310;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x344);
        reg = x344;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x345);
        reg = x345;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x347 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x347 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x348 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x348 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x349 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x349 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x350 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x350 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x351 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x351 != Fp::invalid());
        host_args.at(0) = x347;
        host_args.at(1) = x348;
        host_args.at(2) = x349;
        host_args.at(3) = x350;
        host_args.at(4) = x351;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x333 != 0) {
      {
        host_args.at(0) = x343;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x352 = host_outs.at(0);
        auto x353 = host_outs.at(1);
        auto x354 = host_outs.at(2);
        auto x355 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x352);
          reg = x352;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x353);
          reg = x353;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x354);
          reg = x354;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x355);
          reg = x355;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x356 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x356 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x357 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x357 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x358 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x358 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x359 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x359 != Fp::invalid());
      {
        host_args.at(0) = x344;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x360 = host_outs.at(0);
        auto x361 = host_outs.at(1);
        auto x362 = host_outs.at(2);
        auto x363 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x360);
          reg = x360;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x361);
          reg = x361;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x362);
          reg = x362;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x363);
          reg = x363;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x344);
        reg = x344;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x364 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x364 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x365 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x365 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x366 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x366 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x367 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x367 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x368 = x356 + x364;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x369 = x357 + x365;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x370 = x358 + x366;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x371 = x359 + x367;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x310);
        reg = x310;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x368);
        reg = x368;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x369);
        reg = x369;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x370);
        reg = x370;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x371);
        reg = x371;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x372 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x372 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x373 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x373 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x374 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x374 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x375 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x375 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x376 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x376 != Fp::invalid());
        host_args.at(0) = x372;
        host_args.at(1) = x373;
        host_args.at(2) = x374;
        host_args.at(3) = x375;
        host_args.at(4) = x376;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x377 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x377 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x378 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x378 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x379 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x379 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x380 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x380 != Fp::invalid());
      host_args.at(0) = x310;
      host_args.at(1) = x356;
      host_args.at(2) = x357;
      host_args.at(3) = x358;
      host_args.at(4) = x359;
      host_args.at(5) = x364;
      host_args.at(6) = x365;
      host_args.at(7) = x366;
      host_args.at(8) = x367;
      host_args.at(9) = x377;
      host_args.at(10) = x378;
      host_args.at(11) = x379;
      host_args.at(12) = x380;
      host(ctx, "log", "%u> ADD: %e + %e -> %e", host_args.data(), 13, host_outs.data(), 0);
    }
    if (x334 != 0) {
      {
        host_args.at(0) = x343;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x381 = host_outs.at(0);
        auto x382 = host_outs.at(1);
        auto x383 = host_outs.at(2);
        auto x384 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x381);
          reg = x381;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x382);
          reg = x382;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x383);
          reg = x383;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x384);
          reg = x384;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x385 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x385 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x386 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x386 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x387 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x387 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x388 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x388 != Fp::invalid());
      {
        host_args.at(0) = x344;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x389 = host_outs.at(0);
        auto x390 = host_outs.at(1);
        auto x391 = host_outs.at(2);
        auto x392 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x389);
          reg = x389;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x390);
          reg = x390;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x391);
          reg = x391;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x392);
          reg = x392;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x344);
        reg = x344;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x393 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x393 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x394 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x394 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x395 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x395 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x396 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x396 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x397 = x385 - x393;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x398 = x386 - x394;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x399 = x387 - x395;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x400 = x388 - x396;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x310);
        reg = x310;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x397);
        reg = x397;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x398);
        reg = x398;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x399);
        reg = x399;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x400);
        reg = x400;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x401 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x401 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x402 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x402 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x403 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x403 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x404 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x404 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x405 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x405 != Fp::invalid());
        host_args.at(0) = x401;
        host_args.at(1) = x402;
        host_args.at(2) = x403;
        host_args.at(3) = x404;
        host_args.at(4) = x405;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x406 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x406 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x407 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x407 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x408 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x408 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x409 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x409 != Fp::invalid());
      host_args.at(0) = x310;
      host_args.at(1) = x385;
      host_args.at(2) = x386;
      host_args.at(3) = x387;
      host_args.at(4) = x388;
      host_args.at(5) = x393;
      host_args.at(6) = x394;
      host_args.at(7) = x395;
      host_args.at(8) = x396;
      host_args.at(9) = x406;
      host_args.at(10) = x407;
      host_args.at(11) = x408;
      host_args.at(12) = x409;
      host(ctx, "log", "%u> SUB: %e - %e -> %e", host_args.data(), 13, host_outs.data(), 0);
    }
    if (x335 != 0) {
      {
        host_args.at(0) = x343;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x410 = host_outs.at(0);
        auto x411 = host_outs.at(1);
        auto x412 = host_outs.at(2);
        auto x413 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x410);
          reg = x410;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x411);
          reg = x411;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x412);
          reg = x412;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x413);
          reg = x413;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x414 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x414 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x415 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x415 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x416 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x416 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x417 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x417 != Fp::invalid());
      {
        host_args.at(0) = x344;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x418 = host_outs.at(0);
        auto x419 = host_outs.at(1);
        auto x420 = host_outs.at(2);
        auto x421 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x418);
          reg = x418;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x419);
          reg = x419;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x420);
          reg = x420;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x421);
          reg = x421;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x344);
        reg = x344;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x422 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x422 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x423 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x423 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x424 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x424 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x425 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x425 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x426 = x414 * x422;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x427 = x415 * x425;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x428 = x416 * x424;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x429 = x427 + x428;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x430 = x417 * x423;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x431 = x429 + x430;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x432 = x431 * x296;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x433 = x426 + x432;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x434 = x414 * x423;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x435 = x415 * x422;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x436 = x434 + x435;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x437 = x416 * x425;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x438 = x417 * x424;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x439 = x437 + x438;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x440 = x439 * x296;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x441 = x436 + x440;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x442 = x414 * x424;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x443 = x415 * x423;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x444 = x442 + x443;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x445 = x416 * x422;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x446 = x444 + x445;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x447 = x417 * x425;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x448 = x447 * x296;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x449 = x446 + x448;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x450 = x414 * x425;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x451 = x415 * x424;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x452 = x450 + x451;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x453 = x416 * x423;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x454 = x452 + x453;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x455 = x417 * x422;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x456 = x454 + x455;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x310);
        reg = x310;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x433);
        reg = x433;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x441);
        reg = x441;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x449);
        reg = x449;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x456);
        reg = x456;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x457 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x457 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x458 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x458 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x459 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x459 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x460 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x460 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x461 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x461 != Fp::invalid());
        host_args.at(0) = x457;
        host_args.at(1) = x458;
        host_args.at(2) = x459;
        host_args.at(3) = x460;
        host_args.at(4) = x461;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x462 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x462 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x463 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x463 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x464 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x464 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x465 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x465 != Fp::invalid());
      host_args.at(0) = x310;
      host_args.at(1) = x414;
      host_args.at(2) = x415;
      host_args.at(3) = x416;
      host_args.at(4) = x417;
      host_args.at(5) = x422;
      host_args.at(6) = x423;
      host_args.at(7) = x424;
      host_args.at(8) = x425;
      host_args.at(9) = x462;
      host_args.at(10) = x463;
      host_args.at(11) = x464;
      host_args.at(12) = x465;
      host(ctx, "log", "%u> MUL: %e * %e -> %e", host_args.data(), 13, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":43:56)
    auto x466 = x336 * x344;
    if (x466 != 0) {
      {
        host_args.at(0) = x343;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x467 = host_outs.at(0);
        auto x468 = host_outs.at(1);
        auto x469 = host_outs.at(2);
        auto x470 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x467);
          reg = x467;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x468);
          reg = x468;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x469);
          reg = x469;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x470);
          reg = x470;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x471 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x471 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x472 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x472 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x473 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x473 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x474 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x474 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x475 = x471 * x471;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x476 = x474 + x474;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x477 = x472 * x476;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x478 = x473 * x473;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x479 = x477 - x478;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x480 = x479 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x481 = x475 + x480;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x482 = x473 + x473;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x483 = x471 * x482;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x484 = x472 * x472;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x485 = x483 - x484;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x486 = x474 * x474;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x487 = x486 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x488 = x485 + x487;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x489 = x481 * x481;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x490 = x488 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x491 = x490 * x488;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x492 = x489 + x491;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x493 = inv(x492);
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x494 = x481 * x493;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x495 = x488 * x493;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x496 = x471 * x494;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x497 = x473 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x498 = x497 * x495;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x499 = x496 + x498;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x500 = -x472;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x501 = x500 * x494;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x502 = x474 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x503 = x502 * x495;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x504 = x501 - x503;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x505 = -x471;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x506 = x505 * x495;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x507 = x473 * x494;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x508 = x506 + x507;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x509 = x472 * x495;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x510 = x474 * x494;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x511 = x509 - x510;
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x310);
          reg = x310;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x499);
          reg = x499;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x504);
          reg = x504;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x508);
          reg = x508;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x511);
          reg = x511;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x512 = args[2][15 * steps + ((cycle - 0) & mask)];
          assert(x512 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x513 = args[2][16 * steps + ((cycle - 0) & mask)];
          assert(x513 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x514 = args[2][17 * steps + ((cycle - 0) & mask)];
          assert(x514 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x515 = args[2][18 * steps + ((cycle - 0) & mask)];
          assert(x515 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x516 = args[2][19 * steps + ((cycle - 0) & mask)];
          assert(x516 != Fp::invalid());
          host_args.at(0) = x512;
          host_args.at(1) = x513;
          host_args.at(2) = x514;
          host_args.at(3) = x515;
          host_args.at(4) = x516;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x517 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x517 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x518 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x518 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x519 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x519 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x520 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x520 != Fp::invalid());
      host_args.at(0) = x471;
      host_args.at(1) = x472;
      host_args.at(2) = x473;
      host_args.at(3) = x474;
      host_args.at(4) = x517;
      host_args.at(5) = x518;
      host_args.at(6) = x519;
      host_args.at(7) = x520;
      host(ctx, "log", "INV: %e -> %e", host_args.data(), 8, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x521 = x307 - x344;
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x522 = x336 * x521;
    if (x522 != 0) {
      {
        host_args.at(0) = x343;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x523 = host_outs.at(0);
        auto x524 = host_outs.at(1);
        auto x525 = host_outs.at(2);
        auto x526 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x523);
          reg = x523;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x524);
          reg = x524;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x525);
          reg = x525;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x526);
          reg = x526;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x527 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x527 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/micro.cpp":55:22)
        auto x528 = inv(x527);
        // loc("zirgen/circuit/recursion/micro.cpp":55:7)
        {
          auto& reg = args[2][101 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x528);
          reg = x528;
        }
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/extra(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x529 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x529 != Fp::invalid());
        // loc("zirgen/circuit/recursion/micro.cpp":56:36)
        auto x530 = x529 * x527;
        // loc("zirgen/circuit/recursion/micro.cpp":56:32)
        auto x531 = x307 - x530;
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x310);
          reg = x310;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x531);
          reg = x531;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x532 = args[2][15 * steps + ((cycle - 0) & mask)];
          assert(x532 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x533 = args[2][16 * steps + ((cycle - 0) & mask)];
          assert(x533 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x534 = args[2][17 * steps + ((cycle - 0) & mask)];
          assert(x534 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x535 = args[2][18 * steps + ((cycle - 0) & mask)];
          assert(x535 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x536 = args[2][19 * steps + ((cycle - 0) & mask)];
          assert(x536 != Fp::invalid());
          host_args.at(0) = x532;
          host_args.at(1) = x533;
          host_args.at(2) = x534;
          host_args.at(3) = x535;
          host_args.at(4) = x536;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x537 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x537 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x538 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x538 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x539 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x539 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x540 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x540 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x541 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x541 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x542 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x542 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x543 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x543 != Fp::invalid());
      host_args.at(0) = x310;
      host_args.at(1) = x527;
      host_args.at(2) = x538;
      host_args.at(3) = x539;
      host_args.at(4) = x540;
      host_args.at(5) = x537;
      host_args.at(6) = x541;
      host_args.at(7) = x542;
      host_args.at(8) = x543;
      host(ctx, "log", "%u> IS_ZERO: %e -> %e", host_args.data(), 9, host_outs.data(), 0);
    }
    if (x337 != 0) {
      {
        host_args.at(0) = x343;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x544 = host_outs.at(0);
        auto x545 = host_outs.at(1);
        auto x546 = host_outs.at(2);
        auto x547 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x544);
          reg = x544;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x545);
          reg = x545;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x546);
          reg = x546;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x547);
          reg = x547;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x548 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x548 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x549 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x549 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x550 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x550 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x551 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x551 != Fp::invalid());
      {
        host_args.at(0) = x344;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x552 = host_outs.at(0);
        auto x553 = host_outs.at(1);
        auto x554 = host_outs.at(2);
        auto x555 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x552);
          reg = x552;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x553);
          reg = x553;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x554);
          reg = x554;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x555);
          reg = x555;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x344);
        reg = x344;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x556 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x556 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x557 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x557 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x558 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x558 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x559 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x559 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x560 = x548 - x556;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x561 = x549 - x557;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x562 = x550 - x558;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x563 = x551 - x559;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x310);
        reg = x310;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x560);
        reg = x560;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x561);
        reg = x561;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x562);
        reg = x562;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x563);
        reg = x563;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x564 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x564 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x565 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x565 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x566 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x566 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x567 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x567 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x568 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x568 != Fp::invalid());
        host_args.at(0) = x564;
        host_args.at(1) = x565;
        host_args.at(2) = x566;
        host_args.at(3) = x567;
        host_args.at(4) = x568;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x310;
      host_args.at(1) = x548;
      host_args.at(2) = x549;
      host_args.at(3) = x550;
      host_args.at(4) = x551;
      host_args.at(5) = x556;
      host_args.at(6) = x557;
      host_args.at(7) = x558;
      host_args.at(8) = x559;
      host(ctx, "log", "%u> EQ: %e == %e", host_args.data(), 9, host_outs.data(), 0);
    }
    if (x338 != 0) {
      host_args.at(0) = x310;
      host_args.at(1) = x343;
      host_args.at(2) = x344;
      host(ctx, "log", "%u> READ_IOP_HEADER: %u %u", host_args.data(), 3, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x310);
        reg = x310;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x569 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x569 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x570 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x570 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x571 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x571 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x572 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x572 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x573 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x573 != Fp::invalid());
        host_args.at(0) = x569;
        host_args.at(1) = x570;
        host_args.at(2) = x571;
        host_args.at(3) = x572;
        host_args.at(4) = x573;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      {
        host_args.at(0) = x343;
        host_args.at(1) = x344;
        host(ctx, "readIOPHeader", "", host_args.data(), 2, host_outs.data(), 0);
      }
    }
    if (x339 != 0) {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        host_args.at(0) = x343;
        host_args.at(1) = x344;
        host_args.at(2) = x345;
        host(ctx, "readIOPBody", "", host_args.data(), 3, host_outs.data(), 4);
        auto x574 = host_outs.at(0);
        auto x575 = host_outs.at(1);
        auto x576 = host_outs.at(2);
        auto x577 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x310);
          reg = x310;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x574);
          reg = x574;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x575);
          reg = x575;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x576);
          reg = x576;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x577);
          reg = x577;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x578 = args[2][15 * steps + ((cycle - 0) & mask)];
          assert(x578 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x579 = args[2][16 * steps + ((cycle - 0) & mask)];
          assert(x579 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x580 = args[2][17 * steps + ((cycle - 0) & mask)];
          assert(x580 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x581 = args[2][18 * steps + ((cycle - 0) & mask)];
          assert(x581 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x582 = args[2][19 * steps + ((cycle - 0) & mask)];
          assert(x582 != Fp::invalid());
          host_args.at(0) = x578;
          host_args.at(1) = x579;
          host_args.at(2) = x580;
          host_args.at(3) = x581;
          host_args.at(4) = x582;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x583 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x583 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x584 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x584 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x585 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x585 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x586 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x586 != Fp::invalid());
      host_args.at(0) = x310;
      host_args.at(1) = x343;
      host_args.at(2) = x344;
      host_args.at(3) = x583;
      host_args.at(4) = x584;
      host_args.at(5) = x585;
      host_args.at(6) = x586;
      host(ctx, "log", "%u> READ_IOP_BODY: %u %u -> %e", host_args.data(), 7, host_outs.data(), 0);
    }
    if (x340 != 0) {
      host_args.at(0) = x310;
      host_args.at(1) = x343;
      host_args.at(2) = x344;
      host_args.at(3) = x345;
      host(ctx, "log", "%u> MIX_RNG: %u, %u, %u", host_args.data(), 4, host_outs.data(), 0);
      {
        host_args.at(0) = x343;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x587 = host_outs.at(0);
        auto x588 = host_outs.at(1);
        auto x589 = host_outs.at(2);
        auto x590 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x587);
          reg = x587;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x588);
          reg = x588;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x589);
          reg = x589;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x590);
          reg = x590;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
      {
        host_args.at(0) = x344;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x591 = host_outs.at(0);
        auto x592 = host_outs.at(1);
        auto x593 = host_outs.at(2);
        auto x594 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x591);
          reg = x591;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x592);
          reg = x592;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x593);
          reg = x593;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x594);
          reg = x594;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x344);
        reg = x344;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x595 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x595 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x596 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x596 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x597 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x597 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x598 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x598 != Fp::invalid());
      host_args.at(0) = x595;
      host_args.at(1) = x596;
      host_args.at(2) = x597;
      host_args.at(3) = x598;
      host(ctx, "log", "  in0=[%x %x], in1=[%x %x]", host_args.data(), 4, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/extra(Reg)"("zirgen/circuit/recursion/micro.cpp":107:71))
      auto x599 = args[2][125 * steps + ((cycle - 1) & mask)];
      if (x599 == Fp::invalid()) x599 = 0;
      // loc("zirgen/circuit/recursion/micro.cpp":107:15)
      auto x600 = x345 * x599;
      host_args.at(0) = x600;
      host(ctx, "log", "  prev_val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x601 = x600 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x602 = x601 + x596;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x603 = x602 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x604 = x603 + x595;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x605 = x604 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x606 = x605 + x598;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x607 = x606 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x608 = x607 + x597;
      host_args.at(0) = x608;
      host(ctx, "log", "  val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":114:5)
      {
        auto& reg = args[2][101 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x608);
        reg = x608;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x310);
        reg = x310;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x608);
        reg = x608;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x609 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x609 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x610 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x610 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x611 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x611 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x612 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x612 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x613 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x613 != Fp::invalid());
        host_args.at(0) = x609;
        host_args.at(1) = x610;
        host_args.at(2) = x611;
        host_args.at(3) = x612;
        host_args.at(4) = x613;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x341 != 0) {
      {
        host_args.at(0) = x343;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x614 = host_outs.at(0);
        auto x615 = host_outs.at(1);
        auto x616 = host_outs.at(2);
        auto x617 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x614);
          reg = x614;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x615);
          reg = x615;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x616);
          reg = x616;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x617);
          reg = x617;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x618 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x618 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":119:31)
      auto x619 = x345 * x618;
      // loc("zirgen/circuit/recursion/micro.cpp":119:17)
      auto x620 = x344 + x619;
      {
        host_args.at(0) = x620;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x621 = host_outs.at(0);
        auto x622 = host_outs.at(1);
        auto x623 = host_outs.at(2);
        auto x624 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x621);
          reg = x621;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x622);
          reg = x622;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x623);
          reg = x623;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x624);
          reg = x624;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x620);
        reg = x620;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x625 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x625 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x626 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x626 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x627 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x627 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x628 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x628 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x310);
        reg = x310;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x625);
        reg = x625;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x626);
        reg = x626;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x627);
        reg = x627;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x628);
        reg = x628;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x629 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x629 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x630 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x630 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x631 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x631 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x632 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x632 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x633 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x633 != Fp::invalid());
        host_args.at(0) = x629;
        host_args.at(1) = x630;
        host_args.at(2) = x631;
        host_args.at(3) = x632;
        host_args.at(4) = x633;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x310;
      host_args.at(1) = x343;
      host_args.at(2) = x344;
      host_args.at(3) = x345;
      host_args.at(4) = x618;
      host_args.at(5) = x625;
      host_args.at(6) = x626;
      host_args.at(7) = x627;
      host_args.at(8) = x628;
      host_args.at(9) = x310;
      host(ctx, "log", "%u> SELECT, idx = %u, start = %u, step = %u, idx = %u, writing %e to %u", host_args.data(), 10, host_outs.data(), 0);
    }
    if (x342 != 0) {
      host_args.at(0) = x310;
      host_args.at(1) = x343;
      host_args.at(2) = x344;
      host_args.at(3) = x345;
      host_args.at(4) = x308;
      host(ctx, "log", "%u> EXTRACT: %e", host_args.data(), 5, host_outs.data(), 0);
      {
        host_args.at(0) = x343;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x634 = host_outs.at(0);
        auto x635 = host_outs.at(1);
        auto x636 = host_outs.at(2);
        auto x637 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x634);
          reg = x634;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x635);
          reg = x635;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x636);
          reg = x636;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x637);
          reg = x637;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x638 = x344 * x345;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x639 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x639 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x640 = x638 * x639;
      // loc("zirgen/circuit/recursion/micro.cpp":135:30)
      auto x641 = x307 - x345;
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x642 = x344 * x641;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x643 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x643 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x644 = x642 * x643;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x645 = x640 + x644;
      // loc("zirgen/circuit/recursion/micro.cpp":136:15)
      auto x646 = x521 * x345;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x647 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x647 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":136:15)
      auto x648 = x646 * x647;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x649 = x645 + x648;
      // loc("zirgen/circuit/recursion/micro.cpp":137:15)
      auto x650 = x521 * x641;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x651 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x651 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":137:15)
      auto x652 = x650 * x651;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x653 = x649 + x652;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x310);
        reg = x310;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x653);
        reg = x653;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x654 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x654 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x655 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x655 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x656 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x656 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x657 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x657 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x658 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x658 != Fp::invalid());
        host_args.at(0) = x654;
        host_args.at(1) = x655;
        host_args.at(2) = x656;
        host_args.at(3) = x657;
        host_args.at(4) = x658;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/circuit/recursion/micro.cpp":153:34)
    auto x659 = x310 + x307;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[1](recursion::MicroInst)/opcode(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x660 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x660 != Fp::invalid());
    {
      // loc("./zirgen/components/onehot.h":37:26)
      auto x661 = (x660 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][102 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x661);
        reg = x661;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x662 = x660 - x307;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x663 = (x662 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][103 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x663);
        reg = x663;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x664 = x660 - x306;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x665 = (x664 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][104 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x665);
        reg = x665;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x666 = x660 - x305;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x667 = (x666 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][105 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x667);
        reg = x667;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x668 = x660 - x304;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x669 = (x668 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][106 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x669);
        reg = x669;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x670 = x660 - x303;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x671 = (x670 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x671);
        reg = x671;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x672 = x660 - x302;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x673 = (x672 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x673);
        reg = x673;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x674 = x660 - x301;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x675 = (x674 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x675);
        reg = x675;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x676 = x660 - x300;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x677 = (x676 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x677);
        reg = x677;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x678 = x660 - x299;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x679 = (x678 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x679);
        reg = x679;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x680 = x660 - x298;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x681 = (x680 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x681);
        reg = x681;
      }
    }
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/add(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x682 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x682 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/sub(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x683 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x683 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/mul(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x684 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x684 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/inv(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x685 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x685 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/eq(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x686 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x686 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/read_iop_header(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x687 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x687 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/read_iop_body(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x688 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x688 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/mix_rng(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x689 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x689 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/select(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x690 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x690 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/extract(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x691 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x691 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[1](recursion::MicroInst)/operand[0](Reg)"("zirgen/circuit/recursion/micro.cpp":14:17))
    auto x692 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x692 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[1](recursion::MicroInst)/operand[1](Reg)"("zirgen/circuit/recursion/micro.cpp":15:17))
    auto x693 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x693 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[1](recursion::MicroInst)/operand[2](Reg)"("zirgen/circuit/recursion/micro.cpp":16:17))
    auto x694 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x694 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/constop(Reg)"("zirgen/circuit/recursion/micro.cpp":19:44))
    auto x695 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x695 != Fp::invalid());
    if (x695 != 0) {
      host_args.at(0) = x659;
      host_args.at(1) = x692;
      host_args.at(2) = x693;
      host_args.at(3) = x694;
      host_args.at(4) = x308;
      host(ctx, "log", "%u> CONST: %e", host_args.data(), 5, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x659);
        reg = x659;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x693);
        reg = x693;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x694);
        reg = x694;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x696 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x696 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x697 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x697 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x698 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x698 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x699 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x699 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x700 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x700 != Fp::invalid());
        host_args.at(0) = x696;
        host_args.at(1) = x697;
        host_args.at(2) = x698;
        host_args.at(3) = x699;
        host_args.at(4) = x700;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x682 != 0) {
      {
        host_args.at(0) = x692;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x701 = host_outs.at(0);
        auto x702 = host_outs.at(1);
        auto x703 = host_outs.at(2);
        auto x704 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x701);
          reg = x701;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x702);
          reg = x702;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x703);
          reg = x703;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x704);
          reg = x704;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x705 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x705 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x706 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x706 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x707 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x707 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x708 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x708 != Fp::invalid());
      {
        host_args.at(0) = x693;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x709 = host_outs.at(0);
        auto x710 = host_outs.at(1);
        auto x711 = host_outs.at(2);
        auto x712 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x709);
          reg = x709;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x710);
          reg = x710;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x711);
          reg = x711;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x712);
          reg = x712;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x693);
        reg = x693;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x713 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x713 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x714 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x714 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x715 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x715 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x716 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x716 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x717 = x705 + x713;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x718 = x706 + x714;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x719 = x707 + x715;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x720 = x708 + x716;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x659);
        reg = x659;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x717);
        reg = x717;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x718);
        reg = x718;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x719);
        reg = x719;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x720);
        reg = x720;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x721 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x721 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x722 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x722 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x723 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x723 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x724 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x724 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x725 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x725 != Fp::invalid());
        host_args.at(0) = x721;
        host_args.at(1) = x722;
        host_args.at(2) = x723;
        host_args.at(3) = x724;
        host_args.at(4) = x725;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x726 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x726 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x727 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x727 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x728 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x728 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x729 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x729 != Fp::invalid());
      host_args.at(0) = x659;
      host_args.at(1) = x705;
      host_args.at(2) = x706;
      host_args.at(3) = x707;
      host_args.at(4) = x708;
      host_args.at(5) = x713;
      host_args.at(6) = x714;
      host_args.at(7) = x715;
      host_args.at(8) = x716;
      host_args.at(9) = x726;
      host_args.at(10) = x727;
      host_args.at(11) = x728;
      host_args.at(12) = x729;
      host(ctx, "log", "%u> ADD: %e + %e -> %e", host_args.data(), 13, host_outs.data(), 0);
    }
    if (x683 != 0) {
      {
        host_args.at(0) = x692;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x730 = host_outs.at(0);
        auto x731 = host_outs.at(1);
        auto x732 = host_outs.at(2);
        auto x733 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x730);
          reg = x730;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x731);
          reg = x731;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x732);
          reg = x732;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x733);
          reg = x733;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x734 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x734 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x735 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x735 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x736 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x736 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x737 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x737 != Fp::invalid());
      {
        host_args.at(0) = x693;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x738 = host_outs.at(0);
        auto x739 = host_outs.at(1);
        auto x740 = host_outs.at(2);
        auto x741 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x738);
          reg = x738;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x739);
          reg = x739;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x741);
          reg = x741;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x693);
        reg = x693;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x742 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x742 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x743 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x743 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x744 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x744 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x745 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x745 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x746 = x734 - x742;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x747 = x735 - x743;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x748 = x736 - x744;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x749 = x737 - x745;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x659);
        reg = x659;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x746);
        reg = x746;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x747);
        reg = x747;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x748);
        reg = x748;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x749);
        reg = x749;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x750 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x750 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x751 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x751 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x752 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x752 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x753 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x753 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x754 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x754 != Fp::invalid());
        host_args.at(0) = x750;
        host_args.at(1) = x751;
        host_args.at(2) = x752;
        host_args.at(3) = x753;
        host_args.at(4) = x754;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x755 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x755 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x756 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x756 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x757 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x757 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x758 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x758 != Fp::invalid());
      host_args.at(0) = x659;
      host_args.at(1) = x734;
      host_args.at(2) = x735;
      host_args.at(3) = x736;
      host_args.at(4) = x737;
      host_args.at(5) = x742;
      host_args.at(6) = x743;
      host_args.at(7) = x744;
      host_args.at(8) = x745;
      host_args.at(9) = x755;
      host_args.at(10) = x756;
      host_args.at(11) = x757;
      host_args.at(12) = x758;
      host(ctx, "log", "%u> SUB: %e - %e -> %e", host_args.data(), 13, host_outs.data(), 0);
    }
    if (x684 != 0) {
      {
        host_args.at(0) = x692;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x759 = host_outs.at(0);
        auto x760 = host_outs.at(1);
        auto x761 = host_outs.at(2);
        auto x762 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x759);
          reg = x759;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x760);
          reg = x760;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x761);
          reg = x761;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x762);
          reg = x762;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x763 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x763 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x764 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x764 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x765 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x765 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x766 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x766 != Fp::invalid());
      {
        host_args.at(0) = x693;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x767 = host_outs.at(0);
        auto x768 = host_outs.at(1);
        auto x769 = host_outs.at(2);
        auto x770 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x767);
          reg = x767;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x768);
          reg = x768;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x769);
          reg = x769;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x770);
          reg = x770;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x693);
        reg = x693;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x771 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x771 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x772 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x772 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x773 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x773 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x774 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x774 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x775 = x763 * x771;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x776 = x764 * x774;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x777 = x765 * x773;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x778 = x776 + x777;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x779 = x766 * x772;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x780 = x778 + x779;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x781 = x780 * x296;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x782 = x775 + x781;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x783 = x763 * x772;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x784 = x764 * x771;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x785 = x783 + x784;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x786 = x765 * x774;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x787 = x766 * x773;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x788 = x786 + x787;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x789 = x788 * x296;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x790 = x785 + x789;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x791 = x763 * x773;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x792 = x764 * x772;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x793 = x791 + x792;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x794 = x765 * x771;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x795 = x793 + x794;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x796 = x766 * x774;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x797 = x796 * x296;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x798 = x795 + x797;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x799 = x763 * x774;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x800 = x764 * x773;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x801 = x799 + x800;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x802 = x765 * x772;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x803 = x801 + x802;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x804 = x766 * x771;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x805 = x803 + x804;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x659);
        reg = x659;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x782);
        reg = x782;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x790);
        reg = x790;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x798);
        reg = x798;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x805);
        reg = x805;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x806 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x806 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x807 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x807 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x808 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x808 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x809 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x809 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x810 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x810 != Fp::invalid());
        host_args.at(0) = x806;
        host_args.at(1) = x807;
        host_args.at(2) = x808;
        host_args.at(3) = x809;
        host_args.at(4) = x810;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x811 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x811 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x812 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x812 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x813 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x813 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x814 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x814 != Fp::invalid());
      host_args.at(0) = x659;
      host_args.at(1) = x763;
      host_args.at(2) = x764;
      host_args.at(3) = x765;
      host_args.at(4) = x766;
      host_args.at(5) = x771;
      host_args.at(6) = x772;
      host_args.at(7) = x773;
      host_args.at(8) = x774;
      host_args.at(9) = x811;
      host_args.at(10) = x812;
      host_args.at(11) = x813;
      host_args.at(12) = x814;
      host(ctx, "log", "%u> MUL: %e * %e -> %e", host_args.data(), 13, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":43:56)
    auto x815 = x685 * x693;
    if (x815 != 0) {
      {
        host_args.at(0) = x692;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x816 = host_outs.at(0);
        auto x817 = host_outs.at(1);
        auto x818 = host_outs.at(2);
        auto x819 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x816);
          reg = x816;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x817);
          reg = x817;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x818);
          reg = x818;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x819);
          reg = x819;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x820 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x820 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x821 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x821 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x822 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x822 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x823 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x823 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x824 = x820 * x820;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x825 = x823 + x823;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x826 = x821 * x825;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x827 = x822 * x822;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x828 = x826 - x827;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x829 = x828 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x830 = x824 + x829;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x831 = x822 + x822;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x832 = x820 * x831;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x833 = x821 * x821;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x834 = x832 - x833;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x835 = x823 * x823;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x836 = x835 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x837 = x834 + x836;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x838 = x830 * x830;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x839 = x837 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x840 = x839 * x837;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x841 = x838 + x840;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x842 = inv(x841);
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x843 = x830 * x842;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x844 = x837 * x842;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x845 = x820 * x843;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x846 = x822 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x847 = x846 * x844;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x848 = x845 + x847;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x849 = -x821;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x850 = x849 * x843;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x851 = x823 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x852 = x851 * x844;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x853 = x850 - x852;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x854 = -x820;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x855 = x854 * x844;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x856 = x822 * x843;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x857 = x855 + x856;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x858 = x821 * x844;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x859 = x823 * x843;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x860 = x858 - x859;
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x659);
          reg = x659;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x848);
          reg = x848;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x857);
          reg = x857;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x860);
          reg = x860;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x861 = args[2][30 * steps + ((cycle - 0) & mask)];
          assert(x861 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x862 = args[2][31 * steps + ((cycle - 0) & mask)];
          assert(x862 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x863 = args[2][32 * steps + ((cycle - 0) & mask)];
          assert(x863 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x864 = args[2][33 * steps + ((cycle - 0) & mask)];
          assert(x864 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x865 = args[2][34 * steps + ((cycle - 0) & mask)];
          assert(x865 != Fp::invalid());
          host_args.at(0) = x861;
          host_args.at(1) = x862;
          host_args.at(2) = x863;
          host_args.at(3) = x864;
          host_args.at(4) = x865;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x866 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x866 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x867 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x867 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x868 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x868 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x869 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x869 != Fp::invalid());
      host_args.at(0) = x820;
      host_args.at(1) = x821;
      host_args.at(2) = x822;
      host_args.at(3) = x823;
      host_args.at(4) = x866;
      host_args.at(5) = x867;
      host_args.at(6) = x868;
      host_args.at(7) = x869;
      host(ctx, "log", "INV: %e -> %e", host_args.data(), 8, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x870 = x307 - x693;
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x871 = x685 * x870;
    if (x871 != 0) {
      {
        host_args.at(0) = x692;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x872 = host_outs.at(0);
        auto x873 = host_outs.at(1);
        auto x874 = host_outs.at(2);
        auto x875 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x872);
          reg = x872;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x873);
          reg = x873;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x874);
          reg = x874;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x875);
          reg = x875;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x876 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x876 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/micro.cpp":55:22)
        auto x877 = inv(x876);
        // loc("zirgen/circuit/recursion/micro.cpp":55:7)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x877);
          reg = x877;
        }
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/extra(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x878 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x878 != Fp::invalid());
        // loc("zirgen/circuit/recursion/micro.cpp":56:36)
        auto x879 = x878 * x876;
        // loc("zirgen/circuit/recursion/micro.cpp":56:32)
        auto x880 = x307 - x879;
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x659);
          reg = x659;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x880);
          reg = x880;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x881 = args[2][30 * steps + ((cycle - 0) & mask)];
          assert(x881 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x882 = args[2][31 * steps + ((cycle - 0) & mask)];
          assert(x882 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x883 = args[2][32 * steps + ((cycle - 0) & mask)];
          assert(x883 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x884 = args[2][33 * steps + ((cycle - 0) & mask)];
          assert(x884 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x885 = args[2][34 * steps + ((cycle - 0) & mask)];
          assert(x885 != Fp::invalid());
          host_args.at(0) = x881;
          host_args.at(1) = x882;
          host_args.at(2) = x883;
          host_args.at(3) = x884;
          host_args.at(4) = x885;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x886 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x886 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x887 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x887 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x888 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x888 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x889 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x889 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x890 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x890 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x891 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x891 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x892 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x892 != Fp::invalid());
      host_args.at(0) = x659;
      host_args.at(1) = x876;
      host_args.at(2) = x887;
      host_args.at(3) = x888;
      host_args.at(4) = x889;
      host_args.at(5) = x886;
      host_args.at(6) = x890;
      host_args.at(7) = x891;
      host_args.at(8) = x892;
      host(ctx, "log", "%u> IS_ZERO: %e -> %e", host_args.data(), 9, host_outs.data(), 0);
    }
    if (x686 != 0) {
      {
        host_args.at(0) = x692;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x893 = host_outs.at(0);
        auto x894 = host_outs.at(1);
        auto x895 = host_outs.at(2);
        auto x896 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x893);
          reg = x893;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x894);
          reg = x894;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x895);
          reg = x895;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x896);
          reg = x896;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x897 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x897 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x898 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x898 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x899 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x899 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x900 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x900 != Fp::invalid());
      {
        host_args.at(0) = x693;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x901 = host_outs.at(0);
        auto x902 = host_outs.at(1);
        auto x903 = host_outs.at(2);
        auto x904 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x901);
          reg = x901;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x902);
          reg = x902;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x903);
          reg = x903;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x904);
          reg = x904;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x693);
        reg = x693;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x905 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x905 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x906 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x906 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x907 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x907 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x908 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x908 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x909 = x897 - x905;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x910 = x898 - x906;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x911 = x899 - x907;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x912 = x900 - x908;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x659);
        reg = x659;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x909);
        reg = x909;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x910);
        reg = x910;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x911);
        reg = x911;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x912);
        reg = x912;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x913 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x913 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x914 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x914 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x915 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x915 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x916 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x916 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x917 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x917 != Fp::invalid());
        host_args.at(0) = x913;
        host_args.at(1) = x914;
        host_args.at(2) = x915;
        host_args.at(3) = x916;
        host_args.at(4) = x917;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x659;
      host_args.at(1) = x897;
      host_args.at(2) = x898;
      host_args.at(3) = x899;
      host_args.at(4) = x900;
      host_args.at(5) = x905;
      host_args.at(6) = x906;
      host_args.at(7) = x907;
      host_args.at(8) = x908;
      host(ctx, "log", "%u> EQ: %e == %e", host_args.data(), 9, host_outs.data(), 0);
    }
    if (x687 != 0) {
      host_args.at(0) = x659;
      host_args.at(1) = x692;
      host_args.at(2) = x693;
      host(ctx, "log", "%u> READ_IOP_HEADER: %u %u", host_args.data(), 3, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x659);
        reg = x659;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x918 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x918 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x919 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x919 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x920 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x920 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x921 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x921 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x922 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x922 != Fp::invalid());
        host_args.at(0) = x918;
        host_args.at(1) = x919;
        host_args.at(2) = x920;
        host_args.at(3) = x921;
        host_args.at(4) = x922;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      {
        host_args.at(0) = x692;
        host_args.at(1) = x693;
        host(ctx, "readIOPHeader", "", host_args.data(), 2, host_outs.data(), 0);
      }
    }
    if (x688 != 0) {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        host_args.at(0) = x692;
        host_args.at(1) = x693;
        host_args.at(2) = x694;
        host(ctx, "readIOPBody", "", host_args.data(), 3, host_outs.data(), 4);
        auto x923 = host_outs.at(0);
        auto x924 = host_outs.at(1);
        auto x925 = host_outs.at(2);
        auto x926 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x659);
          reg = x659;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x923);
          reg = x923;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x924);
          reg = x924;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x925);
          reg = x925;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x926);
          reg = x926;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x927 = args[2][30 * steps + ((cycle - 0) & mask)];
          assert(x927 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x928 = args[2][31 * steps + ((cycle - 0) & mask)];
          assert(x928 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x929 = args[2][32 * steps + ((cycle - 0) & mask)];
          assert(x929 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x930 = args[2][33 * steps + ((cycle - 0) & mask)];
          assert(x930 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x931 = args[2][34 * steps + ((cycle - 0) & mask)];
          assert(x931 != Fp::invalid());
          host_args.at(0) = x927;
          host_args.at(1) = x928;
          host_args.at(2) = x929;
          host_args.at(3) = x930;
          host_args.at(4) = x931;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x932 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x932 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x933 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x933 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x934 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x934 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x935 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x935 != Fp::invalid());
      host_args.at(0) = x659;
      host_args.at(1) = x692;
      host_args.at(2) = x693;
      host_args.at(3) = x932;
      host_args.at(4) = x933;
      host_args.at(5) = x934;
      host_args.at(6) = x935;
      host(ctx, "log", "%u> READ_IOP_BODY: %u %u -> %e", host_args.data(), 7, host_outs.data(), 0);
    }
    if (x689 != 0) {
      host_args.at(0) = x659;
      host_args.at(1) = x692;
      host_args.at(2) = x693;
      host_args.at(3) = x694;
      host(ctx, "log", "%u> MIX_RNG: %u, %u, %u", host_args.data(), 4, host_outs.data(), 0);
      {
        host_args.at(0) = x692;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x936 = host_outs.at(0);
        auto x937 = host_outs.at(1);
        auto x938 = host_outs.at(2);
        auto x939 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x936);
          reg = x936;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x937);
          reg = x937;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x938);
          reg = x938;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x939);
          reg = x939;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
      {
        host_args.at(0) = x693;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x940 = host_outs.at(0);
        auto x941 = host_outs.at(1);
        auto x942 = host_outs.at(2);
        auto x943 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x940);
          reg = x940;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x941);
          reg = x941;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x942);
          reg = x942;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x943);
          reg = x943;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x693);
        reg = x693;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x944 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x944 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x945 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x945 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x946 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x946 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x947 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x947 != Fp::invalid());
      host_args.at(0) = x944;
      host_args.at(1) = x945;
      host_args.at(2) = x946;
      host_args.at(3) = x947;
      host(ctx, "log", "  in0=[%x %x], in1=[%x %x]", host_args.data(), 4, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/extra(Reg)"("zirgen/circuit/recursion/micro.cpp":107:71))
      auto x948 = args[2][101 * steps + ((cycle - 0) & mask)];
      if (x948 == Fp::invalid()) x948 = 0;
      // loc("zirgen/circuit/recursion/micro.cpp":107:15)
      auto x949 = x694 * x948;
      host_args.at(0) = x949;
      host(ctx, "log", "  prev_val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x950 = x949 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x951 = x950 + x945;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x952 = x951 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x953 = x952 + x944;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x954 = x953 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x955 = x954 + x947;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x956 = x955 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x957 = x956 + x946;
      host_args.at(0) = x957;
      host(ctx, "log", "  val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":114:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x957);
        reg = x957;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x659);
        reg = x659;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x957);
        reg = x957;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x958 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x958 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x959 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x959 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x960 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x960 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x961 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x961 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x962 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x962 != Fp::invalid());
        host_args.at(0) = x958;
        host_args.at(1) = x959;
        host_args.at(2) = x960;
        host_args.at(3) = x961;
        host_args.at(4) = x962;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x690 != 0) {
      {
        host_args.at(0) = x692;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x963 = host_outs.at(0);
        auto x964 = host_outs.at(1);
        auto x965 = host_outs.at(2);
        auto x966 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x963);
          reg = x963;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x964);
          reg = x964;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x965);
          reg = x965;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x966);
          reg = x966;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x967 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x967 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":119:31)
      auto x968 = x694 * x967;
      // loc("zirgen/circuit/recursion/micro.cpp":119:17)
      auto x969 = x693 + x968;
      {
        host_args.at(0) = x969;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x970 = host_outs.at(0);
        auto x971 = host_outs.at(1);
        auto x972 = host_outs.at(2);
        auto x973 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x970);
          reg = x970;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x971);
          reg = x971;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x972);
          reg = x972;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x973);
          reg = x973;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x969);
        reg = x969;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x974 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x974 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x975 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x975 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x976 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x976 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x977 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x977 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x659);
        reg = x659;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x974);
        reg = x974;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x975);
        reg = x975;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x976);
        reg = x976;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x977);
        reg = x977;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x978 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x978 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x979 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x979 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x980 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x980 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x981 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x981 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x982 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x982 != Fp::invalid());
        host_args.at(0) = x978;
        host_args.at(1) = x979;
        host_args.at(2) = x980;
        host_args.at(3) = x981;
        host_args.at(4) = x982;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x659;
      host_args.at(1) = x692;
      host_args.at(2) = x693;
      host_args.at(3) = x694;
      host_args.at(4) = x967;
      host_args.at(5) = x974;
      host_args.at(6) = x975;
      host_args.at(7) = x976;
      host_args.at(8) = x977;
      host_args.at(9) = x659;
      host(ctx, "log", "%u> SELECT, idx = %u, start = %u, step = %u, idx = %u, writing %e to %u", host_args.data(), 10, host_outs.data(), 0);
    }
    if (x691 != 0) {
      host_args.at(0) = x659;
      host_args.at(1) = x692;
      host_args.at(2) = x693;
      host_args.at(3) = x694;
      host_args.at(4) = x308;
      host(ctx, "log", "%u> EXTRACT: %e", host_args.data(), 5, host_outs.data(), 0);
      {
        host_args.at(0) = x692;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x983 = host_outs.at(0);
        auto x984 = host_outs.at(1);
        auto x985 = host_outs.at(2);
        auto x986 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x983);
          reg = x983;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x984);
          reg = x984;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x985);
          reg = x985;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x986);
          reg = x986;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x987 = x693 * x694;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x988 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x988 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x989 = x987 * x988;
      // loc("zirgen/circuit/recursion/micro.cpp":135:30)
      auto x990 = x307 - x694;
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x991 = x693 * x990;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x992 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x992 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x993 = x991 * x992;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x994 = x989 + x993;
      // loc("zirgen/circuit/recursion/micro.cpp":136:15)
      auto x995 = x870 * x694;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x996 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x996 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":136:15)
      auto x997 = x995 * x996;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x998 = x994 + x997;
      // loc("zirgen/circuit/recursion/micro.cpp":137:15)
      auto x999 = x870 * x990;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1000 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x1000 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":137:15)
      auto x1001 = x999 * x1000;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x1002 = x998 + x1001;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x659);
        reg = x659;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1002);
        reg = x1002;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1003 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x1003 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1004 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x1004 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1005 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x1005 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1006 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x1006 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1007 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x1007 != Fp::invalid());
        host_args.at(0) = x1003;
        host_args.at(1) = x1004;
        host_args.at(2) = x1005;
        host_args.at(3) = x1006;
        host_args.at(4) = x1007;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/circuit/recursion/micro.cpp":153:34)
    auto x1008 = x310 + x306;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[2](recursion::MicroInst)/opcode(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x1009 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x1009 != Fp::invalid());
    {
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1010 = (x1009 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1010);
        reg = x1010;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1011 = x1009 - x307;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1012 = (x1011 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1012);
        reg = x1012;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1013 = x1009 - x306;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1014 = (x1013 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1014);
        reg = x1014;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1015 = x1009 - x305;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1016 = (x1015 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1016);
        reg = x1016;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1017 = x1009 - x304;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1018 = (x1017 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1018);
        reg = x1018;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1019 = x1009 - x303;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1020 = (x1019 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1020);
        reg = x1020;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1021 = x1009 - x302;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1022 = (x1021 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1022);
        reg = x1022;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1023 = x1009 - x301;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1024 = (x1023 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1024);
        reg = x1024;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1025 = x1009 - x300;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1026 = (x1025 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1026);
        reg = x1026;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1027 = x1009 - x299;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1028 = (x1027 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1028);
        reg = x1028;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1029 = x1009 - x298;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1030 = (x1029 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1030);
        reg = x1030;
      }
    }
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/add(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1031 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x1031 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/sub(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1032 = args[2][116 * steps + ((cycle - 0) & mask)];
    assert(x1032 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/mul(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1033 = args[2][117 * steps + ((cycle - 0) & mask)];
    assert(x1033 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/inv(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1034 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x1034 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/eq(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1035 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x1035 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/read_iop_header(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1036 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x1036 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/read_iop_body(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1037 = args[2][121 * steps + ((cycle - 0) & mask)];
    assert(x1037 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/mix_rng(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1038 = args[2][122 * steps + ((cycle - 0) & mask)];
    assert(x1038 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/select(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1039 = args[2][123 * steps + ((cycle - 0) & mask)];
    assert(x1039 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/extract(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1040 = args[2][124 * steps + ((cycle - 0) & mask)];
    assert(x1040 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[2](recursion::MicroInst)/operand[0](Reg)"("zirgen/circuit/recursion/micro.cpp":14:17))
    auto x1041 = args[0][16 * steps + ((cycle - 0) & mask)];
    assert(x1041 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[2](recursion::MicroInst)/operand[1](Reg)"("zirgen/circuit/recursion/micro.cpp":15:17))
    auto x1042 = args[0][17 * steps + ((cycle - 0) & mask)];
    assert(x1042 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[2](recursion::MicroInst)/operand[2](Reg)"("zirgen/circuit/recursion/micro.cpp":16:17))
    auto x1043 = args[0][18 * steps + ((cycle - 0) & mask)];
    assert(x1043 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/constop(Reg)"("zirgen/circuit/recursion/micro.cpp":19:44))
    auto x1044 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x1044 != Fp::invalid());
    if (x1044 != 0) {
      host_args.at(0) = x1008;
      host_args.at(1) = x1041;
      host_args.at(2) = x1042;
      host_args.at(3) = x1043;
      host_args.at(4) = x308;
      host(ctx, "log", "%u> CONST: %e", host_args.data(), 5, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1008);
        reg = x1008;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1042);
        reg = x1042;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1043);
        reg = x1043;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1045 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1045 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1046 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1046 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1047 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1047 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1048 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1048 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1049 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1049 != Fp::invalid());
        host_args.at(0) = x1045;
        host_args.at(1) = x1046;
        host_args.at(2) = x1047;
        host_args.at(3) = x1048;
        host_args.at(4) = x1049;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x1031 != 0) {
      {
        host_args.at(0) = x1041;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1050 = host_outs.at(0);
        auto x1051 = host_outs.at(1);
        auto x1052 = host_outs.at(2);
        auto x1053 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1050);
          reg = x1050;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1051);
          reg = x1051;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1052);
          reg = x1052;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1053);
          reg = x1053;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1054 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1054 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1055 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1055 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1056 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1056 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1057 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1057 != Fp::invalid());
      {
        host_args.at(0) = x1042;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1058 = host_outs.at(0);
        auto x1059 = host_outs.at(1);
        auto x1060 = host_outs.at(2);
        auto x1061 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1058);
          reg = x1058;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1059);
          reg = x1059;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1060);
          reg = x1060;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1061);
          reg = x1061;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1042);
        reg = x1042;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1062 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1062 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1063 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1063 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1064 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1064 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1065 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1065 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x1066 = x1054 + x1062;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x1067 = x1055 + x1063;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x1068 = x1056 + x1064;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x1069 = x1057 + x1065;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1008);
        reg = x1008;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1066);
        reg = x1066;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1067);
        reg = x1067;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1068);
        reg = x1068;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1069);
        reg = x1069;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1070 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1070 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1071 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1071 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1072 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1072 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1073 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1073 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1074 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1074 != Fp::invalid());
        host_args.at(0) = x1070;
        host_args.at(1) = x1071;
        host_args.at(2) = x1072;
        host_args.at(3) = x1073;
        host_args.at(4) = x1074;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1075 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1075 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1076 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1076 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1077 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1077 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1078 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1078 != Fp::invalid());
      host_args.at(0) = x1008;
      host_args.at(1) = x1054;
      host_args.at(2) = x1055;
      host_args.at(3) = x1056;
      host_args.at(4) = x1057;
      host_args.at(5) = x1062;
      host_args.at(6) = x1063;
      host_args.at(7) = x1064;
      host_args.at(8) = x1065;
      host_args.at(9) = x1075;
      host_args.at(10) = x1076;
      host_args.at(11) = x1077;
      host_args.at(12) = x1078;
      host(ctx, "log", "%u> ADD: %e + %e -> %e", host_args.data(), 13, host_outs.data(), 0);
    }
    if (x1032 != 0) {
      {
        host_args.at(0) = x1041;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1079 = host_outs.at(0);
        auto x1080 = host_outs.at(1);
        auto x1081 = host_outs.at(2);
        auto x1082 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1079);
          reg = x1079;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1080);
          reg = x1080;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1081);
          reg = x1081;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1082);
          reg = x1082;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1083 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1083 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1084 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1084 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1085 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1085 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1086 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1086 != Fp::invalid());
      {
        host_args.at(0) = x1042;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1087 = host_outs.at(0);
        auto x1088 = host_outs.at(1);
        auto x1089 = host_outs.at(2);
        auto x1090 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1087);
          reg = x1087;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1088);
          reg = x1088;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1089);
          reg = x1089;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1090);
          reg = x1090;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1042);
        reg = x1042;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1091 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1091 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1092 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1092 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1093 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1093 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1094 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1094 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x1095 = x1083 - x1091;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x1096 = x1084 - x1092;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x1097 = x1085 - x1093;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x1098 = x1086 - x1094;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1008);
        reg = x1008;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1095);
        reg = x1095;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1096);
        reg = x1096;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1097);
        reg = x1097;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1098);
        reg = x1098;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1099 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1099 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1100 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1100 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1101 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1101 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1102 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1102 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1103 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1103 != Fp::invalid());
        host_args.at(0) = x1099;
        host_args.at(1) = x1100;
        host_args.at(2) = x1101;
        host_args.at(3) = x1102;
        host_args.at(4) = x1103;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1104 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1104 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1105 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1105 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1106 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1106 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1107 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1107 != Fp::invalid());
      host_args.at(0) = x1008;
      host_args.at(1) = x1083;
      host_args.at(2) = x1084;
      host_args.at(3) = x1085;
      host_args.at(4) = x1086;
      host_args.at(5) = x1091;
      host_args.at(6) = x1092;
      host_args.at(7) = x1093;
      host_args.at(8) = x1094;
      host_args.at(9) = x1104;
      host_args.at(10) = x1105;
      host_args.at(11) = x1106;
      host_args.at(12) = x1107;
      host(ctx, "log", "%u> SUB: %e - %e -> %e", host_args.data(), 13, host_outs.data(), 0);
    }
    if (x1033 != 0) {
      {
        host_args.at(0) = x1041;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1108 = host_outs.at(0);
        auto x1109 = host_outs.at(1);
        auto x1110 = host_outs.at(2);
        auto x1111 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1108);
          reg = x1108;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1109);
          reg = x1109;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1110);
          reg = x1110;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1111);
          reg = x1111;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1112 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1112 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1113 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1113 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1114 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1114 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1115 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1115 != Fp::invalid());
      {
        host_args.at(0) = x1042;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1116 = host_outs.at(0);
        auto x1117 = host_outs.at(1);
        auto x1118 = host_outs.at(2);
        auto x1119 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1116);
          reg = x1116;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1117);
          reg = x1117;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1118);
          reg = x1118;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1119);
          reg = x1119;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1042);
        reg = x1042;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1120 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1120 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1121 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1121 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1122 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1122 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1123 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1123 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1124 = x1112 * x1120;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1125 = x1113 * x1123;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1126 = x1114 * x1122;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1127 = x1125 + x1126;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1128 = x1115 * x1121;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1129 = x1127 + x1128;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1130 = x1129 * x296;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1131 = x1124 + x1130;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1132 = x1112 * x1121;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1133 = x1113 * x1120;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1134 = x1132 + x1133;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1135 = x1114 * x1123;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1136 = x1115 * x1122;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1137 = x1135 + x1136;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1138 = x1137 * x296;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1139 = x1134 + x1138;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1140 = x1112 * x1122;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1141 = x1113 * x1121;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1142 = x1140 + x1141;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1143 = x1114 * x1120;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1144 = x1142 + x1143;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1145 = x1115 * x1123;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1146 = x1145 * x296;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1147 = x1144 + x1146;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1148 = x1112 * x1123;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1149 = x1113 * x1122;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1150 = x1148 + x1149;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1151 = x1114 * x1121;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1152 = x1150 + x1151;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1153 = x1115 * x1120;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1154 = x1152 + x1153;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1008);
        reg = x1008;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1131);
        reg = x1131;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1139);
        reg = x1139;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1147);
        reg = x1147;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1154);
        reg = x1154;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1155 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1155 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1156 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1156 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1157 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1157 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1158 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1158 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1159 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1159 != Fp::invalid());
        host_args.at(0) = x1155;
        host_args.at(1) = x1156;
        host_args.at(2) = x1157;
        host_args.at(3) = x1158;
        host_args.at(4) = x1159;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1160 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1160 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1161 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1161 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1162 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1162 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1163 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1163 != Fp::invalid());
      host_args.at(0) = x1008;
      host_args.at(1) = x1112;
      host_args.at(2) = x1113;
      host_args.at(3) = x1114;
      host_args.at(4) = x1115;
      host_args.at(5) = x1120;
      host_args.at(6) = x1121;
      host_args.at(7) = x1122;
      host_args.at(8) = x1123;
      host_args.at(9) = x1160;
      host_args.at(10) = x1161;
      host_args.at(11) = x1162;
      host_args.at(12) = x1163;
      host(ctx, "log", "%u> MUL: %e * %e -> %e", host_args.data(), 13, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":43:56)
    auto x1164 = x1034 * x1042;
    if (x1164 != 0) {
      {
        host_args.at(0) = x1041;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1165 = host_outs.at(0);
        auto x1166 = host_outs.at(1);
        auto x1167 = host_outs.at(2);
        auto x1168 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1165);
          reg = x1165;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1166);
          reg = x1166;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1167);
          reg = x1167;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1168);
          reg = x1168;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1169 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1169 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1170 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1170 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1171 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1171 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1172 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1172 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1173 = x1169 * x1169;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1174 = x1172 + x1172;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1175 = x1170 * x1174;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1176 = x1171 * x1171;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1177 = x1175 - x1176;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1178 = x1177 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1179 = x1173 + x1178;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1180 = x1171 + x1171;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1181 = x1169 * x1180;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1182 = x1170 * x1170;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1183 = x1181 - x1182;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1184 = x1172 * x1172;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1185 = x1184 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1186 = x1183 + x1185;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1187 = x1179 * x1179;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1188 = x1186 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1189 = x1188 * x1186;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1190 = x1187 + x1189;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1191 = inv(x1190);
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1192 = x1179 * x1191;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1193 = x1186 * x1191;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1194 = x1169 * x1192;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1195 = x1171 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1196 = x1195 * x1193;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1197 = x1194 + x1196;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1198 = -x1170;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1199 = x1198 * x1192;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1200 = x1172 * x297;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1201 = x1200 * x1193;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1202 = x1199 - x1201;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1203 = -x1169;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1204 = x1203 * x1193;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1205 = x1171 * x1192;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1206 = x1204 + x1205;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1207 = x1170 * x1193;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1208 = x1172 * x1192;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1209 = x1207 - x1208;
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1008);
          reg = x1008;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1197);
          reg = x1197;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1202);
          reg = x1202;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1206);
          reg = x1206;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1209);
          reg = x1209;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x1210 = args[2][45 * steps + ((cycle - 0) & mask)];
          assert(x1210 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1211 = args[2][46 * steps + ((cycle - 0) & mask)];
          assert(x1211 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1212 = args[2][47 * steps + ((cycle - 0) & mask)];
          assert(x1212 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1213 = args[2][48 * steps + ((cycle - 0) & mask)];
          assert(x1213 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1214 = args[2][49 * steps + ((cycle - 0) & mask)];
          assert(x1214 != Fp::invalid());
          host_args.at(0) = x1210;
          host_args.at(1) = x1211;
          host_args.at(2) = x1212;
          host_args.at(3) = x1213;
          host_args.at(4) = x1214;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1215 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1215 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1216 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1216 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1217 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1217 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1218 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1218 != Fp::invalid());
      host_args.at(0) = x1169;
      host_args.at(1) = x1170;
      host_args.at(2) = x1171;
      host_args.at(3) = x1172;
      host_args.at(4) = x1215;
      host_args.at(5) = x1216;
      host_args.at(6) = x1217;
      host_args.at(7) = x1218;
      host(ctx, "log", "INV: %e -> %e", host_args.data(), 8, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x1219 = x307 - x1042;
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x1220 = x1034 * x1219;
    if (x1220 != 0) {
      {
        host_args.at(0) = x1041;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1221 = host_outs.at(0);
        auto x1222 = host_outs.at(1);
        auto x1223 = host_outs.at(2);
        auto x1224 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1221);
          reg = x1221;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1222);
          reg = x1222;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1223);
          reg = x1223;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1224);
          reg = x1224;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1225 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1225 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/micro.cpp":55:22)
        auto x1226 = inv(x1225);
        // loc("zirgen/circuit/recursion/micro.cpp":55:7)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1226);
          reg = x1226;
        }
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/extra(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1227 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x1227 != Fp::invalid());
        // loc("zirgen/circuit/recursion/micro.cpp":56:36)
        auto x1228 = x1227 * x1225;
        // loc("zirgen/circuit/recursion/micro.cpp":56:32)
        auto x1229 = x307 - x1228;
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1008);
          reg = x1008;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1229);
          reg = x1229;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x1230 = args[2][45 * steps + ((cycle - 0) & mask)];
          assert(x1230 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1231 = args[2][46 * steps + ((cycle - 0) & mask)];
          assert(x1231 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1232 = args[2][47 * steps + ((cycle - 0) & mask)];
          assert(x1232 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1233 = args[2][48 * steps + ((cycle - 0) & mask)];
          assert(x1233 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1234 = args[2][49 * steps + ((cycle - 0) & mask)];
          assert(x1234 != Fp::invalid());
          host_args.at(0) = x1230;
          host_args.at(1) = x1231;
          host_args.at(2) = x1232;
          host_args.at(3) = x1233;
          host_args.at(4) = x1234;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1235 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1235 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1236 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1236 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1237 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1237 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1238 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1238 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1239 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1239 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1240 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1240 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1241 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1241 != Fp::invalid());
      host_args.at(0) = x1008;
      host_args.at(1) = x1225;
      host_args.at(2) = x1236;
      host_args.at(3) = x1237;
      host_args.at(4) = x1238;
      host_args.at(5) = x1235;
      host_args.at(6) = x1239;
      host_args.at(7) = x1240;
      host_args.at(8) = x1241;
      host(ctx, "log", "%u> IS_ZERO: %e -> %e", host_args.data(), 9, host_outs.data(), 0);
    }
    if (x1035 != 0) {
      {
        host_args.at(0) = x1041;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1242 = host_outs.at(0);
        auto x1243 = host_outs.at(1);
        auto x1244 = host_outs.at(2);
        auto x1245 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1242);
          reg = x1242;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1243);
          reg = x1243;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1244);
          reg = x1244;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1245);
          reg = x1245;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1246 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1246 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1247 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1247 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1248 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1248 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1249 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1249 != Fp::invalid());
      {
        host_args.at(0) = x1042;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1250 = host_outs.at(0);
        auto x1251 = host_outs.at(1);
        auto x1252 = host_outs.at(2);
        auto x1253 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1250);
          reg = x1250;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1251);
          reg = x1251;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1252);
          reg = x1252;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1253);
          reg = x1253;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1042);
        reg = x1042;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1254 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1254 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1255 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1255 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1256 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1256 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1257 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1257 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x1258 = x1246 - x1254;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x1259 = x1247 - x1255;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x1260 = x1248 - x1256;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x1261 = x1249 - x1257;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1008);
        reg = x1008;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1258);
        reg = x1258;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1259);
        reg = x1259;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1260);
        reg = x1260;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1261);
        reg = x1261;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1262 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1262 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1263 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1263 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1264 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1264 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1265 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1265 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1266 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1266 != Fp::invalid());
        host_args.at(0) = x1262;
        host_args.at(1) = x1263;
        host_args.at(2) = x1264;
        host_args.at(3) = x1265;
        host_args.at(4) = x1266;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x1008;
      host_args.at(1) = x1246;
      host_args.at(2) = x1247;
      host_args.at(3) = x1248;
      host_args.at(4) = x1249;
      host_args.at(5) = x1254;
      host_args.at(6) = x1255;
      host_args.at(7) = x1256;
      host_args.at(8) = x1257;
      host(ctx, "log", "%u> EQ: %e == %e", host_args.data(), 9, host_outs.data(), 0);
    }
    if (x1036 != 0) {
      host_args.at(0) = x1008;
      host_args.at(1) = x1041;
      host_args.at(2) = x1042;
      host(ctx, "log", "%u> READ_IOP_HEADER: %u %u", host_args.data(), 3, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1008);
        reg = x1008;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1267 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1267 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1268 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1268 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1269 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1269 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1270 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1270 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1271 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1271 != Fp::invalid());
        host_args.at(0) = x1267;
        host_args.at(1) = x1268;
        host_args.at(2) = x1269;
        host_args.at(3) = x1270;
        host_args.at(4) = x1271;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      {
        host_args.at(0) = x1041;
        host_args.at(1) = x1042;
        host(ctx, "readIOPHeader", "", host_args.data(), 2, host_outs.data(), 0);
      }
    }
    if (x1037 != 0) {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        host_args.at(0) = x1041;
        host_args.at(1) = x1042;
        host_args.at(2) = x1043;
        host(ctx, "readIOPBody", "", host_args.data(), 3, host_outs.data(), 4);
        auto x1272 = host_outs.at(0);
        auto x1273 = host_outs.at(1);
        auto x1274 = host_outs.at(2);
        auto x1275 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1008);
          reg = x1008;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1272);
          reg = x1272;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1273);
          reg = x1273;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1274);
          reg = x1274;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1275);
          reg = x1275;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x1276 = args[2][45 * steps + ((cycle - 0) & mask)];
          assert(x1276 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1277 = args[2][46 * steps + ((cycle - 0) & mask)];
          assert(x1277 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1278 = args[2][47 * steps + ((cycle - 0) & mask)];
          assert(x1278 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1279 = args[2][48 * steps + ((cycle - 0) & mask)];
          assert(x1279 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x1280 = args[2][49 * steps + ((cycle - 0) & mask)];
          assert(x1280 != Fp::invalid());
          host_args.at(0) = x1276;
          host_args.at(1) = x1277;
          host_args.at(2) = x1278;
          host_args.at(3) = x1279;
          host_args.at(4) = x1280;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1281 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1281 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1282 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1282 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1283 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1283 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1284 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1284 != Fp::invalid());
      host_args.at(0) = x1008;
      host_args.at(1) = x1041;
      host_args.at(2) = x1042;
      host_args.at(3) = x1281;
      host_args.at(4) = x1282;
      host_args.at(5) = x1283;
      host_args.at(6) = x1284;
      host(ctx, "log", "%u> READ_IOP_BODY: %u %u -> %e", host_args.data(), 7, host_outs.data(), 0);
    }
    if (x1038 != 0) {
      host_args.at(0) = x1008;
      host_args.at(1) = x1041;
      host_args.at(2) = x1042;
      host_args.at(3) = x1043;
      host(ctx, "log", "%u> MIX_RNG: %u, %u, %u", host_args.data(), 4, host_outs.data(), 0);
      {
        host_args.at(0) = x1041;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1285 = host_outs.at(0);
        auto x1286 = host_outs.at(1);
        auto x1287 = host_outs.at(2);
        auto x1288 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1285);
          reg = x1285;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1286);
          reg = x1286;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1287);
          reg = x1287;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1288);
          reg = x1288;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      {
        host_args.at(0) = x1042;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1289 = host_outs.at(0);
        auto x1290 = host_outs.at(1);
        auto x1291 = host_outs.at(2);
        auto x1292 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1289);
          reg = x1289;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1290);
          reg = x1290;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1291);
          reg = x1291;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1292);
          reg = x1292;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1042);
        reg = x1042;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1293 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1293 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1294 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1294 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1295 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1295 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1296 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1296 != Fp::invalid());
      host_args.at(0) = x1293;
      host_args.at(1) = x1294;
      host_args.at(2) = x1295;
      host_args.at(3) = x1296;
      host(ctx, "log", "  in0=[%x %x], in1=[%x %x]", host_args.data(), 4, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/extra(Reg)"("zirgen/circuit/recursion/micro.cpp":107:71))
      auto x1297 = args[2][113 * steps + ((cycle - 0) & mask)];
      if (x1297 == Fp::invalid()) x1297 = 0;
      // loc("zirgen/circuit/recursion/micro.cpp":107:15)
      auto x1298 = x1043 * x1297;
      host_args.at(0) = x1298;
      host(ctx, "log", "  prev_val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x1299 = x1298 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x1300 = x1299 + x1294;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x1301 = x1300 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x1302 = x1301 + x1293;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x1303 = x1302 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x1304 = x1303 + x1296;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x1305 = x1304 * x295;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x1306 = x1305 + x1295;
      host_args.at(0) = x1306;
      host(ctx, "log", "  val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":114:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1306);
        reg = x1306;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1008);
        reg = x1008;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1306);
        reg = x1306;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1307 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1307 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1308 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1308 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1309 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1309 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1310 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1310 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1311 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1311 != Fp::invalid());
        host_args.at(0) = x1307;
        host_args.at(1) = x1308;
        host_args.at(2) = x1309;
        host_args.at(3) = x1310;
        host_args.at(4) = x1311;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x1039 != 0) {
      {
        host_args.at(0) = x1041;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1312 = host_outs.at(0);
        auto x1313 = host_outs.at(1);
        auto x1314 = host_outs.at(2);
        auto x1315 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1312);
          reg = x1312;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1313);
          reg = x1313;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1314);
          reg = x1314;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1315);
          reg = x1315;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1316 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1316 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":119:31)
      auto x1317 = x1043 * x1316;
      // loc("zirgen/circuit/recursion/micro.cpp":119:17)
      auto x1318 = x1042 + x1317;
      {
        host_args.at(0) = x1318;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1319 = host_outs.at(0);
        auto x1320 = host_outs.at(1);
        auto x1321 = host_outs.at(2);
        auto x1322 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1319);
          reg = x1319;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1320);
          reg = x1320;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1321);
          reg = x1321;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1322);
          reg = x1322;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1318);
        reg = x1318;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1323 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1323 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1324 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1324 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1325 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1325 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1326 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1326 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1008);
        reg = x1008;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1323);
        reg = x1323;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1324);
        reg = x1324;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1325);
        reg = x1325;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1326);
        reg = x1326;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1327 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1327 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1328 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1328 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1329 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1329 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1330 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1330 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1331 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1331 != Fp::invalid());
        host_args.at(0) = x1327;
        host_args.at(1) = x1328;
        host_args.at(2) = x1329;
        host_args.at(3) = x1330;
        host_args.at(4) = x1331;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x1008;
      host_args.at(1) = x1041;
      host_args.at(2) = x1042;
      host_args.at(3) = x1043;
      host_args.at(4) = x1316;
      host_args.at(5) = x1323;
      host_args.at(6) = x1324;
      host_args.at(7) = x1325;
      host_args.at(8) = x1326;
      host_args.at(9) = x1008;
      host(ctx, "log", "%u> SELECT, idx = %u, start = %u, step = %u, idx = %u, writing %e to %u", host_args.data(), 10, host_outs.data(), 0);
    }
    if (x1040 != 0) {
      host_args.at(0) = x1008;
      host_args.at(1) = x1041;
      host_args.at(2) = x1042;
      host_args.at(3) = x1043;
      host_args.at(4) = x308;
      host(ctx, "log", "%u> EXTRACT: %e", host_args.data(), 5, host_outs.data(), 0);
      {
        host_args.at(0) = x1041;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1332 = host_outs.at(0);
        auto x1333 = host_outs.at(1);
        auto x1334 = host_outs.at(2);
        auto x1335 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1332);
          reg = x1332;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1333);
          reg = x1333;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1334);
          reg = x1334;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1335);
          reg = x1335;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x1336 = x1042 * x1043;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1337 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1337 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x1338 = x1336 * x1337;
      // loc("zirgen/circuit/recursion/micro.cpp":135:30)
      auto x1339 = x307 - x1043;
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x1340 = x1042 * x1339;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1341 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1341 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x1342 = x1340 * x1341;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x1343 = x1338 + x1342;
      // loc("zirgen/circuit/recursion/micro.cpp":136:15)
      auto x1344 = x1219 * x1043;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1345 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1345 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":136:15)
      auto x1346 = x1344 * x1345;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x1347 = x1343 + x1346;
      // loc("zirgen/circuit/recursion/micro.cpp":137:15)
      auto x1348 = x1219 * x1339;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1349 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1349 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":137:15)
      auto x1350 = x1348 * x1349;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x1351 = x1347 + x1350;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1008);
        reg = x1008;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1351);
        reg = x1351;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1352 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1352 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1353 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1353 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1354 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1354 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1355 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1355 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1356 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1356 != Fp::invalid());
        host_args.at(0) = x1352;
        host_args.at(1) = x1353;
        host_args.at(2) = x1354;
        host_args.at(3) = x1355;
        host_args.at(4) = x1356;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
  }
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/macro_ops(Reg)"("./zirgen/components/mux.h":49:25))
  auto x1357 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x1357 != Fp::invalid());
  if (x1357 != 0) {
    // loc("top(recursion::Top)/code(recursion::Code)/write_addr(Reg)"("zirgen/circuit/recursion/top.cpp":22:49))
    auto x1358 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x1358 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/wom_init(Reg)"("./zirgen/components/mux.h":49:25))
    auto x1359 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x1359 != Fp::invalid());
    if (x1359 != 0) {
      host(ctx, "log", "WOM_INIT", host_args.data(), 0, host_outs.data(), 0);
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/wom_fini(Reg)"("./zirgen/components/mux.h":49:25))
    auto x1360 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x1360 != Fp::invalid());
    if (x1360 != 0) {
      host(ctx, "log", "WOM_FINI", host_args.data(), 0, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":17:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1358);
        reg = x1358;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/bit_and_elem(Reg)"("./zirgen/components/mux.h":49:25))
    auto x1361 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x1361 != Fp::invalid());
    if (x1361 != 0) {
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1362 = args[0][17 * steps + ((cycle - 0) & mask)];
      assert(x1362 != Fp::invalid());
      {
        host_args.at(0) = x1362;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1363 = host_outs.at(0);
        auto x1364 = host_outs.at(1);
        auto x1365 = host_outs.at(2);
        auto x1366 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1363);
          reg = x1363;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1364);
          reg = x1364;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1365);
          reg = x1365;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1366);
          reg = x1366;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1362);
        reg = x1362;
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1367 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x1367 != Fp::invalid());
      {
        host_args.at(0) = x1367;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1368 = host_outs.at(0);
        auto x1369 = host_outs.at(1);
        auto x1370 = host_outs.at(2);
        auto x1371 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1368);
          reg = x1368;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1369);
          reg = x1369;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1370);
          reg = x1370;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1371);
          reg = x1371;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1367);
        reg = x1367;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1372 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1372 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1373 = Fp(x1372.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1373);
          reg = x1373;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1374 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1374 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1375 = Fp(x1374.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1375);
          reg = x1375;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1376 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1376 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1377 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1377 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1378 = x1376 * x1377;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1379 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1379 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1380 = Fp(x1379.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1381 = x1380 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1381);
          reg = x1381;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1382 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1382 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1383 = Fp(x1382.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1384 = x1383 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1384);
          reg = x1384;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1385 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1385 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1386 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1386 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1387 = x1385 * x1386;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1388 = x1387 * x306;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1389 = x1378 + x1388;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1390 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1390 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1391 = Fp(x1390.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1392 = x1391 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1392);
          reg = x1392;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1393 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1393 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1394 = Fp(x1393.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1395 = x1394 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1395);
          reg = x1395;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1396 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x1396 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1397 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1397 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1398 = x1396 * x1397;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1399 = x1398 * x304;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1400 = x1389 + x1399;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1401 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1401 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1402 = Fp(x1401.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1403 = x1402 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1403);
          reg = x1403;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1404 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1404 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1405 = Fp(x1404.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1406 = x1405 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1406);
          reg = x1406;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1407 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1407 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1408 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1408 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1409 = x1407 * x1408;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1410 = x1409 * x300;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1411 = x1400 + x1410;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1412 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1412 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1413 = Fp(x1412.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1414 = x1413 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1414);
          reg = x1414;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1415 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1415 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1416 = Fp(x1415.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1417 = x1416 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1417);
          reg = x1417;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1418 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1418 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1419 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x1419 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1420 = x1418 * x1419;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1421 = x1420 * x291;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1422 = x1411 + x1421;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1423 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1423 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1424 = Fp(x1423.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1425 = x1424 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1425);
          reg = x1425;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1426 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1426 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1427 = Fp(x1426.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1428 = x1427 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1428);
          reg = x1428;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1429 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1429 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1430 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1430 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1431 = x1429 * x1430;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1432 = x1431 * x289;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1433 = x1422 + x1432;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1434 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1434 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1435 = Fp(x1434.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1436 = x1435 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1436);
          reg = x1436;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1437 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1437 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1438 = Fp(x1437.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1439 = x1438 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1439);
          reg = x1439;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1440 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1440 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1441 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1441 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1442 = x1440 * x1441;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1443 = x1442 * x287;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1444 = x1433 + x1443;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1445 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1445 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1446 = Fp(x1445.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1447 = x1446 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1447);
          reg = x1447;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1448 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1448 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1449 = Fp(x1448.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1450 = x1449 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1450);
          reg = x1450;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1451 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x1451 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1452 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x1452 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1453 = x1451 * x1452;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1454 = x1453 * x285;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1455 = x1444 + x1454;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1456 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1456 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1457 = Fp(x1456.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1458 = x1457 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1458);
          reg = x1458;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1459 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1459 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1460 = Fp(x1459.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1461 = x1460 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1461);
          reg = x1461;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1462 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x1462 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1463 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x1463 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1464 = x1462 * x1463;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1465 = x1464 * x283;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1466 = x1455 + x1465;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1467 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1467 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1468 = Fp(x1467.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1469 = x1468 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1469);
          reg = x1469;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1470 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1470 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1471 = Fp(x1470.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1472 = x1471 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1472);
          reg = x1472;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1473 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x1473 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1474 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x1474 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1475 = x1473 * x1474;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1476 = x1475 * x281;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1477 = x1466 + x1476;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1478 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1478 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1479 = Fp(x1478.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1480 = x1479 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1480);
          reg = x1480;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1481 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1481 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1482 = Fp(x1481.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1483 = x1482 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1483);
          reg = x1483;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1484 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x1484 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1485 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x1485 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1486 = x1484 * x1485;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1487 = x1486 * x279;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1488 = x1477 + x1487;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1489 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1489 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1490 = Fp(x1489.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1491 = x1490 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][58 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1491);
          reg = x1491;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1492 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1492 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1493 = Fp(x1492.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1494 = x1493 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][59 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1494);
          reg = x1494;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1495 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x1495 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1496 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x1496 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1497 = x1495 * x1496;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1498 = x1497 * x277;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1499 = x1488 + x1498;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1500 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1500 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1501 = Fp(x1500.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1502 = x1501 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1502);
          reg = x1502;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1503 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1503 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1504 = Fp(x1503.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1505 = x1504 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1505);
          reg = x1505;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1506 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x1506 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1507 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x1507 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1508 = x1506 * x1507;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1509 = x1508 * x275;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1510 = x1499 + x1509;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1511 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1511 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1512 = Fp(x1511.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1513 = x1512 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1513);
          reg = x1513;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1514 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1514 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1515 = Fp(x1514.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1516 = x1515 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1516);
          reg = x1516;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1517 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x1517 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1518 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x1518 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1519 = x1517 * x1518;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1520 = x1519 * x273;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1521 = x1510 + x1520;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1522 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1522 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1523 = Fp(x1522.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1524 = x1523 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1524);
          reg = x1524;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1525 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1525 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1526 = Fp(x1525.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1527 = x1526 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1527);
          reg = x1527;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1528 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x1528 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1529 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x1529 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1530 = x1528 * x1529;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1531 = x1530 * x271;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1532 = x1521 + x1531;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1533 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1533 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1534 = Fp(x1533.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1535 = x1534 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1535);
          reg = x1535;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1536 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1536 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1537 = Fp(x1536.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1538 = x1537 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1538);
          reg = x1538;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1539 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x1539 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1540 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x1540 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1541 = x1539 * x1540;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1542 = x1541 * x269;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1543 = x1532 + x1542;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1544 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1544 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1545 = Fp(x1544.asUInt32() & x295.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1546 = x1545 * x267;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1546);
          reg = x1546;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1547 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1547 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1548 = Fp(x1547.asUInt32() & x295.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1549 = x1548 * x267;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1549);
          reg = x1549;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1550 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x1550 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1551 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x1551 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1552 = x1550 * x1551;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1553 = x1552 * x295;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1554 = x1543 + x1553;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1555 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1555 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1556 = Fp(x1555.asUInt32() & x266.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1557 = x1556 * x265;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1557);
          reg = x1557;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1558 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1558 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1559 = Fp(x1558.asUInt32() & x266.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1560 = x1559 * x265;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1560);
          reg = x1560;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1561 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x1561 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1562 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x1562 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1563 = x1561 * x1562;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1564 = x1563 * x266;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1565 = x1554 + x1564;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1566 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1566 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1567 = Fp(x1566.asUInt32() & x264.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1568 = x1567 * x263;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1568);
          reg = x1568;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1569 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1569 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1570 = Fp(x1569.asUInt32() & x264.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1571 = x1570 * x263;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1571);
          reg = x1571;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1572 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x1572 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1573 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x1573 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1574 = x1572 * x1573;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1575 = x1574 * x264;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1576 = x1565 + x1575;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1577 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1577 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1578 = Fp(x1577.asUInt32() & x262.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1579 = x1578 * x261;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1579);
          reg = x1579;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1580 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1580 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1581 = Fp(x1580.asUInt32() & x262.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1582 = x1581 * x261;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1582);
          reg = x1582;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1583 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x1583 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1584 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x1584 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1585 = x1583 * x1584;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1586 = x1585 * x262;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1587 = x1576 + x1586;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1588 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1588 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1589 = Fp(x1588.asUInt32() & x260.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1590 = x1589 * x259;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1590);
          reg = x1590;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1591 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1591 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1592 = Fp(x1591.asUInt32() & x260.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1593 = x1592 * x259;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1593);
          reg = x1593;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1594 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x1594 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1595 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x1595 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1596 = x1594 * x1595;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1597 = x1596 * x260;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1598 = x1587 + x1597;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1599 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1599 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1600 = Fp(x1599.asUInt32() & x258.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1601 = x1600 * x257;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1601);
          reg = x1601;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1602 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1602 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1603 = Fp(x1602.asUInt32() & x258.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1604 = x1603 * x257;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1604);
          reg = x1604;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1605 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1605 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1606 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1606 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1607 = x1605 * x1606;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1608 = x1607 * x258;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1609 = x1598 + x1608;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1610 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1610 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1611 = Fp(x1610.asUInt32() & x256.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1612 = x1611 * x255;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1612);
          reg = x1612;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1613 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1613 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1614 = Fp(x1613.asUInt32() & x256.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1615 = x1614 * x255;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1615);
          reg = x1615;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1616 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1616 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1617 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1617 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1618 = x1616 * x1617;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1619 = x1618 * x256;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1620 = x1609 + x1619;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1621 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1621 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1622 = Fp(x1621.asUInt32() & x254.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1623 = x1622 * x253;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1623);
          reg = x1623;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1624 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1624 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1625 = Fp(x1624.asUInt32() & x254.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1626 = x1625 * x253;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1626);
          reg = x1626;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1627 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1627 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1628 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1628 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1629 = x1627 * x1628;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1630 = x1629 * x254;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1631 = x1620 + x1630;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1632 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1632 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1633 = Fp(x1632.asUInt32() & x252.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1634 = x1633 * x251;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1634);
          reg = x1634;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1635 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1635 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1636 = Fp(x1635.asUInt32() & x252.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1637 = x1636 * x251;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1637);
          reg = x1637;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1638 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1638 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1639 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1639 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1640 = x1638 * x1639;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1641 = x1640 * x252;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1642 = x1631 + x1641;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1643 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1643 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1644 = Fp(x1643.asUInt32() & x250.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1645 = x1644 * x249;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1645);
          reg = x1645;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1646 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1646 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1647 = Fp(x1646.asUInt32() & x250.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1648 = x1647 * x249;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1648);
          reg = x1648;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1649 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1649 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1650 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1650 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1651 = x1649 * x1650;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1652 = x1651 * x250;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1653 = x1642 + x1652;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1654 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1654 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1655 = Fp(x1654.asUInt32() & x248.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1656 = x1655 * x247;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1656);
          reg = x1656;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1657 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1657 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1658 = Fp(x1657.asUInt32() & x248.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1659 = x1658 * x247;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1659);
          reg = x1659;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1660 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x1660 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1661 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x1661 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1662 = x1660 * x1661;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1663 = x1662 * x248;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1664 = x1653 + x1663;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1665 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1665 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1666 = Fp(x1665.asUInt32() & x246.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1667 = x1666 * x245;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1667);
          reg = x1667;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1668 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1668 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1669 = Fp(x1668.asUInt32() & x246.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1670 = x1669 * x245;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1670);
          reg = x1670;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1671 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x1671 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1672 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x1672 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1673 = x1671 * x1672;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1674 = x1673 * x246;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1675 = x1664 + x1674;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1676 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1676 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1677 = Fp(x1676.asUInt32() & x244.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1678 = x1677 * x243;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1678);
          reg = x1678;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1679 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1679 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1680 = Fp(x1679.asUInt32() & x244.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1681 = x1680 * x243;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1681);
          reg = x1681;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1682 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x1682 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1683 = args[2][93 * steps + ((cycle - 0) & mask)];
      assert(x1683 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1684 = x1682 * x1683;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1685 = x1684 * x244;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1686 = x1675 + x1685;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1687 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1687 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1688 = Fp(x1687.asUInt32() & x242.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1689 = x1688 * x241;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][94 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1689);
          reg = x1689;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1690 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1690 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1691 = Fp(x1690.asUInt32() & x242.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1692 = x1691 * x241;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][95 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1692);
          reg = x1692;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1693 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x1693 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1694 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x1694 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1695 = x1693 * x1694;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1696 = x1695 * x242;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1697 = x1686 + x1696;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1698 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1698 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1699 = Fp(x1698.asUInt32() & x240.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1700 = x1699 * x239;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][96 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1700);
          reg = x1700;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1701 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1701 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1702 = Fp(x1701.asUInt32() & x240.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1703 = x1702 * x239;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][97 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1703);
          reg = x1703;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1704 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x1704 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1705 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x1705 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1706 = x1704 * x1705;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1707 = x1706 * x240;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1708 = x1697 + x1707;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1709 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x1709 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1710 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x1710 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1358);
        reg = x1358;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1708);
        reg = x1708;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1711 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x1711 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1712 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x1712 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1713 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x1713 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1714 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x1714 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x1715 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x1715 != Fp::invalid());
        host_args.at(0) = x1711;
        host_args.at(1) = x1712;
        host_args.at(2) = x1713;
        host_args.at(3) = x1714;
        host_args.at(4) = x1715;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1716 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x1716 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1717 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1717 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1718 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x1718 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1719 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x1719 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1720 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x1720 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1721 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x1721 != Fp::invalid());
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1722 = args[0][19 * steps + ((cycle - 0) & mask)];
      assert(x1722 != Fp::invalid());
      host_args.at(0) = x1362;
      host_args.at(1) = x1367;
      host_args.at(2) = x1709;
      host_args.at(3) = x1716;
      host_args.at(4) = x1710;
      host_args.at(5) = x1717;
      host_args.at(6) = x1722;
      host_args.at(7) = x1708;
      host_args.at(8) = x1718;
      host_args.at(9) = x1719;
      host_args.at(10) = x1720;
      host_args.at(11) = x1721;
      host(ctx, "log", "BIT_AND_ELEM, reading from [%u, %u],  A = [%x, %x], B = [%x, %x], type = %u, Out=%x, Result=%e", host_args.data(), 12, host_outs.data(), 0);
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/bit_op_shorts(Reg)"("./zirgen/components/mux.h":49:25))
    auto x1723 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x1723 != Fp::invalid());
    if (x1723 != 0) {
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1724 = args[0][17 * steps + ((cycle - 0) & mask)];
      assert(x1724 != Fp::invalid());
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1725 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x1725 != Fp::invalid());
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1726 = args[0][19 * steps + ((cycle - 0) & mask)];
      assert(x1726 != Fp::invalid());
      host_args.at(0) = x1724;
      host_args.at(1) = x1725;
      host_args.at(2) = x1726;
      host(ctx, "log", "BIT_OP_SHORTS, reading from [%u, %u], type=%u", host_args.data(), 3, host_outs.data(), 0);
      {
        host_args.at(0) = x1724;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1727 = host_outs.at(0);
        auto x1728 = host_outs.at(1);
        auto x1729 = host_outs.at(2);
        auto x1730 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1727);
          reg = x1727;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1728);
          reg = x1728;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1729);
          reg = x1729;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1730);
          reg = x1730;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1724);
        reg = x1724;
      }
      {
        host_args.at(0) = x1725;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1731 = host_outs.at(0);
        auto x1732 = host_outs.at(1);
        auto x1733 = host_outs.at(2);
        auto x1734 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1731);
          reg = x1731;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1732);
          reg = x1732;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1733);
          reg = x1733;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1734);
          reg = x1734;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1725);
        reg = x1725;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1735 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x1735 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1736 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x1736 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1737 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x1737 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x1738 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1738 != Fp::invalid());
      host_args.at(0) = x1735;
      host_args.at(1) = x1736;
      host_args.at(2) = x1737;
      host_args.at(3) = x1738;
      host(ctx, "log", "  A = [%x, %x], B = [%x, %x]", host_args.data(), 4, host_outs.data(), 0);
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1739 = Fp(x1735.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1739);
          reg = x1739;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1740 = Fp(x1737.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1740);
          reg = x1740;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1741 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1741 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1742 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x1742 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1743 = x1741 * x1742;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1744 = Fp(x1735.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1745 = x1744 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1745);
          reg = x1745;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1746 = Fp(x1737.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1747 = x1746 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1747);
          reg = x1747;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1748 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1748 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1749 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x1749 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1750 = x1748 * x1749;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1751 = x1750 * x306;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1752 = x1743 + x1751;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1753 = Fp(x1735.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1754 = x1753 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1754);
          reg = x1754;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1755 = Fp(x1737.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1756 = x1755 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1756);
          reg = x1756;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1757 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1757 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1758 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x1758 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1759 = x1757 * x1758;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1760 = x1759 * x304;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1761 = x1752 + x1760;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1762 = Fp(x1735.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1763 = x1762 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1763);
          reg = x1763;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1764 = Fp(x1737.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1765 = x1764 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1765);
          reg = x1765;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1766 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1766 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1767 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x1767 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1768 = x1766 * x1767;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1769 = x1768 * x300;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1770 = x1761 + x1769;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1771 = Fp(x1735.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1772 = x1771 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1772);
          reg = x1772;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1773 = Fp(x1737.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1774 = x1773 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1774);
          reg = x1774;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1775 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x1775 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1776 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x1776 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1777 = x1775 * x1776;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1778 = x1777 * x291;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1779 = x1770 + x1778;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1780 = Fp(x1735.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1781 = x1780 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1781);
          reg = x1781;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1782 = Fp(x1737.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1783 = x1782 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1783);
          reg = x1783;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1784 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1784 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1785 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x1785 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1786 = x1784 * x1785;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1787 = x1786 * x289;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1788 = x1779 + x1787;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1789 = Fp(x1735.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1790 = x1789 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1790);
          reg = x1790;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1791 = Fp(x1737.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1792 = x1791 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1792);
          reg = x1792;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1793 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1793 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1794 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x1794 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1795 = x1793 * x1794;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1796 = x1795 * x287;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1797 = x1788 + x1796;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1798 = Fp(x1735.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1799 = x1798 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1799);
          reg = x1799;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1800 = Fp(x1737.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1801 = x1800 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1801);
          reg = x1801;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1802 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1802 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1803 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x1803 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1804 = x1802 * x1803;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1805 = x1804 * x285;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1806 = x1797 + x1805;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1807 = Fp(x1735.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1808 = x1807 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1808);
          reg = x1808;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1809 = Fp(x1737.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1810 = x1809 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1810);
          reg = x1810;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1811 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1811 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1812 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x1812 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1813 = x1811 * x1812;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1814 = x1813 * x283;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1815 = x1806 + x1814;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1816 = Fp(x1735.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1817 = x1816 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1817);
          reg = x1817;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1818 = Fp(x1737.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1819 = x1818 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1819);
          reg = x1819;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1820 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x1820 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1821 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x1821 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1822 = x1820 * x1821;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1823 = x1822 * x281;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1824 = x1815 + x1823;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1825 = Fp(x1735.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1826 = x1825 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1826);
          reg = x1826;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1827 = Fp(x1737.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1828 = x1827 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1828);
          reg = x1828;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1829 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1829 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1830 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1830 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1831 = x1829 * x1830;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1832 = x1831 * x279;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1833 = x1824 + x1832;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1834 = Fp(x1735.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1835 = x1834 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1835);
          reg = x1835;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1836 = Fp(x1737.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1837 = x1836 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1837);
          reg = x1837;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1838 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1838 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1839 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1839 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1840 = x1838 * x1839;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1841 = x1840 * x277;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1842 = x1833 + x1841;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1843 = Fp(x1735.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1844 = x1843 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1844);
          reg = x1844;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1845 = Fp(x1737.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1846 = x1845 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1846);
          reg = x1846;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1847 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1847 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1848 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1848 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1849 = x1847 * x1848;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1850 = x1849 * x275;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1851 = x1842 + x1850;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1852 = Fp(x1735.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1853 = x1852 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1853);
          reg = x1853;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1854 = Fp(x1737.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1855 = x1854 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1855);
          reg = x1855;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1856 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1856 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1857 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1857 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1858 = x1856 * x1857;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1859 = x1858 * x273;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1860 = x1851 + x1859;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1861 = Fp(x1735.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1862 = x1861 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1862);
          reg = x1862;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1863 = Fp(x1737.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1864 = x1863 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1864);
          reg = x1864;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1865 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x1865 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1866 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1866 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1867 = x1865 * x1866;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1868 = x1867 * x271;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1869 = x1860 + x1868;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1870 = Fp(x1735.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1871 = x1870 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1871);
          reg = x1871;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1872 = Fp(x1737.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1873 = x1872 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1873);
          reg = x1873;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1874 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x1874 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1875 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1875 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1876 = x1874 * x1875;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1877 = x1876 * x269;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1878 = x1869 + x1877;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1879 = Fp(x1736.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1879);
          reg = x1879;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1880 = Fp(x1738.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1880);
          reg = x1880;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1881 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x1881 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1882 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1882 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1883 = x1881 * x1882;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1884 = Fp(x1736.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1885 = x1884 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1885);
          reg = x1885;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1886 = Fp(x1738.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1887 = x1886 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1887);
          reg = x1887;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1888 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x1888 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1889 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1889 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1890 = x1888 * x1889;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1891 = x1890 * x306;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1892 = x1883 + x1891;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1893 = Fp(x1736.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1894 = x1893 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1894);
          reg = x1894;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1895 = Fp(x1738.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1896 = x1895 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1896);
          reg = x1896;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1897 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x1897 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1898 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1898 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1899 = x1897 * x1898;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1900 = x1899 * x304;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1901 = x1892 + x1900;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1902 = Fp(x1736.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1903 = x1902 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1903);
          reg = x1903;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1904 = Fp(x1738.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1905 = x1904 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1905);
          reg = x1905;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1906 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x1906 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1907 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1907 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1908 = x1906 * x1907;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1909 = x1908 * x300;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1910 = x1901 + x1909;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1911 = Fp(x1736.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1912 = x1911 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1912);
          reg = x1912;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1913 = Fp(x1738.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1914 = x1913 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1914);
          reg = x1914;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1915 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x1915 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1916 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x1916 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1917 = x1915 * x1916;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1918 = x1917 * x291;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1919 = x1910 + x1918;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1920 = Fp(x1736.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1921 = x1920 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1921);
          reg = x1921;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1922 = Fp(x1738.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1923 = x1922 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1923);
          reg = x1923;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1924 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x1924 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1925 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x1925 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1926 = x1924 * x1925;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1927 = x1926 * x289;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1928 = x1919 + x1927;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1929 = Fp(x1736.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1930 = x1929 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][58 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1930);
          reg = x1930;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1931 = Fp(x1738.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1932 = x1931 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1932);
          reg = x1932;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1933 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x1933 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1934 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x1934 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1935 = x1933 * x1934;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1936 = x1935 * x287;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1937 = x1928 + x1936;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1938 = Fp(x1736.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1939 = x1938 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][59 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1939);
          reg = x1939;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1940 = Fp(x1738.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1941 = x1940 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1941);
          reg = x1941;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1942 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x1942 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1943 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x1943 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1944 = x1942 * x1943;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1945 = x1944 * x285;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1946 = x1937 + x1945;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1947 = Fp(x1736.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1948 = x1947 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1948);
          reg = x1948;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1949 = Fp(x1738.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1950 = x1949 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1950);
          reg = x1950;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1951 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x1951 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1952 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x1952 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1953 = x1951 * x1952;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1954 = x1953 * x283;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1955 = x1946 + x1954;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1956 = Fp(x1736.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1957 = x1956 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1957);
          reg = x1957;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1958 = Fp(x1738.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1959 = x1958 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1959);
          reg = x1959;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1960 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x1960 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1961 = args[2][93 * steps + ((cycle - 0) & mask)];
      assert(x1961 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1962 = x1960 * x1961;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1963 = x1962 * x281;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1964 = x1955 + x1963;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1965 = Fp(x1736.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1966 = x1965 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1966);
          reg = x1966;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1967 = Fp(x1738.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1968 = x1967 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][94 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1968);
          reg = x1968;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1969 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x1969 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1970 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x1970 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1971 = x1969 * x1970;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1972 = x1971 * x279;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1973 = x1964 + x1972;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1974 = Fp(x1736.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1975 = x1974 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1975);
          reg = x1975;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1976 = Fp(x1738.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1977 = x1976 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][95 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1977);
          reg = x1977;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1978 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x1978 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1979 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x1979 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1980 = x1978 * x1979;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1981 = x1980 * x277;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1982 = x1973 + x1981;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1983 = Fp(x1736.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1984 = x1983 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1984);
          reg = x1984;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1985 = Fp(x1738.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1986 = x1985 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][96 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1986);
          reg = x1986;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1987 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x1987 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1988 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x1988 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1989 = x1987 * x1988;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1990 = x1989 * x275;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1991 = x1982 + x1990;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1992 = Fp(x1736.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1993 = x1992 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1993);
          reg = x1993;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1994 = Fp(x1738.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1995 = x1994 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][97 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1995);
          reg = x1995;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1996 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x1996 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1997 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x1997 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1998 = x1996 * x1997;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1999 = x1998 * x273;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x2000 = x1991 + x1999;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x2001 = Fp(x1736.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x2002 = x2001 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2002);
          reg = x2002;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x2003 = Fp(x1738.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x2004 = x2003 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2004);
          reg = x2004;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2005 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x2005 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2006 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x2006 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2007 = x2005 * x2006;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2008 = x2007 * x271;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x2009 = x2000 + x2008;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x2010 = Fp(x1736.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x2011 = x2010 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2011);
          reg = x2011;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x2012 = Fp(x1738.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x2013 = x2012 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2013);
          reg = x2013;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2014 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x2014 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2015 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x2015 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2016 = x2014 * x2015;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2017 = x2016 * x269;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x2018 = x2009 + x2017;
      if (x1726 != 0) {
        // loc("zirgen/circuit/recursion/bits.cpp":44:30)
        auto x2019 = x2018 * x295;
        // loc("zirgen/circuit/recursion/bits.cpp":44:30)
        auto x2020 = x2019 + x1878;
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1358);
          reg = x1358;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2020);
          reg = x2020;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x2021 = args[2][21 * steps + ((cycle - 0) & mask)];
          assert(x2021 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x2022 = args[2][22 * steps + ((cycle - 0) & mask)];
          assert(x2022 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x2023 = args[2][23 * steps + ((cycle - 0) & mask)];
          assert(x2023 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x2024 = args[2][24 * steps + ((cycle - 0) & mask)];
          assert(x2024 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x2025 = args[2][25 * steps + ((cycle - 0) & mask)];
          assert(x2025 != Fp::invalid());
          host_args.at(0) = x2021;
          host_args.at(1) = x2022;
          host_args.at(2) = x2023;
          host_args.at(3) = x2024;
          host_args.at(4) = x2025;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x2026 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x2026 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x2027 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x2027 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x2028 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x2028 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x2029 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x2029 != Fp::invalid());
        host_args.at(0) = x2026;
        host_args.at(1) = x2027;
        host_args.at(2) = x2028;
        host_args.at(3) = x2029;
        host(ctx, "log", "  AND Result = %e", host_args.data(), 4, host_outs.data(), 0);
      }
      // loc("zirgen/circuit/recursion/bits.cpp":47:27)
      auto x2030 = x307 - x1726;
      if (x2030 != 0) {
        // loc("zirgen/circuit/recursion/bits.cpp":50:19)
        auto x2031 = x1735 + x1737;
        // loc("zirgen/circuit/recursion/bits.cpp":50:53)
        auto x2032 = x1878 * x306;
        // loc("zirgen/circuit/recursion/bits.cpp":50:19)
        auto x2033 = x2031 - x2032;
        // loc("zirgen/circuit/recursion/bits.cpp":51:19)
        auto x2034 = x1736 + x1738;
        // loc("zirgen/circuit/recursion/bits.cpp":51:53)
        auto x2035 = x2018 * x306;
        // loc("zirgen/circuit/recursion/bits.cpp":51:19)
        auto x2036 = x2034 - x2035;
        // loc("zirgen/circuit/recursion/wom.cpp":87:3)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1358);
          reg = x1358;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2033);
          reg = x2033;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2036);
          reg = x2036;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x2037 = args[2][21 * steps + ((cycle - 0) & mask)];
          assert(x2037 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x2038 = args[2][22 * steps + ((cycle - 0) & mask)];
          assert(x2038 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x2039 = args[2][23 * steps + ((cycle - 0) & mask)];
          assert(x2039 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x2040 = args[2][24 * steps + ((cycle - 0) & mask)];
          assert(x2040 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
          auto x2041 = args[2][25 * steps + ((cycle - 0) & mask)];
          assert(x2041 != Fp::invalid());
          host_args.at(0) = x2037;
          host_args.at(1) = x2038;
          host_args.at(2) = x2039;
          host_args.at(3) = x2040;
          host_args.at(4) = x2041;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x2042 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x2042 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x2043 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x2043 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x2044 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x2044 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x2045 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x2045 != Fp::invalid());
        host_args.at(0) = x2042;
        host_args.at(1) = x2043;
        host_args.at(2) = x2044;
        host_args.at(3) = x2045;
        host(ctx, "log", "  XOR Result = %e", host_args.data(), 4, host_outs.data(), 0);
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/sha_init(Reg)"("./zirgen/components/mux.h":49:25))
    auto x2046 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x2046 != Fp::invalid());
    if (x2046 != 0) {
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2047 = args[0][17 * steps + ((cycle - 0) & mask)];
      assert(x2047 != Fp::invalid());
      {
        host_args.at(0) = x2047;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2048 = host_outs.at(0);
        auto x2049 = host_outs.at(1);
        auto x2050 = host_outs.at(2);
        auto x2051 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2048);
          reg = x2048;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2049);
          reg = x2049;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2050);
          reg = x2050;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2051);
          reg = x2051;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2047);
        reg = x2047;
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2052 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x2052 != Fp::invalid());
      {
        host_args.at(0) = x2052;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2053 = host_outs.at(0);
        auto x2054 = host_outs.at(1);
        auto x2055 = host_outs.at(2);
        auto x2056 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2053);
          reg = x2053;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2054);
          reg = x2054;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2055);
          reg = x2055;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2056);
          reg = x2056;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2052);
        reg = x2052;
      }
      {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][94 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][95 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][96 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][97 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][101 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][102 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][103 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][104 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][105 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][106 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2057 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x2057 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2058 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x2058 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2059 = x2058 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2060 = x2057 + x2059;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2061 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x2061 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2062 = x2061 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2063 = x2060 + x2062;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2064 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x2064 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2065 = x2064 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2066 = x2063 + x2065;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2067 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x2067 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2068 = x2067 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2069 = x2066 + x2068;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2070 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x2070 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2071 = x2070 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2072 = x2069 + x2071;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2073 = args[2][100 * steps + ((cycle - 0) & mask)];
      assert(x2073 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2074 = x2073 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2075 = x2072 + x2074;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2076 = args[2][101 * steps + ((cycle - 0) & mask)];
      assert(x2076 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2077 = x2076 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2078 = x2075 + x2077;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2079 = args[2][102 * steps + ((cycle - 0) & mask)];
      assert(x2079 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2080 = x2079 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2081 = x2078 + x2080;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2082 = args[2][103 * steps + ((cycle - 0) & mask)];
      assert(x2082 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2083 = x2082 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2084 = x2081 + x2083;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2085 = args[2][104 * steps + ((cycle - 0) & mask)];
      assert(x2085 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2086 = x2085 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2087 = x2084 + x2086;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2088 = args[2][105 * steps + ((cycle - 0) & mask)];
      assert(x2088 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2089 = x2088 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2090 = x2087 + x2089;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2091 = args[2][106 * steps + ((cycle - 0) & mask)];
      assert(x2091 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2092 = x2091 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2093 = x2090 + x2092;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2094 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x2094 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2095 = x2094 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2096 = x2093 + x2095;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2097 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x2097 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2098 = x2097 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2099 = x2096 + x2098;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2100 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x2100 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2101 = x2100 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2102 = x2099 + x2101;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2103 = x308 - x2102;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2104 = x2103 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x2105 = Fp(x2104.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2105);
          reg = x2105;
        }
      }
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2106 = Fp(x2104.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2106);
          reg = x2106;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2107 = Fp(x2104.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2108 = x2107 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2108);
          reg = x2108;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2109 = Fp(x2104.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2110 = x2109 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2110);
          reg = x2110;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2111 = Fp(x2104.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2112 = x2111 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2112);
          reg = x2112;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2113 = Fp(x2104.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2114 = x2113 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2114);
          reg = x2114;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2115 = Fp(x2104.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2116 = x2115 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2116);
          reg = x2116;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2117 = Fp(x2104.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2118 = x2117 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2118);
          reg = x2118;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2119 = Fp(x2104.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2120 = x2119 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2120);
          reg = x2120;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2121 = Fp(x2104.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2122 = x2121 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2122);
          reg = x2122;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2123 = Fp(x2104.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2124 = x2123 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2124);
          reg = x2124;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2125 = Fp(x2104.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2126 = x2125 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2126);
          reg = x2126;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2127 = Fp(x2104.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2128 = x2127 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2128);
          reg = x2128;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2129 = Fp(x2104.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2130 = x2129 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2130);
          reg = x2130;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2131 = Fp(x2104.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2132 = x2131 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2132);
          reg = x2132;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2133 = Fp(x2104.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2134 = x2133 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2134);
          reg = x2134;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2135 = Fp(x2104.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2136 = x2135 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2136);
          reg = x2136;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2137 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x2137 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2138 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2138 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2139 = x2138 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2140 = x2137 + x2139;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2141 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2141 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2142 = x2141 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2143 = x2140 + x2142;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2144 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2144 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2145 = x2144 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2146 = x2143 + x2145;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2147 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2147 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2148 = x2147 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2149 = x2146 + x2148;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2150 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x2150 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2151 = x2150 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2152 = x2149 + x2151;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2153 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x2153 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2154 = x2153 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2155 = x2152 + x2154;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2156 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x2156 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2157 = x2156 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2158 = x2155 + x2157;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2159 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2159 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2160 = x2159 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2161 = x2158 + x2160;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2162 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2162 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2163 = x2162 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2164 = x2161 + x2163;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2165 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2165 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2166 = x2165 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2167 = x2164 + x2166;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2168 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2168 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2169 = x2168 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2170 = x2167 + x2169;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2171 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x2171 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2172 = x2171 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2173 = x2170 + x2172;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2174 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x2174 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2175 = x2174 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2176 = x2173 + x2175;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2177 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x2177 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2178 = x2177 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2179 = x2176 + x2178;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2180 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2180 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2181 = x2180 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2182 = x2179 + x2181;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2183 = x2104 - x2182;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2184 = x2183 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x2185 = Fp(x2184.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2185);
          reg = x2185;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x2186 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x2186 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x2187 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x2187 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2188 = Fp(x2186.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2188);
          reg = x2188;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2189 = Fp(x2186.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2190 = x2189 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2190);
          reg = x2190;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2191 = Fp(x2186.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2192 = x2191 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2192);
          reg = x2192;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2193 = Fp(x2186.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2194 = x2193 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2194);
          reg = x2194;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2195 = Fp(x2186.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2196 = x2195 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2196);
          reg = x2196;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2197 = Fp(x2186.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2198 = x2197 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2198);
          reg = x2198;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2199 = Fp(x2186.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2200 = x2199 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2200);
          reg = x2200;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2201 = Fp(x2186.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2202 = x2201 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2202);
          reg = x2202;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2203 = Fp(x2186.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2204 = x2203 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2204);
          reg = x2204;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2205 = Fp(x2186.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2206 = x2205 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2206);
          reg = x2206;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2207 = Fp(x2186.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2208 = x2207 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2208);
          reg = x2208;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2209 = Fp(x2186.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2210 = x2209 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2210);
          reg = x2210;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2211 = Fp(x2186.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2212 = x2211 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2212);
          reg = x2212;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2213 = Fp(x2186.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2214 = x2213 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2214);
          reg = x2214;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2215 = Fp(x2186.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2216 = x2215 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2216);
          reg = x2216;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2217 = Fp(x2186.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2218 = x2217 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2218);
          reg = x2218;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2219 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2219 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2220 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2220 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2221 = x2220 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2222 = x2219 + x2221;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2223 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2223 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2224 = x2223 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2225 = x2222 + x2224;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2226 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2226 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2227 = x2226 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2228 = x2225 + x2227;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2229 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2229 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2230 = x2229 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2231 = x2228 + x2230;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2232 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2232 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2233 = x2232 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2234 = x2231 + x2233;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2235 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x2235 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2236 = x2235 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2237 = x2234 + x2236;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2238 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x2238 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2239 = x2238 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2240 = x2237 + x2239;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2241 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x2241 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2242 = x2241 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2243 = x2240 + x2242;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2244 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x2244 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2245 = x2244 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2246 = x2243 + x2245;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2247 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x2247 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2248 = x2247 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2249 = x2246 + x2248;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2250 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x2250 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2251 = x2250 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2252 = x2249 + x2251;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2253 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x2253 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2254 = x2253 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2255 = x2252 + x2254;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2256 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x2256 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2257 = x2256 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2258 = x2255 + x2257;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2259 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x2259 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2260 = x2259 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2261 = x2258 + x2260;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2262 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x2262 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2263 = x2262 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2264 = x2261 + x2263;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2265 = x2186 - x2264;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2266 = x2265 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x2267 = Fp(x2266.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2267);
          reg = x2267;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x2268 = x2187 + x2266;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2269 = Fp(x2268.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2269);
          reg = x2269;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2270 = Fp(x2268.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2271 = x2270 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2271);
          reg = x2271;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2272 = Fp(x2268.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2273 = x2272 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2273);
          reg = x2273;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2274 = Fp(x2268.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2275 = x2274 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2275);
          reg = x2275;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2276 = Fp(x2268.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2277 = x2276 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2277);
          reg = x2277;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2278 = Fp(x2268.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2279 = x2278 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2279);
          reg = x2279;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2280 = Fp(x2268.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2281 = x2280 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2281);
          reg = x2281;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2282 = Fp(x2268.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2283 = x2282 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2283);
          reg = x2283;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2284 = Fp(x2268.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2285 = x2284 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2285);
          reg = x2285;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2286 = Fp(x2268.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2287 = x2286 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2287);
          reg = x2287;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2288 = Fp(x2268.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2289 = x2288 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2289);
          reg = x2289;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2290 = Fp(x2268.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2291 = x2290 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2291);
          reg = x2291;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2292 = Fp(x2268.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2293 = x2292 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2293);
          reg = x2293;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2294 = Fp(x2268.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2295 = x2294 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2295);
          reg = x2295;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2296 = Fp(x2268.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2297 = x2296 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2297);
          reg = x2297;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2298 = Fp(x2268.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2299 = x2298 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2299);
          reg = x2299;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2300 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x2300 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2301 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x2301 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2302 = x2301 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2303 = x2300 + x2302;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2304 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x2304 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2305 = x2304 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2306 = x2303 + x2305;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2307 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x2307 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2308 = x2307 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2309 = x2306 + x2308;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2310 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x2310 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2311 = x2310 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2312 = x2309 + x2311;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2313 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x2313 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2314 = x2313 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2315 = x2312 + x2314;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2316 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x2316 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2317 = x2316 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2318 = x2315 + x2317;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2319 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x2319 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2320 = x2319 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2321 = x2318 + x2320;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2322 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x2322 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2323 = x2322 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2324 = x2321 + x2323;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2325 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x2325 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2326 = x2325 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2327 = x2324 + x2326;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2328 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x2328 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2329 = x2328 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2330 = x2327 + x2329;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2331 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x2331 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2332 = x2331 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2333 = x2330 + x2332;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2334 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x2334 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2335 = x2334 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2336 = x2333 + x2335;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2337 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x2337 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2338 = x2337 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2339 = x2336 + x2338;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2340 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x2340 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2341 = x2340 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2342 = x2339 + x2341;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2343 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x2343 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2344 = x2343 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2345 = x2342 + x2344;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2346 = x2268 - x2345;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2347 = x2346 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x2348 = Fp(x2347.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2348);
          reg = x2348;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x2349 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x2349 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x2350 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x2350 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2351 = Fp(x2349.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2351);
          reg = x2351;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2352 = Fp(x2349.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2353 = x2352 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2353);
          reg = x2353;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2354 = Fp(x2349.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2355 = x2354 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2355);
          reg = x2355;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2356 = Fp(x2349.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2357 = x2356 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2357);
          reg = x2357;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2358 = Fp(x2349.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2359 = x2358 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2359);
          reg = x2359;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2360 = Fp(x2349.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2361 = x2360 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2361);
          reg = x2361;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2362 = Fp(x2349.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2363 = x2362 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2363);
          reg = x2363;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2364 = Fp(x2349.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2365 = x2364 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2365);
          reg = x2365;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2366 = Fp(x2349.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2367 = x2366 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2367);
          reg = x2367;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2368 = Fp(x2349.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2369 = x2368 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2369);
          reg = x2369;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2370 = Fp(x2349.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2371 = x2370 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2371);
          reg = x2371;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2372 = Fp(x2349.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2373 = x2372 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2373);
          reg = x2373;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2374 = Fp(x2349.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2375 = x2374 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2375);
          reg = x2375;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2376 = Fp(x2349.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2377 = x2376 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2377);
          reg = x2377;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2378 = Fp(x2349.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2379 = x2378 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2379);
          reg = x2379;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2380 = Fp(x2349.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2381 = x2380 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2381);
          reg = x2381;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2382 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x2382 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2383 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x2383 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2384 = x2383 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2385 = x2382 + x2384;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2386 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x2386 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2387 = x2386 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2388 = x2385 + x2387;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2389 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x2389 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2390 = x2389 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2391 = x2388 + x2390;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2392 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x2392 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2393 = x2392 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2394 = x2391 + x2393;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2395 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x2395 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2396 = x2395 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2397 = x2394 + x2396;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2398 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x2398 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2399 = x2398 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2400 = x2397 + x2399;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2401 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x2401 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2402 = x2401 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2403 = x2400 + x2402;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2404 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x2404 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2405 = x2404 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2406 = x2403 + x2405;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2407 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x2407 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2408 = x2407 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2409 = x2406 + x2408;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2410 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x2410 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2411 = x2410 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2412 = x2409 + x2411;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2413 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x2413 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2414 = x2413 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2415 = x2412 + x2414;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2416 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x2416 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2417 = x2416 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2418 = x2415 + x2417;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2419 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x2419 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2420 = x2419 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2421 = x2418 + x2420;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2422 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x2422 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2423 = x2422 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2424 = x2421 + x2423;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2425 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x2425 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2426 = x2425 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2427 = x2424 + x2426;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2428 = x2349 - x2427;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2429 = x2428 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x2430 = Fp(x2429.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2430);
          reg = x2430;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x2431 = x2350 + x2429;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2432 = Fp(x2431.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2432);
          reg = x2432;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2433 = Fp(x2431.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2434 = x2433 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2434);
          reg = x2434;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2435 = Fp(x2431.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2436 = x2435 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2436);
          reg = x2436;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2437 = Fp(x2431.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2438 = x2437 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2438);
          reg = x2438;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2439 = Fp(x2431.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2440 = x2439 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2440);
          reg = x2440;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2441 = Fp(x2431.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2442 = x2441 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2442);
          reg = x2442;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2443 = Fp(x2431.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2444 = x2443 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2444);
          reg = x2444;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2445 = Fp(x2431.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2446 = x2445 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2446);
          reg = x2446;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2447 = Fp(x2431.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2448 = x2447 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2448);
          reg = x2448;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2449 = Fp(x2431.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2450 = x2449 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2450);
          reg = x2450;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2451 = Fp(x2431.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2452 = x2451 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2452);
          reg = x2452;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2453 = Fp(x2431.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2454 = x2453 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2454);
          reg = x2454;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2455 = Fp(x2431.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2456 = x2455 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2456);
          reg = x2456;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2457 = Fp(x2431.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2458 = x2457 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2458);
          reg = x2458;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2459 = Fp(x2431.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2460 = x2459 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2460);
          reg = x2460;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2461 = Fp(x2431.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2462 = x2461 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2462);
          reg = x2462;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2463 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x2463 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2464 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x2464 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2465 = x2464 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2466 = x2463 + x2465;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2467 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2467 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2468 = x2467 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2469 = x2466 + x2468;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2470 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2470 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2471 = x2470 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2472 = x2469 + x2471;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2473 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2473 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2474 = x2473 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2475 = x2472 + x2474;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2476 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2476 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2477 = x2476 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2478 = x2475 + x2477;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2479 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2479 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2480 = x2479 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2481 = x2478 + x2480;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2482 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2482 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2483 = x2482 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2484 = x2481 + x2483;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2485 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2485 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2486 = x2485 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2487 = x2484 + x2486;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2488 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2488 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2489 = x2488 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2490 = x2487 + x2489;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2491 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2491 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2492 = x2491 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2493 = x2490 + x2492;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2494 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x2494 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2495 = x2494 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2496 = x2493 + x2495;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2497 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x2497 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2498 = x2497 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2499 = x2496 + x2498;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2500 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x2500 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2501 = x2500 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2502 = x2499 + x2501;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2503 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x2503 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2504 = x2503 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2505 = x2502 + x2504;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2506 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x2506 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2507 = x2506 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2508 = x2505 + x2507;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2509 = x2431 - x2508;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2510 = x2509 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x2511 = Fp(x2510.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2511);
          reg = x2511;
        }
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/sha_fini(Reg)"("./zirgen/components/mux.h":49:25))
    auto x2512 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x2512 != Fp::invalid());
    if (x2512 != 0) {
      {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][94 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][95 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][96 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][97 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][101 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][102 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][103 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][104 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][105 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][106 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2513 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x2513 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2514 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x2514 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2515 = x2514 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2516 = x2513 + x2515;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2517 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x2517 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2518 = x2517 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2519 = x2516 + x2518;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2520 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x2520 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2521 = x2520 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2522 = x2519 + x2521;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2523 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x2523 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2524 = x2523 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2525 = x2522 + x2524;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2526 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x2526 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2527 = x2526 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2528 = x2525 + x2527;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2529 = args[2][100 * steps + ((cycle - 0) & mask)];
      assert(x2529 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2530 = x2529 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2531 = x2528 + x2530;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2532 = args[2][101 * steps + ((cycle - 0) & mask)];
      assert(x2532 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2533 = x2532 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2534 = x2531 + x2533;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2535 = args[2][102 * steps + ((cycle - 0) & mask)];
      assert(x2535 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2536 = x2535 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2537 = x2534 + x2536;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2538 = args[2][103 * steps + ((cycle - 0) & mask)];
      assert(x2538 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2539 = x2538 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2540 = x2537 + x2539;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2541 = args[2][104 * steps + ((cycle - 0) & mask)];
      assert(x2541 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2542 = x2541 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2543 = x2540 + x2542;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2544 = args[2][105 * steps + ((cycle - 0) & mask)];
      assert(x2544 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2545 = x2544 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2546 = x2543 + x2545;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2547 = args[2][106 * steps + ((cycle - 0) & mask)];
      assert(x2547 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2548 = x2547 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2549 = x2546 + x2548;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2550 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x2550 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2551 = x2550 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2552 = x2549 + x2551;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2553 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x2553 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2554 = x2553 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2555 = x2552 + x2554;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2556 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x2556 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2557 = x2556 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2558 = x2555 + x2557;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2559 = x308 - x2558;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2560 = x2559 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x2561 = Fp(x2560.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2561);
          reg = x2561;
        }
      }
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2562 = Fp(x2560.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2562);
          reg = x2562;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2563 = Fp(x2560.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2564 = x2563 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2564);
          reg = x2564;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2565 = Fp(x2560.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2566 = x2565 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2566);
          reg = x2566;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2567 = Fp(x2560.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2568 = x2567 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2568);
          reg = x2568;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2569 = Fp(x2560.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2570 = x2569 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2570);
          reg = x2570;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2571 = Fp(x2560.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2572 = x2571 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2572);
          reg = x2572;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2573 = Fp(x2560.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2574 = x2573 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2574);
          reg = x2574;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2575 = Fp(x2560.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2576 = x2575 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2576);
          reg = x2576;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2577 = Fp(x2560.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2578 = x2577 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2578);
          reg = x2578;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2579 = Fp(x2560.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2580 = x2579 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2580);
          reg = x2580;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2581 = Fp(x2560.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2582 = x2581 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2582);
          reg = x2582;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2583 = Fp(x2560.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2584 = x2583 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2584);
          reg = x2584;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2585 = Fp(x2560.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2586 = x2585 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2586);
          reg = x2586;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2587 = Fp(x2560.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2588 = x2587 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2588);
          reg = x2588;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2589 = Fp(x2560.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2590 = x2589 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2590);
          reg = x2590;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2591 = Fp(x2560.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2592 = x2591 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2592);
          reg = x2592;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2593 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x2593 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2594 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2594 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2595 = x2594 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2596 = x2593 + x2595;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2597 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2597 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2598 = x2597 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2599 = x2596 + x2598;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2600 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2600 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2601 = x2600 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2602 = x2599 + x2601;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2603 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2603 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2604 = x2603 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2605 = x2602 + x2604;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2606 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x2606 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2607 = x2606 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2608 = x2605 + x2607;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2609 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x2609 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2610 = x2609 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2611 = x2608 + x2610;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2612 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x2612 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2613 = x2612 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2614 = x2611 + x2613;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2615 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2615 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2616 = x2615 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2617 = x2614 + x2616;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2618 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2618 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2619 = x2618 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2620 = x2617 + x2619;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2621 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2621 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2622 = x2621 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2623 = x2620 + x2622;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2624 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2624 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2625 = x2624 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2626 = x2623 + x2625;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2627 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x2627 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2628 = x2627 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2629 = x2626 + x2628;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2630 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x2630 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2631 = x2630 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2632 = x2629 + x2631;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2633 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x2633 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2634 = x2633 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2635 = x2632 + x2634;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2636 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2636 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2637 = x2636 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2638 = x2635 + x2637;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2639 = x2560 - x2638;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2640 = x2639 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x2641 = Fp(x2640.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2641);
          reg = x2641;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2642 = args[2][26 * steps + ((cycle - 4) & mask)];
      assert(x2642 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2643 = args[2][27 * steps + ((cycle - 4) & mask)];
      assert(x2643 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2644 = args[2][28 * steps + ((cycle - 4) & mask)];
      assert(x2644 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2645 = args[2][29 * steps + ((cycle - 4) & mask)];
      assert(x2645 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2646 = args[2][30 * steps + ((cycle - 4) & mask)];
      assert(x2646 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2647 = args[2][31 * steps + ((cycle - 4) & mask)];
      assert(x2647 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2648 = args[2][32 * steps + ((cycle - 4) & mask)];
      assert(x2648 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2649 = args[2][33 * steps + ((cycle - 4) & mask)];
      assert(x2649 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2650 = args[2][34 * steps + ((cycle - 4) & mask)];
      assert(x2650 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2651 = args[2][35 * steps + ((cycle - 4) & mask)];
      assert(x2651 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2652 = args[2][36 * steps + ((cycle - 4) & mask)];
      assert(x2652 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2653 = args[2][37 * steps + ((cycle - 4) & mask)];
      assert(x2653 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2654 = args[2][38 * steps + ((cycle - 4) & mask)];
      assert(x2654 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2655 = args[2][39 * steps + ((cycle - 4) & mask)];
      assert(x2655 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2656 = args[2][40 * steps + ((cycle - 4) & mask)];
      assert(x2656 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2657 = args[2][41 * steps + ((cycle - 4) & mask)];
      assert(x2657 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2658 = args[2][42 * steps + ((cycle - 4) & mask)];
      assert(x2658 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2659 = args[2][43 * steps + ((cycle - 4) & mask)];
      assert(x2659 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2660 = args[2][44 * steps + ((cycle - 4) & mask)];
      assert(x2660 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2661 = args[2][45 * steps + ((cycle - 4) & mask)];
      assert(x2661 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2662 = args[2][46 * steps + ((cycle - 4) & mask)];
      assert(x2662 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2663 = args[2][47 * steps + ((cycle - 4) & mask)];
      assert(x2663 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2664 = args[2][48 * steps + ((cycle - 4) & mask)];
      assert(x2664 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2665 = args[2][49 * steps + ((cycle - 4) & mask)];
      assert(x2665 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2666 = args[2][50 * steps + ((cycle - 4) & mask)];
      assert(x2666 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2667 = args[2][51 * steps + ((cycle - 4) & mask)];
      assert(x2667 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2668 = args[2][52 * steps + ((cycle - 4) & mask)];
      assert(x2668 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2669 = args[2][53 * steps + ((cycle - 4) & mask)];
      assert(x2669 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2670 = args[2][54 * steps + ((cycle - 4) & mask)];
      assert(x2670 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2671 = args[2][55 * steps + ((cycle - 4) & mask)];
      assert(x2671 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2672 = args[2][56 * steps + ((cycle - 4) & mask)];
      assert(x2672 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2673 = args[2][57 * steps + ((cycle - 4) & mask)];
      assert(x2673 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2674 = x2643 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2675 = x2642 + x2674;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2676 = x2644 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2677 = x2675 + x2676;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2678 = x2645 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2679 = x2677 + x2678;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2680 = x2646 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2681 = x2679 + x2680;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2682 = x2647 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2683 = x2681 + x2682;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2684 = x2648 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2685 = x2683 + x2684;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2686 = x2649 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2687 = x2685 + x2686;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2688 = x2650 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2689 = x2687 + x2688;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2690 = x2651 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2691 = x2689 + x2690;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2692 = x2652 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2693 = x2691 + x2692;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2694 = x2653 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2695 = x2693 + x2694;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2696 = x2654 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2697 = x2695 + x2696;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2698 = x2655 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2699 = x2697 + x2698;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2700 = x2656 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2701 = x2699 + x2700;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2702 = x2657 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2703 = x2701 + x2702;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2704 = x2659 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2705 = x2658 + x2704;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2706 = x2660 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2707 = x2705 + x2706;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2708 = x2661 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2709 = x2707 + x2708;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2710 = x2662 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2711 = x2709 + x2710;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2712 = x2663 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2713 = x2711 + x2712;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2714 = x2664 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2715 = x2713 + x2714;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2716 = x2665 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2717 = x2715 + x2716;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2718 = x2666 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2719 = x2717 + x2718;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2720 = x2667 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2721 = x2719 + x2720;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2722 = x2668 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2723 = x2721 + x2722;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2724 = x2669 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2725 = x2723 + x2724;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2726 = x2670 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2727 = x2725 + x2726;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2728 = x2671 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2729 = x2727 + x2728;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2730 = x2672 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2731 = x2729 + x2730;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2732 = x2673 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2733 = x2731 + x2732;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2734 = args[2][26 * steps + ((cycle - 68) & mask)];
      assert(x2734 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2735 = args[2][27 * steps + ((cycle - 68) & mask)];
      assert(x2735 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2736 = args[2][28 * steps + ((cycle - 68) & mask)];
      assert(x2736 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2737 = args[2][29 * steps + ((cycle - 68) & mask)];
      assert(x2737 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2738 = args[2][30 * steps + ((cycle - 68) & mask)];
      assert(x2738 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2739 = args[2][31 * steps + ((cycle - 68) & mask)];
      assert(x2739 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2740 = args[2][32 * steps + ((cycle - 68) & mask)];
      assert(x2740 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2741 = args[2][33 * steps + ((cycle - 68) & mask)];
      assert(x2741 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2742 = args[2][34 * steps + ((cycle - 68) & mask)];
      assert(x2742 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2743 = args[2][35 * steps + ((cycle - 68) & mask)];
      assert(x2743 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2744 = args[2][36 * steps + ((cycle - 68) & mask)];
      assert(x2744 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2745 = args[2][37 * steps + ((cycle - 68) & mask)];
      assert(x2745 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2746 = args[2][38 * steps + ((cycle - 68) & mask)];
      assert(x2746 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2747 = args[2][39 * steps + ((cycle - 68) & mask)];
      assert(x2747 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2748 = args[2][40 * steps + ((cycle - 68) & mask)];
      assert(x2748 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2749 = args[2][41 * steps + ((cycle - 68) & mask)];
      assert(x2749 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2750 = args[2][42 * steps + ((cycle - 68) & mask)];
      assert(x2750 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2751 = args[2][43 * steps + ((cycle - 68) & mask)];
      assert(x2751 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2752 = args[2][44 * steps + ((cycle - 68) & mask)];
      assert(x2752 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2753 = args[2][45 * steps + ((cycle - 68) & mask)];
      assert(x2753 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2754 = args[2][46 * steps + ((cycle - 68) & mask)];
      assert(x2754 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2755 = args[2][47 * steps + ((cycle - 68) & mask)];
      assert(x2755 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2756 = args[2][48 * steps + ((cycle - 68) & mask)];
      assert(x2756 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2757 = args[2][49 * steps + ((cycle - 68) & mask)];
      assert(x2757 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2758 = args[2][50 * steps + ((cycle - 68) & mask)];
      assert(x2758 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2759 = args[2][51 * steps + ((cycle - 68) & mask)];
      assert(x2759 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2760 = args[2][52 * steps + ((cycle - 68) & mask)];
      assert(x2760 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2761 = args[2][53 * steps + ((cycle - 68) & mask)];
      assert(x2761 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2762 = args[2][54 * steps + ((cycle - 68) & mask)];
      assert(x2762 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2763 = args[2][55 * steps + ((cycle - 68) & mask)];
      assert(x2763 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2764 = args[2][56 * steps + ((cycle - 68) & mask)];
      assert(x2764 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2765 = args[2][57 * steps + ((cycle - 68) & mask)];
      assert(x2765 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2766 = x2735 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2767 = x2734 + x2766;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2768 = x2736 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2769 = x2767 + x2768;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2770 = x2737 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2771 = x2769 + x2770;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2772 = x2738 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2773 = x2771 + x2772;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2774 = x2739 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2775 = x2773 + x2774;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2776 = x2740 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2777 = x2775 + x2776;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2778 = x2741 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2779 = x2777 + x2778;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2780 = x2742 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2781 = x2779 + x2780;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2782 = x2743 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2783 = x2781 + x2782;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2784 = x2744 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2785 = x2783 + x2784;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2786 = x2745 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2787 = x2785 + x2786;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2788 = x2746 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2789 = x2787 + x2788;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2790 = x2747 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2791 = x2789 + x2790;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2792 = x2748 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2793 = x2791 + x2792;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2794 = x2749 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2795 = x2793 + x2794;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2796 = x2751 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2797 = x2750 + x2796;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2798 = x2752 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2799 = x2797 + x2798;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2800 = x2753 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2801 = x2799 + x2800;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2802 = x2754 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2803 = x2801 + x2802;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2804 = x2755 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2805 = x2803 + x2804;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2806 = x2756 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2807 = x2805 + x2806;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2808 = x2757 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2809 = x2807 + x2808;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2810 = x2758 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2811 = x2809 + x2810;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2812 = x2759 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2813 = x2811 + x2812;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2814 = x2760 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2815 = x2813 + x2814;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2816 = x2761 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2817 = x2815 + x2816;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2818 = x2762 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2819 = x2817 + x2818;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2820 = x2763 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2821 = x2819 + x2820;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2822 = x2764 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2823 = x2821 + x2822;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2824 = x2765 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2825 = x2823 + x2824;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x2826 = x2703 + x2795;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x2827 = x2733 + x2825;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2828 = Fp(x2826.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2828);
          reg = x2828;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2829 = Fp(x2826.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2830 = x2829 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2830);
          reg = x2830;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2831 = Fp(x2826.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2832 = x2831 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2832);
          reg = x2832;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2833 = Fp(x2826.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2834 = x2833 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2834);
          reg = x2834;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2835 = Fp(x2826.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2836 = x2835 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2836);
          reg = x2836;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2837 = Fp(x2826.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2838 = x2837 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2838);
          reg = x2838;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2839 = Fp(x2826.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2840 = x2839 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2840);
          reg = x2840;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2841 = Fp(x2826.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2842 = x2841 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2842);
          reg = x2842;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2843 = Fp(x2826.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2844 = x2843 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2844);
          reg = x2844;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2845 = Fp(x2826.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2846 = x2845 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2846);
          reg = x2846;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2847 = Fp(x2826.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2848 = x2847 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2848);
          reg = x2848;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2849 = Fp(x2826.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2850 = x2849 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2850);
          reg = x2850;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2851 = Fp(x2826.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2852 = x2851 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2852);
          reg = x2852;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2853 = Fp(x2826.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2854 = x2853 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2854);
          reg = x2854;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2855 = Fp(x2826.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2856 = x2855 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2856);
          reg = x2856;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2857 = Fp(x2826.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2858 = x2857 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2858);
          reg = x2858;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2859 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2859 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2860 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2860 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2861 = x2860 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2862 = x2859 + x2861;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2863 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2863 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2864 = x2863 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2865 = x2862 + x2864;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2866 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2866 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2867 = x2866 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2868 = x2865 + x2867;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2869 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2869 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2870 = x2869 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2871 = x2868 + x2870;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2872 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2872 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2873 = x2872 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2874 = x2871 + x2873;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2875 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x2875 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2876 = x2875 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2877 = x2874 + x2876;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2878 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x2878 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2879 = x2878 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2880 = x2877 + x2879;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2881 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x2881 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2882 = x2881 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2883 = x2880 + x2882;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2884 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x2884 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2885 = x2884 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2886 = x2883 + x2885;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2887 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x2887 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2888 = x2887 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2889 = x2886 + x2888;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2890 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x2890 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2891 = x2890 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2892 = x2889 + x2891;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2893 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x2893 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2894 = x2893 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2895 = x2892 + x2894;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2896 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x2896 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2897 = x2896 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2898 = x2895 + x2897;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2899 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x2899 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2900 = x2899 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2901 = x2898 + x2900;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2902 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x2902 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2903 = x2902 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2904 = x2901 + x2903;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2905 = x2826 - x2904;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2906 = x2905 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x2907 = Fp(x2906.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2907);
          reg = x2907;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x2908 = x2827 + x2906;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2909 = Fp(x2908.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2909);
          reg = x2909;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2910 = Fp(x2908.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2911 = x2910 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2911);
          reg = x2911;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2912 = Fp(x2908.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2913 = x2912 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2913);
          reg = x2913;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2914 = Fp(x2908.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2915 = x2914 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2915);
          reg = x2915;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2916 = Fp(x2908.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2917 = x2916 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2917);
          reg = x2917;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2918 = Fp(x2908.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2919 = x2918 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2919);
          reg = x2919;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2920 = Fp(x2908.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2921 = x2920 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2921);
          reg = x2921;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2922 = Fp(x2908.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2923 = x2922 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2923);
          reg = x2923;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2924 = Fp(x2908.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2925 = x2924 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2925);
          reg = x2925;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2926 = Fp(x2908.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2927 = x2926 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2927);
          reg = x2927;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2928 = Fp(x2908.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2929 = x2928 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2929);
          reg = x2929;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2930 = Fp(x2908.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2931 = x2930 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2931);
          reg = x2931;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2932 = Fp(x2908.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2933 = x2932 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2933);
          reg = x2933;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2934 = Fp(x2908.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2935 = x2934 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2935);
          reg = x2935;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2936 = Fp(x2908.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2937 = x2936 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2937);
          reg = x2937;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2938 = Fp(x2908.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2939 = x2938 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2939);
          reg = x2939;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2940 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x2940 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2941 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x2941 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2942 = x2941 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2943 = x2940 + x2942;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2944 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x2944 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2945 = x2944 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2946 = x2943 + x2945;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2947 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x2947 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2948 = x2947 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2949 = x2946 + x2948;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2950 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x2950 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2951 = x2950 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2952 = x2949 + x2951;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2953 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x2953 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2954 = x2953 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2955 = x2952 + x2954;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2956 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x2956 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2957 = x2956 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2958 = x2955 + x2957;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2959 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x2959 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2960 = x2959 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2961 = x2958 + x2960;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2962 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x2962 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2963 = x2962 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2964 = x2961 + x2963;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2965 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x2965 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2966 = x2965 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2967 = x2964 + x2966;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2968 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x2968 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2969 = x2968 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2970 = x2967 + x2969;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2971 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x2971 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2972 = x2971 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2973 = x2970 + x2972;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2974 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x2974 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2975 = x2974 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2976 = x2973 + x2975;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2977 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x2977 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2978 = x2977 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2979 = x2976 + x2978;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2980 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x2980 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2981 = x2980 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2982 = x2979 + x2981;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2983 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x2983 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2984 = x2983 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2985 = x2982 + x2984;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2986 = x2908 - x2985;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2987 = x2986 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x2988 = Fp(x2987.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2988);
          reg = x2988;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2989 = args[2][60 * steps + ((cycle - 4) & mask)];
      assert(x2989 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2990 = args[2][61 * steps + ((cycle - 4) & mask)];
      assert(x2990 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2991 = args[2][62 * steps + ((cycle - 4) & mask)];
      assert(x2991 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2992 = args[2][63 * steps + ((cycle - 4) & mask)];
      assert(x2992 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2993 = args[2][64 * steps + ((cycle - 4) & mask)];
      assert(x2993 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2994 = args[2][65 * steps + ((cycle - 4) & mask)];
      assert(x2994 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2995 = args[2][66 * steps + ((cycle - 4) & mask)];
      assert(x2995 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2996 = args[2][67 * steps + ((cycle - 4) & mask)];
      assert(x2996 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2997 = args[2][68 * steps + ((cycle - 4) & mask)];
      assert(x2997 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2998 = args[2][69 * steps + ((cycle - 4) & mask)];
      assert(x2998 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2999 = args[2][70 * steps + ((cycle - 4) & mask)];
      assert(x2999 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3000 = args[2][71 * steps + ((cycle - 4) & mask)];
      assert(x3000 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3001 = args[2][72 * steps + ((cycle - 4) & mask)];
      assert(x3001 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3002 = args[2][73 * steps + ((cycle - 4) & mask)];
      assert(x3002 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3003 = args[2][74 * steps + ((cycle - 4) & mask)];
      assert(x3003 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3004 = args[2][75 * steps + ((cycle - 4) & mask)];
      assert(x3004 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3005 = args[2][76 * steps + ((cycle - 4) & mask)];
      assert(x3005 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3006 = args[2][77 * steps + ((cycle - 4) & mask)];
      assert(x3006 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3007 = args[2][78 * steps + ((cycle - 4) & mask)];
      assert(x3007 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3008 = args[2][79 * steps + ((cycle - 4) & mask)];
      assert(x3008 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3009 = args[2][80 * steps + ((cycle - 4) & mask)];
      assert(x3009 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3010 = args[2][81 * steps + ((cycle - 4) & mask)];
      assert(x3010 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3011 = args[2][82 * steps + ((cycle - 4) & mask)];
      assert(x3011 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3012 = args[2][83 * steps + ((cycle - 4) & mask)];
      assert(x3012 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3013 = args[2][84 * steps + ((cycle - 4) & mask)];
      assert(x3013 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3014 = args[2][85 * steps + ((cycle - 4) & mask)];
      assert(x3014 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3015 = args[2][86 * steps + ((cycle - 4) & mask)];
      assert(x3015 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3016 = args[2][87 * steps + ((cycle - 4) & mask)];
      assert(x3016 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3017 = args[2][88 * steps + ((cycle - 4) & mask)];
      assert(x3017 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3018 = args[2][89 * steps + ((cycle - 4) & mask)];
      assert(x3018 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3019 = args[2][90 * steps + ((cycle - 4) & mask)];
      assert(x3019 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3020 = args[2][91 * steps + ((cycle - 4) & mask)];
      assert(x3020 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3021 = x2990 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3022 = x2989 + x3021;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3023 = x2991 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3024 = x3022 + x3023;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3025 = x2992 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3026 = x3024 + x3025;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3027 = x2993 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3028 = x3026 + x3027;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3029 = x2994 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3030 = x3028 + x3029;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3031 = x2995 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3032 = x3030 + x3031;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3033 = x2996 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3034 = x3032 + x3033;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3035 = x2997 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3036 = x3034 + x3035;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3037 = x2998 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3038 = x3036 + x3037;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3039 = x2999 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3040 = x3038 + x3039;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3041 = x3000 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3042 = x3040 + x3041;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3043 = x3001 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3044 = x3042 + x3043;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3045 = x3002 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3046 = x3044 + x3045;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3047 = x3003 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3048 = x3046 + x3047;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3049 = x3004 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3050 = x3048 + x3049;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3051 = x3006 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3052 = x3005 + x3051;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3053 = x3007 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3054 = x3052 + x3053;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3055 = x3008 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3056 = x3054 + x3055;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3057 = x3009 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3058 = x3056 + x3057;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3059 = x3010 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3060 = x3058 + x3059;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3061 = x3011 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3062 = x3060 + x3061;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3063 = x3012 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3064 = x3062 + x3063;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3065 = x3013 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3066 = x3064 + x3065;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3067 = x3014 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3068 = x3066 + x3067;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3069 = x3015 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3070 = x3068 + x3069;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3071 = x3016 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3072 = x3070 + x3071;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3073 = x3017 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3074 = x3072 + x3073;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3075 = x3018 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3076 = x3074 + x3075;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3077 = x3019 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3078 = x3076 + x3077;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3079 = x3020 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3080 = x3078 + x3079;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3081 = args[2][60 * steps + ((cycle - 68) & mask)];
      assert(x3081 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3082 = args[2][61 * steps + ((cycle - 68) & mask)];
      assert(x3082 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3083 = args[2][62 * steps + ((cycle - 68) & mask)];
      assert(x3083 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3084 = args[2][63 * steps + ((cycle - 68) & mask)];
      assert(x3084 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3085 = args[2][64 * steps + ((cycle - 68) & mask)];
      assert(x3085 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3086 = args[2][65 * steps + ((cycle - 68) & mask)];
      assert(x3086 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3087 = args[2][66 * steps + ((cycle - 68) & mask)];
      assert(x3087 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3088 = args[2][67 * steps + ((cycle - 68) & mask)];
      assert(x3088 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3089 = args[2][68 * steps + ((cycle - 68) & mask)];
      assert(x3089 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3090 = args[2][69 * steps + ((cycle - 68) & mask)];
      assert(x3090 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3091 = args[2][70 * steps + ((cycle - 68) & mask)];
      assert(x3091 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3092 = args[2][71 * steps + ((cycle - 68) & mask)];
      assert(x3092 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3093 = args[2][72 * steps + ((cycle - 68) & mask)];
      assert(x3093 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3094 = args[2][73 * steps + ((cycle - 68) & mask)];
      assert(x3094 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3095 = args[2][74 * steps + ((cycle - 68) & mask)];
      assert(x3095 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3096 = args[2][75 * steps + ((cycle - 68) & mask)];
      assert(x3096 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3097 = args[2][76 * steps + ((cycle - 68) & mask)];
      assert(x3097 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3098 = args[2][77 * steps + ((cycle - 68) & mask)];
      assert(x3098 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3099 = args[2][78 * steps + ((cycle - 68) & mask)];
      assert(x3099 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3100 = args[2][79 * steps + ((cycle - 68) & mask)];
      assert(x3100 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3101 = args[2][80 * steps + ((cycle - 68) & mask)];
      assert(x3101 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3102 = args[2][81 * steps + ((cycle - 68) & mask)];
      assert(x3102 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3103 = args[2][82 * steps + ((cycle - 68) & mask)];
      assert(x3103 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3104 = args[2][83 * steps + ((cycle - 68) & mask)];
      assert(x3104 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3105 = args[2][84 * steps + ((cycle - 68) & mask)];
      assert(x3105 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3106 = args[2][85 * steps + ((cycle - 68) & mask)];
      assert(x3106 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3107 = args[2][86 * steps + ((cycle - 68) & mask)];
      assert(x3107 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3108 = args[2][87 * steps + ((cycle - 68) & mask)];
      assert(x3108 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3109 = args[2][88 * steps + ((cycle - 68) & mask)];
      assert(x3109 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3110 = args[2][89 * steps + ((cycle - 68) & mask)];
      assert(x3110 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3111 = args[2][90 * steps + ((cycle - 68) & mask)];
      assert(x3111 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3112 = args[2][91 * steps + ((cycle - 68) & mask)];
      assert(x3112 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3113 = x3082 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3114 = x3081 + x3113;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3115 = x3083 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3116 = x3114 + x3115;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3117 = x3084 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3118 = x3116 + x3117;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3119 = x3085 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3120 = x3118 + x3119;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3121 = x3086 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3122 = x3120 + x3121;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3123 = x3087 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3124 = x3122 + x3123;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3125 = x3088 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3126 = x3124 + x3125;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3127 = x3089 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3128 = x3126 + x3127;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3129 = x3090 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3130 = x3128 + x3129;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3131 = x3091 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3132 = x3130 + x3131;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3133 = x3092 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3134 = x3132 + x3133;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3135 = x3093 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3136 = x3134 + x3135;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3137 = x3094 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3138 = x3136 + x3137;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3139 = x3095 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3140 = x3138 + x3139;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3141 = x3096 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3142 = x3140 + x3141;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3143 = x3098 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3144 = x3097 + x3143;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3145 = x3099 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3146 = x3144 + x3145;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3147 = x3100 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3148 = x3146 + x3147;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3149 = x3101 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3150 = x3148 + x3149;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3151 = x3102 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3152 = x3150 + x3151;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3153 = x3103 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3154 = x3152 + x3153;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3155 = x3104 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3156 = x3154 + x3155;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3157 = x3105 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3158 = x3156 + x3157;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3159 = x3106 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3160 = x3158 + x3159;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3161 = x3107 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3162 = x3160 + x3161;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3163 = x3108 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3164 = x3162 + x3163;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3165 = x3109 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3166 = x3164 + x3165;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3167 = x3110 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3168 = x3166 + x3167;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3169 = x3111 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3170 = x3168 + x3169;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3171 = x3112 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3172 = x3170 + x3171;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x3173 = x3050 + x3142;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x3174 = x3080 + x3172;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3175 = Fp(x3173.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3175);
          reg = x3175;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3176 = Fp(x3173.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3177 = x3176 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3177);
          reg = x3177;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3178 = Fp(x3173.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3179 = x3178 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3179);
          reg = x3179;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3180 = Fp(x3173.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3181 = x3180 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3181);
          reg = x3181;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3182 = Fp(x3173.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3183 = x3182 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3183);
          reg = x3183;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3184 = Fp(x3173.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3185 = x3184 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3185);
          reg = x3185;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3186 = Fp(x3173.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3187 = x3186 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3187);
          reg = x3187;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3188 = Fp(x3173.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3189 = x3188 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3189);
          reg = x3189;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3190 = Fp(x3173.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3191 = x3190 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3191);
          reg = x3191;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3192 = Fp(x3173.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3193 = x3192 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3193);
          reg = x3193;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3194 = Fp(x3173.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3195 = x3194 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3195);
          reg = x3195;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3196 = Fp(x3173.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3197 = x3196 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3197);
          reg = x3197;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3198 = Fp(x3173.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3199 = x3198 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3199);
          reg = x3199;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3200 = Fp(x3173.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3201 = x3200 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3201);
          reg = x3201;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3202 = Fp(x3173.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3203 = x3202 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3203);
          reg = x3203;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3204 = Fp(x3173.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3205 = x3204 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3205);
          reg = x3205;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3206 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x3206 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3207 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x3207 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3208 = x3207 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3209 = x3206 + x3208;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3210 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x3210 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3211 = x3210 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3212 = x3209 + x3211;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3213 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x3213 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3214 = x3213 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3215 = x3212 + x3214;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3216 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x3216 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3217 = x3216 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3218 = x3215 + x3217;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3219 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x3219 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3220 = x3219 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3221 = x3218 + x3220;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3222 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x3222 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3223 = x3222 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3224 = x3221 + x3223;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3225 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x3225 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3226 = x3225 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3227 = x3224 + x3226;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3228 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x3228 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3229 = x3228 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3230 = x3227 + x3229;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3231 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x3231 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3232 = x3231 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3233 = x3230 + x3232;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3234 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x3234 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3235 = x3234 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3236 = x3233 + x3235;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3237 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x3237 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3238 = x3237 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3239 = x3236 + x3238;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3240 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3240 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3241 = x3240 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3242 = x3239 + x3241;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3243 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3243 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3244 = x3243 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3245 = x3242 + x3244;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3246 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x3246 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3247 = x3246 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3248 = x3245 + x3247;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3249 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x3249 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3250 = x3249 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3251 = x3248 + x3250;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x3252 = x3173 - x3251;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x3253 = x3252 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x3254 = Fp(x3253.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3254);
          reg = x3254;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x3255 = x3174 + x3253;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3256 = Fp(x3255.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3256);
          reg = x3256;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3257 = Fp(x3255.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3258 = x3257 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3258);
          reg = x3258;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3259 = Fp(x3255.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3260 = x3259 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3260);
          reg = x3260;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3261 = Fp(x3255.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3262 = x3261 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3262);
          reg = x3262;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3263 = Fp(x3255.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3264 = x3263 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3264);
          reg = x3264;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3265 = Fp(x3255.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3266 = x3265 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3266);
          reg = x3266;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3267 = Fp(x3255.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3268 = x3267 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3268);
          reg = x3268;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3269 = Fp(x3255.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3270 = x3269 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3270);
          reg = x3270;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3271 = Fp(x3255.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3272 = x3271 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3272);
          reg = x3272;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3273 = Fp(x3255.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3274 = x3273 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3274);
          reg = x3274;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3275 = Fp(x3255.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3276 = x3275 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3276);
          reg = x3276;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3277 = Fp(x3255.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3278 = x3277 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3278);
          reg = x3278;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3279 = Fp(x3255.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3280 = x3279 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3280);
          reg = x3280;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3281 = Fp(x3255.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3282 = x3281 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3282);
          reg = x3282;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3283 = Fp(x3255.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3284 = x3283 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3284);
          reg = x3284;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3285 = Fp(x3255.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3286 = x3285 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3286);
          reg = x3286;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3287 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x3287 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3288 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x3288 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3289 = x3288 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3290 = x3287 + x3289;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3291 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3291 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3292 = x3291 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3293 = x3290 + x3292;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3294 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3294 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3295 = x3294 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3296 = x3293 + x3295;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3297 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3297 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3298 = x3297 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3299 = x3296 + x3298;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3300 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3300 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3301 = x3300 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3302 = x3299 + x3301;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3303 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3303 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3304 = x3303 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3305 = x3302 + x3304;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3306 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3306 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3307 = x3306 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3308 = x3305 + x3307;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3309 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3309 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3310 = x3309 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3311 = x3308 + x3310;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3312 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3312 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3313 = x3312 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3314 = x3311 + x3313;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3315 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x3315 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3316 = x3315 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3317 = x3314 + x3316;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3318 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3318 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3319 = x3318 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3320 = x3317 + x3319;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3321 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3321 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3322 = x3321 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3323 = x3320 + x3322;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3324 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x3324 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3325 = x3324 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3326 = x3323 + x3325;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3327 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x3327 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3328 = x3327 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3329 = x3326 + x3328;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3330 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x3330 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3331 = x3330 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3332 = x3329 + x3331;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x3333 = x3255 - x3332;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x3334 = x3333 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x3335 = Fp(x3334.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3335);
          reg = x3335;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3336 = x2884 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3337 = x2881 + x3336;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3338 = x2887 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3339 = x3337 + x3338;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3340 = x2890 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3341 = x3339 + x3340;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3342 = x2893 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3343 = x3341 + x3342;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3344 = x2896 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3345 = x3343 + x3344;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3346 = x2899 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3347 = x3345 + x3346;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3348 = x2902 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3349 = x3347 + x3348;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3350 = x2965 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3351 = x2962 + x3350;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3352 = x2968 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3353 = x3351 + x3352;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3354 = x2971 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3355 = x3353 + x3354;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3356 = x2974 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3357 = x3355 + x3356;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3358 = x2977 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3359 = x3357 + x3358;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3360 = x2980 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3361 = x3359 + x3360;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3362 = x2983 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3363 = x3361 + x3362;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3364 = x3231 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3365 = x3228 + x3364;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3366 = x3234 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3367 = x3365 + x3366;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3368 = x3237 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3369 = x3367 + x3368;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3370 = x3240 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3371 = x3369 + x3370;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3372 = x3243 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3373 = x3371 + x3372;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3374 = x3246 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3375 = x3373 + x3374;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3376 = x3249 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3377 = x3375 + x3376;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3378 = x3312 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3379 = x3309 + x3378;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3380 = x3315 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3381 = x3379 + x3380;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3382 = x3318 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3383 = x3381 + x3382;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3384 = x3321 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3385 = x3383 + x3384;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3386 = x3324 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3387 = x3385 + x3386;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3388 = x3327 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3389 = x3387 + x3388;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3390 = x3330 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3391 = x3389 + x3390;
      host_args.at(0) = x1358;
      host_args.at(1) = x2880;
      host_args.at(2) = x3349;
      host_args.at(3) = x2961;
      host_args.at(4) = x3363;
      host_args.at(5) = x3227;
      host_args.at(6) = x3377;
      host_args.at(7) = x3308;
      host_args.at(8) = x3391;
      host(ctx, "log", "%u> SHA_FINI: a = %w, e = %w", host_args.data(), 9, host_outs.data(), 0);
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3392 = args[0][17 * steps + ((cycle - 0) & mask)];
      assert(x3392 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":248:46)
      auto x3393 = x2961 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":248:36)
      auto x3394 = x3363 + x3393;
      // loc("zirgen/circuit/recursion/sha.cpp":248:71)
      auto x3395 = x2880 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":248:61)
      auto x3396 = x3349 + x3395;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3392);
        reg = x3392;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3394);
        reg = x3394;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3396);
        reg = x3396;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x3397 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x3397 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3398 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x3398 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3399 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x3399 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3400 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x3400 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3401 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x3401 != Fp::invalid());
        host_args.at(0) = x3397;
        host_args.at(1) = x3398;
        host_args.at(2) = x3399;
        host_args.at(3) = x3400;
        host_args.at(4) = x3401;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3402 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x3402 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":249:46)
      auto x3403 = x3308 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":249:36)
      auto x3404 = x3391 + x3403;
      // loc("zirgen/circuit/recursion/sha.cpp":249:71)
      auto x3405 = x3227 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":249:61)
      auto x3406 = x3377 + x3405;
      // loc("zirgen/circuit/recursion/wom.cpp":87:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3402);
        reg = x3402;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3404);
        reg = x3404;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3406);
        reg = x3406;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x3407 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x3407 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3408 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x3408 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3409 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x3409 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3410 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x3410 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3411 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x3411 != Fp::invalid());
        host_args.at(0) = x3407;
        host_args.at(1) = x3408;
        host_args.at(2) = x3409;
        host_args.at(3) = x3410;
        host_args.at(4) = x3411;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/sha_load(Reg)"("./zirgen/components/mux.h":49:25))
    auto x3412 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x3412 != Fp::invalid());
    if (x3412 != 0) {
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3413 = args[0][17 * steps + ((cycle - 0) & mask)];
      assert(x3413 != Fp::invalid());
      {
        host_args.at(0) = x3413;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3414 = host_outs.at(0);
        auto x3415 = host_outs.at(1);
        auto x3416 = host_outs.at(2);
        auto x3417 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3414);
          reg = x3414;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3415);
          reg = x3415;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3416);
          reg = x3416;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3417);
          reg = x3417;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3413);
        reg = x3413;
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3418 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x3418 != Fp::invalid());
      {
        host_args.at(0) = x3418;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3419 = host_outs.at(0);
        auto x3420 = host_outs.at(1);
        auto x3421 = host_outs.at(2);
        auto x3422 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3419);
          reg = x3419;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3420);
          reg = x3420;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3421);
          reg = x3421;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3422);
          reg = x3422;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3418);
        reg = x3418;
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x3423 = args[0][19 * steps + ((cycle - 0) & mask)];
      assert(x3423 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":177:27)
      auto x3424 = x307 - x3423;
      if (x3424 != 0) {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3425 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x3425 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":179:15)
        auto x3426 = x3425 * x238;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3427 = Fp(x3426.asUInt32() & x307.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3427);
            reg = x3427;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3428 = Fp(x3426.asUInt32() & x306.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3429 = x3428 * x294;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3429);
            reg = x3429;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3430 = Fp(x3426.asUInt32() & x304.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3431 = x3430 * x293;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3431);
            reg = x3431;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3432 = Fp(x3426.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3433 = x3432 * x292;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3433);
            reg = x3433;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3434 = Fp(x3426.asUInt32() & x291.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3435 = x3434 * x290;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3435);
            reg = x3435;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3436 = Fp(x3426.asUInt32() & x289.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3437 = x3436 * x288;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3437);
            reg = x3437;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3438 = Fp(x3426.asUInt32() & x287.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3439 = x3438 * x286;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3439);
            reg = x3439;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3440 = Fp(x3426.asUInt32() & x285.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3441 = x3440 * x284;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3441);
            reg = x3441;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3442 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x3442 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3443 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x3443 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3444 = x3443 * x306;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3445 = x3442 + x3444;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3446 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x3446 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3447 = x3446 * x304;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3448 = x3445 + x3447;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3449 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x3449 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3450 = x3449 * x300;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3451 = x3448 + x3450;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3452 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x3452 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3453 = x3452 * x291;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3454 = x3451 + x3453;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3455 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x3455 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3456 = x3455 * x289;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3457 = x3454 + x3456;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3458 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x3458 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3459 = x3458 * x287;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3460 = x3457 + x3459;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3461 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x3461 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3462 = x3461 * x285;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3463 = x3460 + x3462;
        // loc("zirgen/circuit/recursion/sha.cpp":106:16)
        auto x3464 = x3426 - x3463;
        // loc("zirgen/circuit/recursion/sha.cpp":106:15)
        auto x3465 = x3464 * x282;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3466 = Fp(x3465.asUInt32() & x307.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3466);
            reg = x3466;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3467 = Fp(x3465.asUInt32() & x306.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3468 = x3467 * x294;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3468);
            reg = x3468;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3469 = Fp(x3465.asUInt32() & x304.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3470 = x3469 * x293;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3470);
            reg = x3470;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3471 = Fp(x3465.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3472 = x3471 * x292;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3472);
            reg = x3472;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3473 = Fp(x3465.asUInt32() & x291.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3474 = x3473 * x290;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3474);
            reg = x3474;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3475 = Fp(x3465.asUInt32() & x289.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3476 = x3475 * x288;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3476);
            reg = x3476;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3477 = Fp(x3465.asUInt32() & x287.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3478 = x3477 * x286;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3478);
            reg = x3478;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3479 = Fp(x3465.asUInt32() & x285.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3480 = x3479 * x284;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3480);
            reg = x3480;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3481 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x3481 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3482 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x3482 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3483 = x3482 * x306;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3484 = x3481 + x3483;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3485 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x3485 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3486 = x3485 * x304;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3487 = x3484 + x3486;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3488 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x3488 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3489 = x3488 * x300;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3490 = x3487 + x3489;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3491 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x3491 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3492 = x3491 * x291;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3493 = x3490 + x3492;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3494 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x3494 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3495 = x3494 * x289;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3496 = x3493 + x3495;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3497 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x3497 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3498 = x3497 * x287;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3499 = x3496 + x3498;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3500 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x3500 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3501 = x3500 * x285;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3502 = x3499 + x3501;
        // loc("zirgen/circuit/recursion/sha.cpp":106:16)
        auto x3503 = x3465 - x3502;
        // loc("zirgen/circuit/recursion/sha.cpp":106:15)
        auto x3504 = x3503 * x282;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3505 = Fp(x3504.asUInt32() & x307.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3505);
            reg = x3505;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3506 = Fp(x3504.asUInt32() & x306.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3507 = x3506 * x294;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3507);
            reg = x3507;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3508 = Fp(x3504.asUInt32() & x304.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3509 = x3508 * x293;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3509);
            reg = x3509;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3510 = Fp(x3504.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3511 = x3510 * x292;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3511);
            reg = x3511;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3512 = Fp(x3504.asUInt32() & x291.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3513 = x3512 * x290;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3513);
            reg = x3513;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3514 = Fp(x3504.asUInt32() & x289.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3515 = x3514 * x288;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3515);
            reg = x3515;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3516 = Fp(x3504.asUInt32() & x287.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3517 = x3516 * x286;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3517);
            reg = x3517;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3518 = Fp(x3504.asUInt32() & x285.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3519 = x3518 * x284;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3519);
            reg = x3519;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3520 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x3520 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3521 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x3521 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3522 = x3521 * x306;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3523 = x3520 + x3522;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3524 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x3524 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3525 = x3524 * x304;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3526 = x3523 + x3525;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3527 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x3527 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3528 = x3527 * x300;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3529 = x3526 + x3528;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3530 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x3530 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3531 = x3530 * x291;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3532 = x3529 + x3531;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3533 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x3533 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3534 = x3533 * x289;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3535 = x3532 + x3534;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3536 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x3536 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3537 = x3536 * x287;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3538 = x3535 + x3537;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3539 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x3539 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3540 = x3539 * x285;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3541 = x3538 + x3540;
        // loc("zirgen/circuit/recursion/sha.cpp":106:16)
        auto x3542 = x3504 - x3541;
        // loc("zirgen/circuit/recursion/sha.cpp":106:15)
        auto x3543 = x3542 * x282;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3544 = Fp(x3543.asUInt32() & x307.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3544);
            reg = x3544;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3545 = Fp(x3543.asUInt32() & x306.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3546 = x3545 * x294;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3546);
            reg = x3546;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3547 = Fp(x3543.asUInt32() & x304.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3548 = x3547 * x293;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3548);
            reg = x3548;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3549 = Fp(x3543.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3550 = x3549 * x292;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3550);
            reg = x3550;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3551 = Fp(x3543.asUInt32() & x291.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3552 = x3551 * x290;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3552);
            reg = x3552;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3553 = Fp(x3543.asUInt32() & x289.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3554 = x3553 * x288;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3554);
            reg = x3554;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3555 = Fp(x3543.asUInt32() & x287.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3556 = x3555 * x286;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3556);
            reg = x3556;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3557 = Fp(x3543.asUInt32() & x285.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3558 = x3557 * x284;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3558);
            reg = x3558;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3559 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x3559 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3560 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3560 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3561 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x3561 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3562 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x3562 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":193:14)
        auto x3563 = x3559 + x3560;
        // loc("zirgen/circuit/recursion/sha.cpp":193:14)
        auto x3564 = x3563 + x3561;
        // loc("zirgen/circuit/recursion/sha.cpp":193:14)
        auto x3565 = x3564 + x3562;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":202:25)
          auto x3566 = x3565 - x304;
          // loc("zirgen/circuit/recursion/sha.cpp":202:25)
          auto x3567 = (x3566 == 0) ? Fp(1) : Fp(0);
          if (x3567 != 0) {
            // loc("./zirgen/components/bits.h":68:23)
            {
              auto& reg = args[2][9 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x308);
              reg = x308;
            }
          }
          // loc("zirgen/circuit/recursion/sha.cpp":204:21)
          auto x3568 = x307 - x3567;
          if (x3568 != 0) {
            // loc("./zirgen/components/bits.h":68:23)
            {
              auto& reg = args[2][9 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3565);
              reg = x3565;
            }
          }
        }
      }
      if (x3423 != 0) {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3569 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x3569 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x3570 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x3570 != Fp::invalid());
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3571 = Fp(x3569.asUInt32() & x307.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3571);
            reg = x3571;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3572 = Fp(x3569.asUInt32() & x306.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3573 = x3572 * x294;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3573);
            reg = x3573;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3574 = Fp(x3569.asUInt32() & x304.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3575 = x3574 * x293;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3575);
            reg = x3575;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3576 = Fp(x3569.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3577 = x3576 * x292;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3577);
            reg = x3577;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3578 = Fp(x3569.asUInt32() & x291.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3579 = x3578 * x290;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3579);
            reg = x3579;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3580 = Fp(x3569.asUInt32() & x289.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3581 = x3580 * x288;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3581);
            reg = x3581;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3582 = Fp(x3569.asUInt32() & x287.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3583 = x3582 * x286;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3583);
            reg = x3583;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3584 = Fp(x3569.asUInt32() & x285.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3585 = x3584 * x284;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3585);
            reg = x3585;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3586 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x3586 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3587 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x3587 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3588 = x3587 * x306;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3589 = x3586 + x3588;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3590 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x3590 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3591 = x3590 * x304;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3592 = x3589 + x3591;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3593 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x3593 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3594 = x3593 * x300;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3595 = x3592 + x3594;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3596 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x3596 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3597 = x3596 * x291;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3598 = x3595 + x3597;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3599 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x3599 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3600 = x3599 * x289;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3601 = x3598 + x3600;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3602 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x3602 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3603 = x3602 * x287;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3604 = x3601 + x3603;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3605 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x3605 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3606 = x3605 * x285;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3607 = x3604 + x3606;
        // loc("zirgen/circuit/recursion/sha.cpp":106:16)
        auto x3608 = x3569 - x3607;
        // loc("zirgen/circuit/recursion/sha.cpp":106:15)
        auto x3609 = x3608 * x282;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3610 = Fp(x3609.asUInt32() & x307.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3610);
            reg = x3610;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3611 = Fp(x3609.asUInt32() & x306.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3612 = x3611 * x294;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3612);
            reg = x3612;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3613 = Fp(x3609.asUInt32() & x304.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3614 = x3613 * x293;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3614);
            reg = x3614;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3615 = Fp(x3609.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3616 = x3615 * x292;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3616);
            reg = x3616;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3617 = Fp(x3609.asUInt32() & x291.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3618 = x3617 * x290;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3618);
            reg = x3618;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3619 = Fp(x3609.asUInt32() & x289.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3620 = x3619 * x288;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3620);
            reg = x3620;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3621 = Fp(x3609.asUInt32() & x287.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3622 = x3621 * x286;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3622);
            reg = x3622;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3623 = Fp(x3609.asUInt32() & x285.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3624 = x3623 * x284;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3624);
            reg = x3624;
          }
        }
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3625 = Fp(x3570.asUInt32() & x307.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3625);
            reg = x3625;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3626 = Fp(x3570.asUInt32() & x306.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3627 = x3626 * x294;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3627);
            reg = x3627;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3628 = Fp(x3570.asUInt32() & x304.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3629 = x3628 * x293;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3629);
            reg = x3629;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3630 = Fp(x3570.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3631 = x3630 * x292;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3631);
            reg = x3631;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3632 = Fp(x3570.asUInt32() & x291.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3633 = x3632 * x290;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3633);
            reg = x3633;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3634 = Fp(x3570.asUInt32() & x289.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3635 = x3634 * x288;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3635);
            reg = x3635;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3636 = Fp(x3570.asUInt32() & x287.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3637 = x3636 * x286;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3637);
            reg = x3637;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3638 = Fp(x3570.asUInt32() & x285.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3639 = x3638 * x284;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3639);
            reg = x3639;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3640 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x3640 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3641 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x3641 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3642 = x3641 * x306;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3643 = x3640 + x3642;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3644 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x3644 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3645 = x3644 * x304;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3646 = x3643 + x3645;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3647 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x3647 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3648 = x3647 * x300;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3649 = x3646 + x3648;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3650 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x3650 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3651 = x3650 * x291;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3652 = x3649 + x3651;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3653 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x3653 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3654 = x3653 * x289;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3655 = x3652 + x3654;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3656 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x3656 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3657 = x3656 * x287;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3658 = x3655 + x3657;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3659 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x3659 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3660 = x3659 * x285;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3661 = x3658 + x3660;
        // loc("zirgen/circuit/recursion/sha.cpp":106:16)
        auto x3662 = x3570 - x3661;
        // loc("zirgen/circuit/recursion/sha.cpp":106:15)
        auto x3663 = x3662 * x282;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3664 = Fp(x3663.asUInt32() & x307.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3664);
            reg = x3664;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3665 = Fp(x3663.asUInt32() & x306.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3666 = x3665 * x294;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3666);
            reg = x3666;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3667 = Fp(x3663.asUInt32() & x304.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3668 = x3667 * x293;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3668);
            reg = x3668;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3669 = Fp(x3663.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3670 = x3669 * x292;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3670);
            reg = x3670;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3671 = Fp(x3663.asUInt32() & x291.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3672 = x3671 * x290;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3672);
            reg = x3672;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3673 = Fp(x3663.asUInt32() & x289.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3674 = x3673 * x288;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3674);
            reg = x3674;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3675 = Fp(x3663.asUInt32() & x287.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3676 = x3675 * x286;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3676);
            reg = x3676;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3677 = Fp(x3663.asUInt32() & x285.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3678 = x3677 * x284;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3678);
            reg = x3678;
          }
        }
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3679 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x3679 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3680 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x3680 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3681 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x3681 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3682 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x3682 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3683 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x3683 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3684 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x3684 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3685 = args[2][100 * steps + ((cycle - 0) & mask)];
      assert(x3685 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3686 = args[2][101 * steps + ((cycle - 0) & mask)];
      assert(x3686 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3687 = args[2][102 * steps + ((cycle - 0) & mask)];
      assert(x3687 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3688 = args[2][103 * steps + ((cycle - 0) & mask)];
      assert(x3688 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3689 = args[2][104 * steps + ((cycle - 0) & mask)];
      assert(x3689 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3690 = args[2][105 * steps + ((cycle - 0) & mask)];
      assert(x3690 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3691 = args[2][106 * steps + ((cycle - 0) & mask)];
      assert(x3691 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3692 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x3692 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3693 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x3693 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3694 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x3694 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3695 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x3695 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3696 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x3696 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3697 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x3697 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3698 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x3698 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3699 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x3699 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3700 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x3700 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3701 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x3701 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3702 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x3702 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3703 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3703 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3704 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3704 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3705 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3705 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3706 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3706 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3707 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x3707 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3708 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x3708 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3709 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x3709 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3710 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3710 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3711 = x3680 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3712 = x3679 + x3711;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3713 = x3681 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3714 = x3712 + x3713;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3715 = x3682 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3716 = x3714 + x3715;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3717 = x3683 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3718 = x3716 + x3717;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3719 = x3684 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3720 = x3718 + x3719;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3721 = x3685 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3722 = x3720 + x3721;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3723 = x3686 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3724 = x3722 + x3723;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3725 = x3688 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3726 = x3687 + x3725;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3727 = x3689 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3728 = x3726 + x3727;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3729 = x3690 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3730 = x3728 + x3729;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3731 = x3691 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3732 = x3730 + x3731;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3733 = x3692 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3734 = x3732 + x3733;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3735 = x3693 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3736 = x3734 + x3735;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3737 = x3694 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3738 = x3736 + x3737;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3739 = x3696 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3740 = x3695 + x3739;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3741 = x3697 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3742 = x3740 + x3741;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3743 = x3698 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3744 = x3742 + x3743;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3745 = x3699 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3746 = x3744 + x3745;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3747 = x3700 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3748 = x3746 + x3747;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3749 = x3701 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3750 = x3748 + x3749;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3751 = x3702 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3752 = x3750 + x3751;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3753 = x3704 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3754 = x3703 + x3753;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3755 = x3705 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3756 = x3754 + x3755;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3757 = x3706 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3758 = x3756 + x3757;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3759 = x3707 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3760 = x3758 + x3759;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3761 = x3708 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3762 = x3760 + x3761;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3763 = x3709 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3764 = x3762 + x3763;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3765 = x3710 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3766 = x3764 + x3765;
      host_args.at(0) = x1358;
      host_args.at(1) = x3724;
      host_args.at(2) = x3738;
      host_args.at(3) = x3752;
      host_args.at(4) = x3766;
      host(ctx, "log", "%u> SHA_LOAD: w = %w", host_args.data(), 5, host_outs.data(), 0);
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3767 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x3767 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3768 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x3768 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3769 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x3769 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3770 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x3770 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3771 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x3771 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3772 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x3772 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3773 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x3773 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3774 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x3774 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3775 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x3775 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3776 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x3776 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3777 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x3777 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3778 = args[2][37 * steps + ((cycle - 1) & mask)];
      assert(x3778 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3779 = args[2][38 * steps + ((cycle - 1) & mask)];
      assert(x3779 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3780 = args[2][39 * steps + ((cycle - 1) & mask)];
      assert(x3780 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3781 = args[2][40 * steps + ((cycle - 1) & mask)];
      assert(x3781 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3782 = args[2][41 * steps + ((cycle - 1) & mask)];
      assert(x3782 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3783 = args[2][42 * steps + ((cycle - 1) & mask)];
      assert(x3783 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3784 = args[2][43 * steps + ((cycle - 1) & mask)];
      assert(x3784 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3785 = args[2][44 * steps + ((cycle - 1) & mask)];
      assert(x3785 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3786 = args[2][45 * steps + ((cycle - 1) & mask)];
      assert(x3786 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3787 = args[2][46 * steps + ((cycle - 1) & mask)];
      assert(x3787 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3788 = args[2][47 * steps + ((cycle - 1) & mask)];
      assert(x3788 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3789 = args[2][48 * steps + ((cycle - 1) & mask)];
      assert(x3789 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3790 = args[2][49 * steps + ((cycle - 1) & mask)];
      assert(x3790 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3791 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x3791 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3792 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x3792 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3793 = args[2][52 * steps + ((cycle - 1) & mask)];
      assert(x3793 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3794 = args[2][53 * steps + ((cycle - 1) & mask)];
      assert(x3794 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3795 = args[2][54 * steps + ((cycle - 1) & mask)];
      assert(x3795 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3796 = args[2][55 * steps + ((cycle - 1) & mask)];
      assert(x3796 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3797 = args[2][56 * steps + ((cycle - 1) & mask)];
      assert(x3797 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3798 = args[2][57 * steps + ((cycle - 1) & mask)];
      assert(x3798 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3799 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x3799 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3800 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x3800 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3801 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x3801 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3802 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x3802 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3803 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x3803 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3804 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x3804 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3805 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x3805 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3806 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x3806 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3807 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x3807 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3808 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x3808 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3809 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x3809 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3810 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x3810 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3811 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x3811 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3812 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x3812 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3813 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x3813 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3814 = args[2][41 * steps + ((cycle - 2) & mask)];
      assert(x3814 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3815 = args[2][42 * steps + ((cycle - 2) & mask)];
      assert(x3815 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3816 = args[2][43 * steps + ((cycle - 2) & mask)];
      assert(x3816 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3817 = args[2][44 * steps + ((cycle - 2) & mask)];
      assert(x3817 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3818 = args[2][45 * steps + ((cycle - 2) & mask)];
      assert(x3818 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3819 = args[2][46 * steps + ((cycle - 2) & mask)];
      assert(x3819 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3820 = args[2][47 * steps + ((cycle - 2) & mask)];
      assert(x3820 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3821 = args[2][48 * steps + ((cycle - 2) & mask)];
      assert(x3821 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3822 = args[2][49 * steps + ((cycle - 2) & mask)];
      assert(x3822 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3823 = args[2][50 * steps + ((cycle - 2) & mask)];
      assert(x3823 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3824 = args[2][51 * steps + ((cycle - 2) & mask)];
      assert(x3824 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3825 = args[2][52 * steps + ((cycle - 2) & mask)];
      assert(x3825 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3826 = args[2][53 * steps + ((cycle - 2) & mask)];
      assert(x3826 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3827 = args[2][54 * steps + ((cycle - 2) & mask)];
      assert(x3827 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3828 = args[2][55 * steps + ((cycle - 2) & mask)];
      assert(x3828 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3829 = args[2][56 * steps + ((cycle - 2) & mask)];
      assert(x3829 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3830 = args[2][57 * steps + ((cycle - 2) & mask)];
      assert(x3830 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3831 = args[2][26 * steps + ((cycle - 3) & mask)];
      assert(x3831 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3832 = args[2][27 * steps + ((cycle - 3) & mask)];
      assert(x3832 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3833 = args[2][28 * steps + ((cycle - 3) & mask)];
      assert(x3833 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3834 = args[2][29 * steps + ((cycle - 3) & mask)];
      assert(x3834 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3835 = args[2][30 * steps + ((cycle - 3) & mask)];
      assert(x3835 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3836 = args[2][31 * steps + ((cycle - 3) & mask)];
      assert(x3836 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3837 = args[2][32 * steps + ((cycle - 3) & mask)];
      assert(x3837 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3838 = args[2][33 * steps + ((cycle - 3) & mask)];
      assert(x3838 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3839 = args[2][34 * steps + ((cycle - 3) & mask)];
      assert(x3839 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3840 = args[2][35 * steps + ((cycle - 3) & mask)];
      assert(x3840 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3841 = args[2][36 * steps + ((cycle - 3) & mask)];
      assert(x3841 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3842 = args[2][37 * steps + ((cycle - 3) & mask)];
      assert(x3842 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3843 = args[2][38 * steps + ((cycle - 3) & mask)];
      assert(x3843 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3844 = args[2][39 * steps + ((cycle - 3) & mask)];
      assert(x3844 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3845 = args[2][40 * steps + ((cycle - 3) & mask)];
      assert(x3845 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3846 = args[2][41 * steps + ((cycle - 3) & mask)];
      assert(x3846 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3847 = args[2][42 * steps + ((cycle - 3) & mask)];
      assert(x3847 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3848 = args[2][43 * steps + ((cycle - 3) & mask)];
      assert(x3848 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3849 = args[2][44 * steps + ((cycle - 3) & mask)];
      assert(x3849 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3850 = args[2][45 * steps + ((cycle - 3) & mask)];
      assert(x3850 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3851 = args[2][46 * steps + ((cycle - 3) & mask)];
      assert(x3851 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3852 = args[2][47 * steps + ((cycle - 3) & mask)];
      assert(x3852 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3853 = args[2][48 * steps + ((cycle - 3) & mask)];
      assert(x3853 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3854 = args[2][49 * steps + ((cycle - 3) & mask)];
      assert(x3854 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3855 = args[2][50 * steps + ((cycle - 3) & mask)];
      assert(x3855 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3856 = args[2][51 * steps + ((cycle - 3) & mask)];
      assert(x3856 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3857 = args[2][52 * steps + ((cycle - 3) & mask)];
      assert(x3857 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3858 = args[2][53 * steps + ((cycle - 3) & mask)];
      assert(x3858 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3859 = args[2][54 * steps + ((cycle - 3) & mask)];
      assert(x3859 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3860 = args[2][55 * steps + ((cycle - 3) & mask)];
      assert(x3860 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3861 = args[2][56 * steps + ((cycle - 3) & mask)];
      assert(x3861 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3862 = args[2][57 * steps + ((cycle - 3) & mask)];
      assert(x3862 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3863 = args[2][26 * steps + ((cycle - 4) & mask)];
      assert(x3863 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3864 = args[2][27 * steps + ((cycle - 4) & mask)];
      assert(x3864 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3865 = args[2][28 * steps + ((cycle - 4) & mask)];
      assert(x3865 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3866 = args[2][29 * steps + ((cycle - 4) & mask)];
      assert(x3866 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3867 = args[2][30 * steps + ((cycle - 4) & mask)];
      assert(x3867 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3868 = args[2][31 * steps + ((cycle - 4) & mask)];
      assert(x3868 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3869 = args[2][32 * steps + ((cycle - 4) & mask)];
      assert(x3869 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3870 = args[2][33 * steps + ((cycle - 4) & mask)];
      assert(x3870 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3871 = args[2][34 * steps + ((cycle - 4) & mask)];
      assert(x3871 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3872 = args[2][35 * steps + ((cycle - 4) & mask)];
      assert(x3872 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3873 = args[2][36 * steps + ((cycle - 4) & mask)];
      assert(x3873 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3874 = args[2][37 * steps + ((cycle - 4) & mask)];
      assert(x3874 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3875 = args[2][38 * steps + ((cycle - 4) & mask)];
      assert(x3875 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3876 = args[2][39 * steps + ((cycle - 4) & mask)];
      assert(x3876 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3877 = args[2][40 * steps + ((cycle - 4) & mask)];
      assert(x3877 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3878 = args[2][41 * steps + ((cycle - 4) & mask)];
      assert(x3878 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3879 = args[2][42 * steps + ((cycle - 4) & mask)];
      assert(x3879 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3880 = args[2][43 * steps + ((cycle - 4) & mask)];
      assert(x3880 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3881 = args[2][44 * steps + ((cycle - 4) & mask)];
      assert(x3881 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3882 = args[2][45 * steps + ((cycle - 4) & mask)];
      assert(x3882 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3883 = args[2][46 * steps + ((cycle - 4) & mask)];
      assert(x3883 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3884 = args[2][47 * steps + ((cycle - 4) & mask)];
      assert(x3884 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3885 = args[2][48 * steps + ((cycle - 4) & mask)];
      assert(x3885 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3886 = args[2][49 * steps + ((cycle - 4) & mask)];
      assert(x3886 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3887 = args[2][50 * steps + ((cycle - 4) & mask)];
      assert(x3887 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3888 = args[2][51 * steps + ((cycle - 4) & mask)];
      assert(x3888 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3889 = args[2][52 * steps + ((cycle - 4) & mask)];
      assert(x3889 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3890 = args[2][53 * steps + ((cycle - 4) & mask)];
      assert(x3890 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3891 = args[2][54 * steps + ((cycle - 4) & mask)];
      assert(x3891 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3892 = args[2][55 * steps + ((cycle - 4) & mask)];
      assert(x3892 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3893 = args[2][56 * steps + ((cycle - 4) & mask)];
      assert(x3893 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3894 = args[2][57 * steps + ((cycle - 4) & mask)];
      assert(x3894 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3895 = args[2][60 * steps + ((cycle - 1) & mask)];
      assert(x3895 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3896 = args[2][61 * steps + ((cycle - 1) & mask)];
      assert(x3896 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3897 = args[2][62 * steps + ((cycle - 1) & mask)];
      assert(x3897 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3898 = args[2][63 * steps + ((cycle - 1) & mask)];
      assert(x3898 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3899 = args[2][64 * steps + ((cycle - 1) & mask)];
      assert(x3899 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3900 = args[2][65 * steps + ((cycle - 1) & mask)];
      assert(x3900 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3901 = args[2][66 * steps + ((cycle - 1) & mask)];
      assert(x3901 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3902 = args[2][67 * steps + ((cycle - 1) & mask)];
      assert(x3902 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3903 = args[2][68 * steps + ((cycle - 1) & mask)];
      assert(x3903 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3904 = args[2][69 * steps + ((cycle - 1) & mask)];
      assert(x3904 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3905 = args[2][70 * steps + ((cycle - 1) & mask)];
      assert(x3905 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3906 = args[2][71 * steps + ((cycle - 1) & mask)];
      assert(x3906 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3907 = args[2][72 * steps + ((cycle - 1) & mask)];
      assert(x3907 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3908 = args[2][73 * steps + ((cycle - 1) & mask)];
      assert(x3908 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3909 = args[2][74 * steps + ((cycle - 1) & mask)];
      assert(x3909 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3910 = args[2][75 * steps + ((cycle - 1) & mask)];
      assert(x3910 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3911 = args[2][76 * steps + ((cycle - 1) & mask)];
      assert(x3911 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3912 = args[2][77 * steps + ((cycle - 1) & mask)];
      assert(x3912 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3913 = args[2][78 * steps + ((cycle - 1) & mask)];
      assert(x3913 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3914 = args[2][79 * steps + ((cycle - 1) & mask)];
      assert(x3914 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3915 = args[2][80 * steps + ((cycle - 1) & mask)];
      assert(x3915 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3916 = args[2][81 * steps + ((cycle - 1) & mask)];
      assert(x3916 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3917 = args[2][82 * steps + ((cycle - 1) & mask)];
      assert(x3917 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3918 = args[2][83 * steps + ((cycle - 1) & mask)];
      assert(x3918 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3919 = args[2][84 * steps + ((cycle - 1) & mask)];
      assert(x3919 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3920 = args[2][85 * steps + ((cycle - 1) & mask)];
      assert(x3920 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3921 = args[2][86 * steps + ((cycle - 1) & mask)];
      assert(x3921 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3922 = args[2][87 * steps + ((cycle - 1) & mask)];
      assert(x3922 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3923 = args[2][88 * steps + ((cycle - 1) & mask)];
      assert(x3923 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3924 = args[2][89 * steps + ((cycle - 1) & mask)];
      assert(x3924 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3925 = args[2][90 * steps + ((cycle - 1) & mask)];
      assert(x3925 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3926 = args[2][91 * steps + ((cycle - 1) & mask)];
      assert(x3926 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3927 = args[2][60 * steps + ((cycle - 2) & mask)];
      assert(x3927 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3928 = args[2][61 * steps + ((cycle - 2) & mask)];
      assert(x3928 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3929 = args[2][62 * steps + ((cycle - 2) & mask)];
      assert(x3929 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3930 = args[2][63 * steps + ((cycle - 2) & mask)];
      assert(x3930 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3931 = args[2][64 * steps + ((cycle - 2) & mask)];
      assert(x3931 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3932 = args[2][65 * steps + ((cycle - 2) & mask)];
      assert(x3932 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3933 = args[2][66 * steps + ((cycle - 2) & mask)];
      assert(x3933 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3934 = args[2][67 * steps + ((cycle - 2) & mask)];
      assert(x3934 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3935 = args[2][68 * steps + ((cycle - 2) & mask)];
      assert(x3935 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3936 = args[2][69 * steps + ((cycle - 2) & mask)];
      assert(x3936 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3937 = args[2][70 * steps + ((cycle - 2) & mask)];
      assert(x3937 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3938 = args[2][71 * steps + ((cycle - 2) & mask)];
      assert(x3938 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3939 = args[2][72 * steps + ((cycle - 2) & mask)];
      assert(x3939 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3940 = args[2][73 * steps + ((cycle - 2) & mask)];
      assert(x3940 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3941 = args[2][74 * steps + ((cycle - 2) & mask)];
      assert(x3941 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3942 = args[2][75 * steps + ((cycle - 2) & mask)];
      assert(x3942 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3943 = args[2][76 * steps + ((cycle - 2) & mask)];
      assert(x3943 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3944 = args[2][77 * steps + ((cycle - 2) & mask)];
      assert(x3944 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3945 = args[2][78 * steps + ((cycle - 2) & mask)];
      assert(x3945 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3946 = args[2][79 * steps + ((cycle - 2) & mask)];
      assert(x3946 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3947 = args[2][80 * steps + ((cycle - 2) & mask)];
      assert(x3947 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3948 = args[2][81 * steps + ((cycle - 2) & mask)];
      assert(x3948 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3949 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x3949 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3950 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x3950 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3951 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x3951 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3952 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x3952 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3953 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x3953 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3954 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x3954 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3955 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x3955 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3956 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x3956 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3957 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x3957 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3958 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x3958 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3959 = args[2][60 * steps + ((cycle - 3) & mask)];
      assert(x3959 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3960 = args[2][61 * steps + ((cycle - 3) & mask)];
      assert(x3960 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3961 = args[2][62 * steps + ((cycle - 3) & mask)];
      assert(x3961 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3962 = args[2][63 * steps + ((cycle - 3) & mask)];
      assert(x3962 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3963 = args[2][64 * steps + ((cycle - 3) & mask)];
      assert(x3963 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3964 = args[2][65 * steps + ((cycle - 3) & mask)];
      assert(x3964 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3965 = args[2][66 * steps + ((cycle - 3) & mask)];
      assert(x3965 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3966 = args[2][67 * steps + ((cycle - 3) & mask)];
      assert(x3966 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3967 = args[2][68 * steps + ((cycle - 3) & mask)];
      assert(x3967 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3968 = args[2][69 * steps + ((cycle - 3) & mask)];
      assert(x3968 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3969 = args[2][70 * steps + ((cycle - 3) & mask)];
      assert(x3969 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3970 = args[2][71 * steps + ((cycle - 3) & mask)];
      assert(x3970 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3971 = args[2][72 * steps + ((cycle - 3) & mask)];
      assert(x3971 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3972 = args[2][73 * steps + ((cycle - 3) & mask)];
      assert(x3972 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3973 = args[2][74 * steps + ((cycle - 3) & mask)];
      assert(x3973 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3974 = args[2][75 * steps + ((cycle - 3) & mask)];
      assert(x3974 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3975 = args[2][76 * steps + ((cycle - 3) & mask)];
      assert(x3975 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3976 = args[2][77 * steps + ((cycle - 3) & mask)];
      assert(x3976 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3977 = args[2][78 * steps + ((cycle - 3) & mask)];
      assert(x3977 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3978 = args[2][79 * steps + ((cycle - 3) & mask)];
      assert(x3978 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3979 = args[2][80 * steps + ((cycle - 3) & mask)];
      assert(x3979 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3980 = args[2][81 * steps + ((cycle - 3) & mask)];
      assert(x3980 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3981 = args[2][82 * steps + ((cycle - 3) & mask)];
      assert(x3981 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3982 = args[2][83 * steps + ((cycle - 3) & mask)];
      assert(x3982 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3983 = args[2][84 * steps + ((cycle - 3) & mask)];
      assert(x3983 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3984 = args[2][85 * steps + ((cycle - 3) & mask)];
      assert(x3984 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3985 = args[2][86 * steps + ((cycle - 3) & mask)];
      assert(x3985 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3986 = args[2][87 * steps + ((cycle - 3) & mask)];
      assert(x3986 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3987 = args[2][88 * steps + ((cycle - 3) & mask)];
      assert(x3987 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3988 = args[2][89 * steps + ((cycle - 3) & mask)];
      assert(x3988 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3989 = args[2][90 * steps + ((cycle - 3) & mask)];
      assert(x3989 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3990 = args[2][91 * steps + ((cycle - 3) & mask)];
      assert(x3990 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3991 = args[2][60 * steps + ((cycle - 4) & mask)];
      assert(x3991 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3992 = args[2][61 * steps + ((cycle - 4) & mask)];
      assert(x3992 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3993 = args[2][62 * steps + ((cycle - 4) & mask)];
      assert(x3993 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3994 = args[2][63 * steps + ((cycle - 4) & mask)];
      assert(x3994 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3995 = args[2][64 * steps + ((cycle - 4) & mask)];
      assert(x3995 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3996 = args[2][65 * steps + ((cycle - 4) & mask)];
      assert(x3996 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3997 = args[2][66 * steps + ((cycle - 4) & mask)];
      assert(x3997 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3998 = args[2][67 * steps + ((cycle - 4) & mask)];
      assert(x3998 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3999 = args[2][68 * steps + ((cycle - 4) & mask)];
      assert(x3999 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4000 = args[2][69 * steps + ((cycle - 4) & mask)];
      assert(x4000 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4001 = args[2][70 * steps + ((cycle - 4) & mask)];
      assert(x4001 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4002 = args[2][71 * steps + ((cycle - 4) & mask)];
      assert(x4002 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4003 = args[2][72 * steps + ((cycle - 4) & mask)];
      assert(x4003 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4004 = args[2][73 * steps + ((cycle - 4) & mask)];
      assert(x4004 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4005 = args[2][74 * steps + ((cycle - 4) & mask)];
      assert(x4005 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4006 = args[2][75 * steps + ((cycle - 4) & mask)];
      assert(x4006 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4007 = args[2][76 * steps + ((cycle - 4) & mask)];
      assert(x4007 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4008 = args[2][77 * steps + ((cycle - 4) & mask)];
      assert(x4008 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4009 = args[2][78 * steps + ((cycle - 4) & mask)];
      assert(x4009 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4010 = args[2][79 * steps + ((cycle - 4) & mask)];
      assert(x4010 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4011 = args[2][80 * steps + ((cycle - 4) & mask)];
      assert(x4011 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4012 = args[2][81 * steps + ((cycle - 4) & mask)];
      assert(x4012 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4013 = args[2][82 * steps + ((cycle - 4) & mask)];
      assert(x4013 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4014 = args[2][83 * steps + ((cycle - 4) & mask)];
      assert(x4014 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4015 = args[2][84 * steps + ((cycle - 4) & mask)];
      assert(x4015 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4016 = args[2][85 * steps + ((cycle - 4) & mask)];
      assert(x4016 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4017 = args[2][86 * steps + ((cycle - 4) & mask)];
      assert(x4017 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4018 = args[2][87 * steps + ((cycle - 4) & mask)];
      assert(x4018 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4019 = args[2][88 * steps + ((cycle - 4) & mask)];
      assert(x4019 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4020 = args[2][89 * steps + ((cycle - 4) & mask)];
      assert(x4020 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4021 = args[2][90 * steps + ((cycle - 4) & mask)];
      assert(x4021 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4022 = args[2][91 * steps + ((cycle - 4) & mask)];
      assert(x4022 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x4023 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x4023 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x4024 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4024 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4025 = x3780 + x3789;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4026 = x3780 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4027 = x4026 * x3789;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4028 = x4025 - x4027;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4029 = x3781 + x3790;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4030 = x3781 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4031 = x4030 * x3790;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4032 = x4029 - x4031;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4033 = x3782 + x3791;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4034 = x3782 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4035 = x4034 * x3791;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4036 = x4033 - x4035;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4037 = x3783 + x3792;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4038 = x3783 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4039 = x4038 * x3792;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4040 = x4037 - x4039;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4041 = x3784 + x3793;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4042 = x3784 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4043 = x4042 * x3793;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4044 = x4041 - x4043;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4045 = x3785 + x3794;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4046 = x3785 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4047 = x4046 * x3794;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4048 = x4045 - x4047;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4049 = x3786 + x3795;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4050 = x3786 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4051 = x4050 * x3795;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4052 = x4049 - x4051;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4053 = x3787 + x3796;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4054 = x3787 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4055 = x4054 * x3796;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4056 = x4053 - x4055;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4057 = x3788 + x3797;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4058 = x3788 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4059 = x4058 * x3797;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4060 = x4057 - x4059;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4061 = x3789 + x3798;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4062 = x3789 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4063 = x4062 * x3798;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4064 = x4061 - x4063;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4065 = x3790 + x3767;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4066 = x3790 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4067 = x4066 * x3767;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4068 = x4065 - x4067;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4069 = x3791 + x3768;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4070 = x3791 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4071 = x4070 * x3768;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4072 = x4069 - x4071;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4073 = x3792 + x3769;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4074 = x3792 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4075 = x4074 * x3769;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4076 = x4073 - x4075;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4077 = x3793 + x3770;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4078 = x3793 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4079 = x4078 * x3770;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4080 = x4077 - x4079;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4081 = x3794 + x3771;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4082 = x3794 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4083 = x4082 * x3771;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4084 = x4081 - x4083;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4085 = x3795 + x3772;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4086 = x3795 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4087 = x4086 * x3772;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4088 = x4085 - x4087;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4089 = x3796 + x3773;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4090 = x3796 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4091 = x4090 * x3773;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4092 = x4089 - x4091;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4093 = x3797 + x3774;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4094 = x3797 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4095 = x4094 * x3774;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4096 = x4093 - x4095;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4097 = x3798 + x3775;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4098 = x3798 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4099 = x4098 * x3775;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4100 = x4097 - x4099;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4101 = x3767 + x3776;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4102 = x3767 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4103 = x4102 * x3776;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4104 = x4101 - x4103;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4105 = x3768 + x3777;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4106 = x3768 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4107 = x4106 * x3777;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4108 = x4105 - x4107;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4109 = x3769 + x3778;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4110 = x3769 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4111 = x4110 * x3778;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4112 = x4109 - x4111;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4113 = x3770 + x3779;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4114 = x3770 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4115 = x4114 * x3779;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4116 = x4113 - x4115;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4117 = x3771 + x3780;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4118 = x3771 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4119 = x4118 * x3780;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4120 = x4117 - x4119;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4121 = x3772 + x3781;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4122 = x3772 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4123 = x4122 * x3781;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4124 = x4121 - x4123;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4125 = x3773 + x3782;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4126 = x3773 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4127 = x4126 * x3782;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4128 = x4125 - x4127;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4129 = x3774 + x3783;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4130 = x3774 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4131 = x4130 * x3783;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4132 = x4129 - x4131;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4133 = x3775 + x3784;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4134 = x3775 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4135 = x4134 * x3784;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4136 = x4133 - x4135;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4137 = x3776 + x3785;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4138 = x3776 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4139 = x4138 * x3785;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4140 = x4137 - x4139;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4141 = x3777 + x3786;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4142 = x3777 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4143 = x4142 * x3786;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4144 = x4141 - x4143;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4145 = x3778 + x3787;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4146 = x3778 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4147 = x4146 * x3787;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4148 = x4145 - x4147;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4149 = x3779 + x3788;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4150 = x3779 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4151 = x4150 * x3788;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4152 = x4149 - x4151;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4153 = x3769 + x4028;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4154 = x4110 * x4028;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4155 = x4153 - x4154;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4156 = x3770 + x4032;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4157 = x4114 * x4032;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4158 = x4156 - x4157;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4159 = x3771 + x4036;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4160 = x4118 * x4036;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4161 = x4159 - x4160;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4162 = x3772 + x4040;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4163 = x4122 * x4040;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4164 = x4162 - x4163;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4165 = x3773 + x4044;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4166 = x4126 * x4044;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4167 = x4165 - x4166;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4168 = x3774 + x4048;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4169 = x4130 * x4048;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4170 = x4168 - x4169;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4171 = x3775 + x4052;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4172 = x4134 * x4052;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4173 = x4171 - x4172;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4174 = x3776 + x4056;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4175 = x4138 * x4056;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4176 = x4174 - x4175;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4177 = x3777 + x4060;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4178 = x4142 * x4060;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4179 = x4177 - x4178;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4180 = x3778 + x4064;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4181 = x4146 * x4064;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4182 = x4180 - x4181;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4183 = x3779 + x4068;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4184 = x4150 * x4068;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4185 = x4183 - x4184;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4186 = x3780 + x4072;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4187 = x4026 * x4072;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4188 = x4186 - x4187;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4189 = x3781 + x4076;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4190 = x4030 * x4076;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4191 = x4189 - x4190;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4192 = x3782 + x4080;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4193 = x4034 * x4080;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4194 = x4192 - x4193;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4195 = x3783 + x4084;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4196 = x4038 * x4084;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4197 = x4195 - x4196;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4198 = x3784 + x4088;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4199 = x4042 * x4088;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4200 = x4198 - x4199;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4201 = x3785 + x4092;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4202 = x4046 * x4092;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4203 = x4201 - x4202;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4204 = x3786 + x4096;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4205 = x4050 * x4096;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4206 = x4204 - x4205;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4207 = x3787 + x4100;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4208 = x4054 * x4100;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4209 = x4207 - x4208;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4210 = x3788 + x4104;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4211 = x4058 * x4104;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4212 = x4210 - x4211;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4213 = x3789 + x4108;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4214 = x4062 * x4108;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4215 = x4213 - x4214;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4216 = x3790 + x4112;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4217 = x4066 * x4112;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4218 = x4216 - x4217;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4219 = x3791 + x4116;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4220 = x4070 * x4116;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4221 = x4219 - x4220;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4222 = x3792 + x4120;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4223 = x4074 * x4120;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4224 = x4222 - x4223;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4225 = x3793 + x4124;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4226 = x4078 * x4124;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4227 = x4225 - x4226;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4228 = x3794 + x4128;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4229 = x4082 * x4128;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4230 = x4228 - x4229;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4231 = x3795 + x4132;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4232 = x4086 * x4132;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4233 = x4231 - x4232;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4234 = x3796 + x4136;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4235 = x4090 * x4136;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4236 = x4234 - x4235;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4237 = x3797 + x4140;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4238 = x4094 * x4140;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4239 = x4237 - x4238;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4240 = x3798 + x4144;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4241 = x4098 * x4144;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4242 = x4240 - x4241;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4243 = x3767 + x4148;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4244 = x4102 * x4148;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4245 = x4243 - x4244;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4246 = x3768 + x4152;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4247 = x4106 * x4152;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4248 = x4246 - x4247;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4249 = x3906 + x3920;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4250 = x3906 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4251 = x4250 * x3920;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4252 = x4249 - x4251;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4253 = x3907 + x3921;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4254 = x3907 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4255 = x4254 * x3921;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4256 = x4253 - x4255;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4257 = x3908 + x3922;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4258 = x3908 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4259 = x4258 * x3922;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4260 = x4257 - x4259;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4261 = x3909 + x3923;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4262 = x3909 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4263 = x4262 * x3923;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4264 = x4261 - x4263;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4265 = x3910 + x3924;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4266 = x3910 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4267 = x4266 * x3924;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4268 = x4265 - x4267;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4269 = x3911 + x3925;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4270 = x3911 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4271 = x4270 * x3925;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4272 = x4269 - x4271;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4273 = x3912 + x3926;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4274 = x3912 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4275 = x4274 * x3926;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4276 = x4273 - x4275;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4277 = x3913 + x3895;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4278 = x3913 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4279 = x4278 * x3895;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4280 = x4277 - x4279;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4281 = x3914 + x3896;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4282 = x3914 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4283 = x4282 * x3896;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4284 = x4281 - x4283;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4285 = x3915 + x3897;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4286 = x3915 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4287 = x4286 * x3897;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4288 = x4285 - x4287;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4289 = x3916 + x3898;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4290 = x3916 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4291 = x4290 * x3898;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4292 = x4289 - x4291;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4293 = x3917 + x3899;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4294 = x3917 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4295 = x4294 * x3899;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4296 = x4293 - x4295;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4297 = x3918 + x3900;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4298 = x3918 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4299 = x4298 * x3900;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4300 = x4297 - x4299;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4301 = x3919 + x3901;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4302 = x3919 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4303 = x4302 * x3901;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4304 = x4301 - x4303;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4305 = x3920 + x3902;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4306 = x3920 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4307 = x4306 * x3902;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4308 = x4305 - x4307;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4309 = x3921 + x3903;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4310 = x3921 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4311 = x4310 * x3903;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4312 = x4309 - x4311;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4313 = x3922 + x3904;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4314 = x3922 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4315 = x4314 * x3904;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4316 = x4313 - x4315;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4317 = x3923 + x3905;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4318 = x3923 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4319 = x4318 * x3905;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4320 = x4317 - x4319;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4321 = x3924 + x3906;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4322 = x3924 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4323 = x4322 * x3906;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4324 = x4321 - x4323;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4325 = x3925 + x3907;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4326 = x3925 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4327 = x4326 * x3907;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4328 = x4325 - x4327;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4329 = x3926 + x3908;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4330 = x3926 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4331 = x4330 * x3908;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4332 = x4329 - x4331;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4333 = x3895 + x3909;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4334 = x3895 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4335 = x4334 * x3909;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4336 = x4333 - x4335;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4337 = x3896 + x3910;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4338 = x3896 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4339 = x4338 * x3910;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4340 = x4337 - x4339;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4341 = x3897 + x3911;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4342 = x3897 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4343 = x4342 * x3911;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4344 = x4341 - x4343;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4345 = x3898 + x3912;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4346 = x3898 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4347 = x4346 * x3912;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4348 = x4345 - x4347;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4349 = x3899 + x3913;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4350 = x3899 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4351 = x4350 * x3913;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4352 = x4349 - x4351;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4353 = x3900 + x3914;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4354 = x3900 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4355 = x4354 * x3914;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4356 = x4353 - x4355;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4357 = x3901 + x3915;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4358 = x3901 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4359 = x4358 * x3915;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4360 = x4357 - x4359;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4361 = x3902 + x3916;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4362 = x3902 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4363 = x4362 * x3916;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4364 = x4361 - x4363;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4365 = x3903 + x3917;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4366 = x3903 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4367 = x4366 * x3917;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4368 = x4365 - x4367;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4369 = x3904 + x3918;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4370 = x3904 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4371 = x4370 * x3918;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4372 = x4369 - x4371;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4373 = x3905 + x3919;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4374 = x3905 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4375 = x4374 * x3919;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4376 = x4373 - x4375;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4377 = x3901 + x4252;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4378 = x4358 * x4252;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4379 = x4377 - x4378;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4380 = x3902 + x4256;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4381 = x4362 * x4256;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4382 = x4380 - x4381;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4383 = x3903 + x4260;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4384 = x4366 * x4260;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4385 = x4383 - x4384;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4386 = x3904 + x4264;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4387 = x4370 * x4264;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4388 = x4386 - x4387;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4389 = x3905 + x4268;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4390 = x4374 * x4268;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4391 = x4389 - x4390;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4392 = x3906 + x4272;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4393 = x4250 * x4272;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4394 = x4392 - x4393;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4395 = x3907 + x4276;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4396 = x4254 * x4276;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4397 = x4395 - x4396;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4398 = x3908 + x4280;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4399 = x4258 * x4280;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4400 = x4398 - x4399;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4401 = x3909 + x4284;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4402 = x4262 * x4284;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4403 = x4401 - x4402;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4404 = x3910 + x4288;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4405 = x4266 * x4288;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4406 = x4404 - x4405;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4407 = x3911 + x4292;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4408 = x4270 * x4292;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4409 = x4407 - x4408;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4410 = x3912 + x4296;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4411 = x4274 * x4296;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4412 = x4410 - x4411;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4413 = x3913 + x4300;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4414 = x4278 * x4300;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4415 = x4413 - x4414;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4416 = x3914 + x4304;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4417 = x4282 * x4304;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4418 = x4416 - x4417;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4419 = x3915 + x4308;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4420 = x4286 * x4308;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4421 = x4419 - x4420;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4422 = x3916 + x4312;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4423 = x4290 * x4312;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4424 = x4422 - x4423;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4425 = x3917 + x4316;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4426 = x4294 * x4316;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4427 = x4425 - x4426;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4428 = x3918 + x4320;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4429 = x4298 * x4320;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4430 = x4428 - x4429;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4431 = x3919 + x4324;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4432 = x4302 * x4324;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4433 = x4431 - x4432;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4434 = x3920 + x4328;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4435 = x4306 * x4328;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4436 = x4434 - x4435;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4437 = x3921 + x4332;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4438 = x4310 * x4332;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4439 = x4437 - x4438;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4440 = x3922 + x4336;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4441 = x4314 * x4336;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4442 = x4440 - x4441;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4443 = x3923 + x4340;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4444 = x4318 * x4340;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4445 = x4443 - x4444;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4446 = x3924 + x4344;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4447 = x4322 * x4344;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4448 = x4446 - x4447;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4449 = x3925 + x4348;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4450 = x4326 * x4348;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4451 = x4449 - x4450;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4452 = x3926 + x4352;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4453 = x4330 * x4352;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4454 = x4452 - x4453;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4455 = x3895 + x4356;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4456 = x4334 * x4356;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4457 = x4455 - x4456;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4458 = x3896 + x4360;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4459 = x4338 * x4360;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4460 = x4458 - x4459;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4461 = x3897 + x4364;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4462 = x4342 * x4364;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4463 = x4461 - x4462;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4464 = x3898 + x4368;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4465 = x4346 * x4368;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4466 = x4464 - x4465;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4467 = x3899 + x4372;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4468 = x4350 * x4372;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4469 = x4467 - x4468;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4470 = x3900 + x4376;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4471 = x4354 * x4376;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4472 = x4470 - x4471;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4473 = x3687 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4474 = x3724 + x4473;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4475 = x3688 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4476 = x4474 + x4475;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4477 = x3689 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4478 = x4476 + x4477;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4479 = x3690 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4480 = x4478 + x4479;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4481 = x3691 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4482 = x4480 + x4481;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4483 = x3692 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4484 = x4482 + x4483;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4485 = x3693 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4486 = x4484 + x4485;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4487 = x3694 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4488 = x4486 + x4487;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4489 = x3703 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4490 = x3752 + x4489;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4491 = x3704 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4492 = x4490 + x4491;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4493 = x3705 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4494 = x4492 + x4493;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4495 = x3706 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4496 = x4494 + x4495;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4497 = x3707 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4498 = x4496 + x4497;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4499 = x3708 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4500 = x4498 + x4499;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4501 = x3709 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4502 = x4500 + x4501;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4503 = x3710 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4504 = x4502 + x4503;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4505 = x3992 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4506 = x3991 + x4505;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4507 = x3993 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4508 = x4506 + x4507;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4509 = x3994 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4510 = x4508 + x4509;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4511 = x3995 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4512 = x4510 + x4511;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4513 = x3996 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4514 = x4512 + x4513;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4515 = x3997 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4516 = x4514 + x4515;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4517 = x3998 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4518 = x4516 + x4517;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4519 = x3999 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4520 = x4518 + x4519;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4521 = x4000 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4522 = x4520 + x4521;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4523 = x4001 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4524 = x4522 + x4523;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4525 = x4002 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4526 = x4524 + x4525;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4527 = x4003 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4528 = x4526 + x4527;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4529 = x4004 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4530 = x4528 + x4529;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4531 = x4005 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4532 = x4530 + x4531;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4533 = x4006 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4534 = x4532 + x4533;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4535 = x4008 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4536 = x4007 + x4535;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4537 = x4009 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4538 = x4536 + x4537;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4539 = x4010 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4540 = x4538 + x4539;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4541 = x4011 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4542 = x4540 + x4541;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4543 = x4012 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4544 = x4542 + x4543;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4545 = x4013 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4546 = x4544 + x4545;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4547 = x4014 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4548 = x4546 + x4547;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4549 = x4015 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4550 = x4548 + x4549;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4551 = x4016 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4552 = x4550 + x4551;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4553 = x4017 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4554 = x4552 + x4553;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4555 = x4018 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4556 = x4554 + x4555;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4557 = x4019 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4558 = x4556 + x4557;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4559 = x4020 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4560 = x4558 + x4559;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4561 = x4021 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4562 = x4560 + x4561;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4563 = x4022 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4564 = x4562 + x4563;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4565 = x3895 * x3927;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4566 = x307 - x3895;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4567 = x4566 * x3959;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4568 = x4565 + x4567;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4569 = x3896 * x3928;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4570 = x307 - x3896;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4571 = x4570 * x3960;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4572 = x4569 + x4571;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4573 = x3897 * x3929;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4574 = x307 - x3897;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4575 = x4574 * x3961;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4576 = x4573 + x4575;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4577 = x3898 * x3930;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4578 = x307 - x3898;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4579 = x4578 * x3962;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4580 = x4577 + x4579;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4581 = x3899 * x3931;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4582 = x307 - x3899;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4583 = x4582 * x3963;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4584 = x4581 + x4583;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4585 = x3900 * x3932;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4586 = x307 - x3900;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4587 = x4586 * x3964;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4588 = x4585 + x4587;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4589 = x3901 * x3933;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4590 = x307 - x3901;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4591 = x4590 * x3965;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4592 = x4589 + x4591;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4593 = x3902 * x3934;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4594 = x307 - x3902;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4595 = x4594 * x3966;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4596 = x4593 + x4595;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4597 = x3903 * x3935;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4598 = x307 - x3903;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4599 = x4598 * x3967;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4600 = x4597 + x4599;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4601 = x3904 * x3936;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4602 = x307 - x3904;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4603 = x4602 * x3968;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4604 = x4601 + x4603;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4605 = x3905 * x3937;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4606 = x307 - x3905;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4607 = x4606 * x3969;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4608 = x4605 + x4607;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4609 = x3906 * x3938;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4610 = x307 - x3906;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4611 = x4610 * x3970;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4612 = x4609 + x4611;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4613 = x3907 * x3939;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4614 = x307 - x3907;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4615 = x4614 * x3971;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4616 = x4613 + x4615;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4617 = x3908 * x3940;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4618 = x307 - x3908;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4619 = x4618 * x3972;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4620 = x4617 + x4619;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4621 = x3909 * x3941;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4622 = x307 - x3909;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4623 = x4622 * x3973;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4624 = x4621 + x4623;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4625 = x3910 * x3942;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4626 = x307 - x3910;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4627 = x4626 * x3974;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4628 = x4625 + x4627;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4629 = x3911 * x3943;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4630 = x307 - x3911;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4631 = x4630 * x3975;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4632 = x4629 + x4631;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4633 = x3912 * x3944;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4634 = x307 - x3912;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4635 = x4634 * x3976;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4636 = x4633 + x4635;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4637 = x3913 * x3945;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4638 = x307 - x3913;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4639 = x4638 * x3977;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4640 = x4637 + x4639;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4641 = x3914 * x3946;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4642 = x307 - x3914;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4643 = x4642 * x3978;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4644 = x4641 + x4643;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4645 = x3915 * x3947;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4646 = x307 - x3915;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4647 = x4646 * x3979;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4648 = x4645 + x4647;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4649 = x3916 * x3948;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4650 = x307 - x3916;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4651 = x4650 * x3980;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4652 = x4649 + x4651;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4653 = x3917 * x3949;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4654 = x307 - x3917;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4655 = x4654 * x3981;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4656 = x4653 + x4655;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4657 = x3918 * x3950;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4658 = x307 - x3918;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4659 = x4658 * x3982;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4660 = x4657 + x4659;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4661 = x3919 * x3951;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4662 = x307 - x3919;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4663 = x4662 * x3983;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4664 = x4661 + x4663;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4665 = x3920 * x3952;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4666 = x307 - x3920;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4667 = x4666 * x3984;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4668 = x4665 + x4667;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4669 = x3921 * x3953;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4670 = x307 - x3921;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4671 = x4670 * x3985;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4672 = x4669 + x4671;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4673 = x3922 * x3954;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4674 = x307 - x3922;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4675 = x4674 * x3986;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4676 = x4673 + x4675;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4677 = x3923 * x3955;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4678 = x307 - x3923;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4679 = x4678 * x3987;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4680 = x4677 + x4679;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4681 = x3924 * x3956;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4682 = x307 - x3924;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4683 = x4682 * x3988;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4684 = x4681 + x4683;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4685 = x3925 * x3957;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4686 = x307 - x3925;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4687 = x4686 * x3989;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4688 = x4685 + x4687;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4689 = x3926 * x3958;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4690 = x307 - x3926;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4691 = x4690 * x3990;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4692 = x4689 + x4691;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4693 = x4572 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4694 = x4568 + x4693;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4695 = x4576 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4696 = x4694 + x4695;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4697 = x4580 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4698 = x4696 + x4697;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4699 = x4584 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4700 = x4698 + x4699;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4701 = x4588 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4702 = x4700 + x4701;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4703 = x4592 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4704 = x4702 + x4703;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4705 = x4596 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4706 = x4704 + x4705;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4707 = x4600 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4708 = x4706 + x4707;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4709 = x4604 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4710 = x4708 + x4709;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4711 = x4608 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4712 = x4710 + x4711;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4713 = x4612 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4714 = x4712 + x4713;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4715 = x4616 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4716 = x4714 + x4715;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4717 = x4620 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4718 = x4716 + x4717;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4719 = x4624 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4720 = x4718 + x4719;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4721 = x4628 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4722 = x4720 + x4721;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4723 = x4636 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4724 = x4632 + x4723;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4725 = x4640 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4726 = x4724 + x4725;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4727 = x4644 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4728 = x4726 + x4727;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4729 = x4648 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4730 = x4728 + x4729;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4731 = x4652 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4732 = x4730 + x4731;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4733 = x4656 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4734 = x4732 + x4733;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4735 = x4660 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4736 = x4734 + x4735;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4737 = x4664 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4738 = x4736 + x4737;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4739 = x4668 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4740 = x4738 + x4739;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4741 = x4672 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4742 = x4740 + x4741;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4743 = x4676 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4744 = x4742 + x4743;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4745 = x4680 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4746 = x4744 + x4745;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4747 = x4684 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4748 = x4746 + x4747;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4749 = x4688 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4750 = x4748 + x4749;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4751 = x4692 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4752 = x4750 + x4751;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4753 = x4382 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4754 = x4379 + x4753;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4755 = x4385 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4756 = x4754 + x4755;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4757 = x4388 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4758 = x4756 + x4757;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4759 = x4391 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4760 = x4758 + x4759;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4761 = x4394 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4762 = x4760 + x4761;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4763 = x4397 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4764 = x4762 + x4763;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4765 = x4400 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4766 = x4764 + x4765;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4767 = x4403 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4768 = x4766 + x4767;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4769 = x4406 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4770 = x4768 + x4769;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4771 = x4409 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4772 = x4770 + x4771;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4773 = x4412 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4774 = x4772 + x4773;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4775 = x4415 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4776 = x4774 + x4775;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4777 = x4418 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4778 = x4776 + x4777;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4779 = x4421 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4780 = x4778 + x4779;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4781 = x4424 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4782 = x4780 + x4781;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4783 = x4430 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4784 = x4427 + x4783;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4785 = x4433 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4786 = x4784 + x4785;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4787 = x4436 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4788 = x4786 + x4787;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4789 = x4439 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4790 = x4788 + x4789;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4791 = x4442 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4792 = x4790 + x4791;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4793 = x4445 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4794 = x4792 + x4793;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4795 = x4448 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4796 = x4794 + x4795;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4797 = x4451 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4798 = x4796 + x4797;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4799 = x4454 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4800 = x4798 + x4799;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4801 = x4457 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4802 = x4800 + x4801;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4803 = x4460 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4804 = x4802 + x4803;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4805 = x4463 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4806 = x4804 + x4805;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4807 = x4466 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4808 = x4806 + x4807;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4809 = x4469 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4810 = x4808 + x4809;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4811 = x4472 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4812 = x4810 + x4811;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4813 = x4722 + x4782;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4814 = x4752 + x4812;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4815 = x4534 + x4813;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4816 = x4564 + x4814;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4817 = x4023 + x4815;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4818 = x4024 + x4816;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4819 = x4488 + x4817;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4820 = x4504 + x4818;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4821 = x3767 * x3799;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4822 = x307 - x3831;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4823 = x4821 * x4822;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4824 = x307 - x3799;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4825 = x3767 * x4824;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4826 = x4825 * x3831;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4827 = x4823 + x4826;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4828 = x307 - x3767;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4829 = x4828 * x3799;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4830 = x4829 * x3831;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4831 = x4827 + x4830;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4832 = x4821 * x3831;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4833 = x4831 + x4832;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4834 = x3768 * x3800;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4835 = x307 - x3832;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4836 = x4834 * x4835;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4837 = x307 - x3800;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4838 = x3768 * x4837;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4839 = x4838 * x3832;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4840 = x4836 + x4839;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4841 = x307 - x3768;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4842 = x4841 * x3800;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4843 = x4842 * x3832;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4844 = x4840 + x4843;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4845 = x4834 * x3832;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4846 = x4844 + x4845;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4847 = x3769 * x3801;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4848 = x307 - x3833;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4849 = x4847 * x4848;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4850 = x307 - x3801;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4851 = x3769 * x4850;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4852 = x4851 * x3833;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4853 = x4849 + x4852;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4854 = x307 - x3769;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4855 = x4854 * x3801;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4856 = x4855 * x3833;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4857 = x4853 + x4856;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4858 = x4847 * x3833;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4859 = x4857 + x4858;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4860 = x3770 * x3802;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4861 = x307 - x3834;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4862 = x4860 * x4861;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4863 = x307 - x3802;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4864 = x3770 * x4863;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4865 = x4864 * x3834;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4866 = x4862 + x4865;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4867 = x307 - x3770;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4868 = x4867 * x3802;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4869 = x4868 * x3834;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4870 = x4866 + x4869;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4871 = x4860 * x3834;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4872 = x4870 + x4871;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4873 = x3771 * x3803;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4874 = x307 - x3835;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4875 = x4873 * x4874;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4876 = x307 - x3803;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4877 = x3771 * x4876;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4878 = x4877 * x3835;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4879 = x4875 + x4878;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4880 = x307 - x3771;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4881 = x4880 * x3803;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4882 = x4881 * x3835;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4883 = x4879 + x4882;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4884 = x4873 * x3835;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4885 = x4883 + x4884;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4886 = x3772 * x3804;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4887 = x307 - x3836;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4888 = x4886 * x4887;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4889 = x307 - x3804;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4890 = x3772 * x4889;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4891 = x4890 * x3836;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4892 = x4888 + x4891;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4893 = x307 - x3772;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4894 = x4893 * x3804;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4895 = x4894 * x3836;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4896 = x4892 + x4895;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4897 = x4886 * x3836;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4898 = x4896 + x4897;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4899 = x3773 * x3805;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4900 = x307 - x3837;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4901 = x4899 * x4900;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4902 = x307 - x3805;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4903 = x3773 * x4902;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4904 = x4903 * x3837;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4905 = x4901 + x4904;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4906 = x307 - x3773;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4907 = x4906 * x3805;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4908 = x4907 * x3837;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4909 = x4905 + x4908;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4910 = x4899 * x3837;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4911 = x4909 + x4910;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4912 = x3774 * x3806;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4913 = x307 - x3838;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4914 = x4912 * x4913;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4915 = x307 - x3806;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4916 = x3774 * x4915;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4917 = x4916 * x3838;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4918 = x4914 + x4917;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4919 = x307 - x3774;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4920 = x4919 * x3806;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4921 = x4920 * x3838;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4922 = x4918 + x4921;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4923 = x4912 * x3838;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4924 = x4922 + x4923;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4925 = x3775 * x3807;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4926 = x307 - x3839;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4927 = x4925 * x4926;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4928 = x307 - x3807;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4929 = x3775 * x4928;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4930 = x4929 * x3839;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4931 = x4927 + x4930;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4932 = x307 - x3775;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4933 = x4932 * x3807;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4934 = x4933 * x3839;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4935 = x4931 + x4934;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4936 = x4925 * x3839;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4937 = x4935 + x4936;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4938 = x3776 * x3808;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4939 = x307 - x3840;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4940 = x4938 * x4939;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4941 = x307 - x3808;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4942 = x3776 * x4941;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4943 = x4942 * x3840;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4944 = x4940 + x4943;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4945 = x307 - x3776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4946 = x4945 * x3808;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4947 = x4946 * x3840;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4948 = x4944 + x4947;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4949 = x4938 * x3840;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4950 = x4948 + x4949;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4951 = x3777 * x3809;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4952 = x307 - x3841;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4953 = x4951 * x4952;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4954 = x307 - x3809;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4955 = x3777 * x4954;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4956 = x4955 * x3841;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4957 = x4953 + x4956;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4958 = x307 - x3777;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4959 = x4958 * x3809;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4960 = x4959 * x3841;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4961 = x4957 + x4960;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4962 = x4951 * x3841;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4963 = x4961 + x4962;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4964 = x3778 * x3810;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4965 = x307 - x3842;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4966 = x4964 * x4965;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4967 = x307 - x3810;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4968 = x3778 * x4967;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4969 = x4968 * x3842;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4970 = x4966 + x4969;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4971 = x307 - x3778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4972 = x4971 * x3810;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4973 = x4972 * x3842;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4974 = x4970 + x4973;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4975 = x4964 * x3842;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4976 = x4974 + x4975;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4977 = x3779 * x3811;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4978 = x307 - x3843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4979 = x4977 * x4978;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4980 = x307 - x3811;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4981 = x3779 * x4980;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4982 = x4981 * x3843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4983 = x4979 + x4982;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4984 = x307 - x3779;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4985 = x4984 * x3811;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4986 = x4985 * x3843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4987 = x4983 + x4986;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4988 = x4977 * x3843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4989 = x4987 + x4988;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4990 = x3780 * x3812;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4991 = x307 - x3844;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4992 = x4990 * x4991;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4993 = x307 - x3812;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4994 = x3780 * x4993;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4995 = x4994 * x3844;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4996 = x4992 + x4995;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4997 = x307 - x3780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4998 = x4997 * x3812;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4999 = x4998 * x3844;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5000 = x4996 + x4999;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5001 = x4990 * x3844;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5002 = x5000 + x5001;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5003 = x3781 * x3813;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5004 = x307 - x3845;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5005 = x5003 * x5004;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5006 = x307 - x3813;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5007 = x3781 * x5006;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5008 = x5007 * x3845;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5009 = x5005 + x5008;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5010 = x307 - x3781;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5011 = x5010 * x3813;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5012 = x5011 * x3845;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5013 = x5009 + x5012;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5014 = x5003 * x3845;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5015 = x5013 + x5014;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5016 = x3782 * x3814;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5017 = x307 - x3846;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5018 = x5016 * x5017;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5019 = x307 - x3814;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5020 = x3782 * x5019;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5021 = x5020 * x3846;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5022 = x5018 + x5021;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5023 = x307 - x3782;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5024 = x5023 * x3814;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5025 = x5024 * x3846;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5026 = x5022 + x5025;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5027 = x5016 * x3846;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5028 = x5026 + x5027;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5029 = x3783 * x3815;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5030 = x307 - x3847;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5031 = x5029 * x5030;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5032 = x307 - x3815;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5033 = x3783 * x5032;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5034 = x5033 * x3847;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5035 = x5031 + x5034;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5036 = x307 - x3783;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5037 = x5036 * x3815;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5038 = x5037 * x3847;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5039 = x5035 + x5038;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5040 = x5029 * x3847;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5041 = x5039 + x5040;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5042 = x3784 * x3816;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5043 = x307 - x3848;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5044 = x5042 * x5043;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5045 = x307 - x3816;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5046 = x3784 * x5045;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5047 = x5046 * x3848;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5048 = x5044 + x5047;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5049 = x307 - x3784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5050 = x5049 * x3816;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5051 = x5050 * x3848;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5052 = x5048 + x5051;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5053 = x5042 * x3848;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5054 = x5052 + x5053;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5055 = x3785 * x3817;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5056 = x307 - x3849;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5057 = x5055 * x5056;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5058 = x307 - x3817;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5059 = x3785 * x5058;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5060 = x5059 * x3849;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5061 = x5057 + x5060;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5062 = x307 - x3785;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5063 = x5062 * x3817;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5064 = x5063 * x3849;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5065 = x5061 + x5064;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5066 = x5055 * x3849;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5067 = x5065 + x5066;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5068 = x3786 * x3818;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5069 = x307 - x3850;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5070 = x5068 * x5069;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5071 = x307 - x3818;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5072 = x3786 * x5071;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5073 = x5072 * x3850;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5074 = x5070 + x5073;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5075 = x307 - x3786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5076 = x5075 * x3818;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5077 = x5076 * x3850;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5078 = x5074 + x5077;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5079 = x5068 * x3850;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5080 = x5078 + x5079;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5081 = x3787 * x3819;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5082 = x307 - x3851;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5083 = x5081 * x5082;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5084 = x307 - x3819;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5085 = x3787 * x5084;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5086 = x5085 * x3851;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5087 = x5083 + x5086;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5088 = x307 - x3787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5089 = x5088 * x3819;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5090 = x5089 * x3851;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5091 = x5087 + x5090;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5092 = x5081 * x3851;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5093 = x5091 + x5092;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5094 = x3788 * x3820;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5095 = x307 - x3852;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5096 = x5094 * x5095;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5097 = x307 - x3820;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5098 = x3788 * x5097;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5099 = x5098 * x3852;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5100 = x5096 + x5099;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5101 = x307 - x3788;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5102 = x5101 * x3820;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5103 = x5102 * x3852;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5104 = x5100 + x5103;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5105 = x5094 * x3852;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5106 = x5104 + x5105;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5107 = x3789 * x3821;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5108 = x307 - x3853;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5109 = x5107 * x5108;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5110 = x307 - x3821;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5111 = x3789 * x5110;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5112 = x5111 * x3853;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5113 = x5109 + x5112;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5114 = x307 - x3789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5115 = x5114 * x3821;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5116 = x5115 * x3853;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5117 = x5113 + x5116;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5118 = x5107 * x3853;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5119 = x5117 + x5118;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5120 = x3790 * x3822;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5121 = x307 - x3854;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5122 = x5120 * x5121;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5123 = x307 - x3822;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5124 = x3790 * x5123;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5125 = x5124 * x3854;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5126 = x5122 + x5125;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5127 = x307 - x3790;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5128 = x5127 * x3822;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5129 = x5128 * x3854;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5130 = x5126 + x5129;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5131 = x5120 * x3854;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5132 = x5130 + x5131;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5133 = x3791 * x3823;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5134 = x307 - x3855;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5135 = x5133 * x5134;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5136 = x307 - x3823;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5137 = x3791 * x5136;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5138 = x5137 * x3855;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5139 = x5135 + x5138;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5140 = x307 - x3791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5141 = x5140 * x3823;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5142 = x5141 * x3855;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5143 = x5139 + x5142;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5144 = x5133 * x3855;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5145 = x5143 + x5144;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5146 = x3792 * x3824;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5147 = x307 - x3856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5148 = x5146 * x5147;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5149 = x307 - x3824;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5150 = x3792 * x5149;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5151 = x5150 * x3856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5152 = x5148 + x5151;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5153 = x307 - x3792;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5154 = x5153 * x3824;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5155 = x5154 * x3856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5156 = x5152 + x5155;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5157 = x5146 * x3856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5158 = x5156 + x5157;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5159 = x3793 * x3825;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5160 = x307 - x3857;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5161 = x5159 * x5160;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5162 = x307 - x3825;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5163 = x3793 * x5162;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5164 = x5163 * x3857;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5165 = x5161 + x5164;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5166 = x307 - x3793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5167 = x5166 * x3825;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5168 = x5167 * x3857;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5169 = x5165 + x5168;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5170 = x5159 * x3857;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5171 = x5169 + x5170;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5172 = x3794 * x3826;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5173 = x307 - x3858;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5174 = x5172 * x5173;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5175 = x307 - x3826;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5176 = x3794 * x5175;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5177 = x5176 * x3858;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5178 = x5174 + x5177;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5179 = x307 - x3794;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5180 = x5179 * x3826;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5181 = x5180 * x3858;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5182 = x5178 + x5181;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5183 = x5172 * x3858;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5184 = x5182 + x5183;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5185 = x3795 * x3827;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5186 = x307 - x3859;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5187 = x5185 * x5186;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5188 = x307 - x3827;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5189 = x3795 * x5188;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5190 = x5189 * x3859;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5191 = x5187 + x5190;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5192 = x307 - x3795;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5193 = x5192 * x3827;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5194 = x5193 * x3859;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5195 = x5191 + x5194;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5196 = x5185 * x3859;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5197 = x5195 + x5196;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5198 = x3796 * x3828;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5199 = x307 - x3860;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5200 = x5198 * x5199;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5201 = x307 - x3828;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5202 = x3796 * x5201;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5203 = x5202 * x3860;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5204 = x5200 + x5203;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5205 = x307 - x3796;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5206 = x5205 * x3828;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5207 = x5206 * x3860;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5208 = x5204 + x5207;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5209 = x5198 * x3860;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5210 = x5208 + x5209;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5211 = x3797 * x3829;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5212 = x307 - x3861;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5213 = x5211 * x5212;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5214 = x307 - x3829;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5215 = x3797 * x5214;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5216 = x5215 * x3861;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5217 = x5213 + x5216;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5218 = x307 - x3797;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5219 = x5218 * x3829;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5220 = x5219 * x3861;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5221 = x5217 + x5220;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5222 = x5211 * x3861;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5223 = x5221 + x5222;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5224 = x3798 * x3830;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5225 = x307 - x3862;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5226 = x5224 * x5225;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5227 = x307 - x3830;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5228 = x3798 * x5227;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5229 = x5228 * x3862;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5230 = x5226 + x5229;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5231 = x307 - x3798;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5232 = x5231 * x3830;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5233 = x5232 * x3862;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5234 = x5230 + x5233;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5235 = x5224 * x3862;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5236 = x5234 + x5235;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5237 = x4846 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5238 = x4833 + x5237;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5239 = x4859 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5240 = x5238 + x5239;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5241 = x4872 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5242 = x5240 + x5241;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5243 = x4885 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5244 = x5242 + x5243;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5245 = x4898 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5246 = x5244 + x5245;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5247 = x4911 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5248 = x5246 + x5247;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5249 = x4924 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5250 = x5248 + x5249;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5251 = x4937 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5252 = x5250 + x5251;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5253 = x4950 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5254 = x5252 + x5253;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5255 = x4963 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5256 = x5254 + x5255;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5257 = x4976 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5258 = x5256 + x5257;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5259 = x4989 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5260 = x5258 + x5259;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5261 = x5002 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5262 = x5260 + x5261;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5263 = x5015 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5264 = x5262 + x5263;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5265 = x5028 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5266 = x5264 + x5265;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5267 = x5054 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5268 = x5041 + x5267;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5269 = x5067 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5270 = x5268 + x5269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5271 = x5080 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5272 = x5270 + x5271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5273 = x5093 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5274 = x5272 + x5273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5275 = x5106 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5276 = x5274 + x5275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5277 = x5119 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5278 = x5276 + x5277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5279 = x5132 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5280 = x5278 + x5279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5281 = x5145 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5282 = x5280 + x5281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5283 = x5158 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5284 = x5282 + x5283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5285 = x5171 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5286 = x5284 + x5285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5287 = x5184 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5288 = x5286 + x5287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5289 = x5197 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5290 = x5288 + x5289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5291 = x5210 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5292 = x5290 + x5291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5293 = x5223 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5294 = x5292 + x5293;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5295 = x5236 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5296 = x5294 + x5295;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5297 = x4158 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5298 = x4155 + x5297;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5299 = x4161 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5300 = x5298 + x5299;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5301 = x4164 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5302 = x5300 + x5301;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5303 = x4167 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5304 = x5302 + x5303;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5305 = x4170 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5306 = x5304 + x5305;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5307 = x4173 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5308 = x5306 + x5307;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5309 = x4176 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5310 = x5308 + x5309;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5311 = x4179 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5312 = x5310 + x5311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5313 = x4182 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5314 = x5312 + x5313;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5315 = x4185 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5316 = x5314 + x5315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5317 = x4188 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5318 = x5316 + x5317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5319 = x4191 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5320 = x5318 + x5319;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5321 = x4194 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5322 = x5320 + x5321;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5323 = x4197 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5324 = x5322 + x5323;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5325 = x4200 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5326 = x5324 + x5325;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5327 = x4206 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5328 = x4203 + x5327;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5329 = x4209 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5330 = x5328 + x5329;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5331 = x4212 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5332 = x5330 + x5331;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5333 = x4215 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5334 = x5332 + x5333;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5335 = x4218 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5336 = x5334 + x5335;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5337 = x4221 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5338 = x5336 + x5337;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5339 = x4224 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5340 = x5338 + x5339;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5341 = x4227 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5342 = x5340 + x5341;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5343 = x4230 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5344 = x5342 + x5343;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5345 = x4233 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5346 = x5344 + x5345;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5347 = x4236 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5348 = x5346 + x5347;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5349 = x4239 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5350 = x5348 + x5349;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5351 = x4242 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5352 = x5350 + x5351;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5353 = x4245 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5354 = x5352 + x5353;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5355 = x4248 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5356 = x5354 + x5355;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5357 = x5266 + x5326;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5358 = x5296 + x5356;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5359 = x4819 + x5357;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5360 = x4820 + x5358;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5361 = x3864 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5362 = x3863 + x5361;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5363 = x3865 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5364 = x5362 + x5363;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5365 = x3866 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5366 = x5364 + x5365;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5367 = x3867 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5368 = x5366 + x5367;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5369 = x3868 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5370 = x5368 + x5369;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5371 = x3869 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5372 = x5370 + x5371;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5373 = x3870 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5374 = x5372 + x5373;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5375 = x3871 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5376 = x5374 + x5375;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5377 = x3872 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5378 = x5376 + x5377;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5379 = x3873 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5380 = x5378 + x5379;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5381 = x3874 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5382 = x5380 + x5381;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5383 = x3875 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5384 = x5382 + x5383;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5385 = x3876 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5386 = x5384 + x5385;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5387 = x3877 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5388 = x5386 + x5387;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5389 = x3878 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5390 = x5388 + x5389;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5391 = x3880 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5392 = x3879 + x5391;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5393 = x3881 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5394 = x5392 + x5393;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5395 = x3882 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5396 = x5394 + x5395;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5397 = x3883 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5398 = x5396 + x5397;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5399 = x3884 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5400 = x5398 + x5399;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5401 = x3885 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5402 = x5400 + x5401;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5403 = x3886 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5404 = x5402 + x5403;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5405 = x3887 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5406 = x5404 + x5405;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5407 = x3888 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5408 = x5406 + x5407;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5409 = x3889 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5410 = x5408 + x5409;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5411 = x3890 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5412 = x5410 + x5411;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5413 = x3891 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5414 = x5412 + x5413;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5415 = x3892 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5416 = x5414 + x5415;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5417 = x3893 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5418 = x5416 + x5417;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5419 = x3894 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5420 = x5418 + x5419;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5421 = x4819 + x5390;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5422 = x4820 + x5420;
      // loc("zirgen/circuit/recursion/sha.cpp":290:5)
      {
        auto& reg = args[2][58 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5359);
        reg = x5359;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":291:5)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5421);
        reg = x5421;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":290:5)
      {
        auto& reg = args[2][59 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5360);
        reg = x5360;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":291:5)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5422);
        reg = x5422;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a_raw[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5423 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x5423 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a_raw[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5424 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x5424 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5425 = Fp(x5423.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5425);
          reg = x5425;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5426 = Fp(x5423.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5427 = x5426 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5427);
          reg = x5427;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5428 = Fp(x5423.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5429 = x5428 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5429);
          reg = x5429;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5430 = Fp(x5423.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5431 = x5430 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5431);
          reg = x5431;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5432 = Fp(x5423.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5433 = x5432 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5433);
          reg = x5433;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5434 = Fp(x5423.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5435 = x5434 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5435);
          reg = x5435;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5436 = Fp(x5423.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5437 = x5436 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5437);
          reg = x5437;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5438 = Fp(x5423.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5439 = x5438 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5439);
          reg = x5439;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5440 = Fp(x5423.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5441 = x5440 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5441);
          reg = x5441;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5442 = Fp(x5423.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5443 = x5442 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5443);
          reg = x5443;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5444 = Fp(x5423.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5445 = x5444 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5445);
          reg = x5445;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5446 = Fp(x5423.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5447 = x5446 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5447);
          reg = x5447;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5448 = Fp(x5423.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5449 = x5448 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5449);
          reg = x5449;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5450 = Fp(x5423.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5451 = x5450 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5451);
          reg = x5451;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5452 = Fp(x5423.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5453 = x5452 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5453);
          reg = x5453;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5454 = Fp(x5423.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5455 = x5454 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5455);
          reg = x5455;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5456 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5456 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5457 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5457 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5458 = x5457 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5459 = x5456 + x5458;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5460 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5460 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5461 = x5460 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5462 = x5459 + x5461;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5463 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5463 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5464 = x5463 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5465 = x5462 + x5464;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5466 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5466 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5467 = x5466 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5468 = x5465 + x5467;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5469 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5469 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5470 = x5469 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5471 = x5468 + x5470;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5472 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5472 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5473 = x5472 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5474 = x5471 + x5473;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5475 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5475 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5476 = x5475 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5477 = x5474 + x5476;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5478 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5478 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5479 = x5478 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5480 = x5477 + x5479;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5481 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5481 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5482 = x5481 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5483 = x5480 + x5482;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5484 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5484 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5485 = x5484 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5486 = x5483 + x5485;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5487 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5487 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5488 = x5487 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5489 = x5486 + x5488;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5490 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5490 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5491 = x5490 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5492 = x5489 + x5491;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5493 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5493 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5494 = x5493 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5495 = x5492 + x5494;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5496 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x5496 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5497 = x5496 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5498 = x5495 + x5497;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5499 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x5499 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5500 = x5499 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5501 = x5498 + x5500;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x5502 = x5423 - x5501;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x5503 = x5502 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x5504 = Fp(x5503.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5504);
          reg = x5504;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x5505 = x5424 + x5503;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5506 = Fp(x5505.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5506);
          reg = x5506;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5507 = Fp(x5505.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5508 = x5507 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5508);
          reg = x5508;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5509 = Fp(x5505.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5510 = x5509 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5510);
          reg = x5510;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5511 = Fp(x5505.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5512 = x5511 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5512);
          reg = x5512;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5513 = Fp(x5505.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5514 = x5513 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5514);
          reg = x5514;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5515 = Fp(x5505.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5516 = x5515 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5516);
          reg = x5516;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5517 = Fp(x5505.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5518 = x5517 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5518);
          reg = x5518;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5519 = Fp(x5505.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5520 = x5519 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5520);
          reg = x5520;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5521 = Fp(x5505.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5522 = x5521 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5522);
          reg = x5522;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5523 = Fp(x5505.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5524 = x5523 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5524);
          reg = x5524;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5525 = Fp(x5505.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5526 = x5525 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5526);
          reg = x5526;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5527 = Fp(x5505.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5528 = x5527 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5528);
          reg = x5528;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5529 = Fp(x5505.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5530 = x5529 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5530);
          reg = x5530;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5531 = Fp(x5505.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5532 = x5531 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5532);
          reg = x5532;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5533 = Fp(x5505.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5534 = x5533 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5534);
          reg = x5534;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5535 = Fp(x5505.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5536 = x5535 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5536);
          reg = x5536;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5537 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x5537 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5538 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x5538 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5539 = x5538 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5540 = x5537 + x5539;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5541 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x5541 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5542 = x5541 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5543 = x5540 + x5542;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5544 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x5544 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5545 = x5544 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5546 = x5543 + x5545;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5547 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x5547 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5548 = x5547 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5549 = x5546 + x5548;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5550 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x5550 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5551 = x5550 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5552 = x5549 + x5551;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5553 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x5553 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5554 = x5553 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5555 = x5552 + x5554;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5556 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x5556 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5557 = x5556 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5558 = x5555 + x5557;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5559 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x5559 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5560 = x5559 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5561 = x5558 + x5560;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5562 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x5562 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5563 = x5562 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5564 = x5561 + x5563;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5565 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x5565 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5566 = x5565 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5567 = x5564 + x5566;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5568 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x5568 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5569 = x5568 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5570 = x5567 + x5569;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5571 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x5571 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5572 = x5571 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5573 = x5570 + x5572;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5574 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x5574 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5575 = x5574 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5576 = x5573 + x5575;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5577 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x5577 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5578 = x5577 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5579 = x5576 + x5578;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5580 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x5580 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5581 = x5580 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5582 = x5579 + x5581;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x5583 = x5505 - x5582;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x5584 = x5583 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x5585 = Fp(x5584.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5585);
          reg = x5585;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e_raw[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5586 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5586 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e_raw[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5587 = args[2][93 * steps + ((cycle - 0) & mask)];
      assert(x5587 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5588 = Fp(x5586.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5588);
          reg = x5588;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5589 = Fp(x5586.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5590 = x5589 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5590);
          reg = x5590;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5591 = Fp(x5586.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5592 = x5591 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5592);
          reg = x5592;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5593 = Fp(x5586.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5594 = x5593 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5594);
          reg = x5594;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5595 = Fp(x5586.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5596 = x5595 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5596);
          reg = x5596;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5597 = Fp(x5586.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5598 = x5597 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5598);
          reg = x5598;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5599 = Fp(x5586.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5600 = x5599 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5600);
          reg = x5600;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5601 = Fp(x5586.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5602 = x5601 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5602);
          reg = x5602;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5603 = Fp(x5586.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5604 = x5603 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5604);
          reg = x5604;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5605 = Fp(x5586.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5606 = x5605 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5606);
          reg = x5606;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5607 = Fp(x5586.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5608 = x5607 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5608);
          reg = x5608;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5609 = Fp(x5586.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5610 = x5609 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5610);
          reg = x5610;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5611 = Fp(x5586.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5612 = x5611 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5612);
          reg = x5612;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5613 = Fp(x5586.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5614 = x5613 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5614);
          reg = x5614;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5615 = Fp(x5586.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5616 = x5615 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5616);
          reg = x5616;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5617 = Fp(x5586.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5618 = x5617 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5618);
          reg = x5618;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5619 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x5619 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5620 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x5620 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5621 = x5620 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5622 = x5619 + x5621;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5623 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x5623 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5624 = x5623 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5625 = x5622 + x5624;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5626 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x5626 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5627 = x5626 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5628 = x5625 + x5627;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5629 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x5629 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5630 = x5629 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5631 = x5628 + x5630;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5632 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x5632 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5633 = x5632 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5634 = x5631 + x5633;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5635 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x5635 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5636 = x5635 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5637 = x5634 + x5636;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5638 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x5638 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5639 = x5638 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5640 = x5637 + x5639;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5641 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x5641 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5642 = x5641 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5643 = x5640 + x5642;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5644 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x5644 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5645 = x5644 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5646 = x5643 + x5645;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5647 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5647 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5648 = x5647 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5649 = x5646 + x5648;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5650 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5650 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5651 = x5650 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5652 = x5649 + x5651;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5653 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5653 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5654 = x5653 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5655 = x5652 + x5654;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5656 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5656 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5657 = x5656 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5658 = x5655 + x5657;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5659 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x5659 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5660 = x5659 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5661 = x5658 + x5660;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5662 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x5662 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5663 = x5662 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5664 = x5661 + x5663;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x5665 = x5586 - x5664;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x5666 = x5665 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x5667 = Fp(x5666.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5667);
          reg = x5667;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x5668 = x5587 + x5666;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5669 = Fp(x5668.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5669);
          reg = x5669;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5670 = Fp(x5668.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5671 = x5670 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5671);
          reg = x5671;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5672 = Fp(x5668.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5673 = x5672 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5673);
          reg = x5673;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5674 = Fp(x5668.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5675 = x5674 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5675);
          reg = x5675;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5676 = Fp(x5668.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5677 = x5676 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5677);
          reg = x5677;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5678 = Fp(x5668.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5679 = x5678 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5679);
          reg = x5679;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5680 = Fp(x5668.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5681 = x5680 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5681);
          reg = x5681;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5682 = Fp(x5668.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5683 = x5682 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5683);
          reg = x5683;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5684 = Fp(x5668.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5685 = x5684 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5685);
          reg = x5685;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5686 = Fp(x5668.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5687 = x5686 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5687);
          reg = x5687;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5688 = Fp(x5668.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5689 = x5688 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5689);
          reg = x5689;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5690 = Fp(x5668.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5691 = x5690 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5691);
          reg = x5691;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5692 = Fp(x5668.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5693 = x5692 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5693);
          reg = x5693;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5694 = Fp(x5668.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5695 = x5694 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5695);
          reg = x5695;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5696 = Fp(x5668.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5697 = x5696 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5697);
          reg = x5697;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5698 = Fp(x5668.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5699 = x5698 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5699);
          reg = x5699;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5700 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5700 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5701 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x5701 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5702 = x5701 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5703 = x5700 + x5702;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5704 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5704 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5705 = x5704 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5706 = x5703 + x5705;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5707 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x5707 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5708 = x5707 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5709 = x5706 + x5708;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5710 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5710 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5711 = x5710 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5712 = x5709 + x5711;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5713 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x5713 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5714 = x5713 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5715 = x5712 + x5714;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5716 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5716 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5717 = x5716 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5718 = x5715 + x5717;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5719 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5719 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5720 = x5719 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5721 = x5718 + x5720;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5722 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5722 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5723 = x5722 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5724 = x5721 + x5723;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5725 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x5725 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5726 = x5725 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5727 = x5724 + x5726;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5728 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x5728 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5729 = x5728 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5730 = x5727 + x5729;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5731 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x5731 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5732 = x5731 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5733 = x5730 + x5732;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5734 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x5734 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5735 = x5734 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5736 = x5733 + x5735;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5737 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x5737 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5738 = x5737 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5739 = x5736 + x5738;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5740 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x5740 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5741 = x5740 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5742 = x5739 + x5741;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5743 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x5743 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5744 = x5743 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5745 = x5742 + x5744;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x5746 = x5668 - x5745;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x5747 = x5746 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x5748 = Fp(x5747.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5748);
          reg = x5748;
        }
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/sha_mix(Reg)"("./zirgen/components/mux.h":49:25))
    auto x5749 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x5749 != Fp::invalid());
    if (x5749 != 0) {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5750 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x5750 != Fp::invalid());
      {
        host_args.at(0) = x5750;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x5751 = host_outs.at(0);
        auto x5752 = host_outs.at(1);
        auto x5753 = host_outs.at(2);
        auto x5754 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5751);
          reg = x5751;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5752);
          reg = x5752;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5753);
          reg = x5753;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":51:5)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5754);
          reg = x5754;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":82:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5750);
        reg = x5750;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5755 = args[2][94 * steps + ((cycle - 2) & mask)];
      assert(x5755 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5756 = args[2][95 * steps + ((cycle - 2) & mask)];
      assert(x5756 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5757 = args[2][96 * steps + ((cycle - 2) & mask)];
      assert(x5757 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5758 = args[2][97 * steps + ((cycle - 2) & mask)];
      assert(x5758 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5759 = args[2][98 * steps + ((cycle - 2) & mask)];
      assert(x5759 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5760 = args[2][99 * steps + ((cycle - 2) & mask)];
      assert(x5760 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5761 = args[2][100 * steps + ((cycle - 2) & mask)];
      assert(x5761 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5762 = args[2][101 * steps + ((cycle - 2) & mask)];
      assert(x5762 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5763 = args[2][102 * steps + ((cycle - 2) & mask)];
      assert(x5763 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5764 = args[2][103 * steps + ((cycle - 2) & mask)];
      assert(x5764 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5765 = args[2][104 * steps + ((cycle - 2) & mask)];
      assert(x5765 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5766 = args[2][105 * steps + ((cycle - 2) & mask)];
      assert(x5766 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5767 = args[2][106 * steps + ((cycle - 2) & mask)];
      assert(x5767 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5768 = args[2][107 * steps + ((cycle - 2) & mask)];
      assert(x5768 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5769 = args[2][108 * steps + ((cycle - 2) & mask)];
      assert(x5769 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5770 = args[2][109 * steps + ((cycle - 2) & mask)];
      assert(x5770 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5771 = args[2][110 * steps + ((cycle - 2) & mask)];
      assert(x5771 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5772 = args[2][111 * steps + ((cycle - 2) & mask)];
      assert(x5772 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5773 = args[2][112 * steps + ((cycle - 2) & mask)];
      assert(x5773 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5774 = args[2][113 * steps + ((cycle - 2) & mask)];
      assert(x5774 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5775 = args[2][114 * steps + ((cycle - 2) & mask)];
      assert(x5775 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5776 = args[2][115 * steps + ((cycle - 2) & mask)];
      assert(x5776 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5777 = args[2][116 * steps + ((cycle - 2) & mask)];
      assert(x5777 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5778 = args[2][117 * steps + ((cycle - 2) & mask)];
      assert(x5778 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5779 = args[2][118 * steps + ((cycle - 2) & mask)];
      assert(x5779 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5780 = args[2][119 * steps + ((cycle - 2) & mask)];
      assert(x5780 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5781 = args[2][120 * steps + ((cycle - 2) & mask)];
      assert(x5781 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5782 = args[2][121 * steps + ((cycle - 2) & mask)];
      assert(x5782 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5783 = args[2][122 * steps + ((cycle - 2) & mask)];
      assert(x5783 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5784 = args[2][123 * steps + ((cycle - 2) & mask)];
      assert(x5784 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5785 = args[2][124 * steps + ((cycle - 2) & mask)];
      assert(x5785 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5786 = args[2][125 * steps + ((cycle - 2) & mask)];
      assert(x5786 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5787 = args[2][94 * steps + ((cycle - 7) & mask)];
      assert(x5787 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5788 = args[2][95 * steps + ((cycle - 7) & mask)];
      assert(x5788 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5789 = args[2][96 * steps + ((cycle - 7) & mask)];
      assert(x5789 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5790 = args[2][97 * steps + ((cycle - 7) & mask)];
      assert(x5790 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5791 = args[2][98 * steps + ((cycle - 7) & mask)];
      assert(x5791 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5792 = args[2][99 * steps + ((cycle - 7) & mask)];
      assert(x5792 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5793 = args[2][100 * steps + ((cycle - 7) & mask)];
      assert(x5793 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5794 = args[2][101 * steps + ((cycle - 7) & mask)];
      assert(x5794 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5795 = args[2][102 * steps + ((cycle - 7) & mask)];
      assert(x5795 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5796 = args[2][103 * steps + ((cycle - 7) & mask)];
      assert(x5796 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5797 = args[2][104 * steps + ((cycle - 7) & mask)];
      assert(x5797 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5798 = args[2][105 * steps + ((cycle - 7) & mask)];
      assert(x5798 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5799 = args[2][106 * steps + ((cycle - 7) & mask)];
      assert(x5799 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5800 = args[2][107 * steps + ((cycle - 7) & mask)];
      assert(x5800 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5801 = args[2][108 * steps + ((cycle - 7) & mask)];
      assert(x5801 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5802 = args[2][109 * steps + ((cycle - 7) & mask)];
      assert(x5802 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5803 = args[2][110 * steps + ((cycle - 7) & mask)];
      assert(x5803 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5804 = args[2][111 * steps + ((cycle - 7) & mask)];
      assert(x5804 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5805 = args[2][112 * steps + ((cycle - 7) & mask)];
      assert(x5805 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5806 = args[2][113 * steps + ((cycle - 7) & mask)];
      assert(x5806 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5807 = args[2][114 * steps + ((cycle - 7) & mask)];
      assert(x5807 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5808 = args[2][115 * steps + ((cycle - 7) & mask)];
      assert(x5808 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5809 = args[2][116 * steps + ((cycle - 7) & mask)];
      assert(x5809 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5810 = args[2][117 * steps + ((cycle - 7) & mask)];
      assert(x5810 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5811 = args[2][118 * steps + ((cycle - 7) & mask)];
      assert(x5811 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5812 = args[2][119 * steps + ((cycle - 7) & mask)];
      assert(x5812 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5813 = args[2][120 * steps + ((cycle - 7) & mask)];
      assert(x5813 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5814 = args[2][121 * steps + ((cycle - 7) & mask)];
      assert(x5814 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5815 = args[2][122 * steps + ((cycle - 7) & mask)];
      assert(x5815 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5816 = args[2][123 * steps + ((cycle - 7) & mask)];
      assert(x5816 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5817 = args[2][124 * steps + ((cycle - 7) & mask)];
      assert(x5817 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5818 = args[2][125 * steps + ((cycle - 7) & mask)];
      assert(x5818 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5819 = args[2][94 * steps + ((cycle - 15) & mask)];
      assert(x5819 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5820 = args[2][95 * steps + ((cycle - 15) & mask)];
      assert(x5820 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5821 = args[2][96 * steps + ((cycle - 15) & mask)];
      assert(x5821 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5822 = args[2][97 * steps + ((cycle - 15) & mask)];
      assert(x5822 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5823 = args[2][98 * steps + ((cycle - 15) & mask)];
      assert(x5823 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5824 = args[2][99 * steps + ((cycle - 15) & mask)];
      assert(x5824 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5825 = args[2][100 * steps + ((cycle - 15) & mask)];
      assert(x5825 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5826 = args[2][101 * steps + ((cycle - 15) & mask)];
      assert(x5826 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5827 = args[2][102 * steps + ((cycle - 15) & mask)];
      assert(x5827 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5828 = args[2][103 * steps + ((cycle - 15) & mask)];
      assert(x5828 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5829 = args[2][104 * steps + ((cycle - 15) & mask)];
      assert(x5829 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5830 = args[2][105 * steps + ((cycle - 15) & mask)];
      assert(x5830 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5831 = args[2][106 * steps + ((cycle - 15) & mask)];
      assert(x5831 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5832 = args[2][107 * steps + ((cycle - 15) & mask)];
      assert(x5832 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5833 = args[2][108 * steps + ((cycle - 15) & mask)];
      assert(x5833 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5834 = args[2][109 * steps + ((cycle - 15) & mask)];
      assert(x5834 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5835 = args[2][110 * steps + ((cycle - 15) & mask)];
      assert(x5835 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5836 = args[2][111 * steps + ((cycle - 15) & mask)];
      assert(x5836 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5837 = args[2][112 * steps + ((cycle - 15) & mask)];
      assert(x5837 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5838 = args[2][113 * steps + ((cycle - 15) & mask)];
      assert(x5838 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5839 = args[2][114 * steps + ((cycle - 15) & mask)];
      assert(x5839 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5840 = args[2][115 * steps + ((cycle - 15) & mask)];
      assert(x5840 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5841 = args[2][116 * steps + ((cycle - 15) & mask)];
      assert(x5841 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5842 = args[2][117 * steps + ((cycle - 15) & mask)];
      assert(x5842 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5843 = args[2][118 * steps + ((cycle - 15) & mask)];
      assert(x5843 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5844 = args[2][119 * steps + ((cycle - 15) & mask)];
      assert(x5844 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5845 = args[2][120 * steps + ((cycle - 15) & mask)];
      assert(x5845 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5846 = args[2][121 * steps + ((cycle - 15) & mask)];
      assert(x5846 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5847 = args[2][122 * steps + ((cycle - 15) & mask)];
      assert(x5847 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5848 = args[2][123 * steps + ((cycle - 15) & mask)];
      assert(x5848 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5849 = args[2][124 * steps + ((cycle - 15) & mask)];
      assert(x5849 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5850 = args[2][125 * steps + ((cycle - 15) & mask)];
      assert(x5850 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5851 = args[2][94 * steps + ((cycle - 16) & mask)];
      assert(x5851 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5852 = args[2][95 * steps + ((cycle - 16) & mask)];
      assert(x5852 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5853 = args[2][96 * steps + ((cycle - 16) & mask)];
      assert(x5853 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5854 = args[2][97 * steps + ((cycle - 16) & mask)];
      assert(x5854 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5855 = args[2][98 * steps + ((cycle - 16) & mask)];
      assert(x5855 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5856 = args[2][99 * steps + ((cycle - 16) & mask)];
      assert(x5856 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5857 = args[2][100 * steps + ((cycle - 16) & mask)];
      assert(x5857 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5858 = args[2][101 * steps + ((cycle - 16) & mask)];
      assert(x5858 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5859 = args[2][102 * steps + ((cycle - 16) & mask)];
      assert(x5859 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5860 = args[2][103 * steps + ((cycle - 16) & mask)];
      assert(x5860 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5861 = args[2][104 * steps + ((cycle - 16) & mask)];
      assert(x5861 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5862 = args[2][105 * steps + ((cycle - 16) & mask)];
      assert(x5862 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5863 = args[2][106 * steps + ((cycle - 16) & mask)];
      assert(x5863 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5864 = args[2][107 * steps + ((cycle - 16) & mask)];
      assert(x5864 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5865 = args[2][108 * steps + ((cycle - 16) & mask)];
      assert(x5865 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5866 = args[2][109 * steps + ((cycle - 16) & mask)];
      assert(x5866 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5867 = args[2][110 * steps + ((cycle - 16) & mask)];
      assert(x5867 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5868 = args[2][111 * steps + ((cycle - 16) & mask)];
      assert(x5868 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5869 = args[2][112 * steps + ((cycle - 16) & mask)];
      assert(x5869 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5870 = args[2][113 * steps + ((cycle - 16) & mask)];
      assert(x5870 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5871 = args[2][114 * steps + ((cycle - 16) & mask)];
      assert(x5871 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5872 = args[2][115 * steps + ((cycle - 16) & mask)];
      assert(x5872 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5873 = args[2][116 * steps + ((cycle - 16) & mask)];
      assert(x5873 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5874 = args[2][117 * steps + ((cycle - 16) & mask)];
      assert(x5874 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5875 = args[2][118 * steps + ((cycle - 16) & mask)];
      assert(x5875 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5876 = args[2][119 * steps + ((cycle - 16) & mask)];
      assert(x5876 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5877 = args[2][120 * steps + ((cycle - 16) & mask)];
      assert(x5877 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5878 = args[2][121 * steps + ((cycle - 16) & mask)];
      assert(x5878 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5879 = args[2][122 * steps + ((cycle - 16) & mask)];
      assert(x5879 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5880 = args[2][123 * steps + ((cycle - 16) & mask)];
      assert(x5880 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5881 = args[2][124 * steps + ((cycle - 16) & mask)];
      assert(x5881 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5882 = args[2][125 * steps + ((cycle - 16) & mask)];
      assert(x5882 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5883 = x5837 + x5822;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5884 = x5837 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5885 = x5884 * x5822;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5886 = x5883 - x5885;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5887 = x5838 + x5823;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5888 = x5838 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5889 = x5888 * x5823;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5890 = x5887 - x5889;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5891 = x5839 + x5824;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5892 = x5839 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5893 = x5892 * x5824;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5894 = x5891 - x5893;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5895 = x5840 + x5825;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5896 = x5840 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5897 = x5896 * x5825;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5898 = x5895 - x5897;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5899 = x5841 + x5826;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5900 = x5841 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5901 = x5900 * x5826;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5902 = x5899 - x5901;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5903 = x5842 + x5827;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5904 = x5842 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5905 = x5904 * x5827;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5906 = x5903 - x5905;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5907 = x5843 + x5828;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5908 = x5843 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5909 = x5908 * x5828;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5910 = x5907 - x5909;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5911 = x5844 + x5829;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5912 = x5844 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5913 = x5912 * x5829;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5914 = x5911 - x5913;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5915 = x5845 + x5830;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5916 = x5845 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5917 = x5916 * x5830;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5918 = x5915 - x5917;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5919 = x5846 + x5831;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5920 = x5846 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5921 = x5920 * x5831;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5922 = x5919 - x5921;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5923 = x5847 + x5832;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5924 = x5847 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5925 = x5924 * x5832;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5926 = x5923 - x5925;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5927 = x5848 + x5833;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5928 = x5848 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5929 = x5928 * x5833;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5930 = x5927 - x5929;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5931 = x5849 + x5834;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5932 = x5849 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5933 = x5932 * x5834;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5934 = x5931 - x5933;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5935 = x5850 + x5835;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5936 = x5850 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5937 = x5936 * x5835;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5938 = x5935 - x5937;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5939 = x5819 + x5836;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5940 = x5819 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5941 = x5940 * x5836;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5942 = x5939 - x5941;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5943 = x5820 + x5837;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5944 = x5820 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5945 = x5944 * x5837;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5946 = x5943 - x5945;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5947 = x5821 + x5838;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5948 = x5821 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5949 = x5948 * x5838;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5950 = x5947 - x5949;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5951 = x5822 + x5839;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5952 = x5822 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5953 = x5952 * x5839;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5954 = x5951 - x5953;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5955 = x5823 + x5840;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5956 = x5823 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5957 = x5956 * x5840;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5958 = x5955 - x5957;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5959 = x5824 + x5841;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5960 = x5824 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5961 = x5960 * x5841;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5962 = x5959 - x5961;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5963 = x5825 + x5842;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5964 = x5825 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5965 = x5964 * x5842;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5966 = x5963 - x5965;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5967 = x5826 + x5843;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5968 = x5826 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5969 = x5968 * x5843;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5970 = x5967 - x5969;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5971 = x5827 + x5844;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5972 = x5827 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5973 = x5972 * x5844;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5974 = x5971 - x5973;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5975 = x5828 + x5845;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5976 = x5828 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5977 = x5976 * x5845;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5978 = x5975 - x5977;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5979 = x5829 + x5846;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5980 = x5829 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5981 = x5980 * x5846;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5982 = x5979 - x5981;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5983 = x5830 + x5847;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5984 = x5830 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5985 = x5984 * x5847;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5986 = x5983 - x5985;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5987 = x5831 + x5848;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5988 = x5831 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5989 = x5988 * x5848;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5990 = x5987 - x5989;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5991 = x5832 + x5849;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5992 = x5832 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5993 = x5992 * x5849;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5994 = x5991 - x5993;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5995 = x5833 + x5850;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5996 = x5833 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5997 = x5996 * x5850;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5998 = x5995 - x5997;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5999 = x5826 + x5886;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6000 = x5968 * x5886;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6001 = x5999 - x6000;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6002 = x5827 + x5890;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6003 = x5972 * x5890;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6004 = x6002 - x6003;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6005 = x5828 + x5894;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6006 = x5976 * x5894;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6007 = x6005 - x6006;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6008 = x5829 + x5898;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6009 = x5980 * x5898;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6010 = x6008 - x6009;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6011 = x5830 + x5902;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6012 = x5984 * x5902;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6013 = x6011 - x6012;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6014 = x5831 + x5906;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6015 = x5988 * x5906;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6016 = x6014 - x6015;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6017 = x5832 + x5910;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6018 = x5992 * x5910;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6019 = x6017 - x6018;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6020 = x5833 + x5914;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6021 = x5996 * x5914;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6022 = x6020 - x6021;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6023 = x5834 + x5918;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6024 = x5834 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6025 = x6024 * x5918;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6026 = x6023 - x6025;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6027 = x5835 + x5922;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6028 = x5835 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6029 = x6028 * x5922;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6030 = x6027 - x6029;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6031 = x5836 + x5926;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6032 = x5836 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6033 = x6032 * x5926;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6034 = x6031 - x6033;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6035 = x5837 + x5930;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6036 = x5884 * x5930;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6037 = x6035 - x6036;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6038 = x5838 + x5934;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6039 = x5888 * x5934;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6040 = x6038 - x6039;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6041 = x5839 + x5938;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6042 = x5892 * x5938;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6043 = x6041 - x6042;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6044 = x5840 + x5942;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6045 = x5896 * x5942;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6046 = x6044 - x6045;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6047 = x5841 + x5946;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6048 = x5900 * x5946;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6049 = x6047 - x6048;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6050 = x5842 + x5950;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6051 = x5904 * x5950;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6052 = x6050 - x6051;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6053 = x5843 + x5954;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6054 = x5908 * x5954;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6055 = x6053 - x6054;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6056 = x5844 + x5958;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6057 = x5912 * x5958;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6058 = x6056 - x6057;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6059 = x5845 + x5962;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6060 = x5916 * x5962;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6061 = x6059 - x6060;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6062 = x5846 + x5966;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6063 = x5920 * x5966;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6064 = x6062 - x6063;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6065 = x5847 + x5970;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6066 = x5924 * x5970;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6067 = x6065 - x6066;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6068 = x5848 + x5974;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6069 = x5928 * x5974;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6070 = x6068 - x6069;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6071 = x5849 + x5978;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6072 = x5932 * x5978;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6073 = x6071 - x6072;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6074 = x5850 + x5982;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6075 = x5936 * x5982;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6076 = x6074 - x6075;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6077 = x5819 + x5986;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6078 = x5940 * x5986;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6079 = x6077 - x6078;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6080 = x5820 + x5990;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6081 = x5944 * x5990;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6082 = x6080 - x6081;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6083 = x5821 + x5994;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6084 = x5948 * x5994;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6085 = x6083 - x6084;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6086 = x5822 + x5998;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6087 = x5952 * x5998;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6088 = x6086 - x6087;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6089 = x5823 + x5834;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6090 = x5956 * x5834;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6091 = x6089 - x6090;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6092 = x5824 + x5835;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6093 = x5960 * x5835;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6094 = x6092 - x6093;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6095 = x5825 + x5836;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6096 = x5964 * x5836;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6097 = x6095 - x6096;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6098 = x5774 + x5765;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6099 = x5774 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6100 = x6099 * x5765;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6101 = x6098 - x6100;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6102 = x5775 + x5766;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6103 = x5775 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6104 = x6103 * x5766;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6105 = x6102 - x6104;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6106 = x5776 + x5767;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6107 = x5776 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6108 = x6107 * x5767;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6109 = x6106 - x6108;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6110 = x5777 + x5768;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6111 = x5777 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6112 = x6111 * x5768;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6113 = x6110 - x6112;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6114 = x5778 + x5769;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6115 = x5778 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6116 = x6115 * x5769;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6117 = x6114 - x6116;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6118 = x5779 + x5770;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6119 = x5779 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6120 = x6119 * x5770;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6121 = x6118 - x6120;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6122 = x5780 + x5771;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6123 = x5780 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6124 = x6123 * x5771;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6125 = x6122 - x6124;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6126 = x5781 + x5772;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6127 = x5781 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6128 = x6127 * x5772;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6129 = x6126 - x6128;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6130 = x5782 + x5773;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6131 = x5782 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6132 = x6131 * x5773;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6133 = x6130 - x6132;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6134 = x5783 + x5774;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6135 = x5783 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6136 = x6135 * x5774;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6137 = x6134 - x6136;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6138 = x5784 + x5775;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6139 = x5784 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6140 = x6139 * x5775;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6141 = x6138 - x6140;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6142 = x5785 + x5776;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6143 = x5785 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6144 = x6143 * x5776;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6145 = x6142 - x6144;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6146 = x5786 + x5777;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6147 = x5786 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6148 = x6147 * x5777;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6149 = x6146 - x6148;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6150 = x5755 + x5778;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6151 = x5755 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6152 = x6151 * x5778;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6153 = x6150 - x6152;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6154 = x5756 + x5779;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6155 = x5756 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6156 = x6155 * x5779;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6157 = x6154 - x6156;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6158 = x5757 + x5780;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6159 = x5757 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6160 = x6159 * x5780;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6161 = x6158 - x6160;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6162 = x5758 + x5781;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6163 = x5758 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6164 = x6163 * x5781;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6165 = x6162 - x6164;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6166 = x5759 + x5782;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6167 = x5759 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6168 = x6167 * x5782;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6169 = x6166 - x6168;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6170 = x5760 + x5783;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6171 = x5760 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6172 = x6171 * x5783;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6173 = x6170 - x6172;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6174 = x5761 + x5784;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6175 = x5761 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6176 = x6175 * x5784;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6177 = x6174 - x6176;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6178 = x5762 + x5785;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6179 = x5762 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6180 = x6179 * x5785;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6181 = x6178 - x6180;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6182 = x5763 + x5786;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6183 = x5763 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6184 = x6183 * x5786;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6185 = x6182 - x6184;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6186 = x5772 + x6101;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6187 = x5772 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6188 = x6187 * x6101;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6189 = x6186 - x6188;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6190 = x5773 + x6105;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6191 = x5773 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6192 = x6191 * x6105;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6193 = x6190 - x6192;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6194 = x5774 + x6109;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6195 = x6099 * x6109;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6196 = x6194 - x6195;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6197 = x5775 + x6113;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6198 = x6103 * x6113;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6199 = x6197 - x6198;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6200 = x5776 + x6117;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6201 = x6107 * x6117;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6202 = x6200 - x6201;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6203 = x5777 + x6121;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6204 = x6111 * x6121;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6205 = x6203 - x6204;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6206 = x5778 + x6125;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6207 = x6115 * x6125;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6208 = x6206 - x6207;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6209 = x5779 + x6129;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6210 = x6119 * x6129;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6211 = x6209 - x6210;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6212 = x5780 + x6133;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6213 = x6123 * x6133;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6214 = x6212 - x6213;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6215 = x5781 + x6137;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6216 = x6127 * x6137;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6217 = x6215 - x6216;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6218 = x5782 + x6141;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6219 = x6131 * x6141;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6220 = x6218 - x6219;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6221 = x5783 + x6145;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6222 = x6135 * x6145;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6223 = x6221 - x6222;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6224 = x5784 + x6149;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6225 = x6139 * x6149;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6226 = x6224 - x6225;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6227 = x5785 + x6153;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6228 = x6143 * x6153;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6229 = x6227 - x6228;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6230 = x5786 + x6157;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6231 = x6147 * x6157;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6232 = x6230 - x6231;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6233 = x5755 + x6161;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6234 = x6151 * x6161;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6235 = x6233 - x6234;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6236 = x5756 + x6165;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6237 = x6155 * x6165;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6238 = x6236 - x6237;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6239 = x5757 + x6169;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6240 = x6159 * x6169;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6241 = x6239 - x6240;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6242 = x5758 + x6173;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6243 = x6163 * x6173;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6244 = x6242 - x6243;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6245 = x5759 + x6177;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6246 = x6167 * x6177;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6247 = x6245 - x6246;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6248 = x5760 + x6181;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6249 = x6171 * x6181;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6250 = x6248 - x6249;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6251 = x5761 + x6185;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6252 = x6175 * x6185;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6253 = x6251 - x6252;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6254 = x5762 + x5764;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6255 = x6179 * x5764;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6256 = x6254 - x6255;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6257 = x5763 + x5765;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6258 = x6183 * x5765;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6259 = x6257 - x6258;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6260 = x5764 + x5766;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6261 = x5764 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6262 = x6261 * x5766;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6263 = x6260 - x6262;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6264 = x5765 + x5767;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6265 = x5765 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6266 = x6265 * x5767;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6267 = x6264 - x6266;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6268 = x5766 + x5768;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6269 = x5766 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6270 = x6269 * x5768;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6271 = x6268 - x6270;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6272 = x5767 + x5769;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6273 = x5767 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6274 = x6273 * x5769;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6275 = x6272 - x6274;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6276 = x5768 + x5770;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6277 = x5768 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6278 = x6277 * x5770;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6279 = x6276 - x6278;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6280 = x5769 + x5771;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6281 = x5769 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6282 = x6281 * x5771;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6283 = x6280 - x6282;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6284 = x5770 + x5772;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6285 = x5770 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6286 = x6285 * x5772;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6287 = x6284 - x6286;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6288 = x5771 + x5773;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6289 = x5771 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6290 = x6289 * x5773;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6291 = x6288 - x6290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6292 = x5852 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6293 = x5851 + x6292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6294 = x5853 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6295 = x6293 + x6294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6296 = x5854 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6297 = x6295 + x6296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6298 = x5855 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6299 = x6297 + x6298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6300 = x5856 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6301 = x6299 + x6300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6302 = x5857 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6303 = x6301 + x6302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6304 = x5858 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6305 = x6303 + x6304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6306 = x5859 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6307 = x6305 + x6306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6308 = x5860 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6309 = x6307 + x6308;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6310 = x5861 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6311 = x6309 + x6310;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6312 = x5862 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6313 = x6311 + x6312;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6314 = x5863 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6315 = x6313 + x6314;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6316 = x5864 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6317 = x6315 + x6316;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6318 = x5865 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6319 = x6317 + x6318;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6320 = x5866 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6321 = x6319 + x6320;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6322 = x5868 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6323 = x5867 + x6322;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6324 = x5869 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6325 = x6323 + x6324;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6326 = x5870 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6327 = x6325 + x6326;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6328 = x5871 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6329 = x6327 + x6328;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6330 = x5872 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6331 = x6329 + x6330;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6332 = x5873 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6333 = x6331 + x6332;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6334 = x5874 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6335 = x6333 + x6334;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6336 = x5875 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6337 = x6335 + x6336;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6338 = x5876 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6339 = x6337 + x6338;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6340 = x5877 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6341 = x6339 + x6340;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6342 = x5878 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6343 = x6341 + x6342;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6344 = x5879 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6345 = x6343 + x6344;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6346 = x5880 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6347 = x6345 + x6346;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6348 = x5881 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6349 = x6347 + x6348;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6350 = x5882 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6351 = x6349 + x6350;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6352 = x6004 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6353 = x6001 + x6352;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6354 = x6007 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6355 = x6353 + x6354;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6356 = x6010 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6357 = x6355 + x6356;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6358 = x6013 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6359 = x6357 + x6358;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6360 = x6016 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6361 = x6359 + x6360;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6362 = x6019 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6363 = x6361 + x6362;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6364 = x6022 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6365 = x6363 + x6364;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6366 = x6026 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6367 = x6365 + x6366;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6368 = x6030 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6369 = x6367 + x6368;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6370 = x6034 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6371 = x6369 + x6370;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6372 = x6037 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6373 = x6371 + x6372;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6374 = x6040 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6375 = x6373 + x6374;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6376 = x6043 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6377 = x6375 + x6376;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6378 = x6046 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6379 = x6377 + x6378;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6380 = x6049 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6381 = x6379 + x6380;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6382 = x6055 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6383 = x6052 + x6382;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6384 = x6058 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6385 = x6383 + x6384;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6386 = x6061 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6387 = x6385 + x6386;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6388 = x6064 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6389 = x6387 + x6388;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6390 = x6067 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6391 = x6389 + x6390;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6392 = x6070 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6393 = x6391 + x6392;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6394 = x6073 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6395 = x6393 + x6394;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6396 = x6076 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6397 = x6395 + x6396;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6398 = x6079 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6399 = x6397 + x6398;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6400 = x6082 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6401 = x6399 + x6400;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6402 = x6085 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6403 = x6401 + x6402;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6404 = x6088 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6405 = x6403 + x6404;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6406 = x6091 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6407 = x6405 + x6406;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6408 = x6094 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6409 = x6407 + x6408;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6410 = x6097 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6411 = x6409 + x6410;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6412 = x5788 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6413 = x5787 + x6412;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6414 = x5789 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6415 = x6413 + x6414;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6416 = x5790 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6417 = x6415 + x6416;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6418 = x5791 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6419 = x6417 + x6418;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6420 = x5792 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6421 = x6419 + x6420;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6422 = x5793 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6423 = x6421 + x6422;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6424 = x5794 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6425 = x6423 + x6424;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6426 = x5795 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6427 = x6425 + x6426;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6428 = x5796 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6429 = x6427 + x6428;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6430 = x5797 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6431 = x6429 + x6430;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6432 = x5798 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6433 = x6431 + x6432;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6434 = x5799 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6435 = x6433 + x6434;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6436 = x5800 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6437 = x6435 + x6436;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6438 = x5801 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6439 = x6437 + x6438;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6440 = x5802 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6441 = x6439 + x6440;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6442 = x5804 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6443 = x5803 + x6442;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6444 = x5805 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6445 = x6443 + x6444;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6446 = x5806 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6447 = x6445 + x6446;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6448 = x5807 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6449 = x6447 + x6448;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6450 = x5808 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6451 = x6449 + x6450;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6452 = x5809 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6453 = x6451 + x6452;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6454 = x5810 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6455 = x6453 + x6454;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6456 = x5811 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6457 = x6455 + x6456;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6458 = x5812 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6459 = x6457 + x6458;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6460 = x5813 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6461 = x6459 + x6460;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6462 = x5814 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6463 = x6461 + x6462;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6464 = x5815 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6465 = x6463 + x6464;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6466 = x5816 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6467 = x6465 + x6466;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6468 = x5817 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6469 = x6467 + x6468;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6470 = x5818 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6471 = x6469 + x6470;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6472 = x6193 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6473 = x6189 + x6472;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6474 = x6196 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6475 = x6473 + x6474;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6476 = x6199 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6477 = x6475 + x6476;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6478 = x6202 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6479 = x6477 + x6478;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6480 = x6205 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6481 = x6479 + x6480;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6482 = x6208 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6483 = x6481 + x6482;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6484 = x6211 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6485 = x6483 + x6484;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6486 = x6214 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6487 = x6485 + x6486;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6488 = x6217 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6489 = x6487 + x6488;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6490 = x6220 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6491 = x6489 + x6490;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6492 = x6223 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6493 = x6491 + x6492;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6494 = x6226 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6495 = x6493 + x6494;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6496 = x6229 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6497 = x6495 + x6496;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6498 = x6232 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6499 = x6497 + x6498;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6500 = x6235 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6501 = x6499 + x6500;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6502 = x6241 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6503 = x6238 + x6502;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6504 = x6244 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6505 = x6503 + x6504;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6506 = x6247 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6507 = x6505 + x6506;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6508 = x6250 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6509 = x6507 + x6508;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6510 = x6253 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6511 = x6509 + x6510;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6512 = x6256 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6513 = x6511 + x6512;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6514 = x6259 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6515 = x6513 + x6514;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6516 = x6263 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6517 = x6515 + x6516;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6518 = x6267 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6519 = x6517 + x6518;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6520 = x6271 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6521 = x6519 + x6520;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6522 = x6275 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6523 = x6521 + x6522;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6524 = x6279 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6525 = x6523 + x6524;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6526 = x6283 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6527 = x6525 + x6526;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6528 = x6287 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6529 = x6527 + x6528;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6530 = x6291 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6531 = x6529 + x6530;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6532 = x6441 + x6501;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6533 = x6471 + x6531;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6534 = x6381 + x6532;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6535 = x6411 + x6533;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6536 = x6321 + x6534;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6537 = x6351 + x6535;
      // loc("zirgen/circuit/recursion/sha.cpp":261:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6536);
        reg = x6536;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":261:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6537);
        reg = x6537;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w_raw[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6538 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x6538 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w_raw[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6539 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x6539 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6540 = Fp(x6538.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][94 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6540);
          reg = x6540;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6541 = Fp(x6538.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6542 = x6541 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][95 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6542);
          reg = x6542;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6543 = Fp(x6538.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6544 = x6543 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][96 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6544);
          reg = x6544;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6545 = Fp(x6538.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6546 = x6545 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][97 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6546);
          reg = x6546;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6547 = Fp(x6538.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6548 = x6547 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6548);
          reg = x6548;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6549 = Fp(x6538.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6550 = x6549 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6550);
          reg = x6550;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6551 = Fp(x6538.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6552 = x6551 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6552);
          reg = x6552;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6553 = Fp(x6538.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6554 = x6553 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][101 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6554);
          reg = x6554;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6555 = Fp(x6538.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6556 = x6555 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][102 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6556);
          reg = x6556;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6557 = Fp(x6538.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6558 = x6557 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][103 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6558);
          reg = x6558;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6559 = Fp(x6538.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6560 = x6559 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][104 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6560);
          reg = x6560;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6561 = Fp(x6538.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6562 = x6561 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][105 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6562);
          reg = x6562;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6563 = Fp(x6538.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6564 = x6563 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][106 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6564);
          reg = x6564;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6565 = Fp(x6538.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6566 = x6565 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6566);
          reg = x6566;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6567 = Fp(x6538.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6568 = x6567 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6568);
          reg = x6568;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6569 = Fp(x6538.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6570 = x6569 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6570);
          reg = x6570;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6571 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x6571 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6572 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x6572 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6573 = x6572 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6574 = x6571 + x6573;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6575 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x6575 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6576 = x6575 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6577 = x6574 + x6576;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6578 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x6578 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6579 = x6578 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6580 = x6577 + x6579;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6581 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x6581 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6582 = x6581 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6583 = x6580 + x6582;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6584 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x6584 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6585 = x6584 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6586 = x6583 + x6585;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6587 = args[2][100 * steps + ((cycle - 0) & mask)];
      assert(x6587 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6588 = x6587 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6589 = x6586 + x6588;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6590 = args[2][101 * steps + ((cycle - 0) & mask)];
      assert(x6590 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6591 = x6590 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6592 = x6589 + x6591;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6593 = args[2][102 * steps + ((cycle - 0) & mask)];
      assert(x6593 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6594 = x6593 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6595 = x6592 + x6594;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6596 = args[2][103 * steps + ((cycle - 0) & mask)];
      assert(x6596 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6597 = x6596 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6598 = x6595 + x6597;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6599 = args[2][104 * steps + ((cycle - 0) & mask)];
      assert(x6599 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6600 = x6599 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6601 = x6598 + x6600;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6602 = args[2][105 * steps + ((cycle - 0) & mask)];
      assert(x6602 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6603 = x6602 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6604 = x6601 + x6603;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6605 = args[2][106 * steps + ((cycle - 0) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6606 = x6605 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6607 = x6604 + x6606;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6608 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6609 = x6608 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6610 = x6607 + x6609;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6611 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x6611 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6612 = x6611 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6613 = x6610 + x6612;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6614 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x6614 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6615 = x6614 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6616 = x6613 + x6615;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x6617 = x6538 - x6616;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x6618 = x6617 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x6619 = Fp(x6618.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6619);
          reg = x6619;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x6620 = x6539 + x6618;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6621 = Fp(x6620.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6621);
          reg = x6621;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6622 = Fp(x6620.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6623 = x6622 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6623);
          reg = x6623;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6624 = Fp(x6620.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6625 = x6624 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6625);
          reg = x6625;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6626 = Fp(x6620.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6627 = x6626 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6627);
          reg = x6627;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6628 = Fp(x6620.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6629 = x6628 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6629);
          reg = x6629;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6630 = Fp(x6620.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6631 = x6630 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6631);
          reg = x6631;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6632 = Fp(x6620.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6633 = x6632 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6633);
          reg = x6633;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6634 = Fp(x6620.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6635 = x6634 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6635);
          reg = x6635;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6636 = Fp(x6620.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6637 = x6636 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6637);
          reg = x6637;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6638 = Fp(x6620.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6639 = x6638 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6639);
          reg = x6639;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6640 = Fp(x6620.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6641 = x6640 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6641);
          reg = x6641;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6642 = Fp(x6620.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6643 = x6642 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6643);
          reg = x6643;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6644 = Fp(x6620.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6645 = x6644 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6645);
          reg = x6645;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6646 = Fp(x6620.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6647 = x6646 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6647);
          reg = x6647;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6648 = Fp(x6620.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6649 = x6648 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6649);
          reg = x6649;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6650 = Fp(x6620.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6651 = x6650 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6651);
          reg = x6651;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6652 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x6652 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6653 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x6653 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6654 = x6653 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6655 = x6652 + x6654;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6656 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x6656 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6657 = x6656 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6658 = x6655 + x6657;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6659 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x6659 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6660 = x6659 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6661 = x6658 + x6660;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6662 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x6662 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6663 = x6662 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6664 = x6661 + x6663;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6665 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x6665 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6666 = x6665 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6667 = x6664 + x6666;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6668 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x6668 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6669 = x6668 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6670 = x6667 + x6669;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6671 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x6671 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6672 = x6671 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6673 = x6670 + x6672;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6674 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x6674 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6675 = x6674 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6676 = x6673 + x6675;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6677 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6677 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6678 = x6677 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6679 = x6676 + x6678;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6680 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6680 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6681 = x6680 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6682 = x6679 + x6681;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6683 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6683 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6684 = x6683 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6685 = x6682 + x6684;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6686 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x6686 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6687 = x6686 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6688 = x6685 + x6687;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6689 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x6689 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6690 = x6689 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6691 = x6688 + x6690;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6692 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x6692 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6693 = x6692 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6694 = x6691 + x6693;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6695 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x6695 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6696 = x6695 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6697 = x6694 + x6696;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x6698 = x6620 - x6697;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x6699 = x6698 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x6700 = Fp(x6699.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6700);
          reg = x6700;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6701 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x6701 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6702 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x6702 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6703 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6704 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x6704 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6705 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x6705 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6706 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6707 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6708 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x6708 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6709 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x6709 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6710 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6711 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x6711 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6712 = args[2][37 * steps + ((cycle - 1) & mask)];
      assert(x6712 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6713 = args[2][38 * steps + ((cycle - 1) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6714 = args[2][39 * steps + ((cycle - 1) & mask)];
      assert(x6714 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6715 = args[2][40 * steps + ((cycle - 1) & mask)];
      assert(x6715 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6716 = args[2][41 * steps + ((cycle - 1) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6717 = args[2][42 * steps + ((cycle - 1) & mask)];
      assert(x6717 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6718 = args[2][43 * steps + ((cycle - 1) & mask)];
      assert(x6718 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6719 = args[2][44 * steps + ((cycle - 1) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6720 = args[2][45 * steps + ((cycle - 1) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6721 = args[2][46 * steps + ((cycle - 1) & mask)];
      assert(x6721 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6722 = args[2][47 * steps + ((cycle - 1) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6723 = args[2][48 * steps + ((cycle - 1) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6724 = args[2][49 * steps + ((cycle - 1) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6725 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6726 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6727 = args[2][52 * steps + ((cycle - 1) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6728 = args[2][53 * steps + ((cycle - 1) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6729 = args[2][54 * steps + ((cycle - 1) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6730 = args[2][55 * steps + ((cycle - 1) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6731 = args[2][56 * steps + ((cycle - 1) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6732 = args[2][57 * steps + ((cycle - 1) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6733 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6734 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6735 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6736 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6737 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6738 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6739 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x6739 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6740 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x6740 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6741 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x6741 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6742 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x6742 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6743 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x6743 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6744 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x6744 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6745 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x6745 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6746 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x6746 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6747 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x6747 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6748 = args[2][41 * steps + ((cycle - 2) & mask)];
      assert(x6748 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6749 = args[2][42 * steps + ((cycle - 2) & mask)];
      assert(x6749 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6750 = args[2][43 * steps + ((cycle - 2) & mask)];
      assert(x6750 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6751 = args[2][44 * steps + ((cycle - 2) & mask)];
      assert(x6751 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6752 = args[2][45 * steps + ((cycle - 2) & mask)];
      assert(x6752 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6753 = args[2][46 * steps + ((cycle - 2) & mask)];
      assert(x6753 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6754 = args[2][47 * steps + ((cycle - 2) & mask)];
      assert(x6754 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6755 = args[2][48 * steps + ((cycle - 2) & mask)];
      assert(x6755 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6756 = args[2][49 * steps + ((cycle - 2) & mask)];
      assert(x6756 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6757 = args[2][50 * steps + ((cycle - 2) & mask)];
      assert(x6757 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6758 = args[2][51 * steps + ((cycle - 2) & mask)];
      assert(x6758 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6759 = args[2][52 * steps + ((cycle - 2) & mask)];
      assert(x6759 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6760 = args[2][53 * steps + ((cycle - 2) & mask)];
      assert(x6760 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6761 = args[2][54 * steps + ((cycle - 2) & mask)];
      assert(x6761 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6762 = args[2][55 * steps + ((cycle - 2) & mask)];
      assert(x6762 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6763 = args[2][56 * steps + ((cycle - 2) & mask)];
      assert(x6763 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6764 = args[2][57 * steps + ((cycle - 2) & mask)];
      assert(x6764 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6765 = args[2][26 * steps + ((cycle - 3) & mask)];
      assert(x6765 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6766 = args[2][27 * steps + ((cycle - 3) & mask)];
      assert(x6766 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6767 = args[2][28 * steps + ((cycle - 3) & mask)];
      assert(x6767 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6768 = args[2][29 * steps + ((cycle - 3) & mask)];
      assert(x6768 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6769 = args[2][30 * steps + ((cycle - 3) & mask)];
      assert(x6769 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6770 = args[2][31 * steps + ((cycle - 3) & mask)];
      assert(x6770 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6771 = args[2][32 * steps + ((cycle - 3) & mask)];
      assert(x6771 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6772 = args[2][33 * steps + ((cycle - 3) & mask)];
      assert(x6772 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6773 = args[2][34 * steps + ((cycle - 3) & mask)];
      assert(x6773 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6774 = args[2][35 * steps + ((cycle - 3) & mask)];
      assert(x6774 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6775 = args[2][36 * steps + ((cycle - 3) & mask)];
      assert(x6775 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6776 = args[2][37 * steps + ((cycle - 3) & mask)];
      assert(x6776 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6777 = args[2][38 * steps + ((cycle - 3) & mask)];
      assert(x6777 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6778 = args[2][39 * steps + ((cycle - 3) & mask)];
      assert(x6778 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6779 = args[2][40 * steps + ((cycle - 3) & mask)];
      assert(x6779 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6780 = args[2][41 * steps + ((cycle - 3) & mask)];
      assert(x6780 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6781 = args[2][42 * steps + ((cycle - 3) & mask)];
      assert(x6781 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6782 = args[2][43 * steps + ((cycle - 3) & mask)];
      assert(x6782 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6783 = args[2][44 * steps + ((cycle - 3) & mask)];
      assert(x6783 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6784 = args[2][45 * steps + ((cycle - 3) & mask)];
      assert(x6784 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6785 = args[2][46 * steps + ((cycle - 3) & mask)];
      assert(x6785 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6786 = args[2][47 * steps + ((cycle - 3) & mask)];
      assert(x6786 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6787 = args[2][48 * steps + ((cycle - 3) & mask)];
      assert(x6787 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6788 = args[2][49 * steps + ((cycle - 3) & mask)];
      assert(x6788 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6789 = args[2][50 * steps + ((cycle - 3) & mask)];
      assert(x6789 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6790 = args[2][51 * steps + ((cycle - 3) & mask)];
      assert(x6790 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6791 = args[2][52 * steps + ((cycle - 3) & mask)];
      assert(x6791 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6792 = args[2][53 * steps + ((cycle - 3) & mask)];
      assert(x6792 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6793 = args[2][54 * steps + ((cycle - 3) & mask)];
      assert(x6793 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6794 = args[2][55 * steps + ((cycle - 3) & mask)];
      assert(x6794 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6795 = args[2][56 * steps + ((cycle - 3) & mask)];
      assert(x6795 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6796 = args[2][57 * steps + ((cycle - 3) & mask)];
      assert(x6796 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6797 = args[2][26 * steps + ((cycle - 4) & mask)];
      assert(x6797 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6798 = args[2][27 * steps + ((cycle - 4) & mask)];
      assert(x6798 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6799 = args[2][28 * steps + ((cycle - 4) & mask)];
      assert(x6799 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6800 = args[2][29 * steps + ((cycle - 4) & mask)];
      assert(x6800 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6801 = args[2][30 * steps + ((cycle - 4) & mask)];
      assert(x6801 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6802 = args[2][31 * steps + ((cycle - 4) & mask)];
      assert(x6802 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6803 = args[2][32 * steps + ((cycle - 4) & mask)];
      assert(x6803 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6804 = args[2][33 * steps + ((cycle - 4) & mask)];
      assert(x6804 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6805 = args[2][34 * steps + ((cycle - 4) & mask)];
      assert(x6805 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6806 = args[2][35 * steps + ((cycle - 4) & mask)];
      assert(x6806 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6807 = args[2][36 * steps + ((cycle - 4) & mask)];
      assert(x6807 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6808 = args[2][37 * steps + ((cycle - 4) & mask)];
      assert(x6808 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6809 = args[2][38 * steps + ((cycle - 4) & mask)];
      assert(x6809 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6810 = args[2][39 * steps + ((cycle - 4) & mask)];
      assert(x6810 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6811 = args[2][40 * steps + ((cycle - 4) & mask)];
      assert(x6811 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6812 = args[2][41 * steps + ((cycle - 4) & mask)];
      assert(x6812 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6813 = args[2][42 * steps + ((cycle - 4) & mask)];
      assert(x6813 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6814 = args[2][43 * steps + ((cycle - 4) & mask)];
      assert(x6814 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6815 = args[2][44 * steps + ((cycle - 4) & mask)];
      assert(x6815 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6816 = args[2][45 * steps + ((cycle - 4) & mask)];
      assert(x6816 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6817 = args[2][46 * steps + ((cycle - 4) & mask)];
      assert(x6817 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6818 = args[2][47 * steps + ((cycle - 4) & mask)];
      assert(x6818 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6819 = args[2][48 * steps + ((cycle - 4) & mask)];
      assert(x6819 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6820 = args[2][49 * steps + ((cycle - 4) & mask)];
      assert(x6820 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6821 = args[2][50 * steps + ((cycle - 4) & mask)];
      assert(x6821 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6822 = args[2][51 * steps + ((cycle - 4) & mask)];
      assert(x6822 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6823 = args[2][52 * steps + ((cycle - 4) & mask)];
      assert(x6823 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6824 = args[2][53 * steps + ((cycle - 4) & mask)];
      assert(x6824 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6825 = args[2][54 * steps + ((cycle - 4) & mask)];
      assert(x6825 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6826 = args[2][55 * steps + ((cycle - 4) & mask)];
      assert(x6826 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6827 = args[2][56 * steps + ((cycle - 4) & mask)];
      assert(x6827 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6828 = args[2][57 * steps + ((cycle - 4) & mask)];
      assert(x6828 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6829 = args[2][60 * steps + ((cycle - 1) & mask)];
      assert(x6829 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6830 = args[2][61 * steps + ((cycle - 1) & mask)];
      assert(x6830 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6831 = args[2][62 * steps + ((cycle - 1) & mask)];
      assert(x6831 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6832 = args[2][63 * steps + ((cycle - 1) & mask)];
      assert(x6832 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6833 = args[2][64 * steps + ((cycle - 1) & mask)];
      assert(x6833 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6834 = args[2][65 * steps + ((cycle - 1) & mask)];
      assert(x6834 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6835 = args[2][66 * steps + ((cycle - 1) & mask)];
      assert(x6835 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6836 = args[2][67 * steps + ((cycle - 1) & mask)];
      assert(x6836 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6837 = args[2][68 * steps + ((cycle - 1) & mask)];
      assert(x6837 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6838 = args[2][69 * steps + ((cycle - 1) & mask)];
      assert(x6838 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6839 = args[2][70 * steps + ((cycle - 1) & mask)];
      assert(x6839 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6840 = args[2][71 * steps + ((cycle - 1) & mask)];
      assert(x6840 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6841 = args[2][72 * steps + ((cycle - 1) & mask)];
      assert(x6841 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6842 = args[2][73 * steps + ((cycle - 1) & mask)];
      assert(x6842 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6843 = args[2][74 * steps + ((cycle - 1) & mask)];
      assert(x6843 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6844 = args[2][75 * steps + ((cycle - 1) & mask)];
      assert(x6844 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6845 = args[2][76 * steps + ((cycle - 1) & mask)];
      assert(x6845 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6846 = args[2][77 * steps + ((cycle - 1) & mask)];
      assert(x6846 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6847 = args[2][78 * steps + ((cycle - 1) & mask)];
      assert(x6847 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6848 = args[2][79 * steps + ((cycle - 1) & mask)];
      assert(x6848 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6849 = args[2][80 * steps + ((cycle - 1) & mask)];
      assert(x6849 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6850 = args[2][81 * steps + ((cycle - 1) & mask)];
      assert(x6850 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6851 = args[2][82 * steps + ((cycle - 1) & mask)];
      assert(x6851 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6852 = args[2][83 * steps + ((cycle - 1) & mask)];
      assert(x6852 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6853 = args[2][84 * steps + ((cycle - 1) & mask)];
      assert(x6853 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6854 = args[2][85 * steps + ((cycle - 1) & mask)];
      assert(x6854 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6855 = args[2][86 * steps + ((cycle - 1) & mask)];
      assert(x6855 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6856 = args[2][87 * steps + ((cycle - 1) & mask)];
      assert(x6856 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6857 = args[2][88 * steps + ((cycle - 1) & mask)];
      assert(x6857 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6858 = args[2][89 * steps + ((cycle - 1) & mask)];
      assert(x6858 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6859 = args[2][90 * steps + ((cycle - 1) & mask)];
      assert(x6859 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6860 = args[2][91 * steps + ((cycle - 1) & mask)];
      assert(x6860 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6861 = args[2][60 * steps + ((cycle - 2) & mask)];
      assert(x6861 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6862 = args[2][61 * steps + ((cycle - 2) & mask)];
      assert(x6862 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6863 = args[2][62 * steps + ((cycle - 2) & mask)];
      assert(x6863 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6864 = args[2][63 * steps + ((cycle - 2) & mask)];
      assert(x6864 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6865 = args[2][64 * steps + ((cycle - 2) & mask)];
      assert(x6865 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6866 = args[2][65 * steps + ((cycle - 2) & mask)];
      assert(x6866 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6867 = args[2][66 * steps + ((cycle - 2) & mask)];
      assert(x6867 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6868 = args[2][67 * steps + ((cycle - 2) & mask)];
      assert(x6868 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6869 = args[2][68 * steps + ((cycle - 2) & mask)];
      assert(x6869 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6870 = args[2][69 * steps + ((cycle - 2) & mask)];
      assert(x6870 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6871 = args[2][70 * steps + ((cycle - 2) & mask)];
      assert(x6871 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6872 = args[2][71 * steps + ((cycle - 2) & mask)];
      assert(x6872 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6873 = args[2][72 * steps + ((cycle - 2) & mask)];
      assert(x6873 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6874 = args[2][73 * steps + ((cycle - 2) & mask)];
      assert(x6874 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6875 = args[2][74 * steps + ((cycle - 2) & mask)];
      assert(x6875 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6876 = args[2][75 * steps + ((cycle - 2) & mask)];
      assert(x6876 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6877 = args[2][76 * steps + ((cycle - 2) & mask)];
      assert(x6877 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6878 = args[2][77 * steps + ((cycle - 2) & mask)];
      assert(x6878 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6879 = args[2][78 * steps + ((cycle - 2) & mask)];
      assert(x6879 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6880 = args[2][79 * steps + ((cycle - 2) & mask)];
      assert(x6880 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6881 = args[2][80 * steps + ((cycle - 2) & mask)];
      assert(x6881 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6882 = args[2][81 * steps + ((cycle - 2) & mask)];
      assert(x6882 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6883 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x6883 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6884 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x6884 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6885 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x6885 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6886 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x6886 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6887 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x6887 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6888 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x6888 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6889 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x6889 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6890 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x6890 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6891 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x6891 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6892 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x6892 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6893 = args[2][60 * steps + ((cycle - 3) & mask)];
      assert(x6893 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6894 = args[2][61 * steps + ((cycle - 3) & mask)];
      assert(x6894 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6895 = args[2][62 * steps + ((cycle - 3) & mask)];
      assert(x6895 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6896 = args[2][63 * steps + ((cycle - 3) & mask)];
      assert(x6896 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6897 = args[2][64 * steps + ((cycle - 3) & mask)];
      assert(x6897 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6898 = args[2][65 * steps + ((cycle - 3) & mask)];
      assert(x6898 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6899 = args[2][66 * steps + ((cycle - 3) & mask)];
      assert(x6899 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6900 = args[2][67 * steps + ((cycle - 3) & mask)];
      assert(x6900 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6901 = args[2][68 * steps + ((cycle - 3) & mask)];
      assert(x6901 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6902 = args[2][69 * steps + ((cycle - 3) & mask)];
      assert(x6902 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6903 = args[2][70 * steps + ((cycle - 3) & mask)];
      assert(x6903 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6904 = args[2][71 * steps + ((cycle - 3) & mask)];
      assert(x6904 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6905 = args[2][72 * steps + ((cycle - 3) & mask)];
      assert(x6905 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6906 = args[2][73 * steps + ((cycle - 3) & mask)];
      assert(x6906 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6907 = args[2][74 * steps + ((cycle - 3) & mask)];
      assert(x6907 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6908 = args[2][75 * steps + ((cycle - 3) & mask)];
      assert(x6908 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6909 = args[2][76 * steps + ((cycle - 3) & mask)];
      assert(x6909 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6910 = args[2][77 * steps + ((cycle - 3) & mask)];
      assert(x6910 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6911 = args[2][78 * steps + ((cycle - 3) & mask)];
      assert(x6911 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6912 = args[2][79 * steps + ((cycle - 3) & mask)];
      assert(x6912 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6913 = args[2][80 * steps + ((cycle - 3) & mask)];
      assert(x6913 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6914 = args[2][81 * steps + ((cycle - 3) & mask)];
      assert(x6914 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6915 = args[2][82 * steps + ((cycle - 3) & mask)];
      assert(x6915 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6916 = args[2][83 * steps + ((cycle - 3) & mask)];
      assert(x6916 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6917 = args[2][84 * steps + ((cycle - 3) & mask)];
      assert(x6917 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6918 = args[2][85 * steps + ((cycle - 3) & mask)];
      assert(x6918 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6919 = args[2][86 * steps + ((cycle - 3) & mask)];
      assert(x6919 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6920 = args[2][87 * steps + ((cycle - 3) & mask)];
      assert(x6920 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6921 = args[2][88 * steps + ((cycle - 3) & mask)];
      assert(x6921 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6922 = args[2][89 * steps + ((cycle - 3) & mask)];
      assert(x6922 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6923 = args[2][90 * steps + ((cycle - 3) & mask)];
      assert(x6923 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6924 = args[2][91 * steps + ((cycle - 3) & mask)];
      assert(x6924 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6925 = args[2][60 * steps + ((cycle - 4) & mask)];
      assert(x6925 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6926 = args[2][61 * steps + ((cycle - 4) & mask)];
      assert(x6926 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6927 = args[2][62 * steps + ((cycle - 4) & mask)];
      assert(x6927 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6928 = args[2][63 * steps + ((cycle - 4) & mask)];
      assert(x6928 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6929 = args[2][64 * steps + ((cycle - 4) & mask)];
      assert(x6929 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6930 = args[2][65 * steps + ((cycle - 4) & mask)];
      assert(x6930 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6931 = args[2][66 * steps + ((cycle - 4) & mask)];
      assert(x6931 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6932 = args[2][67 * steps + ((cycle - 4) & mask)];
      assert(x6932 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6933 = args[2][68 * steps + ((cycle - 4) & mask)];
      assert(x6933 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6934 = args[2][69 * steps + ((cycle - 4) & mask)];
      assert(x6934 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6935 = args[2][70 * steps + ((cycle - 4) & mask)];
      assert(x6935 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6936 = args[2][71 * steps + ((cycle - 4) & mask)];
      assert(x6936 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6937 = args[2][72 * steps + ((cycle - 4) & mask)];
      assert(x6937 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6938 = args[2][73 * steps + ((cycle - 4) & mask)];
      assert(x6938 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6939 = args[2][74 * steps + ((cycle - 4) & mask)];
      assert(x6939 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6940 = args[2][75 * steps + ((cycle - 4) & mask)];
      assert(x6940 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6941 = args[2][76 * steps + ((cycle - 4) & mask)];
      assert(x6941 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6942 = args[2][77 * steps + ((cycle - 4) & mask)];
      assert(x6942 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6943 = args[2][78 * steps + ((cycle - 4) & mask)];
      assert(x6943 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6944 = args[2][79 * steps + ((cycle - 4) & mask)];
      assert(x6944 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6945 = args[2][80 * steps + ((cycle - 4) & mask)];
      assert(x6945 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6946 = args[2][81 * steps + ((cycle - 4) & mask)];
      assert(x6946 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6947 = args[2][82 * steps + ((cycle - 4) & mask)];
      assert(x6947 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6948 = args[2][83 * steps + ((cycle - 4) & mask)];
      assert(x6948 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6949 = args[2][84 * steps + ((cycle - 4) & mask)];
      assert(x6949 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6950 = args[2][85 * steps + ((cycle - 4) & mask)];
      assert(x6950 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6951 = args[2][86 * steps + ((cycle - 4) & mask)];
      assert(x6951 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6952 = args[2][87 * steps + ((cycle - 4) & mask)];
      assert(x6952 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6953 = args[2][88 * steps + ((cycle - 4) & mask)];
      assert(x6953 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6954 = args[2][89 * steps + ((cycle - 4) & mask)];
      assert(x6954 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6955 = args[2][90 * steps + ((cycle - 4) & mask)];
      assert(x6955 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6956 = args[2][91 * steps + ((cycle - 4) & mask)];
      assert(x6956 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x6957 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x6957 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x6958 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x6958 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6959 = x6714 + x6723;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6960 = x6714 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6961 = x6960 * x6723;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6962 = x6959 - x6961;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6963 = x6715 + x6724;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6964 = x6715 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6965 = x6964 * x6724;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6966 = x6963 - x6965;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6967 = x6716 + x6725;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6968 = x6716 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6969 = x6968 * x6725;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6970 = x6967 - x6969;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6971 = x6717 + x6726;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6972 = x6717 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6973 = x6972 * x6726;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6974 = x6971 - x6973;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6975 = x6718 + x6727;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6976 = x6718 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6977 = x6976 * x6727;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6978 = x6975 - x6977;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6979 = x6719 + x6728;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6980 = x6719 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6981 = x6980 * x6728;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6982 = x6979 - x6981;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6983 = x6720 + x6729;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6984 = x6720 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6985 = x6984 * x6729;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6986 = x6983 - x6985;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6987 = x6721 + x6730;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6988 = x6721 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6989 = x6988 * x6730;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6990 = x6987 - x6989;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6991 = x6722 + x6731;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6992 = x6722 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6993 = x6992 * x6731;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6994 = x6991 - x6993;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6995 = x6723 + x6732;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6996 = x6723 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6997 = x6996 * x6732;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6998 = x6995 - x6997;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6999 = x6724 + x6701;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7000 = x6724 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7001 = x7000 * x6701;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7002 = x6999 - x7001;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7003 = x6725 + x6702;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7004 = x6725 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7005 = x7004 * x6702;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7006 = x7003 - x7005;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7007 = x6726 + x6703;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7008 = x6726 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7009 = x7008 * x6703;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7010 = x7007 - x7009;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7011 = x6727 + x6704;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7012 = x6727 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7013 = x7012 * x6704;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7014 = x7011 - x7013;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7015 = x6728 + x6705;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7016 = x6728 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7017 = x7016 * x6705;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7018 = x7015 - x7017;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7019 = x6729 + x6706;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7020 = x6729 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7021 = x7020 * x6706;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7022 = x7019 - x7021;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7023 = x6730 + x6707;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7024 = x6730 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7025 = x7024 * x6707;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7026 = x7023 - x7025;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7027 = x6731 + x6708;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7028 = x6731 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7029 = x7028 * x6708;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7030 = x7027 - x7029;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7031 = x6732 + x6709;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7032 = x6732 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7033 = x7032 * x6709;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7034 = x7031 - x7033;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7035 = x6701 + x6710;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7036 = x6701 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7037 = x7036 * x6710;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7038 = x7035 - x7037;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7039 = x6702 + x6711;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7040 = x6702 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7041 = x7040 * x6711;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7042 = x7039 - x7041;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7043 = x6703 + x6712;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7044 = x6703 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7045 = x7044 * x6712;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7046 = x7043 - x7045;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7047 = x6704 + x6713;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7048 = x6704 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7049 = x7048 * x6713;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7050 = x7047 - x7049;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7051 = x6705 + x6714;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7052 = x6705 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7053 = x7052 * x6714;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7054 = x7051 - x7053;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7055 = x6706 + x6715;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7056 = x6706 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7057 = x7056 * x6715;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7058 = x7055 - x7057;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7059 = x6707 + x6716;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7060 = x6707 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7061 = x7060 * x6716;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7062 = x7059 - x7061;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7063 = x6708 + x6717;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7064 = x6708 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7065 = x7064 * x6717;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7066 = x7063 - x7065;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7067 = x6709 + x6718;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7068 = x6709 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7069 = x7068 * x6718;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7070 = x7067 - x7069;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7071 = x6710 + x6719;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7072 = x6710 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7073 = x7072 * x6719;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7074 = x7071 - x7073;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7075 = x6711 + x6720;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7076 = x6711 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7077 = x7076 * x6720;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7078 = x7075 - x7077;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7079 = x6712 + x6721;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7080 = x6712 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7081 = x7080 * x6721;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7082 = x7079 - x7081;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7083 = x6713 + x6722;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7084 = x6713 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7085 = x7084 * x6722;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7086 = x7083 - x7085;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7087 = x6703 + x6962;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7088 = x7044 * x6962;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7089 = x7087 - x7088;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7090 = x6704 + x6966;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7091 = x7048 * x6966;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7092 = x7090 - x7091;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7093 = x6705 + x6970;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7094 = x7052 * x6970;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7095 = x7093 - x7094;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7096 = x6706 + x6974;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7097 = x7056 * x6974;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7098 = x7096 - x7097;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7099 = x6707 + x6978;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7100 = x7060 * x6978;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7101 = x7099 - x7100;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7102 = x6708 + x6982;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7103 = x7064 * x6982;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7104 = x7102 - x7103;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7105 = x6709 + x6986;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7106 = x7068 * x6986;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7107 = x7105 - x7106;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7108 = x6710 + x6990;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7109 = x7072 * x6990;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7110 = x7108 - x7109;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7111 = x6711 + x6994;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7112 = x7076 * x6994;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7113 = x7111 - x7112;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7114 = x6712 + x6998;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7115 = x7080 * x6998;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7116 = x7114 - x7115;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7117 = x6713 + x7002;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7118 = x7084 * x7002;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7119 = x7117 - x7118;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7120 = x6714 + x7006;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7121 = x6960 * x7006;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7122 = x7120 - x7121;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7123 = x6715 + x7010;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7124 = x6964 * x7010;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7125 = x7123 - x7124;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7126 = x6716 + x7014;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7127 = x6968 * x7014;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7128 = x7126 - x7127;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7129 = x6717 + x7018;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7130 = x6972 * x7018;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7131 = x7129 - x7130;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7132 = x6718 + x7022;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7133 = x6976 * x7022;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7134 = x7132 - x7133;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7135 = x6719 + x7026;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7136 = x6980 * x7026;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7137 = x7135 - x7136;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7138 = x6720 + x7030;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7139 = x6984 * x7030;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7140 = x7138 - x7139;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7141 = x6721 + x7034;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7142 = x6988 * x7034;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7143 = x7141 - x7142;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7144 = x6722 + x7038;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7145 = x6992 * x7038;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7146 = x7144 - x7145;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7147 = x6723 + x7042;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7148 = x6996 * x7042;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7149 = x7147 - x7148;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7150 = x6724 + x7046;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7151 = x7000 * x7046;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7152 = x7150 - x7151;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7153 = x6725 + x7050;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7154 = x7004 * x7050;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7155 = x7153 - x7154;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7156 = x6726 + x7054;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7157 = x7008 * x7054;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7158 = x7156 - x7157;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7159 = x6727 + x7058;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7160 = x7012 * x7058;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7161 = x7159 - x7160;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7162 = x6728 + x7062;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7163 = x7016 * x7062;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7164 = x7162 - x7163;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7165 = x6729 + x7066;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7166 = x7020 * x7066;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7167 = x7165 - x7166;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7168 = x6730 + x7070;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7169 = x7024 * x7070;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7170 = x7168 - x7169;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7171 = x6731 + x7074;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7172 = x7028 * x7074;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7173 = x7171 - x7172;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7174 = x6732 + x7078;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7175 = x7032 * x7078;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7176 = x7174 - x7175;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7177 = x6701 + x7082;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7178 = x7036 * x7082;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7179 = x7177 - x7178;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7180 = x6702 + x7086;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7181 = x7040 * x7086;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7182 = x7180 - x7181;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7183 = x6840 + x6854;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7184 = x6840 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7185 = x7184 * x6854;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7186 = x7183 - x7185;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7187 = x6841 + x6855;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7188 = x6841 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7189 = x7188 * x6855;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7190 = x7187 - x7189;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7191 = x6842 + x6856;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7192 = x6842 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7193 = x7192 * x6856;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7194 = x7191 - x7193;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7195 = x6843 + x6857;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7196 = x6843 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7197 = x7196 * x6857;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7198 = x7195 - x7197;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7199 = x6844 + x6858;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7200 = x6844 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7201 = x7200 * x6858;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7202 = x7199 - x7201;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7203 = x6845 + x6859;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7204 = x6845 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7205 = x7204 * x6859;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7206 = x7203 - x7205;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7207 = x6846 + x6860;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7208 = x6846 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7209 = x7208 * x6860;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7210 = x7207 - x7209;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7211 = x6847 + x6829;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7212 = x6847 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7213 = x7212 * x6829;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7214 = x7211 - x7213;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7215 = x6848 + x6830;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7216 = x6848 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7217 = x7216 * x6830;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7218 = x7215 - x7217;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7219 = x6849 + x6831;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7220 = x6849 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7221 = x7220 * x6831;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7222 = x7219 - x7221;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7223 = x6850 + x6832;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7224 = x6850 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7225 = x7224 * x6832;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7226 = x7223 - x7225;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7227 = x6851 + x6833;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7228 = x6851 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7229 = x7228 * x6833;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7230 = x7227 - x7229;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7231 = x6852 + x6834;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7232 = x6852 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7233 = x7232 * x6834;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7234 = x7231 - x7233;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7235 = x6853 + x6835;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7236 = x6853 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7237 = x7236 * x6835;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7238 = x7235 - x7237;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7239 = x6854 + x6836;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7240 = x6854 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7241 = x7240 * x6836;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7242 = x7239 - x7241;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7243 = x6855 + x6837;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7244 = x6855 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7245 = x7244 * x6837;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7246 = x7243 - x7245;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7247 = x6856 + x6838;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7248 = x6856 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7249 = x7248 * x6838;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7250 = x7247 - x7249;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7251 = x6857 + x6839;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7252 = x6857 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7253 = x7252 * x6839;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7254 = x7251 - x7253;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7255 = x6858 + x6840;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7256 = x6858 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7257 = x7256 * x6840;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7258 = x7255 - x7257;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7259 = x6859 + x6841;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7260 = x6859 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7261 = x7260 * x6841;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7262 = x7259 - x7261;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7263 = x6860 + x6842;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7264 = x6860 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7265 = x7264 * x6842;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7266 = x7263 - x7265;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7267 = x6829 + x6843;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7268 = x6829 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7269 = x7268 * x6843;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7270 = x7267 - x7269;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7271 = x6830 + x6844;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7272 = x6830 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7273 = x7272 * x6844;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7274 = x7271 - x7273;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7275 = x6831 + x6845;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7276 = x6831 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7277 = x7276 * x6845;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7278 = x7275 - x7277;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7279 = x6832 + x6846;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7280 = x6832 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7281 = x7280 * x6846;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7282 = x7279 - x7281;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7283 = x6833 + x6847;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7284 = x6833 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7285 = x7284 * x6847;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7286 = x7283 - x7285;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7287 = x6834 + x6848;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7288 = x6834 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7289 = x7288 * x6848;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7290 = x7287 - x7289;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7291 = x6835 + x6849;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7292 = x6835 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7293 = x7292 * x6849;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7294 = x7291 - x7293;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7295 = x6836 + x6850;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7296 = x6836 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7297 = x7296 * x6850;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7298 = x7295 - x7297;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7299 = x6837 + x6851;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7300 = x6837 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7301 = x7300 * x6851;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7302 = x7299 - x7301;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7303 = x6838 + x6852;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7304 = x6838 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7305 = x7304 * x6852;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7306 = x7303 - x7305;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7307 = x6839 + x6853;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7308 = x6839 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7309 = x7308 * x6853;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7310 = x7307 - x7309;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7311 = x6835 + x7186;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7312 = x7292 * x7186;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7313 = x7311 - x7312;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7314 = x6836 + x7190;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7315 = x7296 * x7190;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7316 = x7314 - x7315;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7317 = x6837 + x7194;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7318 = x7300 * x7194;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7319 = x7317 - x7318;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7320 = x6838 + x7198;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7321 = x7304 * x7198;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7322 = x7320 - x7321;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7323 = x6839 + x7202;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7324 = x7308 * x7202;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7325 = x7323 - x7324;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7326 = x6840 + x7206;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7327 = x7184 * x7206;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7328 = x7326 - x7327;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7329 = x6841 + x7210;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7330 = x7188 * x7210;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7331 = x7329 - x7330;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7332 = x6842 + x7214;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7333 = x7192 * x7214;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7334 = x7332 - x7333;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7335 = x6843 + x7218;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7336 = x7196 * x7218;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7337 = x7335 - x7336;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7338 = x6844 + x7222;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7339 = x7200 * x7222;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7340 = x7338 - x7339;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7341 = x6845 + x7226;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7342 = x7204 * x7226;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7343 = x7341 - x7342;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7344 = x6846 + x7230;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7345 = x7208 * x7230;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7346 = x7344 - x7345;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7347 = x6847 + x7234;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7348 = x7212 * x7234;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7349 = x7347 - x7348;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7350 = x6848 + x7238;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7351 = x7216 * x7238;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7352 = x7350 - x7351;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7353 = x6849 + x7242;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7354 = x7220 * x7242;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7355 = x7353 - x7354;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7356 = x6850 + x7246;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7357 = x7224 * x7246;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7358 = x7356 - x7357;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7359 = x6851 + x7250;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7360 = x7228 * x7250;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7361 = x7359 - x7360;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7362 = x6852 + x7254;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7363 = x7232 * x7254;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7364 = x7362 - x7363;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7365 = x6853 + x7258;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7366 = x7236 * x7258;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7367 = x7365 - x7366;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7368 = x6854 + x7262;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7369 = x7240 * x7262;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7370 = x7368 - x7369;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7371 = x6855 + x7266;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7372 = x7244 * x7266;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7373 = x7371 - x7372;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7374 = x6856 + x7270;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7375 = x7248 * x7270;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7376 = x7374 - x7375;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7377 = x6857 + x7274;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7378 = x7252 * x7274;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7379 = x7377 - x7378;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7380 = x6858 + x7278;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7381 = x7256 * x7278;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7382 = x7380 - x7381;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7383 = x6859 + x7282;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7384 = x7260 * x7282;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7385 = x7383 - x7384;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7386 = x6860 + x7286;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7387 = x7264 * x7286;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7388 = x7386 - x7387;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7389 = x6829 + x7290;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7390 = x7268 * x7290;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7391 = x7389 - x7390;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7392 = x6830 + x7294;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7393 = x7272 * x7294;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7394 = x7392 - x7393;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7395 = x6831 + x7298;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7396 = x7276 * x7298;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7397 = x7395 - x7396;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7398 = x6832 + x7302;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7399 = x7280 * x7302;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7400 = x7398 - x7399;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7401 = x6833 + x7306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7402 = x7284 * x7306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7403 = x7401 - x7402;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7404 = x6834 + x7310;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7405 = x7288 * x7310;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7406 = x7404 - x7405;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7407 = x6926 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7408 = x6925 + x7407;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7409 = x6927 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7410 = x7408 + x7409;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7411 = x6928 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7412 = x7410 + x7411;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7413 = x6929 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7414 = x7412 + x7413;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7415 = x6930 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7416 = x7414 + x7415;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7417 = x6931 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7418 = x7416 + x7417;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7419 = x6932 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7420 = x7418 + x7419;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7421 = x6933 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7422 = x7420 + x7421;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7423 = x6934 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7424 = x7422 + x7423;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7425 = x6935 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7426 = x7424 + x7425;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7427 = x6936 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7428 = x7426 + x7427;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7429 = x6937 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7430 = x7428 + x7429;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7431 = x6938 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7432 = x7430 + x7431;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7433 = x6939 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7434 = x7432 + x7433;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7435 = x6940 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7436 = x7434 + x7435;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7437 = x6942 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7438 = x6941 + x7437;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7439 = x6943 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7440 = x7438 + x7439;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7441 = x6944 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7442 = x7440 + x7441;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7443 = x6945 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7444 = x7442 + x7443;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7445 = x6946 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7446 = x7444 + x7445;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7447 = x6947 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7448 = x7446 + x7447;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7449 = x6948 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7450 = x7448 + x7449;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7451 = x6949 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7452 = x7450 + x7451;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7453 = x6950 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7454 = x7452 + x7453;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7455 = x6951 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7456 = x7454 + x7455;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7457 = x6952 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7458 = x7456 + x7457;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7459 = x6953 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7460 = x7458 + x7459;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7461 = x6954 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7462 = x7460 + x7461;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7463 = x6955 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7464 = x7462 + x7463;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7465 = x6956 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7466 = x7464 + x7465;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7467 = x6829 * x6861;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7468 = x307 - x6829;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7469 = x7468 * x6893;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7470 = x7467 + x7469;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7471 = x6830 * x6862;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7472 = x307 - x6830;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7473 = x7472 * x6894;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7474 = x7471 + x7473;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7475 = x6831 * x6863;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7476 = x307 - x6831;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7477 = x7476 * x6895;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7478 = x7475 + x7477;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7479 = x6832 * x6864;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7480 = x307 - x6832;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7481 = x7480 * x6896;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7482 = x7479 + x7481;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7483 = x6833 * x6865;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7484 = x307 - x6833;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7485 = x7484 * x6897;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7486 = x7483 + x7485;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7487 = x6834 * x6866;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7488 = x307 - x6834;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7489 = x7488 * x6898;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7490 = x7487 + x7489;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7491 = x6835 * x6867;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7492 = x307 - x6835;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7493 = x7492 * x6899;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7494 = x7491 + x7493;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7495 = x6836 * x6868;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7496 = x307 - x6836;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7497 = x7496 * x6900;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7498 = x7495 + x7497;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7499 = x6837 * x6869;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7500 = x307 - x6837;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7501 = x7500 * x6901;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7502 = x7499 + x7501;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7503 = x6838 * x6870;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7504 = x307 - x6838;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7505 = x7504 * x6902;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7506 = x7503 + x7505;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7507 = x6839 * x6871;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7508 = x307 - x6839;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7509 = x7508 * x6903;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7510 = x7507 + x7509;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7511 = x6840 * x6872;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7512 = x307 - x6840;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7513 = x7512 * x6904;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7514 = x7511 + x7513;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7515 = x6841 * x6873;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7516 = x307 - x6841;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7517 = x7516 * x6905;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7518 = x7515 + x7517;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7519 = x6842 * x6874;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7520 = x307 - x6842;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7521 = x7520 * x6906;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7522 = x7519 + x7521;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7523 = x6843 * x6875;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7524 = x307 - x6843;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7525 = x7524 * x6907;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7526 = x7523 + x7525;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7527 = x6844 * x6876;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7528 = x307 - x6844;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7529 = x7528 * x6908;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7530 = x7527 + x7529;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7531 = x6845 * x6877;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7532 = x307 - x6845;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7533 = x7532 * x6909;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7534 = x7531 + x7533;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7535 = x6846 * x6878;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7536 = x307 - x6846;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7537 = x7536 * x6910;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7538 = x7535 + x7537;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7539 = x6847 * x6879;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7540 = x307 - x6847;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7541 = x7540 * x6911;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7542 = x7539 + x7541;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7543 = x6848 * x6880;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7544 = x307 - x6848;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7545 = x7544 * x6912;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7546 = x7543 + x7545;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7547 = x6849 * x6881;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7548 = x307 - x6849;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7549 = x7548 * x6913;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7550 = x7547 + x7549;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7551 = x6850 * x6882;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7552 = x307 - x6850;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7553 = x7552 * x6914;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7554 = x7551 + x7553;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7555 = x6851 * x6883;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7556 = x307 - x6851;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7557 = x7556 * x6915;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7558 = x7555 + x7557;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7559 = x6852 * x6884;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7560 = x307 - x6852;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7561 = x7560 * x6916;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7562 = x7559 + x7561;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7563 = x6853 * x6885;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7564 = x307 - x6853;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7565 = x7564 * x6917;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7566 = x7563 + x7565;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7567 = x6854 * x6886;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7568 = x307 - x6854;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7569 = x7568 * x6918;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7570 = x7567 + x7569;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7571 = x6855 * x6887;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7572 = x307 - x6855;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7573 = x7572 * x6919;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7574 = x7571 + x7573;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7575 = x6856 * x6888;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7576 = x307 - x6856;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7577 = x7576 * x6920;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7578 = x7575 + x7577;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7579 = x6857 * x6889;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7580 = x307 - x6857;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7581 = x7580 * x6921;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7582 = x7579 + x7581;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7583 = x6858 * x6890;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7584 = x307 - x6858;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7585 = x7584 * x6922;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7586 = x7583 + x7585;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7587 = x6859 * x6891;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7588 = x307 - x6859;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7589 = x7588 * x6923;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7590 = x7587 + x7589;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7591 = x6860 * x6892;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7592 = x307 - x6860;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7593 = x7592 * x6924;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7594 = x7591 + x7593;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7595 = x7474 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7596 = x7470 + x7595;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7597 = x7478 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7598 = x7596 + x7597;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7599 = x7482 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7600 = x7598 + x7599;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7601 = x7486 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7602 = x7600 + x7601;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7603 = x7490 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7604 = x7602 + x7603;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7605 = x7494 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7606 = x7604 + x7605;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7607 = x7498 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7608 = x7606 + x7607;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7609 = x7502 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7610 = x7608 + x7609;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7611 = x7506 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7612 = x7610 + x7611;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7613 = x7510 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7614 = x7612 + x7613;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7615 = x7514 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7616 = x7614 + x7615;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7617 = x7518 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7618 = x7616 + x7617;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7619 = x7522 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7620 = x7618 + x7619;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7621 = x7526 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7622 = x7620 + x7621;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7623 = x7530 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7624 = x7622 + x7623;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7625 = x7538 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7626 = x7534 + x7625;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7627 = x7542 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7628 = x7626 + x7627;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7629 = x7546 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7630 = x7628 + x7629;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7631 = x7550 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7632 = x7630 + x7631;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7633 = x7554 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7634 = x7632 + x7633;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7635 = x7558 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7636 = x7634 + x7635;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7637 = x7562 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7638 = x7636 + x7637;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7639 = x7566 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7640 = x7638 + x7639;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7641 = x7570 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7642 = x7640 + x7641;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7643 = x7574 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7644 = x7642 + x7643;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7645 = x7578 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7646 = x7644 + x7645;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7647 = x7582 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7648 = x7646 + x7647;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7649 = x7586 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7650 = x7648 + x7649;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7651 = x7590 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7652 = x7650 + x7651;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7653 = x7594 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7654 = x7652 + x7653;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7655 = x7316 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7656 = x7313 + x7655;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7657 = x7319 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7658 = x7656 + x7657;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7659 = x7322 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7660 = x7658 + x7659;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7661 = x7325 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7662 = x7660 + x7661;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7663 = x7328 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7664 = x7662 + x7663;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7665 = x7331 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7666 = x7664 + x7665;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7667 = x7334 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7668 = x7666 + x7667;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7669 = x7337 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7670 = x7668 + x7669;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7671 = x7340 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7672 = x7670 + x7671;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7673 = x7343 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7674 = x7672 + x7673;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7675 = x7346 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7676 = x7674 + x7675;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7677 = x7349 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7678 = x7676 + x7677;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7679 = x7352 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7680 = x7678 + x7679;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7681 = x7355 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7682 = x7680 + x7681;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7683 = x7358 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7684 = x7682 + x7683;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7685 = x7364 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7686 = x7361 + x7685;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7687 = x7367 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7688 = x7686 + x7687;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7689 = x7370 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7690 = x7688 + x7689;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7691 = x7373 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7692 = x7690 + x7691;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7693 = x7376 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7694 = x7692 + x7693;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7695 = x7379 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7696 = x7694 + x7695;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7697 = x7382 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7698 = x7696 + x7697;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7699 = x7385 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7700 = x7698 + x7699;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7701 = x7388 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7702 = x7700 + x7701;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7703 = x7391 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7704 = x7702 + x7703;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7705 = x7394 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7706 = x7704 + x7705;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7707 = x7397 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7708 = x7706 + x7707;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7709 = x7400 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7710 = x7708 + x7709;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7711 = x7403 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7712 = x7710 + x7711;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7713 = x7406 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7714 = x7712 + x7713;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7715 = x7624 + x7684;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7716 = x7654 + x7714;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7717 = x7436 + x7715;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7718 = x7466 + x7716;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7719 = x6957 + x7717;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7720 = x6958 + x7718;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7721 = x6616 + x7719;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7722 = x6697 + x7720;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7723 = x6701 * x6733;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7724 = x307 - x6765;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7725 = x7723 * x7724;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7726 = x307 - x6733;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7727 = x6701 * x7726;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7728 = x7727 * x6765;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7729 = x7725 + x7728;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7730 = x307 - x6701;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7731 = x7730 * x6733;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7732 = x7731 * x6765;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7733 = x7729 + x7732;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7734 = x7723 * x6765;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7735 = x7733 + x7734;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7736 = x6702 * x6734;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7737 = x307 - x6766;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7738 = x7736 * x7737;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7739 = x307 - x6734;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7740 = x6702 * x7739;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7741 = x7740 * x6766;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7742 = x7738 + x7741;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7743 = x307 - x6702;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7744 = x7743 * x6734;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7745 = x7744 * x6766;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7746 = x7742 + x7745;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7747 = x7736 * x6766;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7748 = x7746 + x7747;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7749 = x6703 * x6735;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7750 = x307 - x6767;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7751 = x7749 * x7750;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7752 = x307 - x6735;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7753 = x6703 * x7752;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7754 = x7753 * x6767;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7755 = x7751 + x7754;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7756 = x307 - x6703;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7757 = x7756 * x6735;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7758 = x7757 * x6767;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7759 = x7755 + x7758;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7760 = x7749 * x6767;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7761 = x7759 + x7760;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7762 = x6704 * x6736;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7763 = x307 - x6768;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7764 = x7762 * x7763;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7765 = x307 - x6736;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7766 = x6704 * x7765;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7767 = x7766 * x6768;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7768 = x7764 + x7767;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7769 = x307 - x6704;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7770 = x7769 * x6736;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7771 = x7770 * x6768;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7772 = x7768 + x7771;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7773 = x7762 * x6768;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7774 = x7772 + x7773;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7775 = x6705 * x6737;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7776 = x307 - x6769;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7777 = x7775 * x7776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7778 = x307 - x6737;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7779 = x6705 * x7778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7780 = x7779 * x6769;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7781 = x7777 + x7780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7782 = x307 - x6705;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7783 = x7782 * x6737;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7784 = x7783 * x6769;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7785 = x7781 + x7784;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7786 = x7775 * x6769;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7787 = x7785 + x7786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7788 = x6706 * x6738;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7789 = x307 - x6770;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7790 = x7788 * x7789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7791 = x307 - x6738;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7792 = x6706 * x7791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7793 = x7792 * x6770;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7794 = x7790 + x7793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7795 = x307 - x6706;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7796 = x7795 * x6738;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7797 = x7796 * x6770;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7798 = x7794 + x7797;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7799 = x7788 * x6770;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7800 = x7798 + x7799;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7801 = x6707 * x6739;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7802 = x307 - x6771;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7803 = x7801 * x7802;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7804 = x307 - x6739;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7805 = x6707 * x7804;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7806 = x7805 * x6771;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7807 = x7803 + x7806;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7808 = x307 - x6707;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7809 = x7808 * x6739;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7810 = x7809 * x6771;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7811 = x7807 + x7810;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7812 = x7801 * x6771;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7813 = x7811 + x7812;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7814 = x6708 * x6740;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7815 = x307 - x6772;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7816 = x7814 * x7815;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7817 = x307 - x6740;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7818 = x6708 * x7817;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7819 = x7818 * x6772;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7820 = x7816 + x7819;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7821 = x307 - x6708;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7822 = x7821 * x6740;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7823 = x7822 * x6772;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7824 = x7820 + x7823;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7825 = x7814 * x6772;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7826 = x7824 + x7825;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7827 = x6709 * x6741;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7828 = x307 - x6773;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7829 = x7827 * x7828;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7830 = x307 - x6741;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7831 = x6709 * x7830;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7832 = x7831 * x6773;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7833 = x7829 + x7832;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7834 = x307 - x6709;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7835 = x7834 * x6741;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7836 = x7835 * x6773;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7837 = x7833 + x7836;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7838 = x7827 * x6773;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7839 = x7837 + x7838;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7840 = x6710 * x6742;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7841 = x307 - x6774;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7842 = x7840 * x7841;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7843 = x307 - x6742;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7844 = x6710 * x7843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7845 = x7844 * x6774;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7846 = x7842 + x7845;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7847 = x307 - x6710;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7848 = x7847 * x6742;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7849 = x7848 * x6774;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7850 = x7846 + x7849;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7851 = x7840 * x6774;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7852 = x7850 + x7851;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7853 = x6711 * x6743;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7854 = x307 - x6775;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7855 = x7853 * x7854;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7856 = x307 - x6743;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7857 = x6711 * x7856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7858 = x7857 * x6775;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7859 = x7855 + x7858;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7860 = x307 - x6711;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7861 = x7860 * x6743;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7862 = x7861 * x6775;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7863 = x7859 + x7862;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7864 = x7853 * x6775;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7865 = x7863 + x7864;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7866 = x6712 * x6744;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7867 = x307 - x6776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7868 = x7866 * x7867;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7869 = x307 - x6744;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7870 = x6712 * x7869;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7871 = x7870 * x6776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7872 = x7868 + x7871;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7873 = x307 - x6712;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7874 = x7873 * x6744;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7875 = x7874 * x6776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7876 = x7872 + x7875;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7877 = x7866 * x6776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7878 = x7876 + x7877;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7879 = x6713 * x6745;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7880 = x307 - x6777;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7881 = x7879 * x7880;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7882 = x307 - x6745;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7883 = x6713 * x7882;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7884 = x7883 * x6777;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7885 = x7881 + x7884;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7886 = x307 - x6713;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7887 = x7886 * x6745;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7888 = x7887 * x6777;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7889 = x7885 + x7888;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7890 = x7879 * x6777;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7891 = x7889 + x7890;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7892 = x6714 * x6746;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7893 = x307 - x6778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7894 = x7892 * x7893;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7895 = x307 - x6746;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7896 = x6714 * x7895;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7897 = x7896 * x6778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7898 = x7894 + x7897;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7899 = x307 - x6714;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7900 = x7899 * x6746;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7901 = x7900 * x6778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7902 = x7898 + x7901;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7903 = x7892 * x6778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7904 = x7902 + x7903;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7905 = x6715 * x6747;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7906 = x307 - x6779;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7907 = x7905 * x7906;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7908 = x307 - x6747;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7909 = x6715 * x7908;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7910 = x7909 * x6779;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7911 = x7907 + x7910;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7912 = x307 - x6715;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7913 = x7912 * x6747;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7914 = x7913 * x6779;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7915 = x7911 + x7914;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7916 = x7905 * x6779;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7917 = x7915 + x7916;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7918 = x6716 * x6748;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7919 = x307 - x6780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7920 = x7918 * x7919;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7921 = x307 - x6748;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7922 = x6716 * x7921;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7923 = x7922 * x6780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7924 = x7920 + x7923;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7925 = x307 - x6716;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7926 = x7925 * x6748;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7927 = x7926 * x6780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7928 = x7924 + x7927;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7929 = x7918 * x6780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7930 = x7928 + x7929;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7931 = x6717 * x6749;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7932 = x307 - x6781;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7933 = x7931 * x7932;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7934 = x307 - x6749;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7935 = x6717 * x7934;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7936 = x7935 * x6781;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7937 = x7933 + x7936;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7938 = x307 - x6717;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7939 = x7938 * x6749;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7940 = x7939 * x6781;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7941 = x7937 + x7940;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7942 = x7931 * x6781;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7943 = x7941 + x7942;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7944 = x6718 * x6750;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7945 = x307 - x6782;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7946 = x7944 * x7945;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7947 = x307 - x6750;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7948 = x6718 * x7947;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7949 = x7948 * x6782;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7950 = x7946 + x7949;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7951 = x307 - x6718;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7952 = x7951 * x6750;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7953 = x7952 * x6782;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7954 = x7950 + x7953;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7955 = x7944 * x6782;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7956 = x7954 + x7955;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7957 = x6719 * x6751;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7958 = x307 - x6783;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7959 = x7957 * x7958;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7960 = x307 - x6751;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7961 = x6719 * x7960;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7962 = x7961 * x6783;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7963 = x7959 + x7962;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7964 = x307 - x6719;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7965 = x7964 * x6751;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7966 = x7965 * x6783;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7967 = x7963 + x7966;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7968 = x7957 * x6783;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7969 = x7967 + x7968;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7970 = x6720 * x6752;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7971 = x307 - x6784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7972 = x7970 * x7971;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7973 = x307 - x6752;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7974 = x6720 * x7973;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7975 = x7974 * x6784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7976 = x7972 + x7975;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7977 = x307 - x6720;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7978 = x7977 * x6752;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7979 = x7978 * x6784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7980 = x7976 + x7979;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7981 = x7970 * x6784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7982 = x7980 + x7981;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7983 = x6721 * x6753;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7984 = x307 - x6785;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7985 = x7983 * x7984;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7986 = x307 - x6753;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7987 = x6721 * x7986;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7988 = x7987 * x6785;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7989 = x7985 + x7988;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7990 = x307 - x6721;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7991 = x7990 * x6753;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7992 = x7991 * x6785;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7993 = x7989 + x7992;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7994 = x7983 * x6785;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7995 = x7993 + x7994;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7996 = x6722 * x6754;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7997 = x307 - x6786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7998 = x7996 * x7997;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7999 = x307 - x6754;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8000 = x6722 * x7999;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8001 = x8000 * x6786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8002 = x7998 + x8001;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8003 = x307 - x6722;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8004 = x8003 * x6754;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8005 = x8004 * x6786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8006 = x8002 + x8005;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8007 = x7996 * x6786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8008 = x8006 + x8007;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8009 = x6723 * x6755;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8010 = x307 - x6787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8011 = x8009 * x8010;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8012 = x307 - x6755;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8013 = x6723 * x8012;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8014 = x8013 * x6787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8015 = x8011 + x8014;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8016 = x307 - x6723;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8017 = x8016 * x6755;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8018 = x8017 * x6787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8019 = x8015 + x8018;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8020 = x8009 * x6787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8021 = x8019 + x8020;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8022 = x6724 * x6756;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8023 = x307 - x6788;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8024 = x8022 * x8023;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8025 = x307 - x6756;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8026 = x6724 * x8025;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8027 = x8026 * x6788;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8028 = x8024 + x8027;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8029 = x307 - x6724;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8030 = x8029 * x6756;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8031 = x8030 * x6788;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8032 = x8028 + x8031;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8033 = x8022 * x6788;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8034 = x8032 + x8033;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8035 = x6725 * x6757;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8036 = x307 - x6789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8037 = x8035 * x8036;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8038 = x307 - x6757;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8039 = x6725 * x8038;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8040 = x8039 * x6789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8041 = x8037 + x8040;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8042 = x307 - x6725;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8043 = x8042 * x6757;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8044 = x8043 * x6789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8045 = x8041 + x8044;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8046 = x8035 * x6789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8047 = x8045 + x8046;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8048 = x6726 * x6758;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8049 = x307 - x6790;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8050 = x8048 * x8049;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8051 = x307 - x6758;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8052 = x6726 * x8051;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8053 = x8052 * x6790;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8054 = x8050 + x8053;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8055 = x307 - x6726;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8056 = x8055 * x6758;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8057 = x8056 * x6790;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8058 = x8054 + x8057;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8059 = x8048 * x6790;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8060 = x8058 + x8059;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8061 = x6727 * x6759;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8062 = x307 - x6791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8063 = x8061 * x8062;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8064 = x307 - x6759;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8065 = x6727 * x8064;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8066 = x8065 * x6791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8067 = x8063 + x8066;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8068 = x307 - x6727;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8069 = x8068 * x6759;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8070 = x8069 * x6791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8071 = x8067 + x8070;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8072 = x8061 * x6791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8073 = x8071 + x8072;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8074 = x6728 * x6760;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8075 = x307 - x6792;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8076 = x8074 * x8075;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8077 = x307 - x6760;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8078 = x6728 * x8077;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8079 = x8078 * x6792;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8080 = x8076 + x8079;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8081 = x307 - x6728;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8082 = x8081 * x6760;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8083 = x8082 * x6792;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8084 = x8080 + x8083;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8085 = x8074 * x6792;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8086 = x8084 + x8085;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8087 = x6729 * x6761;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8088 = x307 - x6793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8089 = x8087 * x8088;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8090 = x307 - x6761;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8091 = x6729 * x8090;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8092 = x8091 * x6793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8093 = x8089 + x8092;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8094 = x307 - x6729;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8095 = x8094 * x6761;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8096 = x8095 * x6793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8097 = x8093 + x8096;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8098 = x8087 * x6793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8099 = x8097 + x8098;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8100 = x6730 * x6762;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8101 = x307 - x6794;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8102 = x8100 * x8101;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8103 = x307 - x6762;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8104 = x6730 * x8103;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8105 = x8104 * x6794;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8106 = x8102 + x8105;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8107 = x307 - x6730;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8108 = x8107 * x6762;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8109 = x8108 * x6794;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8110 = x8106 + x8109;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8111 = x8100 * x6794;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8112 = x8110 + x8111;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8113 = x6731 * x6763;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8114 = x307 - x6795;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8115 = x8113 * x8114;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8116 = x307 - x6763;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8117 = x6731 * x8116;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8118 = x8117 * x6795;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8119 = x8115 + x8118;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8120 = x307 - x6731;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8121 = x8120 * x6763;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8122 = x8121 * x6795;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8123 = x8119 + x8122;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8124 = x8113 * x6795;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8125 = x8123 + x8124;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8126 = x6732 * x6764;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8127 = x307 - x6796;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8128 = x8126 * x8127;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8129 = x307 - x6764;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8130 = x6732 * x8129;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8131 = x8130 * x6796;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8132 = x8128 + x8131;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8133 = x307 - x6732;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8134 = x8133 * x6764;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8135 = x8134 * x6796;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8136 = x8132 + x8135;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8137 = x8126 * x6796;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8138 = x8136 + x8137;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8139 = x7748 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8140 = x7735 + x8139;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8141 = x7761 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8142 = x8140 + x8141;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8143 = x7774 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8144 = x8142 + x8143;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8145 = x7787 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8146 = x8144 + x8145;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8147 = x7800 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8148 = x8146 + x8147;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8149 = x7813 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8150 = x8148 + x8149;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8151 = x7826 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8152 = x8150 + x8151;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8153 = x7839 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8154 = x8152 + x8153;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8155 = x7852 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8156 = x8154 + x8155;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8157 = x7865 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8158 = x8156 + x8157;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8159 = x7878 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8160 = x8158 + x8159;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8161 = x7891 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8162 = x8160 + x8161;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8163 = x7904 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8164 = x8162 + x8163;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8165 = x7917 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8166 = x8164 + x8165;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8167 = x7930 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8168 = x8166 + x8167;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8169 = x7956 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8170 = x7943 + x8169;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8171 = x7969 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8172 = x8170 + x8171;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8173 = x7982 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8174 = x8172 + x8173;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8175 = x7995 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8176 = x8174 + x8175;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8177 = x8008 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8178 = x8176 + x8177;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8179 = x8021 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8180 = x8178 + x8179;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8181 = x8034 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8182 = x8180 + x8181;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8183 = x8047 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8184 = x8182 + x8183;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8185 = x8060 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8186 = x8184 + x8185;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8187 = x8073 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8188 = x8186 + x8187;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8189 = x8086 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8190 = x8188 + x8189;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8191 = x8099 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8192 = x8190 + x8191;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8193 = x8112 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8194 = x8192 + x8193;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8195 = x8125 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8196 = x8194 + x8195;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8197 = x8138 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8198 = x8196 + x8197;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8199 = x7092 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8200 = x7089 + x8199;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8201 = x7095 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8202 = x8200 + x8201;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8203 = x7098 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8204 = x8202 + x8203;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8205 = x7101 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8206 = x8204 + x8205;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8207 = x7104 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8208 = x8206 + x8207;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8209 = x7107 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8210 = x8208 + x8209;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8211 = x7110 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8212 = x8210 + x8211;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8213 = x7113 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8214 = x8212 + x8213;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8215 = x7116 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8216 = x8214 + x8215;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8217 = x7119 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8218 = x8216 + x8217;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8219 = x7122 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8220 = x8218 + x8219;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8221 = x7125 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8222 = x8220 + x8221;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8223 = x7128 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8224 = x8222 + x8223;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8225 = x7131 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8226 = x8224 + x8225;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8227 = x7134 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8228 = x8226 + x8227;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8229 = x7140 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8230 = x7137 + x8229;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8231 = x7143 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8232 = x8230 + x8231;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8233 = x7146 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8234 = x8232 + x8233;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8235 = x7149 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8236 = x8234 + x8235;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8237 = x7152 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8238 = x8236 + x8237;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8239 = x7155 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8240 = x8238 + x8239;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8241 = x7158 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8242 = x8240 + x8241;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8243 = x7161 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8244 = x8242 + x8243;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8245 = x7164 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8246 = x8244 + x8245;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8247 = x7167 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8248 = x8246 + x8247;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8249 = x7170 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8250 = x8248 + x8249;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8251 = x7173 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8252 = x8250 + x8251;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8253 = x7176 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8254 = x8252 + x8253;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8255 = x7179 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8256 = x8254 + x8255;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8257 = x7182 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8258 = x8256 + x8257;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8259 = x8168 + x8228;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8260 = x8198 + x8258;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8261 = x7721 + x8259;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8262 = x7722 + x8260;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8263 = x6798 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8264 = x6797 + x8263;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8265 = x6799 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8266 = x8264 + x8265;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8267 = x6800 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8268 = x8266 + x8267;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8269 = x6801 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8270 = x8268 + x8269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8271 = x6802 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8272 = x8270 + x8271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8273 = x6803 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8274 = x8272 + x8273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8275 = x6804 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8276 = x8274 + x8275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8277 = x6805 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8278 = x8276 + x8277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8279 = x6806 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8280 = x8278 + x8279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8281 = x6807 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8282 = x8280 + x8281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8283 = x6808 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8284 = x8282 + x8283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8285 = x6809 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8286 = x8284 + x8285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8287 = x6810 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8288 = x8286 + x8287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8289 = x6811 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8290 = x8288 + x8289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8291 = x6812 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8292 = x8290 + x8291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8293 = x6814 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8294 = x6813 + x8293;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8295 = x6815 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8296 = x8294 + x8295;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8297 = x6816 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8298 = x8296 + x8297;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8299 = x6817 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8300 = x8298 + x8299;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8301 = x6818 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8302 = x8300 + x8301;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8303 = x6819 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8304 = x8302 + x8303;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8305 = x6820 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8306 = x8304 + x8305;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8307 = x6821 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8308 = x8306 + x8307;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8309 = x6822 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8310 = x8308 + x8309;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8311 = x6823 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8312 = x8310 + x8311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8313 = x6824 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8314 = x8312 + x8313;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8315 = x6825 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8316 = x8314 + x8315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8317 = x6826 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8318 = x8316 + x8317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8319 = x6827 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8320 = x8318 + x8319;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8321 = x6828 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8322 = x8320 + x8321;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8323 = x7721 + x8292;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8324 = x7722 + x8322;
      // loc("zirgen/circuit/recursion/sha.cpp":290:5)
      {
        auto& reg = args[2][58 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8261);
        reg = x8261;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":291:5)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8323);
        reg = x8323;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":290:5)
      {
        auto& reg = args[2][59 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8262);
        reg = x8262;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":291:5)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8324);
        reg = x8324;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a_raw[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8325 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x8325 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a_raw[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8326 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x8326 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8327 = Fp(x8325.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8327);
          reg = x8327;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8328 = Fp(x8325.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8329 = x8328 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8329);
          reg = x8329;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8330 = Fp(x8325.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8331 = x8330 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8331);
          reg = x8331;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8332 = Fp(x8325.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8333 = x8332 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8333);
          reg = x8333;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8334 = Fp(x8325.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8335 = x8334 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8335);
          reg = x8335;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8336 = Fp(x8325.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8337 = x8336 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8337);
          reg = x8337;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8338 = Fp(x8325.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8339 = x8338 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8339);
          reg = x8339;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8340 = Fp(x8325.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8341 = x8340 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8341);
          reg = x8341;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8342 = Fp(x8325.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8343 = x8342 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8343);
          reg = x8343;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8344 = Fp(x8325.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8345 = x8344 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8345);
          reg = x8345;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8346 = Fp(x8325.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8347 = x8346 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8347);
          reg = x8347;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8348 = Fp(x8325.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8349 = x8348 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8349);
          reg = x8349;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8350 = Fp(x8325.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8351 = x8350 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8351);
          reg = x8351;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8352 = Fp(x8325.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8353 = x8352 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8353);
          reg = x8353;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8354 = Fp(x8325.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8355 = x8354 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8355);
          reg = x8355;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8356 = Fp(x8325.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8357 = x8356 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8357);
          reg = x8357;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8358 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x8358 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8359 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x8359 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8360 = x8359 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8361 = x8358 + x8360;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8362 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x8362 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8363 = x8362 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8364 = x8361 + x8363;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8365 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x8365 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8366 = x8365 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8367 = x8364 + x8366;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8368 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x8368 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8369 = x8368 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8370 = x8367 + x8369;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8371 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x8371 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8372 = x8371 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8373 = x8370 + x8372;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8374 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x8374 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8375 = x8374 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8376 = x8373 + x8375;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8377 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x8377 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8378 = x8377 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8379 = x8376 + x8378;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8380 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x8380 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8381 = x8380 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8382 = x8379 + x8381;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8383 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x8383 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8384 = x8383 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8385 = x8382 + x8384;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8386 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x8386 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8387 = x8386 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8388 = x8385 + x8387;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8389 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x8389 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8390 = x8389 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8391 = x8388 + x8390;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8392 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x8392 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8393 = x8392 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8394 = x8391 + x8393;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8395 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x8395 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8396 = x8395 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8397 = x8394 + x8396;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8398 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x8398 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8399 = x8398 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8400 = x8397 + x8399;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8401 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x8401 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8402 = x8401 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8403 = x8400 + x8402;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x8404 = x8325 - x8403;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x8405 = x8404 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x8406 = Fp(x8405.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8406);
          reg = x8406;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x8407 = x8326 + x8405;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8408 = Fp(x8407.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8408);
          reg = x8408;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8409 = Fp(x8407.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8410 = x8409 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8410);
          reg = x8410;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8411 = Fp(x8407.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8412 = x8411 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8412);
          reg = x8412;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8413 = Fp(x8407.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8414 = x8413 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8414);
          reg = x8414;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8415 = Fp(x8407.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8416 = x8415 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8416);
          reg = x8416;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8417 = Fp(x8407.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8418 = x8417 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8418);
          reg = x8418;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8419 = Fp(x8407.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8420 = x8419 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8420);
          reg = x8420;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8421 = Fp(x8407.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8422 = x8421 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8422);
          reg = x8422;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8423 = Fp(x8407.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8424 = x8423 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8424);
          reg = x8424;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8425 = Fp(x8407.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8426 = x8425 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8426);
          reg = x8426;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8427 = Fp(x8407.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8428 = x8427 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8428);
          reg = x8428;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8429 = Fp(x8407.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8430 = x8429 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8430);
          reg = x8430;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8431 = Fp(x8407.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8432 = x8431 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8432);
          reg = x8432;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8433 = Fp(x8407.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8434 = x8433 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8434);
          reg = x8434;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8435 = Fp(x8407.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8436 = x8435 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8436);
          reg = x8436;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8437 = Fp(x8407.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8438 = x8437 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8438);
          reg = x8438;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8439 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x8439 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8440 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x8440 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8441 = x8440 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8442 = x8439 + x8441;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8443 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x8443 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8444 = x8443 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8445 = x8442 + x8444;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8446 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x8446 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8447 = x8446 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8448 = x8445 + x8447;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8449 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x8449 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8450 = x8449 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8451 = x8448 + x8450;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8452 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x8452 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8453 = x8452 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8454 = x8451 + x8453;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8455 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x8455 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8456 = x8455 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8457 = x8454 + x8456;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8458 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x8458 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8459 = x8458 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8460 = x8457 + x8459;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8461 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x8461 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8462 = x8461 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8463 = x8460 + x8462;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8464 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x8464 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8465 = x8464 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8466 = x8463 + x8465;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8467 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x8467 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8468 = x8467 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8469 = x8466 + x8468;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8470 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x8470 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8471 = x8470 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8472 = x8469 + x8471;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8473 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x8473 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8474 = x8473 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8475 = x8472 + x8474;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8476 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x8476 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8477 = x8476 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8478 = x8475 + x8477;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8479 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x8479 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8480 = x8479 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8481 = x8478 + x8480;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8482 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x8482 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8483 = x8482 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8484 = x8481 + x8483;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x8485 = x8407 - x8484;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x8486 = x8485 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x8487 = Fp(x8486.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8487);
          reg = x8487;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e_raw[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8488 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x8488 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e_raw[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8489 = args[2][93 * steps + ((cycle - 0) & mask)];
      assert(x8489 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8490 = Fp(x8488.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8490);
          reg = x8490;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8491 = Fp(x8488.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8492 = x8491 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8492);
          reg = x8492;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8493 = Fp(x8488.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8494 = x8493 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8494);
          reg = x8494;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8495 = Fp(x8488.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8496 = x8495 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8496);
          reg = x8496;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8497 = Fp(x8488.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8498 = x8497 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8498);
          reg = x8498;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8499 = Fp(x8488.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8500 = x8499 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8500);
          reg = x8500;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8501 = Fp(x8488.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8502 = x8501 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8502);
          reg = x8502;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8503 = Fp(x8488.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8504 = x8503 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8504);
          reg = x8504;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8505 = Fp(x8488.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8506 = x8505 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8506);
          reg = x8506;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8507 = Fp(x8488.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8508 = x8507 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8508);
          reg = x8508;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8509 = Fp(x8488.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8510 = x8509 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8510);
          reg = x8510;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8511 = Fp(x8488.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8512 = x8511 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8512);
          reg = x8512;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8513 = Fp(x8488.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8514 = x8513 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8514);
          reg = x8514;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8515 = Fp(x8488.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8516 = x8515 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8516);
          reg = x8516;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8517 = Fp(x8488.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8518 = x8517 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8518);
          reg = x8518;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8519 = Fp(x8488.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8520 = x8519 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8520);
          reg = x8520;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8521 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x8521 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8522 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x8522 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8523 = x8522 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8524 = x8521 + x8523;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8525 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x8525 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8526 = x8525 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8527 = x8524 + x8526;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8528 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x8528 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8529 = x8528 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8530 = x8527 + x8529;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8531 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x8531 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8532 = x8531 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8533 = x8530 + x8532;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8534 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x8534 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8535 = x8534 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8536 = x8533 + x8535;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8537 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x8537 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8538 = x8537 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8539 = x8536 + x8538;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8540 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x8540 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8541 = x8540 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8542 = x8539 + x8541;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8543 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x8543 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8544 = x8543 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8545 = x8542 + x8544;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8546 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x8546 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8547 = x8546 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8548 = x8545 + x8547;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8549 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x8549 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8550 = x8549 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8551 = x8548 + x8550;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8552 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x8552 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8553 = x8552 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8554 = x8551 + x8553;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8555 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x8555 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8556 = x8555 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8557 = x8554 + x8556;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8558 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8558 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8559 = x8558 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8560 = x8557 + x8559;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8561 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x8561 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8562 = x8561 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8563 = x8560 + x8562;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8564 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x8564 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8565 = x8564 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8566 = x8563 + x8565;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x8567 = x8488 - x8566;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x8568 = x8567 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x8569 = Fp(x8568.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8569);
          reg = x8569;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x8570 = x8489 + x8568;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8571 = Fp(x8570.asUInt32() & x307.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8571);
          reg = x8571;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8572 = Fp(x8570.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8573 = x8572 * x294;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8573);
          reg = x8573;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8574 = Fp(x8570.asUInt32() & x304.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8575 = x8574 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8575);
          reg = x8575;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8576 = Fp(x8570.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8577 = x8576 * x292;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8577);
          reg = x8577;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8578 = Fp(x8570.asUInt32() & x291.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8579 = x8578 * x290;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8579);
          reg = x8579;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8580 = Fp(x8570.asUInt32() & x289.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8581 = x8580 * x288;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8581);
          reg = x8581;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8582 = Fp(x8570.asUInt32() & x287.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8583 = x8582 * x286;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8583);
          reg = x8583;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8584 = Fp(x8570.asUInt32() & x285.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8585 = x8584 * x284;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8585);
          reg = x8585;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8586 = Fp(x8570.asUInt32() & x283.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8587 = x8586 * x282;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8587);
          reg = x8587;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8588 = Fp(x8570.asUInt32() & x281.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8589 = x8588 * x280;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8589);
          reg = x8589;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8590 = Fp(x8570.asUInt32() & x279.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8591 = x8590 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8591);
          reg = x8591;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8592 = Fp(x8570.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8593 = x8592 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8593);
          reg = x8593;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8594 = Fp(x8570.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8595 = x8594 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8595);
          reg = x8595;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8596 = Fp(x8570.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8597 = x8596 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8597);
          reg = x8597;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8598 = Fp(x8570.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8599 = x8598 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8599);
          reg = x8599;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8600 = Fp(x8570.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8601 = x8600 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8601);
          reg = x8601;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8602 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8602 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8603 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x8603 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8604 = x8603 * x306;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8605 = x8602 + x8604;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8606 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x8606 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8607 = x8606 * x304;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8608 = x8605 + x8607;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8609 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x8609 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8610 = x8609 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8611 = x8608 + x8610;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8612 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x8612 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8613 = x8612 * x291;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8614 = x8611 + x8613;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8615 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x8615 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8616 = x8615 * x289;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8617 = x8614 + x8616;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8618 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x8618 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8619 = x8618 * x287;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8620 = x8617 + x8619;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8621 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x8621 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8622 = x8621 * x285;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8623 = x8620 + x8622;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8624 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x8624 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8625 = x8624 * x283;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8626 = x8623 + x8625;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8627 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x8627 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8628 = x8627 * x281;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8629 = x8626 + x8628;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8630 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x8630 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8631 = x8630 * x279;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8632 = x8629 + x8631;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8633 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x8633 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8634 = x8633 * x277;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8635 = x8632 + x8634;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8636 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x8636 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8637 = x8636 * x275;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8638 = x8635 + x8637;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8639 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x8639 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8640 = x8639 * x273;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8641 = x8638 + x8640;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8642 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x8642 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8643 = x8642 * x271;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8644 = x8641 + x8643;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8645 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x8645 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8646 = x8645 * x269;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8647 = x8644 + x8646;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x8648 = x8570 - x8647;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x8649 = x8648 * x267;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x8650 = Fp(x8649.asUInt32() & x305.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8650);
          reg = x8650;
        }
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/set_global(Reg)"("./zirgen/components/mux.h":49:25))
    auto x8651 = args[0][16 * steps + ((cycle - 0) & mask)];
    assert(x8651 != Fp::invalid());
    if (x8651 != 0) {
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8652 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x8652 != Fp::invalid());
      host_args.at(0) = x8652;
      host_args.at(1) = x8652;
      host(ctx, "log", "SET_GLOBAL, writing to digest %u//2, part %u%%2", host_args.data(), 2, host_outs.data(), 0);
      {
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8653 = (x8652 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8653);
          reg = x8653;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8654 = x8652 - x307;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8655 = (x8654 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8655);
          reg = x8655;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8656 = x8652 - x306;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8657 = (x8656 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8657);
          reg = x8657;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8658 = x8652 - x305;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8659 = (x8658 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8659);
          reg = x8659;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/select(OneHot)/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x8660 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x8660 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/select(OneHot)/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x8661 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x8661 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/select(OneHot)/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x8662 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x8662 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/select(OneHot)/hot[0](Reg)"("zirgen/circuit/recursion/macro.cpp":35:25))
      auto x8663 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x8663 != Fp::invalid());
      if (x8663 != 0) {
        // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x8664 = args[0][17 * steps + ((cycle - 0) & mask)];
        assert(x8664 != Fp::invalid());
        {
          host_args.at(0) = x8664;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8665 = host_outs.at(0);
          auto x8666 = host_outs.at(1);
          auto x8667 = host_outs.at(2);
          auto x8668 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8665);
            reg = x8665;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8666);
            reg = x8666;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8667);
            reg = x8667;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8668);
            reg = x8668;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8664);
          reg = x8664;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8669 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x8669 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8670 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x8670 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8671 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x8671 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8672 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x8672 != Fp::invalid());
        host_args.at(0) = x308;
        host_args.at(1) = x308;
        host_args.at(2) = x308;
        host_args.at(3) = x8669;
        host_args.at(4) = x8669;
        host_args.at(5) = x8670;
        host_args.at(6) = x8671;
        host_args.at(7) = x8672;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][0] = x8669;
        host_args.at(0) = x308;
        host_args.at(1) = x308;
        host_args.at(2) = x307;
        host_args.at(3) = x8670;
        host_args.at(4) = x8669;
        host_args.at(5) = x8670;
        host_args.at(6) = x8671;
        host_args.at(7) = x8672;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][1] = x8670;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8673 = x8664 + x307;
        {
          host_args.at(0) = x8673;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8674 = host_outs.at(0);
          auto x8675 = host_outs.at(1);
          auto x8676 = host_outs.at(2);
          auto x8677 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8674);
            reg = x8674;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8675);
            reg = x8675;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8676);
            reg = x8676;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8677);
            reg = x8677;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8673);
          reg = x8673;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8678 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x8678 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8679 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x8679 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8680 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x8680 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8681 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x8681 != Fp::invalid());
        host_args.at(0) = x308;
        host_args.at(1) = x307;
        host_args.at(2) = x308;
        host_args.at(3) = x8678;
        host_args.at(4) = x8678;
        host_args.at(5) = x8679;
        host_args.at(6) = x8680;
        host_args.at(7) = x8681;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][2] = x8678;
        host_args.at(0) = x308;
        host_args.at(1) = x307;
        host_args.at(2) = x307;
        host_args.at(3) = x8679;
        host_args.at(4) = x8678;
        host_args.at(5) = x8679;
        host_args.at(6) = x8680;
        host_args.at(7) = x8681;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][3] = x8679;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8682 = x8664 + x306;
        {
          host_args.at(0) = x8682;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8683 = host_outs.at(0);
          auto x8684 = host_outs.at(1);
          auto x8685 = host_outs.at(2);
          auto x8686 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8683);
            reg = x8683;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8684);
            reg = x8684;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8685);
            reg = x8685;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8686);
            reg = x8686;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8682);
          reg = x8682;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8687 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8687 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8688 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8688 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8689 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x8689 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8690 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x8690 != Fp::invalid());
        host_args.at(0) = x308;
        host_args.at(1) = x306;
        host_args.at(2) = x308;
        host_args.at(3) = x8687;
        host_args.at(4) = x8687;
        host_args.at(5) = x8688;
        host_args.at(6) = x8689;
        host_args.at(7) = x8690;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][4] = x8687;
        host_args.at(0) = x308;
        host_args.at(1) = x306;
        host_args.at(2) = x307;
        host_args.at(3) = x8688;
        host_args.at(4) = x8687;
        host_args.at(5) = x8688;
        host_args.at(6) = x8689;
        host_args.at(7) = x8690;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][5] = x8688;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8691 = x8664 + x305;
        {
          host_args.at(0) = x8691;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8692 = host_outs.at(0);
          auto x8693 = host_outs.at(1);
          auto x8694 = host_outs.at(2);
          auto x8695 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8692);
            reg = x8692;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8693);
            reg = x8693;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8694);
            reg = x8694;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8695);
            reg = x8695;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8691);
          reg = x8691;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8696 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8696 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8697 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8697 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8698 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x8698 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8699 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x8699 != Fp::invalid());
        host_args.at(0) = x308;
        host_args.at(1) = x305;
        host_args.at(2) = x308;
        host_args.at(3) = x8696;
        host_args.at(4) = x8696;
        host_args.at(5) = x8697;
        host_args.at(6) = x8698;
        host_args.at(7) = x8699;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][6] = x8696;
        host_args.at(0) = x308;
        host_args.at(1) = x305;
        host_args.at(2) = x307;
        host_args.at(3) = x8697;
        host_args.at(4) = x8696;
        host_args.at(5) = x8697;
        host_args.at(6) = x8698;
        host_args.at(7) = x8699;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][7] = x8697;
      }
      if (x8660 != 0) {
        // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x8700 = args[0][17 * steps + ((cycle - 0) & mask)];
        assert(x8700 != Fp::invalid());
        {
          host_args.at(0) = x8700;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8701 = host_outs.at(0);
          auto x8702 = host_outs.at(1);
          auto x8703 = host_outs.at(2);
          auto x8704 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8701);
            reg = x8701;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8702);
            reg = x8702;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8703);
            reg = x8703;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8704);
            reg = x8704;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8700);
          reg = x8700;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8705 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x8705 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8706 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x8706 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8707 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x8707 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8708 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x8708 != Fp::invalid());
        host_args.at(0) = x307;
        host_args.at(1) = x308;
        host_args.at(2) = x308;
        host_args.at(3) = x8705;
        host_args.at(4) = x8705;
        host_args.at(5) = x8706;
        host_args.at(6) = x8707;
        host_args.at(7) = x8708;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][8] = x8705;
        host_args.at(0) = x307;
        host_args.at(1) = x308;
        host_args.at(2) = x307;
        host_args.at(3) = x8706;
        host_args.at(4) = x8705;
        host_args.at(5) = x8706;
        host_args.at(6) = x8707;
        host_args.at(7) = x8708;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][9] = x8706;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8709 = x8700 + x307;
        {
          host_args.at(0) = x8709;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8710 = host_outs.at(0);
          auto x8711 = host_outs.at(1);
          auto x8712 = host_outs.at(2);
          auto x8713 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8710);
            reg = x8710;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8711);
            reg = x8711;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8712);
            reg = x8712;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8713);
            reg = x8713;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8709);
          reg = x8709;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8714 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x8714 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8715 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x8715 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8716 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x8716 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8717 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x8717 != Fp::invalid());
        host_args.at(0) = x307;
        host_args.at(1) = x307;
        host_args.at(2) = x308;
        host_args.at(3) = x8714;
        host_args.at(4) = x8714;
        host_args.at(5) = x8715;
        host_args.at(6) = x8716;
        host_args.at(7) = x8717;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][10] = x8714;
        host_args.at(0) = x307;
        host_args.at(1) = x307;
        host_args.at(2) = x307;
        host_args.at(3) = x8715;
        host_args.at(4) = x8714;
        host_args.at(5) = x8715;
        host_args.at(6) = x8716;
        host_args.at(7) = x8717;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][11] = x8715;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8718 = x8700 + x306;
        {
          host_args.at(0) = x8718;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8719 = host_outs.at(0);
          auto x8720 = host_outs.at(1);
          auto x8721 = host_outs.at(2);
          auto x8722 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8719);
            reg = x8719;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8720);
            reg = x8720;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8721);
            reg = x8721;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8722);
            reg = x8722;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8718);
          reg = x8718;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8723 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8723 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8724 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8724 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8725 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x8725 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8726 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x8726 != Fp::invalid());
        host_args.at(0) = x307;
        host_args.at(1) = x306;
        host_args.at(2) = x308;
        host_args.at(3) = x8723;
        host_args.at(4) = x8723;
        host_args.at(5) = x8724;
        host_args.at(6) = x8725;
        host_args.at(7) = x8726;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][12] = x8723;
        host_args.at(0) = x307;
        host_args.at(1) = x306;
        host_args.at(2) = x307;
        host_args.at(3) = x8724;
        host_args.at(4) = x8723;
        host_args.at(5) = x8724;
        host_args.at(6) = x8725;
        host_args.at(7) = x8726;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][13] = x8724;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8727 = x8700 + x305;
        {
          host_args.at(0) = x8727;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8728 = host_outs.at(0);
          auto x8729 = host_outs.at(1);
          auto x8730 = host_outs.at(2);
          auto x8731 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8728);
            reg = x8728;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8729);
            reg = x8729;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8730);
            reg = x8730;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8731);
            reg = x8731;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8727);
          reg = x8727;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8732 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8732 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8733 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8733 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8734 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x8734 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8735 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x8735 != Fp::invalid());
        host_args.at(0) = x307;
        host_args.at(1) = x305;
        host_args.at(2) = x308;
        host_args.at(3) = x8732;
        host_args.at(4) = x8732;
        host_args.at(5) = x8733;
        host_args.at(6) = x8734;
        host_args.at(7) = x8735;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][14] = x8732;
        host_args.at(0) = x307;
        host_args.at(1) = x305;
        host_args.at(2) = x307;
        host_args.at(3) = x8733;
        host_args.at(4) = x8732;
        host_args.at(5) = x8733;
        host_args.at(6) = x8734;
        host_args.at(7) = x8735;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][15] = x8733;
      }
      if (x8661 != 0) {
        // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x8736 = args[0][17 * steps + ((cycle - 0) & mask)];
        assert(x8736 != Fp::invalid());
        {
          host_args.at(0) = x8736;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8737 = host_outs.at(0);
          auto x8738 = host_outs.at(1);
          auto x8739 = host_outs.at(2);
          auto x8740 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8737);
            reg = x8737;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8738);
            reg = x8738;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8739);
            reg = x8739;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8740);
            reg = x8740;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8736);
          reg = x8736;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8741 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x8741 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8742 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x8742 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8743 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x8743 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8744 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x8744 != Fp::invalid());
        host_args.at(0) = x306;
        host_args.at(1) = x308;
        host_args.at(2) = x308;
        host_args.at(3) = x8741;
        host_args.at(4) = x8741;
        host_args.at(5) = x8742;
        host_args.at(6) = x8743;
        host_args.at(7) = x8744;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][16] = x8741;
        host_args.at(0) = x306;
        host_args.at(1) = x308;
        host_args.at(2) = x307;
        host_args.at(3) = x8742;
        host_args.at(4) = x8741;
        host_args.at(5) = x8742;
        host_args.at(6) = x8743;
        host_args.at(7) = x8744;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][17] = x8742;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8745 = x8736 + x307;
        {
          host_args.at(0) = x8745;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8746 = host_outs.at(0);
          auto x8747 = host_outs.at(1);
          auto x8748 = host_outs.at(2);
          auto x8749 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8746);
            reg = x8746;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8747);
            reg = x8747;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8748);
            reg = x8748;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8749);
            reg = x8749;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8745);
          reg = x8745;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8750 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x8750 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8751 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x8751 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8752 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x8752 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8753 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x8753 != Fp::invalid());
        host_args.at(0) = x306;
        host_args.at(1) = x307;
        host_args.at(2) = x308;
        host_args.at(3) = x8750;
        host_args.at(4) = x8750;
        host_args.at(5) = x8751;
        host_args.at(6) = x8752;
        host_args.at(7) = x8753;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][18] = x8750;
        host_args.at(0) = x306;
        host_args.at(1) = x307;
        host_args.at(2) = x307;
        host_args.at(3) = x8751;
        host_args.at(4) = x8750;
        host_args.at(5) = x8751;
        host_args.at(6) = x8752;
        host_args.at(7) = x8753;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][19] = x8751;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8754 = x8736 + x306;
        {
          host_args.at(0) = x8754;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8755 = host_outs.at(0);
          auto x8756 = host_outs.at(1);
          auto x8757 = host_outs.at(2);
          auto x8758 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8755);
            reg = x8755;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8756);
            reg = x8756;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8757);
            reg = x8757;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8758);
            reg = x8758;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8754);
          reg = x8754;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8759 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8759 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8760 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8760 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8761 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x8761 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8762 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x8762 != Fp::invalid());
        host_args.at(0) = x306;
        host_args.at(1) = x306;
        host_args.at(2) = x308;
        host_args.at(3) = x8759;
        host_args.at(4) = x8759;
        host_args.at(5) = x8760;
        host_args.at(6) = x8761;
        host_args.at(7) = x8762;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][20] = x8759;
        host_args.at(0) = x306;
        host_args.at(1) = x306;
        host_args.at(2) = x307;
        host_args.at(3) = x8760;
        host_args.at(4) = x8759;
        host_args.at(5) = x8760;
        host_args.at(6) = x8761;
        host_args.at(7) = x8762;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][21] = x8760;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8763 = x8736 + x305;
        {
          host_args.at(0) = x8763;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8764 = host_outs.at(0);
          auto x8765 = host_outs.at(1);
          auto x8766 = host_outs.at(2);
          auto x8767 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8764);
            reg = x8764;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8765);
            reg = x8765;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8766);
            reg = x8766;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8767);
            reg = x8767;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8763);
          reg = x8763;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8768 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8768 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8769 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8769 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8770 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x8770 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8771 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x8771 != Fp::invalid());
        host_args.at(0) = x306;
        host_args.at(1) = x305;
        host_args.at(2) = x308;
        host_args.at(3) = x8768;
        host_args.at(4) = x8768;
        host_args.at(5) = x8769;
        host_args.at(6) = x8770;
        host_args.at(7) = x8771;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][22] = x8768;
        host_args.at(0) = x306;
        host_args.at(1) = x305;
        host_args.at(2) = x307;
        host_args.at(3) = x8769;
        host_args.at(4) = x8768;
        host_args.at(5) = x8769;
        host_args.at(6) = x8770;
        host_args.at(7) = x8771;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][23] = x8769;
      }
      if (x8662 != 0) {
        // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x8772 = args[0][17 * steps + ((cycle - 0) & mask)];
        assert(x8772 != Fp::invalid());
        {
          host_args.at(0) = x8772;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8773 = host_outs.at(0);
          auto x8774 = host_outs.at(1);
          auto x8775 = host_outs.at(2);
          auto x8776 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8773);
            reg = x8773;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8774);
            reg = x8774;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8775);
            reg = x8775;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8776);
            reg = x8776;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8772);
          reg = x8772;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8777 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x8777 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8778 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x8778 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8779 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x8779 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8780 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x8780 != Fp::invalid());
        host_args.at(0) = x305;
        host_args.at(1) = x308;
        host_args.at(2) = x308;
        host_args.at(3) = x8777;
        host_args.at(4) = x8777;
        host_args.at(5) = x8778;
        host_args.at(6) = x8779;
        host_args.at(7) = x8780;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][24] = x8777;
        host_args.at(0) = x305;
        host_args.at(1) = x308;
        host_args.at(2) = x307;
        host_args.at(3) = x8778;
        host_args.at(4) = x8777;
        host_args.at(5) = x8778;
        host_args.at(6) = x8779;
        host_args.at(7) = x8780;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][25] = x8778;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8781 = x8772 + x307;
        {
          host_args.at(0) = x8781;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8782 = host_outs.at(0);
          auto x8783 = host_outs.at(1);
          auto x8784 = host_outs.at(2);
          auto x8785 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8782);
            reg = x8782;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8783);
            reg = x8783;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8784);
            reg = x8784;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8785);
            reg = x8785;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8781);
          reg = x8781;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8786 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x8786 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8787 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x8787 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8788 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x8788 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8789 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x8789 != Fp::invalid());
        host_args.at(0) = x305;
        host_args.at(1) = x307;
        host_args.at(2) = x308;
        host_args.at(3) = x8786;
        host_args.at(4) = x8786;
        host_args.at(5) = x8787;
        host_args.at(6) = x8788;
        host_args.at(7) = x8789;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][26] = x8786;
        host_args.at(0) = x305;
        host_args.at(1) = x307;
        host_args.at(2) = x307;
        host_args.at(3) = x8787;
        host_args.at(4) = x8786;
        host_args.at(5) = x8787;
        host_args.at(6) = x8788;
        host_args.at(7) = x8789;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][27] = x8787;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8790 = x8772 + x306;
        {
          host_args.at(0) = x8790;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8791 = host_outs.at(0);
          auto x8792 = host_outs.at(1);
          auto x8793 = host_outs.at(2);
          auto x8794 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8791);
            reg = x8791;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8792);
            reg = x8792;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8793);
            reg = x8793;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8794);
            reg = x8794;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8790);
          reg = x8790;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8795 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8795 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8796 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8796 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8797 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x8797 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8798 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x8798 != Fp::invalid());
        host_args.at(0) = x305;
        host_args.at(1) = x306;
        host_args.at(2) = x308;
        host_args.at(3) = x8795;
        host_args.at(4) = x8795;
        host_args.at(5) = x8796;
        host_args.at(6) = x8797;
        host_args.at(7) = x8798;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][28] = x8795;
        host_args.at(0) = x305;
        host_args.at(1) = x306;
        host_args.at(2) = x307;
        host_args.at(3) = x8796;
        host_args.at(4) = x8795;
        host_args.at(5) = x8796;
        host_args.at(6) = x8797;
        host_args.at(7) = x8798;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][29] = x8796;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8799 = x8772 + x305;
        {
          host_args.at(0) = x8799;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8800 = host_outs.at(0);
          auto x8801 = host_outs.at(1);
          auto x8802 = host_outs.at(2);
          auto x8803 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8800);
            reg = x8800;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8801);
            reg = x8801;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8802);
            reg = x8802;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":51:5)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8803);
            reg = x8803;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":82:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8799);
          reg = x8799;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8804 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8804 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8805 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8805 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8806 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x8806 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x8807 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x8807 != Fp::invalid());
        host_args.at(0) = x305;
        host_args.at(1) = x305;
        host_args.at(2) = x308;
        host_args.at(3) = x8804;
        host_args.at(4) = x8804;
        host_args.at(5) = x8805;
        host_args.at(6) = x8806;
        host_args.at(7) = x8807;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][30] = x8804;
        host_args.at(0) = x305;
        host_args.at(1) = x305;
        host_args.at(2) = x307;
        host_args.at(3) = x8805;
        host_args.at(4) = x8804;
        host_args.at(5) = x8805;
        host_args.at(6) = x8806;
        host_args.at(7) = x8807;
        host(ctx, "log", "SET_GLOBAL(%u + %u, %u) -> %x, %e", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][31] = x8805;
      }
    }
  }
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/poseidon2_load(Reg)"("./zirgen/components/mux.h":49:25))
  auto x8808 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x8808 != Fp::invalid());
  if (x8808 != 0) {
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/do_mont(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x8809 = args[0][7 * steps + ((cycle - 0) & mask)];
    assert(x8809 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":57:13)
    auto x8810 = x8809 * x237;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":57:63)
    auto x8811 = x307 - x8809;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":57:13)
    auto x8812 = x8810 + x8811;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8813 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x8813 != Fp::invalid());
    {
      host_args.at(0) = x8813;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8814 = host_outs.at(0);
      auto x8815 = host_outs.at(1);
      auto x8816 = host_outs.at(2);
      auto x8817 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8814);
        reg = x8814;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8815);
        reg = x8815;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8816);
        reg = x8816;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8817);
        reg = x8817;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":82:3)
    {
      auto& reg = args[2][5 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8813);
      reg = x8813;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
    auto x8818 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x8818 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8819 = x8818 * x8812;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8820 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x8820 != Fp::invalid());
    {
      host_args.at(0) = x8820;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8821 = host_outs.at(0);
      auto x8822 = host_outs.at(1);
      auto x8823 = host_outs.at(2);
      auto x8824 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8821);
        reg = x8821;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8822);
        reg = x8822;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8823);
        reg = x8823;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8824);
        reg = x8824;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":82:3)
    {
      auto& reg = args[2][10 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8820);
      reg = x8820;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
    auto x8825 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x8825 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8826 = x8825 * x8812;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8827 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x8827 != Fp::invalid());
    {
      host_args.at(0) = x8827;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8828 = host_outs.at(0);
      auto x8829 = host_outs.at(1);
      auto x8830 = host_outs.at(2);
      auto x8831 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8828);
        reg = x8828;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8829);
        reg = x8829;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8830);
        reg = x8830;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8831);
        reg = x8831;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":82:3)
    {
      auto& reg = args[2][15 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8827);
      reg = x8827;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
    auto x8832 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x8832 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8833 = x8832 * x8812;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8834 = args[0][16 * steps + ((cycle - 0) & mask)];
    assert(x8834 != Fp::invalid());
    {
      host_args.at(0) = x8834;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8835 = host_outs.at(0);
      auto x8836 = host_outs.at(1);
      auto x8837 = host_outs.at(2);
      auto x8838 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8835);
        reg = x8835;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8836);
        reg = x8836;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8837);
        reg = x8837;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8838);
        reg = x8838;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":82:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8834);
      reg = x8834;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
    auto x8839 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x8839 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8840 = x8839 * x8812;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[4](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8841 = args[0][17 * steps + ((cycle - 0) & mask)];
    assert(x8841 != Fp::invalid());
    {
      host_args.at(0) = x8841;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8842 = host_outs.at(0);
      auto x8843 = host_outs.at(1);
      auto x8844 = host_outs.at(2);
      auto x8845 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8842);
        reg = x8842;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8843);
        reg = x8843;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8844);
        reg = x8844;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8845);
        reg = x8845;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":82:3)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8841);
      reg = x8841;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
    auto x8846 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x8846 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8847 = x8846 * x8812;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[5](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8848 = args[0][18 * steps + ((cycle - 0) & mask)];
    assert(x8848 != Fp::invalid());
    {
      host_args.at(0) = x8848;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8849 = host_outs.at(0);
      auto x8850 = host_outs.at(1);
      auto x8851 = host_outs.at(2);
      auto x8852 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8849);
        reg = x8849;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8850);
        reg = x8850;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8851);
        reg = x8851;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8852);
        reg = x8852;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":82:3)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8848);
      reg = x8848;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
    auto x8853 = args[2][31 * steps + ((cycle - 0) & mask)];
    assert(x8853 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8854 = x8853 * x8812;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[6](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8855 = args[0][19 * steps + ((cycle - 0) & mask)];
    assert(x8855 != Fp::invalid());
    {
      host_args.at(0) = x8855;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8856 = host_outs.at(0);
      auto x8857 = host_outs.at(1);
      auto x8858 = host_outs.at(2);
      auto x8859 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8856);
        reg = x8856;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8857);
        reg = x8857;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8858);
        reg = x8858;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8859);
        reg = x8859;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":82:3)
    {
      auto& reg = args[2][35 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8855);
      reg = x8855;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
    auto x8860 = args[2][36 * steps + ((cycle - 0) & mask)];
    assert(x8860 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8861 = x8860 * x8812;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[7](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8862 = args[0][20 * steps + ((cycle - 0) & mask)];
    assert(x8862 != Fp::invalid());
    {
      host_args.at(0) = x8862;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8863 = host_outs.at(0);
      auto x8864 = host_outs.at(1);
      auto x8865 = host_outs.at(2);
      auto x8866 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8863);
        reg = x8863;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8864);
        reg = x8864;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8865);
        reg = x8865;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8866);
        reg = x8866;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":82:3)
    {
      auto& reg = args[2][40 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8862);
      reg = x8862;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
    auto x8867 = args[2][41 * steps + ((cycle - 0) & mask)];
    assert(x8867 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8868 = x8867 * x8812;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/keep_state(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x8869 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x8869 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8870 = args[2][90 * steps + ((cycle - 1) & mask)];
    if (x8870 == Fp::invalid()) x8870 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8871 = x8869 * x8870;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/group(OneHot)/g0(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":65:13))
    auto x8872 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x8872 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8873 = x8872 * x8819;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8874 = x8871 + x8873;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8875 = args[2][91 * steps + ((cycle - 1) & mask)];
    if (x8875 == Fp::invalid()) x8875 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8876 = x8869 * x8875;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8877 = x8872 * x8826;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8878 = x8876 + x8877;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8879 = args[2][92 * steps + ((cycle - 1) & mask)];
    if (x8879 == Fp::invalid()) x8879 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8880 = x8869 * x8879;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8881 = x8872 * x8833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8882 = x8880 + x8881;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8883 = args[2][93 * steps + ((cycle - 1) & mask)];
    if (x8883 == Fp::invalid()) x8883 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8884 = x8869 * x8883;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8885 = x8872 * x8840;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8886 = x8884 + x8885;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8887 = args[2][94 * steps + ((cycle - 1) & mask)];
    if (x8887 == Fp::invalid()) x8887 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8888 = x8869 * x8887;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8889 = x8872 * x8847;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8890 = x8888 + x8889;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8891 = args[2][95 * steps + ((cycle - 1) & mask)];
    if (x8891 == Fp::invalid()) x8891 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8892 = x8869 * x8891;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8893 = x8872 * x8854;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8894 = x8892 + x8893;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8895 = args[2][96 * steps + ((cycle - 1) & mask)];
    if (x8895 == Fp::invalid()) x8895 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8896 = x8869 * x8895;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8897 = x8872 * x8861;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8898 = x8896 + x8897;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8899 = args[2][97 * steps + ((cycle - 1) & mask)];
    if (x8899 == Fp::invalid()) x8899 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8900 = x8869 * x8899;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8901 = x8872 * x8868;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8902 = x8900 + x8901;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8903 = args[2][98 * steps + ((cycle - 1) & mask)];
    if (x8903 == Fp::invalid()) x8903 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8904 = x8869 * x8903;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/group(OneHot)/g1(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":65:13))
    auto x8905 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x8905 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8906 = x8905 * x8819;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8907 = x8904 + x8906;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8908 = args[2][99 * steps + ((cycle - 1) & mask)];
    if (x8908 == Fp::invalid()) x8908 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8909 = x8869 * x8908;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8910 = x8905 * x8826;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8911 = x8909 + x8910;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8912 = args[2][100 * steps + ((cycle - 1) & mask)];
    if (x8912 == Fp::invalid()) x8912 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8913 = x8869 * x8912;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8914 = x8905 * x8833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8915 = x8913 + x8914;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8916 = args[2][101 * steps + ((cycle - 1) & mask)];
    if (x8916 == Fp::invalid()) x8916 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8917 = x8869 * x8916;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8918 = x8905 * x8840;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8919 = x8917 + x8918;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8920 = args[2][102 * steps + ((cycle - 1) & mask)];
    if (x8920 == Fp::invalid()) x8920 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8921 = x8869 * x8920;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8922 = x8905 * x8847;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8923 = x8921 + x8922;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8924 = args[2][103 * steps + ((cycle - 1) & mask)];
    if (x8924 == Fp::invalid()) x8924 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8925 = x8869 * x8924;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8926 = x8905 * x8854;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8927 = x8925 + x8926;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8928 = args[2][104 * steps + ((cycle - 1) & mask)];
    if (x8928 == Fp::invalid()) x8928 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8929 = x8869 * x8928;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8930 = x8905 * x8861;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8931 = x8929 + x8930;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8932 = args[2][105 * steps + ((cycle - 1) & mask)];
    if (x8932 == Fp::invalid()) x8932 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8933 = x8869 * x8932;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8934 = x8905 * x8868;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8935 = x8933 + x8934;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8936 = args[2][106 * steps + ((cycle - 1) & mask)];
    if (x8936 == Fp::invalid()) x8936 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8937 = x8869 * x8936;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/group(OneHot)/g2(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":65:13))
    auto x8938 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x8938 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8939 = x8938 * x8819;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8940 = x8937 + x8939;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8941 = args[2][107 * steps + ((cycle - 1) & mask)];
    if (x8941 == Fp::invalid()) x8941 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8942 = x8869 * x8941;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8943 = x8938 * x8826;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8944 = x8942 + x8943;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8945 = args[2][108 * steps + ((cycle - 1) & mask)];
    if (x8945 == Fp::invalid()) x8945 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8946 = x8869 * x8945;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8947 = x8938 * x8833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8948 = x8946 + x8947;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8949 = args[2][109 * steps + ((cycle - 1) & mask)];
    if (x8949 == Fp::invalid()) x8949 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8950 = x8869 * x8949;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8951 = x8938 * x8840;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8952 = x8950 + x8951;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8953 = args[2][110 * steps + ((cycle - 1) & mask)];
    if (x8953 == Fp::invalid()) x8953 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8954 = x8869 * x8953;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8955 = x8938 * x8847;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8956 = x8954 + x8955;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8957 = args[2][111 * steps + ((cycle - 1) & mask)];
    if (x8957 == Fp::invalid()) x8957 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8958 = x8869 * x8957;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8959 = x8938 * x8854;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8960 = x8958 + x8959;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8961 = args[2][112 * steps + ((cycle - 1) & mask)];
    if (x8961 == Fp::invalid()) x8961 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8962 = x8869 * x8961;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8963 = x8938 * x8861;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8964 = x8962 + x8963;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8965 = args[2][113 * steps + ((cycle - 1) & mask)];
    if (x8965 == Fp::invalid()) x8965 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8966 = x8869 * x8965;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8967 = x8938 * x8868;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8968 = x8966 + x8967;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x8969 = x8874 + x8878;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x8970 = x8882 + x8886;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8971 = x8878 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8972 = x8971 + x8970;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8973 = x8886 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8974 = x8973 + x8969;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8975 = x8970 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8976 = x8975 + x8974;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x8977 = x8969 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x8978 = x8977 + x8972;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x8979 = x8974 + x8978;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x8980 = x8972 + x8976;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x8981 = x8890 + x8894;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x8982 = x8898 + x8902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8983 = x8894 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8984 = x8983 + x8982;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8985 = x8902 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8986 = x8985 + x8981;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8987 = x8982 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8988 = x8987 + x8986;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x8989 = x8981 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x8990 = x8989 + x8984;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x8991 = x8986 + x8990;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x8992 = x8984 + x8988;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8993 = x8979 + x8991;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8994 = x8978 + x8990;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8995 = x8980 + x8992;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8996 = x8976 + x8988;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x8997 = x8907 + x8911;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x8998 = x8915 + x8919;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8999 = x8911 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9000 = x8999 + x8998;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9001 = x8919 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9002 = x9001 + x8997;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9003 = x8998 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9004 = x9003 + x9002;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9005 = x8997 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9006 = x9005 + x9000;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9007 = x9002 + x9006;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9008 = x9000 + x9004;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9009 = x8993 + x9007;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9010 = x8994 + x9006;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9011 = x8995 + x9008;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9012 = x8996 + x9004;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9013 = x8923 + x8927;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9014 = x8931 + x8935;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9015 = x8927 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9016 = x9015 + x9014;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9017 = x8935 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9018 = x9017 + x9013;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9019 = x9014 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9020 = x9019 + x9018;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9021 = x9013 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9022 = x9021 + x9016;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9023 = x9018 + x9022;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9024 = x9016 + x9020;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9025 = x9009 + x9023;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9026 = x9010 + x9022;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9027 = x9011 + x9024;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9028 = x9012 + x9020;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9029 = x8940 + x8944;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9030 = x8948 + x8952;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9031 = x8944 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9032 = x9031 + x9030;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9033 = x8952 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9034 = x9033 + x9029;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9035 = x9030 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9036 = x9035 + x9034;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9037 = x9029 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9038 = x9037 + x9032;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9039 = x9034 + x9038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9040 = x9032 + x9036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9041 = x9025 + x9039;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9042 = x9026 + x9038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9043 = x9027 + x9040;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9044 = x9028 + x9036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9045 = x8956 + x8960;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9046 = x8964 + x8968;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9047 = x8960 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9048 = x9047 + x9046;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9049 = x8968 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9050 = x9049 + x9045;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9051 = x9046 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9052 = x9051 + x9050;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9053 = x9045 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9054 = x9053 + x9048;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9055 = x9050 + x9054;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9056 = x9048 + x9052;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9057 = x9041 + x9055;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9058 = x9042 + x9054;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9059 = x9043 + x9056;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9060 = x9044 + x9052;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9061 = x8979 + x9057;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9062 = x8978 + x9058;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9063 = x8980 + x9059;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9064 = x8976 + x9060;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9065 = x8991 + x9057;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9066 = x8990 + x9058;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9067 = x8992 + x9059;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9068 = x8988 + x9060;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9069 = x9007 + x9057;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9070 = x9006 + x9058;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9071 = x9008 + x9059;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9072 = x9004 + x9060;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9073 = x9023 + x9057;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9074 = x9022 + x9058;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9075 = x9024 + x9059;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9076 = x9020 + x9060;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9077 = x9039 + x9057;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9078 = x9038 + x9058;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9079 = x9040 + x9059;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9080 = x9036 + x9060;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9081 = x9055 + x9057;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9082 = x9054 + x9058;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9083 = x9056 + x9059;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9084 = x9052 + x9060;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/prep_full(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x9085 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x9085 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9086 = x9085 * x9061;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:39)
    auto x9087 = x307 - x9085;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9088 = x9087 * x8874;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9089 = x9086 + x9088;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9090 = x9085 * x236;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9091 = x9089 + x9090;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][90 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9091);
      reg = x9091;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9092 = x9085 * x9062;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9093 = x9087 * x8878;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9094 = x9092 + x9093;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9095 = x9085 * x235;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9096 = x9094 + x9095;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][91 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9096);
      reg = x9096;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9097 = x9085 * x9063;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9098 = x9087 * x8882;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9099 = x9097 + x9098;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9100 = x9085 * x234;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9101 = x9099 + x9100;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9101);
      reg = x9101;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9102 = x9085 * x9064;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9103 = x9087 * x8886;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9104 = x9102 + x9103;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9105 = x9085 * x233;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9106 = x9104 + x9105;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9106);
      reg = x9106;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9107 = x9085 * x9065;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9108 = x9087 * x8890;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9109 = x9107 + x9108;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9110 = x9085 * x232;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9111 = x9109 + x9110;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][94 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9111);
      reg = x9111;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9112 = x9085 * x9066;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9113 = x9087 * x8894;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9114 = x9112 + x9113;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9115 = x9085 * x231;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9116 = x9114 + x9115;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][95 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9116);
      reg = x9116;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9117 = x9085 * x9067;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9118 = x9087 * x8898;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9119 = x9117 + x9118;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9120 = x9085 * x230;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9121 = x9119 + x9120;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][96 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9121);
      reg = x9121;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9122 = x9085 * x9068;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9123 = x9087 * x8902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9124 = x9122 + x9123;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9125 = x9085 * x229;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9126 = x9124 + x9125;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9126);
      reg = x9126;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9127 = x9085 * x9069;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9128 = x9087 * x8907;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9129 = x9127 + x9128;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9130 = x9085 * x228;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9131 = x9129 + x9130;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9131);
      reg = x9131;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9132 = x9085 * x9070;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9133 = x9087 * x8911;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9134 = x9132 + x9133;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9135 = x9085 * x227;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9136 = x9134 + x9135;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9136);
      reg = x9136;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9137 = x9085 * x9071;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9138 = x9087 * x8915;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9139 = x9137 + x9138;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9140 = x9085 * x226;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9141 = x9139 + x9140;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9141);
      reg = x9141;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9142 = x9085 * x9072;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9143 = x9087 * x8919;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9144 = x9142 + x9143;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9145 = x9085 * x225;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9146 = x9144 + x9145;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][101 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9146);
      reg = x9146;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9147 = x9085 * x9073;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9148 = x9087 * x8923;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9149 = x9147 + x9148;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9150 = x9085 * x224;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9151 = x9149 + x9150;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][102 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9151);
      reg = x9151;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9152 = x9085 * x9074;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9153 = x9087 * x8927;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9154 = x9152 + x9153;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9155 = x9085 * x223;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9156 = x9154 + x9155;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][103 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9156);
      reg = x9156;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9157 = x9085 * x9075;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9158 = x9087 * x8931;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9159 = x9157 + x9158;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9160 = x9085 * x222;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9161 = x9159 + x9160;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9161);
      reg = x9161;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9162 = x9085 * x9076;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9163 = x9087 * x8935;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9164 = x9162 + x9163;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9165 = x9085 * x221;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9166 = x9164 + x9165;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9166);
      reg = x9166;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9167 = x9085 * x9077;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9168 = x9087 * x8940;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9169 = x9167 + x9168;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9170 = x9085 * x220;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9171 = x9169 + x9170;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9171);
      reg = x9171;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9172 = x9085 * x9078;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9173 = x9087 * x8944;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9174 = x9172 + x9173;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9175 = x9085 * x219;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9176 = x9174 + x9175;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9176);
      reg = x9176;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9177 = x9085 * x9079;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9178 = x9087 * x8948;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9179 = x9177 + x9178;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9180 = x9085 * x218;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9181 = x9179 + x9180;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9181);
      reg = x9181;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9182 = x9085 * x9080;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9183 = x9087 * x8952;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9184 = x9182 + x9183;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9185 = x9085 * x217;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9186 = x9184 + x9185;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9186);
      reg = x9186;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9187 = x9085 * x9081;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9188 = x9087 * x8956;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9189 = x9187 + x9188;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9190 = x9085 * x216;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9191 = x9189 + x9190;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9191);
      reg = x9191;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9192 = x9085 * x9082;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9193 = x9087 * x8960;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9194 = x9192 + x9193;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9195 = x9085 * x215;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9196 = x9194 + x9195;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9196);
      reg = x9196;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9197 = x9085 * x9083;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9198 = x9087 * x8964;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9199 = x9197 + x9198;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9200 = x9085 * x214;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9201 = x9199 + x9200;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9201);
      reg = x9201;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9202 = x9085 * x9084;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9203 = x9087 * x8968;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9204 = x9202 + x9203;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9205 = x9085 * x213;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9206 = x9204 + x9205;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9206);
      reg = x9206;
    }
    // loc("./zirgen/components/onehot.h":46:19)
    auto x9207 = x8938 * x306;
    // loc("./zirgen/components/onehot.h":46:13)
    auto x9208 = x8905 + x9207;
    host_args.at(0) = x8869;
    host_args.at(1) = x9085;
    host_args.at(2) = x9208;
    host_args.at(3) = x8809;
    host(ctx, "log", "POSEIDON2_LOAD: keepState(%u), prepFull(%u), group(%u), doMont(%u)", host_args.data(), 4, host_outs.data(), 0);
  }
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/poseidon2_full(Reg)"("./zirgen/components/mux.h":49:25))
  auto x9209 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x9209 != Fp::invalid());
  if (x9209 != 0) {
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_full(recursion::Poseidon2FullInst)/cycle(OneHot)/c1(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x9210 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x9210 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_full(recursion::Poseidon2FullInst)/cycle(OneHot)/c2(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x9211 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x9211 != Fp::invalid());
    // loc("./zirgen/components/onehot.h":46:19)
    auto x9212 = x9211 * x306;
    // loc("./zirgen/components/onehot.h":46:13)
    auto x9213 = x9210 + x9212;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_full(recursion::Poseidon2FullInst)/cycle(OneHot)/c3(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x9214 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x9214 != Fp::invalid());
    // loc("./zirgen/components/onehot.h":46:19)
    auto x9215 = x9214 * x305;
    // loc("./zirgen/components/onehot.h":46:13)
    auto x9216 = x9213 + x9215;
    host_args.at(0) = x9216;
    host(ctx, "log", "POSEIDON2_FULL: %u", host_args.data(), 1, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9217 = args[2][90 * steps + ((cycle - 1) & mask)];
    assert(x9217 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9218 = args[2][91 * steps + ((cycle - 1) & mask)];
    assert(x9218 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9219 = args[2][92 * steps + ((cycle - 1) & mask)];
    assert(x9219 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9220 = args[2][93 * steps + ((cycle - 1) & mask)];
    assert(x9220 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9221 = args[2][94 * steps + ((cycle - 1) & mask)];
    assert(x9221 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9222 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x9222 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9223 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x9223 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9224 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x9224 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9225 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x9225 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9226 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x9226 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9227 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x9227 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9228 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x9228 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9229 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x9229 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9230 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x9230 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9231 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x9231 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9232 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x9232 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9233 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x9233 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9234 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x9234 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9235 = args[2][108 * steps + ((cycle - 1) & mask)];
    assert(x9235 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9236 = args[2][109 * steps + ((cycle - 1) & mask)];
    assert(x9236 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9237 = args[2][110 * steps + ((cycle - 1) & mask)];
    assert(x9237 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9238 = args[2][111 * steps + ((cycle - 1) & mask)];
    assert(x9238 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9239 = args[2][112 * steps + ((cycle - 1) & mask)];
    assert(x9239 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":195:42))
    auto x9240 = args[2][113 * steps + ((cycle - 1) & mask)];
    assert(x9240 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9241 = x9217 * x9217;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9242 = x9241 * x9241;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][5 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9242);
      reg = x9242;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9243 = args[2][5 * steps + ((cycle - 0) & mask)];
    assert(x9243 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9244 = x9243 * x9241;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9245 = x9244 * x9217;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9246 = x9218 * x9218;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9247 = x9246 * x9246;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][6 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9247);
      reg = x9247;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9248 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x9248 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9249 = x9248 * x9246;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9250 = x9249 * x9218;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9251 = x9219 * x9219;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9252 = x9251 * x9251;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][7 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9252);
      reg = x9252;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9253 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x9253 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9254 = x9253 * x9251;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9255 = x9254 * x9219;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9256 = x9220 * x9220;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9257 = x9256 * x9256;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][8 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9257);
      reg = x9257;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9258 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x9258 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9259 = x9258 * x9256;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9260 = x9259 * x9220;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9261 = x9221 * x9221;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9262 = x9261 * x9261;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9262);
      reg = x9262;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9263 = args[2][9 * steps + ((cycle - 0) & mask)];
    assert(x9263 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9264 = x9263 * x9261;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9265 = x9264 * x9221;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9266 = x9222 * x9222;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9267 = x9266 * x9266;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][10 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9267);
      reg = x9267;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9268 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x9268 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9269 = x9268 * x9266;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9270 = x9269 * x9222;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9271 = x9223 * x9223;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9272 = x9271 * x9271;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][11 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9272);
      reg = x9272;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9273 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x9273 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9274 = x9273 * x9271;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9275 = x9274 * x9223;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9276 = x9224 * x9224;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9277 = x9276 * x9276;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][12 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9277);
      reg = x9277;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9278 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x9278 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9279 = x9278 * x9276;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9280 = x9279 * x9224;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9281 = x9225 * x9225;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9282 = x9281 * x9281;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][13 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9282);
      reg = x9282;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9283 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x9283 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9284 = x9283 * x9281;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9285 = x9284 * x9225;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9286 = x9226 * x9226;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9287 = x9286 * x9286;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][14 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9287);
      reg = x9287;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9288 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x9288 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9289 = x9288 * x9286;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9290 = x9289 * x9226;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9291 = x9227 * x9227;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9292 = x9291 * x9291;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][15 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9292);
      reg = x9292;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9293 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x9293 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9294 = x9293 * x9291;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9295 = x9294 * x9227;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9296 = x9228 * x9228;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9297 = x9296 * x9296;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9297);
      reg = x9297;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9298 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x9298 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9299 = x9298 * x9296;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9300 = x9299 * x9228;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9301 = x9229 * x9229;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9302 = x9301 * x9301;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][17 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9302);
      reg = x9302;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9303 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x9303 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9304 = x9303 * x9301;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9305 = x9304 * x9229;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9306 = x9230 * x9230;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9307 = x9306 * x9306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9307);
      reg = x9307;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9308 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x9308 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9309 = x9308 * x9306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9310 = x9309 * x9230;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9311 = x9231 * x9231;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9312 = x9311 * x9311;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][19 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9312);
      reg = x9312;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9313 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x9313 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9314 = x9313 * x9311;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9315 = x9314 * x9231;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9316 = x9232 * x9232;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9317 = x9316 * x9316;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9317);
      reg = x9317;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9318 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x9318 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9319 = x9318 * x9316;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9320 = x9319 * x9232;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9321 = x9233 * x9233;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9322 = x9321 * x9321;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][21 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9322);
      reg = x9322;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9323 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x9323 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9324 = x9323 * x9321;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9325 = x9324 * x9233;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9326 = x9234 * x9234;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9327 = x9326 * x9326;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9327);
      reg = x9327;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9328 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x9328 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9329 = x9328 * x9326;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9330 = x9329 * x9234;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9331 = x9235 * x9235;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9332 = x9331 * x9331;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][23 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9332);
      reg = x9332;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9333 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x9333 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9334 = x9333 * x9331;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9335 = x9334 * x9235;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9336 = x9236 * x9236;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9337 = x9336 * x9336;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9337);
      reg = x9337;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9338 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x9338 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9339 = x9338 * x9336;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9340 = x9339 * x9236;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9341 = x9237 * x9237;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9342 = x9341 * x9341;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9342);
      reg = x9342;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9343 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x9343 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9344 = x9343 * x9341;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9345 = x9344 * x9237;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9346 = x9238 * x9238;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9347 = x9346 * x9346;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9347);
      reg = x9347;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9348 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x9348 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9349 = x9348 * x9346;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9350 = x9349 * x9238;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9351 = x9239 * x9239;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9352 = x9351 * x9351;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][27 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9352);
      reg = x9352;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9353 = args[2][27 * steps + ((cycle - 0) & mask)];
    assert(x9353 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9354 = x9353 * x9351;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9355 = x9354 * x9239;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9356 = x9240 * x9240;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9357 = x9356 * x9356;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][28 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9357);
      reg = x9357;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9358 = args[2][28 * steps + ((cycle - 0) & mask)];
    assert(x9358 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9359 = x9358 * x9356;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9360 = x9359 * x9240;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9361 = x9245 + x9250;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9362 = x9255 + x9260;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9363 = x9250 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9364 = x9363 + x9362;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9365 = x9260 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9366 = x9365 + x9361;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9367 = x9362 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9368 = x9367 + x9366;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9369 = x9361 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9370 = x9369 + x9364;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9371 = x9366 + x9370;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9372 = x9364 + x9368;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9373 = x9265 + x9270;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9374 = x9275 + x9280;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9375 = x9270 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9376 = x9375 + x9374;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9377 = x9280 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9378 = x9377 + x9373;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9379 = x9374 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9380 = x9379 + x9378;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9381 = x9373 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9382 = x9381 + x9376;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9383 = x9378 + x9382;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9384 = x9376 + x9380;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9385 = x9371 + x9383;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9386 = x9370 + x9382;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9387 = x9372 + x9384;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9388 = x9368 + x9380;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9389 = x9285 + x9290;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9390 = x9295 + x9300;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9391 = x9290 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9392 = x9391 + x9390;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9393 = x9300 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9394 = x9393 + x9389;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9395 = x9390 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9396 = x9395 + x9394;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9397 = x9389 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9398 = x9397 + x9392;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9399 = x9394 + x9398;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9400 = x9392 + x9396;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9401 = x9385 + x9399;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9402 = x9386 + x9398;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9403 = x9387 + x9400;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9404 = x9388 + x9396;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9405 = x9305 + x9310;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9406 = x9315 + x9320;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9407 = x9310 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9408 = x9407 + x9406;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9409 = x9320 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9410 = x9409 + x9405;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9411 = x9406 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9412 = x9411 + x9410;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9413 = x9405 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9414 = x9413 + x9408;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9415 = x9410 + x9414;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9416 = x9408 + x9412;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9417 = x9401 + x9415;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9418 = x9402 + x9414;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9419 = x9403 + x9416;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9420 = x9404 + x9412;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9421 = x9325 + x9330;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9422 = x9335 + x9340;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9423 = x9330 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9424 = x9423 + x9422;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9425 = x9340 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9426 = x9425 + x9421;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9427 = x9422 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9428 = x9427 + x9426;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9429 = x9421 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9430 = x9429 + x9424;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9431 = x9426 + x9430;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9432 = x9424 + x9428;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9433 = x9417 + x9431;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9434 = x9418 + x9430;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9435 = x9419 + x9432;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9436 = x9420 + x9428;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9437 = x9345 + x9350;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9438 = x9355 + x9360;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9439 = x9350 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9440 = x9439 + x9438;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9441 = x9360 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9442 = x9441 + x9437;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9443 = x9438 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9444 = x9443 + x9442;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9445 = x9437 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9446 = x9445 + x9440;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9447 = x9442 + x9446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9448 = x9440 + x9444;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9449 = x9433 + x9447;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9450 = x9434 + x9446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9451 = x9435 + x9448;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9452 = x9436 + x9444;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9453 = x9371 + x9449;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9454 = x9370 + x9450;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9455 = x9372 + x9451;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9456 = x9368 + x9452;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9457 = x9383 + x9449;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9458 = x9382 + x9450;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9459 = x9384 + x9451;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9460 = x9380 + x9452;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9461 = x9399 + x9449;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9462 = x9398 + x9450;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9463 = x9400 + x9451;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9464 = x9396 + x9452;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9465 = x9415 + x9449;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9466 = x9414 + x9450;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9467 = x9416 + x9451;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9468 = x9412 + x9452;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9469 = x9431 + x9449;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9470 = x9430 + x9450;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9471 = x9432 + x9451;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9472 = x9428 + x9452;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9473 = x9447 + x9449;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9474 = x9446 + x9450;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9475 = x9448 + x9451;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9476 = x9444 + x9452;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_full(recursion::Poseidon2FullInst)/cycle(OneHot)/c0(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":182:19))
    auto x9477 = args[0][7 * steps + ((cycle - 0) & mask)];
    assert(x9477 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9478 = x9477 * x212;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9479 = x9210 * x211;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9480 = x9478 + x9479;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9481 = x9211 * x210;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9482 = x9480 + x9481;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9483 = x9214 * x209;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9484 = x9482 + x9483;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9485 = x9477 * x208;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9486 = x9210 * x207;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9487 = x9485 + x9486;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9488 = x9211 * x206;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9489 = x9487 + x9488;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9490 = x9214 * x205;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9491 = x9489 + x9490;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9492 = x9477 * x204;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9493 = x9210 * x203;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9494 = x9492 + x9493;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9495 = x9211 * x202;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9496 = x9494 + x9495;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9497 = x9214 * x201;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9498 = x9496 + x9497;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9499 = x9477 * x200;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9500 = x9210 * x199;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9501 = x9499 + x9500;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9502 = x9211 * x198;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9503 = x9501 + x9502;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9504 = x9214 * x197;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9505 = x9503 + x9504;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9506 = x9477 * x196;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9507 = x9210 * x195;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9508 = x9506 + x9507;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9509 = x9211 * x194;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9510 = x9508 + x9509;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9511 = x9214 * x193;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9512 = x9510 + x9511;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9513 = x9477 * x192;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9514 = x9210 * x191;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9515 = x9513 + x9514;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9516 = x9211 * x190;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9517 = x9515 + x9516;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9518 = x9214 * x189;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9519 = x9517 + x9518;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9520 = x9477 * x188;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9521 = x9210 * x187;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9522 = x9520 + x9521;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9523 = x9211 * x186;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9524 = x9522 + x9523;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9525 = x9214 * x185;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9526 = x9524 + x9525;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9527 = x9477 * x184;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9528 = x9210 * x183;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9529 = x9527 + x9528;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9530 = x9211 * x182;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9531 = x9529 + x9530;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9532 = x9214 * x181;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9533 = x9531 + x9532;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9534 = x9477 * x180;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9535 = x9210 * x179;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9536 = x9534 + x9535;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9537 = x9211 * x178;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9538 = x9536 + x9537;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9539 = x9214 * x177;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9540 = x9538 + x9539;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9541 = x9477 * x176;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9542 = x9210 * x175;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9543 = x9541 + x9542;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9544 = x9211 * x174;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9545 = x9543 + x9544;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9546 = x9214 * x173;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9547 = x9545 + x9546;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9548 = x9477 * x172;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9549 = x9210 * x171;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9550 = x9548 + x9549;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9551 = x9211 * x170;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9552 = x9550 + x9551;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9553 = x9214 * x169;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9554 = x9552 + x9553;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9555 = x9477 * x168;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9556 = x9210 * x167;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9557 = x9555 + x9556;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9558 = x9211 * x166;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9559 = x9557 + x9558;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9560 = x9214 * x165;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9561 = x9559 + x9560;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9562 = x9477 * x164;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9563 = x9210 * x163;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9564 = x9562 + x9563;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9565 = x9211 * x162;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9566 = x9564 + x9565;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9567 = x9214 * x161;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9568 = x9566 + x9567;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9569 = x9477 * x160;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9570 = x9210 * x159;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9571 = x9569 + x9570;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9572 = x9211 * x158;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9573 = x9571 + x9572;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9574 = x9214 * x157;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9575 = x9573 + x9574;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9576 = x9477 * x156;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9577 = x9210 * x155;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9578 = x9576 + x9577;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9579 = x9211 * x154;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9580 = x9578 + x9579;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9581 = x9214 * x153;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9582 = x9580 + x9581;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9583 = x9477 * x152;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9584 = x9210 * x151;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9585 = x9583 + x9584;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9586 = x9211 * x150;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9587 = x9585 + x9586;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9588 = x9214 * x149;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9589 = x9587 + x9588;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9590 = x9477 * x148;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9591 = x9210 * x147;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9592 = x9590 + x9591;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9593 = x9211 * x146;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9594 = x9592 + x9593;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9595 = x9214 * x145;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9596 = x9594 + x9595;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9597 = x9477 * x144;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9598 = x9210 * x143;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9599 = x9597 + x9598;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9600 = x9211 * x142;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9601 = x9599 + x9600;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9602 = x9214 * x141;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9603 = x9601 + x9602;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9604 = x9477 * x140;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9605 = x9210 * x139;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9606 = x9604 + x9605;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9607 = x9211 * x138;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9608 = x9606 + x9607;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9609 = x9214 * x137;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9610 = x9608 + x9609;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9611 = x9477 * x136;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9612 = x9210 * x135;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9613 = x9611 + x9612;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9614 = x9211 * x134;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9615 = x9613 + x9614;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9616 = x9214 * x133;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9617 = x9615 + x9616;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9618 = x9477 * x132;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9619 = x9210 * x131;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9620 = x9618 + x9619;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9621 = x9211 * x130;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9622 = x9620 + x9621;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9623 = x9214 * x129;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9624 = x9622 + x9623;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9625 = x9477 * x128;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9626 = x9210 * x127;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9627 = x9625 + x9626;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9628 = x9211 * x126;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9629 = x9627 + x9628;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9630 = x9214 * x125;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9631 = x9629 + x9630;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9632 = x9477 * x124;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9633 = x9210 * x123;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9634 = x9632 + x9633;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9635 = x9211 * x122;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9636 = x9634 + x9635;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9637 = x9214 * x121;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9638 = x9636 + x9637;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9639 = x9477 * x120;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9640 = x9210 * x119;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9641 = x9639 + x9640;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9642 = x9211 * x118;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9643 = x9641 + x9642;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9644 = x9214 * x117;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9645 = x9643 + x9644;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9646 = x9453 + x9484;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][29 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9646);
      reg = x9646;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9647 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x9647 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9648 = x9647 * x9647;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9649 = x9648 * x9648;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][53 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9649);
      reg = x9649;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9650 = args[2][53 * steps + ((cycle - 0) & mask)];
    assert(x9650 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9651 = x9650 * x9648;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9652 = x9651 * x9647;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9653 = x9454 + x9491;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9653);
      reg = x9653;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9654 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x9654 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9655 = x9654 * x9654;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9656 = x9655 * x9655;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][54 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9656);
      reg = x9656;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9657 = args[2][54 * steps + ((cycle - 0) & mask)];
    assert(x9657 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9658 = x9657 * x9655;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9659 = x9658 * x9654;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9660 = x9455 + x9498;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][31 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9660);
      reg = x9660;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9661 = args[2][31 * steps + ((cycle - 0) & mask)];
    assert(x9661 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9662 = x9661 * x9661;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9663 = x9662 * x9662;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][55 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9663);
      reg = x9663;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9664 = args[2][55 * steps + ((cycle - 0) & mask)];
    assert(x9664 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9665 = x9664 * x9662;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9666 = x9665 * x9661;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9667 = x9456 + x9505;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][32 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9667);
      reg = x9667;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9668 = args[2][32 * steps + ((cycle - 0) & mask)];
    assert(x9668 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9669 = x9668 * x9668;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9670 = x9669 * x9669;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][56 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9670);
      reg = x9670;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9671 = args[2][56 * steps + ((cycle - 0) & mask)];
    assert(x9671 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9672 = x9671 * x9669;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9673 = x9672 * x9668;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9674 = x9457 + x9512;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][33 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9674);
      reg = x9674;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9675 = args[2][33 * steps + ((cycle - 0) & mask)];
    assert(x9675 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9676 = x9675 * x9675;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9677 = x9676 * x9676;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][57 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9677);
      reg = x9677;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9678 = args[2][57 * steps + ((cycle - 0) & mask)];
    assert(x9678 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9679 = x9678 * x9676;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9680 = x9679 * x9675;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9681 = x9458 + x9519;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][34 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9681);
      reg = x9681;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9682 = args[2][34 * steps + ((cycle - 0) & mask)];
    assert(x9682 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9683 = x9682 * x9682;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9684 = x9683 * x9683;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][58 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9684);
      reg = x9684;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9685 = args[2][58 * steps + ((cycle - 0) & mask)];
    assert(x9685 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9686 = x9685 * x9683;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9687 = x9686 * x9682;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9688 = x9459 + x9526;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][35 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9688);
      reg = x9688;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9689 = args[2][35 * steps + ((cycle - 0) & mask)];
    assert(x9689 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9690 = x9689 * x9689;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9691 = x9690 * x9690;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][59 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9691);
      reg = x9691;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9692 = args[2][59 * steps + ((cycle - 0) & mask)];
    assert(x9692 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9693 = x9692 * x9690;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9694 = x9693 * x9689;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9695 = x9460 + x9533;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][36 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9695);
      reg = x9695;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9696 = args[2][36 * steps + ((cycle - 0) & mask)];
    assert(x9696 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9697 = x9696 * x9696;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9698 = x9697 * x9697;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][60 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9698);
      reg = x9698;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9699 = args[2][60 * steps + ((cycle - 0) & mask)];
    assert(x9699 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9700 = x9699 * x9697;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9701 = x9700 * x9696;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9702 = x9461 + x9540;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][37 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9702);
      reg = x9702;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9703 = args[2][37 * steps + ((cycle - 0) & mask)];
    assert(x9703 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9704 = x9703 * x9703;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9705 = x9704 * x9704;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][61 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9705);
      reg = x9705;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9706 = args[2][61 * steps + ((cycle - 0) & mask)];
    assert(x9706 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9707 = x9706 * x9704;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9708 = x9707 * x9703;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9709 = x9462 + x9547;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][38 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9709);
      reg = x9709;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9710 = args[2][38 * steps + ((cycle - 0) & mask)];
    assert(x9710 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9711 = x9710 * x9710;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9712 = x9711 * x9711;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][62 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9712);
      reg = x9712;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9713 = args[2][62 * steps + ((cycle - 0) & mask)];
    assert(x9713 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9714 = x9713 * x9711;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9715 = x9714 * x9710;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9716 = x9463 + x9554;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][39 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9716);
      reg = x9716;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9717 = args[2][39 * steps + ((cycle - 0) & mask)];
    assert(x9717 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9718 = x9717 * x9717;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9719 = x9718 * x9718;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][63 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9719);
      reg = x9719;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9720 = args[2][63 * steps + ((cycle - 0) & mask)];
    assert(x9720 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9721 = x9720 * x9718;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9722 = x9721 * x9717;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9723 = x9464 + x9561;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][40 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9723);
      reg = x9723;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9724 = args[2][40 * steps + ((cycle - 0) & mask)];
    assert(x9724 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9725 = x9724 * x9724;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9726 = x9725 * x9725;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][64 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9726);
      reg = x9726;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9727 = args[2][64 * steps + ((cycle - 0) & mask)];
    assert(x9727 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9728 = x9727 * x9725;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9729 = x9728 * x9724;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9730 = x9465 + x9568;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][41 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9730);
      reg = x9730;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9731 = args[2][41 * steps + ((cycle - 0) & mask)];
    assert(x9731 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9732 = x9731 * x9731;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9733 = x9732 * x9732;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][65 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9733);
      reg = x9733;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9734 = args[2][65 * steps + ((cycle - 0) & mask)];
    assert(x9734 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9735 = x9734 * x9732;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9736 = x9735 * x9731;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9737 = x9466 + x9575;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][42 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9737);
      reg = x9737;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9738 = args[2][42 * steps + ((cycle - 0) & mask)];
    assert(x9738 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9739 = x9738 * x9738;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9740 = x9739 * x9739;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][66 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9740);
      reg = x9740;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9741 = args[2][66 * steps + ((cycle - 0) & mask)];
    assert(x9741 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9742 = x9741 * x9739;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9743 = x9742 * x9738;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9744 = x9467 + x9582;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][43 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9744);
      reg = x9744;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9745 = args[2][43 * steps + ((cycle - 0) & mask)];
    assert(x9745 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9746 = x9745 * x9745;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9747 = x9746 * x9746;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][67 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9747);
      reg = x9747;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9748 = args[2][67 * steps + ((cycle - 0) & mask)];
    assert(x9748 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9749 = x9748 * x9746;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9750 = x9749 * x9745;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9751 = x9468 + x9589;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][44 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9751);
      reg = x9751;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9752 = args[2][44 * steps + ((cycle - 0) & mask)];
    assert(x9752 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9753 = x9752 * x9752;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9754 = x9753 * x9753;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][68 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9754);
      reg = x9754;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9755 = args[2][68 * steps + ((cycle - 0) & mask)];
    assert(x9755 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9756 = x9755 * x9753;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9757 = x9756 * x9752;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9758 = x9469 + x9596;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][45 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9758);
      reg = x9758;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9759 = args[2][45 * steps + ((cycle - 0) & mask)];
    assert(x9759 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9760 = x9759 * x9759;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9761 = x9760 * x9760;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][69 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9761);
      reg = x9761;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9762 = args[2][69 * steps + ((cycle - 0) & mask)];
    assert(x9762 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9763 = x9762 * x9760;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9764 = x9763 * x9759;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9765 = x9470 + x9603;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][46 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9765);
      reg = x9765;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9766 = args[2][46 * steps + ((cycle - 0) & mask)];
    assert(x9766 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9767 = x9766 * x9766;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9768 = x9767 * x9767;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][70 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9768);
      reg = x9768;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9769 = args[2][70 * steps + ((cycle - 0) & mask)];
    assert(x9769 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9770 = x9769 * x9767;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9771 = x9770 * x9766;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9772 = x9471 + x9610;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][47 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9772);
      reg = x9772;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9773 = args[2][47 * steps + ((cycle - 0) & mask)];
    assert(x9773 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9774 = x9773 * x9773;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9775 = x9774 * x9774;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][71 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9775);
      reg = x9775;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9776 = args[2][71 * steps + ((cycle - 0) & mask)];
    assert(x9776 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9777 = x9776 * x9774;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9778 = x9777 * x9773;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9779 = x9472 + x9617;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][48 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9779);
      reg = x9779;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9780 = args[2][48 * steps + ((cycle - 0) & mask)];
    assert(x9780 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9781 = x9780 * x9780;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9782 = x9781 * x9781;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][72 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9782);
      reg = x9782;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9783 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x9783 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9784 = x9783 * x9781;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9785 = x9784 * x9780;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9786 = x9473 + x9624;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][49 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9786);
      reg = x9786;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9787 = args[2][49 * steps + ((cycle - 0) & mask)];
    assert(x9787 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9788 = x9787 * x9787;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9789 = x9788 * x9788;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9789);
      reg = x9789;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9790 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x9790 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9791 = x9790 * x9788;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9792 = x9791 * x9787;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9793 = x9474 + x9631;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][50 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9793);
      reg = x9793;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9794 = args[2][50 * steps + ((cycle - 0) & mask)];
    assert(x9794 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9795 = x9794 * x9794;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9796 = x9795 * x9795;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][74 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9796);
      reg = x9796;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9797 = args[2][74 * steps + ((cycle - 0) & mask)];
    assert(x9797 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9798 = x9797 * x9795;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9799 = x9798 * x9794;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9800 = x9475 + x9638;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][51 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9800);
      reg = x9800;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9801 = args[2][51 * steps + ((cycle - 0) & mask)];
    assert(x9801 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9802 = x9801 * x9801;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9803 = x9802 * x9802;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][75 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9803);
      reg = x9803;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9804 = args[2][75 * steps + ((cycle - 0) & mask)];
    assert(x9804 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9805 = x9804 * x9802;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9806 = x9805 * x9801;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:19)
    auto x9807 = x9476 + x9645;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":232:5)
    {
      auto& reg = args[2][52 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9807);
      reg = x9807;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":233:58))
    auto x9808 = args[2][52 * steps + ((cycle - 0) & mask)];
    assert(x9808 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x9809 = x9808 * x9808;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x9810 = x9809 * x9809;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][76 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9810);
      reg = x9810;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x9811 = args[2][76 * steps + ((cycle - 0) & mask)];
    assert(x9811 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9812 = x9811 * x9809;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x9813 = x9812 * x9808;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9814 = x9652 + x9659;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9815 = x9666 + x9673;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9816 = x9659 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9817 = x9816 + x9815;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9818 = x9673 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9819 = x9818 + x9814;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9820 = x9815 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9821 = x9820 + x9819;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9822 = x9814 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9823 = x9822 + x9817;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9824 = x9819 + x9823;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9825 = x9817 + x9821;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9826 = x9680 + x9687;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9827 = x9694 + x9701;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9828 = x9687 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9829 = x9828 + x9827;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9830 = x9701 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9831 = x9830 + x9826;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9832 = x9827 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9833 = x9832 + x9831;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9834 = x9826 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9835 = x9834 + x9829;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9836 = x9831 + x9835;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9837 = x9829 + x9833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9838 = x9824 + x9836;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9839 = x9823 + x9835;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9840 = x9825 + x9837;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9841 = x9821 + x9833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9842 = x9708 + x9715;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9843 = x9722 + x9729;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9844 = x9715 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9845 = x9844 + x9843;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9846 = x9729 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9847 = x9846 + x9842;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9848 = x9843 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9849 = x9848 + x9847;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9850 = x9842 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9851 = x9850 + x9845;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9852 = x9847 + x9851;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9853 = x9845 + x9849;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9854 = x9838 + x9852;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9855 = x9839 + x9851;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9856 = x9840 + x9853;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9857 = x9841 + x9849;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9858 = x9736 + x9743;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9859 = x9750 + x9757;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9860 = x9743 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9861 = x9860 + x9859;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9862 = x9757 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9863 = x9862 + x9858;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9864 = x9859 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9865 = x9864 + x9863;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9866 = x9858 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9867 = x9866 + x9861;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9868 = x9863 + x9867;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9869 = x9861 + x9865;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9870 = x9854 + x9868;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9871 = x9855 + x9867;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9872 = x9856 + x9869;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9873 = x9857 + x9865;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9874 = x9764 + x9771;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9875 = x9778 + x9785;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9876 = x9771 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9877 = x9876 + x9875;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9878 = x9785 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9879 = x9878 + x9874;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9880 = x9875 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9881 = x9880 + x9879;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9882 = x9874 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9883 = x9882 + x9877;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9884 = x9879 + x9883;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9885 = x9877 + x9881;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9886 = x9870 + x9884;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9887 = x9871 + x9883;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9888 = x9872 + x9885;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9889 = x9873 + x9881;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9890 = x9792 + x9799;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9891 = x9806 + x9813;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9892 = x9799 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9893 = x9892 + x9891;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9894 = x9813 * x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9895 = x9894 + x9890;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9896 = x9891 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9897 = x9896 + x9895;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9898 = x9890 * x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9899 = x9898 + x9893;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9900 = x9895 + x9899;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9901 = x9893 + x9897;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9902 = x9886 + x9900;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9903 = x9887 + x9899;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9904 = x9888 + x9901;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9905 = x9889 + x9897;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9906 = x9824 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9907 = x9823 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9908 = x9825 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9909 = x9821 + x9905;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9910 = x9836 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9911 = x9835 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9912 = x9837 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9913 = x9833 + x9905;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9914 = x9852 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9915 = x9851 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9916 = x9853 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9917 = x9849 + x9905;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9918 = x9868 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9919 = x9867 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9920 = x9869 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9921 = x9865 + x9905;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9922 = x9884 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9923 = x9883 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9924 = x9885 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9925 = x9881 + x9905;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9926 = x9900 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9927 = x9899 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9928 = x9901 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9929 = x9897 + x9905;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9930 = x9477 * x116;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9931 = x9211 * x115;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9932 = x9930 + x9931;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9933 = x9477 * x114;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9934 = x9211 * x113;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9935 = x9933 + x9934;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9936 = x9477 * x112;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9937 = x9211 * x111;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9938 = x9936 + x9937;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9939 = x9477 * x110;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9940 = x9211 * x109;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9941 = x9939 + x9940;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9942 = x9477 * x108;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9943 = x9211 * x107;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9944 = x9942 + x9943;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9945 = x9477 * x106;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9946 = x9211 * x105;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9947 = x9945 + x9946;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9948 = x9477 * x104;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9949 = x9211 * x103;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9950 = x9948 + x9949;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9951 = x9477 * x102;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9952 = x9211 * x101;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9953 = x9951 + x9952;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9954 = x9477 * x100;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9955 = x9211 * x99;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9956 = x9954 + x9955;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9957 = x9477 * x98;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9958 = x9211 * x97;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9959 = x9957 + x9958;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9960 = x9477 * x96;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9961 = x9211 * x95;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9962 = x9960 + x9961;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9963 = x9477 * x94;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9964 = x9211 * x93;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9965 = x9963 + x9964;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9966 = x9477 * x92;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9967 = x9211 * x91;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9968 = x9966 + x9967;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9969 = x9477 * x90;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9970 = x9211 * x89;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9971 = x9969 + x9970;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9972 = x9477 * x88;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9973 = x9211 * x87;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9974 = x9972 + x9973;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9975 = x9477 * x86;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9976 = x9211 * x85;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9977 = x9975 + x9976;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9978 = x9477 * x84;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9979 = x9211 * x83;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9980 = x9978 + x9979;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9981 = x9477 * x82;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9982 = x9211 * x81;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9983 = x9981 + x9982;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9984 = x9477 * x80;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9985 = x9211 * x79;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9986 = x9984 + x9985;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9987 = x9477 * x78;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9988 = x9211 * x77;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9989 = x9987 + x9988;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9990 = x9477 * x76;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9991 = x9211 * x75;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9992 = x9990 + x9991;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9993 = x9477 * x74;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9994 = x9211 * x73;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9995 = x9993 + x9994;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9996 = x9477 * x72;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9997 = x9211 * x71;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x9998 = x9996 + x9997;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x9999 = x9477 * x70;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:19)
    auto x10000 = x9211 * x69;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":182:13)
    auto x10001 = x9999 + x10000;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10002 = x9906 + x9932;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][90 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10002);
      reg = x10002;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10003 = x9907 + x9935;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][91 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10003);
      reg = x10003;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10004 = x9908 + x9938;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10004);
      reg = x10004;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10005 = x9909 + x9941;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10005);
      reg = x10005;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10006 = x9910 + x9944;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][94 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10006);
      reg = x10006;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10007 = x9911 + x9947;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][95 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10007);
      reg = x10007;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10008 = x9912 + x9950;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][96 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10008);
      reg = x10008;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10009 = x9913 + x9953;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10009);
      reg = x10009;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10010 = x9914 + x9956;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10010);
      reg = x10010;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10011 = x9915 + x9959;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10011);
      reg = x10011;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10012 = x9916 + x9962;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10012);
      reg = x10012;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10013 = x9917 + x9965;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][101 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10013);
      reg = x10013;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10014 = x9918 + x9968;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][102 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10014);
      reg = x10014;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10015 = x9919 + x9971;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][103 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10015);
      reg = x10015;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10016 = x9920 + x9974;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10016);
      reg = x10016;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10017 = x9921 + x9977;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10017);
      reg = x10017;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10018 = x9922 + x9980;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10018);
      reg = x10018;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10019 = x9923 + x9983;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10019);
      reg = x10019;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10020 = x9924 + x9986;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10020);
      reg = x10020;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10021 = x9925 + x9989;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10021);
      reg = x10021;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10022 = x9926 + x9992;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10022);
      reg = x10022;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10023 = x9927 + x9995;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10023);
      reg = x10023;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10024 = x9928 + x9998;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10024);
      reg = x10024;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:20)
    auto x10025 = x9929 + x10001;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":267:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10025);
      reg = x10025;
    }
  }
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/poseidon2_partial(Reg)"("./zirgen/components/mux.h":49:25))
  auto x10026 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x10026 != Fp::invalid());
  if (x10026 != 0) {
    host(ctx, "log", "POSEIDON2_PARTIAL", host_args.data(), 0, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10027 = args[2][90 * steps + ((cycle - 1) & mask)];
    assert(x10027 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10028 = args[2][91 * steps + ((cycle - 1) & mask)];
    assert(x10028 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10029 = args[2][92 * steps + ((cycle - 1) & mask)];
    assert(x10029 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10030 = args[2][93 * steps + ((cycle - 1) & mask)];
    assert(x10030 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10031 = args[2][94 * steps + ((cycle - 1) & mask)];
    assert(x10031 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10032 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x10032 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10033 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x10033 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10034 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x10034 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10035 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x10035 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10036 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x10036 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10037 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x10037 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10038 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x10038 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10039 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x10039 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10040 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x10040 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10041 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x10041 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10042 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x10042 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10043 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x10043 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10044 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x10044 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10045 = args[2][108 * steps + ((cycle - 1) & mask)];
    assert(x10045 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10046 = args[2][109 * steps + ((cycle - 1) & mask)];
    assert(x10046 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10047 = args[2][110 * steps + ((cycle - 1) & mask)];
    assert(x10047 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10048 = args[2][111 * steps + ((cycle - 1) & mask)];
    assert(x10048 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10049 = args[2][112 * steps + ((cycle - 1) & mask)];
    assert(x10049 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":283:37))
    auto x10050 = args[2][113 * steps + ((cycle - 1) & mask)];
    assert(x10050 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":285:3)
    {
      auto& reg = args[2][5 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10027);
      reg = x10027;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10051 = args[2][5 * steps + ((cycle - 0) & mask)];
    assert(x10051 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10052 = x10051 + x68;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10053 = x10052 * x10052;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10054 = x10053 * x10053;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][29 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10054);
      reg = x10054;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10055 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x10055 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10056 = x10055 * x10053;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10057 = x10056 * x10052;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10058 = x10057 + x10028;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10059 = x10058 + x10029;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10060 = x10059 + x10030;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10061 = x10060 + x10031;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10062 = x10061 + x10032;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10063 = x10062 + x10033;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10064 = x10063 + x10034;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10065 = x10064 + x10035;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10066 = x10065 + x10036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10067 = x10066 + x10037;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10068 = x10067 + x10038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10069 = x10068 + x10039;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10070 = x10069 + x10040;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10071 = x10070 + x10041;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10072 = x10071 + x10042;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10073 = x10072 + x10043;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10074 = x10073 + x10044;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10075 = x10074 + x10045;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10076 = x10075 + x10046;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10077 = x10076 + x10047;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10078 = x10077 + x10048;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10079 = x10078 + x10049;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10080 = x10079 + x10050;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10081 = x10057 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10082 = x10080 + x10081;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10083 = x10028 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10084 = x10080 + x10083;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10085 = x10029 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10086 = x10080 + x10085;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10087 = x10030 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10088 = x10080 + x10087;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10089 = x10031 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10090 = x10080 + x10089;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10091 = x10032 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10092 = x10080 + x10091;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10093 = x10033 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10094 = x10080 + x10093;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10095 = x10034 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10096 = x10080 + x10095;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10097 = x10035 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10098 = x10080 + x10097;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10099 = x10036 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10100 = x10080 + x10099;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10101 = x10037 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10102 = x10080 + x10101;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10103 = x10038 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10104 = x10080 + x10103;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10105 = x10039 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10106 = x10080 + x10105;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10107 = x10040 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10108 = x10080 + x10107;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10109 = x10041 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10110 = x10080 + x10109;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10111 = x10042 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10112 = x10080 + x10111;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10113 = x10043 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10114 = x10080 + x10113;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10115 = x10044 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10116 = x10080 + x10115;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10117 = x10045 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10118 = x10080 + x10117;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10119 = x10046 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10120 = x10080 + x10119;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10121 = x10047 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10122 = x10080 + x10121;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10123 = x10048 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10124 = x10080 + x10123;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10125 = x10049 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10126 = x10080 + x10125;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10127 = x10050 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10128 = x10080 + x10127;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][6 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10082);
      reg = x10082;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10129 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x10129 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10130 = x10129 + x43;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10131 = x10130 * x10130;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10132 = x10131 * x10131;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10132);
      reg = x10132;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10133 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x10133 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10134 = x10133 * x10131;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10135 = x10134 * x10130;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10136 = x10135 + x10084;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10137 = x10136 + x10086;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10138 = x10137 + x10088;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10139 = x10138 + x10090;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10140 = x10139 + x10092;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10141 = x10140 + x10094;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10142 = x10141 + x10096;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10143 = x10142 + x10098;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10144 = x10143 + x10100;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10145 = x10144 + x10102;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10146 = x10145 + x10104;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10147 = x10146 + x10106;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10148 = x10147 + x10108;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10149 = x10148 + x10110;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10150 = x10149 + x10112;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10151 = x10150 + x10114;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10152 = x10151 + x10116;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10153 = x10152 + x10118;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10154 = x10153 + x10120;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10155 = x10154 + x10122;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10156 = x10155 + x10124;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10157 = x10156 + x10126;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10158 = x10157 + x10128;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10159 = x10135 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10160 = x10158 + x10159;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10161 = x10084 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10162 = x10158 + x10161;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10163 = x10086 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10164 = x10158 + x10163;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10165 = x10088 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10166 = x10158 + x10165;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10167 = x10090 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10168 = x10158 + x10167;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10169 = x10092 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10170 = x10158 + x10169;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10171 = x10094 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10172 = x10158 + x10171;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10173 = x10096 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10174 = x10158 + x10173;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10175 = x10098 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10176 = x10158 + x10175;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10177 = x10100 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10178 = x10158 + x10177;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10179 = x10102 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10180 = x10158 + x10179;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10181 = x10104 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10182 = x10158 + x10181;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10183 = x10106 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10184 = x10158 + x10183;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10185 = x10108 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10186 = x10158 + x10185;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10187 = x10110 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10188 = x10158 + x10187;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10189 = x10112 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10190 = x10158 + x10189;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10191 = x10114 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10192 = x10158 + x10191;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10193 = x10116 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10194 = x10158 + x10193;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10195 = x10118 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10196 = x10158 + x10195;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10197 = x10120 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10198 = x10158 + x10197;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10199 = x10122 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10200 = x10158 + x10199;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10201 = x10124 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10202 = x10158 + x10201;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10203 = x10126 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10204 = x10158 + x10203;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10205 = x10128 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10206 = x10158 + x10205;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][7 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10160);
      reg = x10160;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10207 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x10207 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10208 = x10207 + x42;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10209 = x10208 * x10208;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10210 = x10209 * x10209;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][31 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10210);
      reg = x10210;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10211 = args[2][31 * steps + ((cycle - 0) & mask)];
    assert(x10211 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10212 = x10211 * x10209;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10213 = x10212 * x10208;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10214 = x10213 + x10162;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10215 = x10214 + x10164;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10216 = x10215 + x10166;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10217 = x10216 + x10168;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10218 = x10217 + x10170;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10219 = x10218 + x10172;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10220 = x10219 + x10174;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10221 = x10220 + x10176;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10222 = x10221 + x10178;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10223 = x10222 + x10180;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10224 = x10223 + x10182;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10225 = x10224 + x10184;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10226 = x10225 + x10186;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10227 = x10226 + x10188;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10228 = x10227 + x10190;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10229 = x10228 + x10192;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10230 = x10229 + x10194;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10231 = x10230 + x10196;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10232 = x10231 + x10198;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10233 = x10232 + x10200;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10234 = x10233 + x10202;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10235 = x10234 + x10204;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10236 = x10235 + x10206;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10237 = x10213 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10238 = x10236 + x10237;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10239 = x10162 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10240 = x10236 + x10239;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10241 = x10164 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10242 = x10236 + x10241;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10243 = x10166 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10244 = x10236 + x10243;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10245 = x10168 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10246 = x10236 + x10245;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10247 = x10170 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10248 = x10236 + x10247;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10249 = x10172 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10250 = x10236 + x10249;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10251 = x10174 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10252 = x10236 + x10251;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10253 = x10176 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10254 = x10236 + x10253;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10255 = x10178 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10256 = x10236 + x10255;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10257 = x10180 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10258 = x10236 + x10257;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10259 = x10182 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10260 = x10236 + x10259;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10261 = x10184 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10262 = x10236 + x10261;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10263 = x10186 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10264 = x10236 + x10263;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10265 = x10188 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10266 = x10236 + x10265;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10267 = x10190 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10268 = x10236 + x10267;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10269 = x10192 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10270 = x10236 + x10269;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10271 = x10194 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10272 = x10236 + x10271;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10273 = x10196 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10274 = x10236 + x10273;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10275 = x10198 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10276 = x10236 + x10275;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10277 = x10200 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10278 = x10236 + x10277;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10279 = x10202 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10280 = x10236 + x10279;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10281 = x10204 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10282 = x10236 + x10281;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10283 = x10206 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10284 = x10236 + x10283;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][8 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10238);
      reg = x10238;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10285 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x10285 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10286 = x10285 + x41;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10287 = x10286 * x10286;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10288 = x10287 * x10287;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][32 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10288);
      reg = x10288;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10289 = args[2][32 * steps + ((cycle - 0) & mask)];
    assert(x10289 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10290 = x10289 * x10287;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10291 = x10290 * x10286;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10292 = x10291 + x10240;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10293 = x10292 + x10242;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10294 = x10293 + x10244;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10295 = x10294 + x10246;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10296 = x10295 + x10248;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10297 = x10296 + x10250;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10298 = x10297 + x10252;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10299 = x10298 + x10254;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10300 = x10299 + x10256;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10301 = x10300 + x10258;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10302 = x10301 + x10260;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10303 = x10302 + x10262;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10304 = x10303 + x10264;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10305 = x10304 + x10266;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10306 = x10305 + x10268;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10307 = x10306 + x10270;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10308 = x10307 + x10272;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10309 = x10308 + x10274;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10310 = x10309 + x10276;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10311 = x10310 + x10278;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10312 = x10311 + x10280;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10313 = x10312 + x10282;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10314 = x10313 + x10284;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10315 = x10291 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10316 = x10314 + x10315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10317 = x10240 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10318 = x10314 + x10317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10319 = x10242 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10320 = x10314 + x10319;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10321 = x10244 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10322 = x10314 + x10321;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10323 = x10246 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10324 = x10314 + x10323;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10325 = x10248 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10326 = x10314 + x10325;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10327 = x10250 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10328 = x10314 + x10327;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10329 = x10252 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10330 = x10314 + x10329;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10331 = x10254 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10332 = x10314 + x10331;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10333 = x10256 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10334 = x10314 + x10333;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10335 = x10258 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10336 = x10314 + x10335;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10337 = x10260 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10338 = x10314 + x10337;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10339 = x10262 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10340 = x10314 + x10339;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10341 = x10264 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10342 = x10314 + x10341;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10343 = x10266 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10344 = x10314 + x10343;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10345 = x10268 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10346 = x10314 + x10345;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10347 = x10270 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10348 = x10314 + x10347;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10349 = x10272 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10350 = x10314 + x10349;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10351 = x10274 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10352 = x10314 + x10351;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10353 = x10276 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10354 = x10314 + x10353;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10355 = x10278 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10356 = x10314 + x10355;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10357 = x10280 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10358 = x10314 + x10357;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10359 = x10282 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10360 = x10314 + x10359;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10361 = x10284 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10362 = x10314 + x10361;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10316);
      reg = x10316;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10363 = args[2][9 * steps + ((cycle - 0) & mask)];
    assert(x10363 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10364 = x10363 + x40;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10365 = x10364 * x10364;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10366 = x10365 * x10365;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][33 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10366);
      reg = x10366;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10367 = args[2][33 * steps + ((cycle - 0) & mask)];
    assert(x10367 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10368 = x10367 * x10365;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10369 = x10368 * x10364;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10370 = x10369 + x10318;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10371 = x10370 + x10320;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10372 = x10371 + x10322;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10373 = x10372 + x10324;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10374 = x10373 + x10326;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10375 = x10374 + x10328;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10376 = x10375 + x10330;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10377 = x10376 + x10332;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10378 = x10377 + x10334;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10379 = x10378 + x10336;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10380 = x10379 + x10338;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10381 = x10380 + x10340;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10382 = x10381 + x10342;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10383 = x10382 + x10344;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10384 = x10383 + x10346;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10385 = x10384 + x10348;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10386 = x10385 + x10350;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10387 = x10386 + x10352;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10388 = x10387 + x10354;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10389 = x10388 + x10356;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10390 = x10389 + x10358;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10391 = x10390 + x10360;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10392 = x10391 + x10362;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10393 = x10369 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10394 = x10392 + x10393;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10395 = x10318 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10396 = x10392 + x10395;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10397 = x10320 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10398 = x10392 + x10397;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10399 = x10322 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10400 = x10392 + x10399;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10401 = x10324 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10402 = x10392 + x10401;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10403 = x10326 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10404 = x10392 + x10403;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10405 = x10328 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10406 = x10392 + x10405;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10407 = x10330 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10408 = x10392 + x10407;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10409 = x10332 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10410 = x10392 + x10409;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10411 = x10334 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10412 = x10392 + x10411;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10413 = x10336 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10414 = x10392 + x10413;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10415 = x10338 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10416 = x10392 + x10415;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10417 = x10340 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10418 = x10392 + x10417;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10419 = x10342 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10420 = x10392 + x10419;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10421 = x10344 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10422 = x10392 + x10421;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10423 = x10346 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10424 = x10392 + x10423;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10425 = x10348 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10426 = x10392 + x10425;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10427 = x10350 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10428 = x10392 + x10427;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10429 = x10352 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10430 = x10392 + x10429;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10431 = x10354 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10432 = x10392 + x10431;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10433 = x10356 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10434 = x10392 + x10433;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10435 = x10358 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10436 = x10392 + x10435;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10437 = x10360 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10438 = x10392 + x10437;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10439 = x10362 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10440 = x10392 + x10439;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][10 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10394);
      reg = x10394;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10441 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x10441 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10442 = x10441 + x39;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10443 = x10442 * x10442;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10444 = x10443 * x10443;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][34 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10444);
      reg = x10444;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10445 = args[2][34 * steps + ((cycle - 0) & mask)];
    assert(x10445 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10446 = x10445 * x10443;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10447 = x10446 * x10442;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10448 = x10447 + x10396;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10449 = x10448 + x10398;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10450 = x10449 + x10400;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10451 = x10450 + x10402;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10452 = x10451 + x10404;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10453 = x10452 + x10406;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10454 = x10453 + x10408;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10455 = x10454 + x10410;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10456 = x10455 + x10412;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10457 = x10456 + x10414;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10458 = x10457 + x10416;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10459 = x10458 + x10418;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10460 = x10459 + x10420;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10461 = x10460 + x10422;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10462 = x10461 + x10424;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10463 = x10462 + x10426;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10464 = x10463 + x10428;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10465 = x10464 + x10430;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10466 = x10465 + x10432;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10467 = x10466 + x10434;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10468 = x10467 + x10436;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10469 = x10468 + x10438;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10470 = x10469 + x10440;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10471 = x10447 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10472 = x10470 + x10471;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10473 = x10396 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10474 = x10470 + x10473;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10475 = x10398 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10476 = x10470 + x10475;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10477 = x10400 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10478 = x10470 + x10477;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10479 = x10402 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10480 = x10470 + x10479;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10481 = x10404 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10482 = x10470 + x10481;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10483 = x10406 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10484 = x10470 + x10483;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10485 = x10408 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10486 = x10470 + x10485;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10487 = x10410 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10488 = x10470 + x10487;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10489 = x10412 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10490 = x10470 + x10489;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10491 = x10414 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10492 = x10470 + x10491;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10493 = x10416 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10494 = x10470 + x10493;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10495 = x10418 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10496 = x10470 + x10495;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10497 = x10420 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10498 = x10470 + x10497;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10499 = x10422 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10500 = x10470 + x10499;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10501 = x10424 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10502 = x10470 + x10501;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10503 = x10426 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10504 = x10470 + x10503;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10505 = x10428 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10506 = x10470 + x10505;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10507 = x10430 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10508 = x10470 + x10507;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10509 = x10432 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10510 = x10470 + x10509;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10511 = x10434 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10512 = x10470 + x10511;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10513 = x10436 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10514 = x10470 + x10513;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10515 = x10438 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10516 = x10470 + x10515;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10517 = x10440 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10518 = x10470 + x10517;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][11 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10472);
      reg = x10472;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10519 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x10519 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10520 = x10519 + x38;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10521 = x10520 * x10520;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10522 = x10521 * x10521;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][35 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10522);
      reg = x10522;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10523 = args[2][35 * steps + ((cycle - 0) & mask)];
    assert(x10523 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10524 = x10523 * x10521;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10525 = x10524 * x10520;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10526 = x10525 + x10474;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10527 = x10526 + x10476;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10528 = x10527 + x10478;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10529 = x10528 + x10480;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10530 = x10529 + x10482;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10531 = x10530 + x10484;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10532 = x10531 + x10486;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10533 = x10532 + x10488;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10534 = x10533 + x10490;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10535 = x10534 + x10492;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10536 = x10535 + x10494;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10537 = x10536 + x10496;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10538 = x10537 + x10498;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10539 = x10538 + x10500;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10540 = x10539 + x10502;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10541 = x10540 + x10504;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10542 = x10541 + x10506;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10543 = x10542 + x10508;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10544 = x10543 + x10510;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10545 = x10544 + x10512;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10546 = x10545 + x10514;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10547 = x10546 + x10516;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10548 = x10547 + x10518;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10549 = x10525 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10550 = x10548 + x10549;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10551 = x10474 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10552 = x10548 + x10551;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10553 = x10476 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10554 = x10548 + x10553;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10555 = x10478 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10556 = x10548 + x10555;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10557 = x10480 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10558 = x10548 + x10557;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10559 = x10482 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10560 = x10548 + x10559;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10561 = x10484 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10562 = x10548 + x10561;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10563 = x10486 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10564 = x10548 + x10563;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10565 = x10488 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10566 = x10548 + x10565;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10567 = x10490 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10568 = x10548 + x10567;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10569 = x10492 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10570 = x10548 + x10569;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10571 = x10494 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10572 = x10548 + x10571;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10573 = x10496 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10574 = x10548 + x10573;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10575 = x10498 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10576 = x10548 + x10575;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10577 = x10500 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10578 = x10548 + x10577;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10579 = x10502 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10580 = x10548 + x10579;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10581 = x10504 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10582 = x10548 + x10581;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10583 = x10506 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10584 = x10548 + x10583;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10585 = x10508 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10586 = x10548 + x10585;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10587 = x10510 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10588 = x10548 + x10587;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10589 = x10512 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10590 = x10548 + x10589;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10591 = x10514 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10592 = x10548 + x10591;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10593 = x10516 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10594 = x10548 + x10593;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10595 = x10518 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10596 = x10548 + x10595;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][12 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10550);
      reg = x10550;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10597 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x10597 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10598 = x10597 + x37;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10599 = x10598 * x10598;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10600 = x10599 * x10599;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][36 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10600);
      reg = x10600;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10601 = args[2][36 * steps + ((cycle - 0) & mask)];
    assert(x10601 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10602 = x10601 * x10599;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10603 = x10602 * x10598;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10604 = x10603 + x10552;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10605 = x10604 + x10554;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10606 = x10605 + x10556;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10607 = x10606 + x10558;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10608 = x10607 + x10560;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10609 = x10608 + x10562;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10610 = x10609 + x10564;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10611 = x10610 + x10566;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10612 = x10611 + x10568;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10613 = x10612 + x10570;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10614 = x10613 + x10572;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10615 = x10614 + x10574;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10616 = x10615 + x10576;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10617 = x10616 + x10578;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10618 = x10617 + x10580;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10619 = x10618 + x10582;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10620 = x10619 + x10584;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10621 = x10620 + x10586;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10622 = x10621 + x10588;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10623 = x10622 + x10590;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10624 = x10623 + x10592;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10625 = x10624 + x10594;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10626 = x10625 + x10596;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10627 = x10603 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10628 = x10626 + x10627;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10629 = x10552 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10630 = x10626 + x10629;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10631 = x10554 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10632 = x10626 + x10631;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10633 = x10556 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10634 = x10626 + x10633;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10635 = x10558 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10636 = x10626 + x10635;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10637 = x10560 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10638 = x10626 + x10637;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10639 = x10562 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10640 = x10626 + x10639;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10641 = x10564 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10642 = x10626 + x10641;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10643 = x10566 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10644 = x10626 + x10643;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10645 = x10568 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10646 = x10626 + x10645;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10647 = x10570 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10648 = x10626 + x10647;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10649 = x10572 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10650 = x10626 + x10649;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10651 = x10574 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10652 = x10626 + x10651;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10653 = x10576 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10654 = x10626 + x10653;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10655 = x10578 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10656 = x10626 + x10655;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10657 = x10580 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10658 = x10626 + x10657;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10659 = x10582 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10660 = x10626 + x10659;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10661 = x10584 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10662 = x10626 + x10661;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10663 = x10586 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10664 = x10626 + x10663;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10665 = x10588 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10666 = x10626 + x10665;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10667 = x10590 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10668 = x10626 + x10667;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10669 = x10592 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10670 = x10626 + x10669;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10671 = x10594 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10672 = x10626 + x10671;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10673 = x10596 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10674 = x10626 + x10673;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][13 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10628);
      reg = x10628;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10675 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x10675 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10676 = x10675 + x36;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10677 = x10676 * x10676;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10678 = x10677 * x10677;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][37 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10678);
      reg = x10678;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10679 = args[2][37 * steps + ((cycle - 0) & mask)];
    assert(x10679 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10680 = x10679 * x10677;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10681 = x10680 * x10676;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10682 = x10681 + x10630;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10683 = x10682 + x10632;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10684 = x10683 + x10634;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10685 = x10684 + x10636;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10686 = x10685 + x10638;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10687 = x10686 + x10640;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10688 = x10687 + x10642;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10689 = x10688 + x10644;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10690 = x10689 + x10646;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10691 = x10690 + x10648;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10692 = x10691 + x10650;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10693 = x10692 + x10652;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10694 = x10693 + x10654;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10695 = x10694 + x10656;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10696 = x10695 + x10658;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10697 = x10696 + x10660;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10698 = x10697 + x10662;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10699 = x10698 + x10664;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10700 = x10699 + x10666;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10701 = x10700 + x10668;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10702 = x10701 + x10670;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10703 = x10702 + x10672;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10704 = x10703 + x10674;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10705 = x10681 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10706 = x10704 + x10705;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10707 = x10630 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10708 = x10704 + x10707;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10709 = x10632 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10710 = x10704 + x10709;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10711 = x10634 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10712 = x10704 + x10711;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10713 = x10636 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10714 = x10704 + x10713;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10715 = x10638 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10716 = x10704 + x10715;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10717 = x10640 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10718 = x10704 + x10717;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10719 = x10642 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10720 = x10704 + x10719;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10721 = x10644 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10722 = x10704 + x10721;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10723 = x10646 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10724 = x10704 + x10723;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10725 = x10648 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10726 = x10704 + x10725;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10727 = x10650 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10728 = x10704 + x10727;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10729 = x10652 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10730 = x10704 + x10729;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10731 = x10654 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10732 = x10704 + x10731;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10733 = x10656 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10734 = x10704 + x10733;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10735 = x10658 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10736 = x10704 + x10735;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10737 = x10660 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10738 = x10704 + x10737;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10739 = x10662 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10740 = x10704 + x10739;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10741 = x10664 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10742 = x10704 + x10741;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10743 = x10666 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10744 = x10704 + x10743;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10745 = x10668 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10746 = x10704 + x10745;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10747 = x10670 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10748 = x10704 + x10747;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10749 = x10672 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10750 = x10704 + x10749;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10751 = x10674 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10752 = x10704 + x10751;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][14 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10706);
      reg = x10706;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10753 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x10753 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10754 = x10753 + x35;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10755 = x10754 * x10754;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10756 = x10755 * x10755;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][38 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10756);
      reg = x10756;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10757 = args[2][38 * steps + ((cycle - 0) & mask)];
    assert(x10757 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10758 = x10757 * x10755;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10759 = x10758 * x10754;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10760 = x10759 + x10708;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10761 = x10760 + x10710;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10762 = x10761 + x10712;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10763 = x10762 + x10714;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10764 = x10763 + x10716;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10765 = x10764 + x10718;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10766 = x10765 + x10720;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10767 = x10766 + x10722;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10768 = x10767 + x10724;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10769 = x10768 + x10726;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10770 = x10769 + x10728;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10771 = x10770 + x10730;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10772 = x10771 + x10732;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10773 = x10772 + x10734;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10774 = x10773 + x10736;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10775 = x10774 + x10738;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10776 = x10775 + x10740;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10777 = x10776 + x10742;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10778 = x10777 + x10744;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10779 = x10778 + x10746;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10780 = x10779 + x10748;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10781 = x10780 + x10750;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10782 = x10781 + x10752;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10783 = x10759 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10784 = x10782 + x10783;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10785 = x10708 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10786 = x10782 + x10785;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10787 = x10710 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10788 = x10782 + x10787;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10789 = x10712 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10790 = x10782 + x10789;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10791 = x10714 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10792 = x10782 + x10791;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10793 = x10716 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10794 = x10782 + x10793;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10795 = x10718 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10796 = x10782 + x10795;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10797 = x10720 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10798 = x10782 + x10797;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10799 = x10722 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10800 = x10782 + x10799;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10801 = x10724 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10802 = x10782 + x10801;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10803 = x10726 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10804 = x10782 + x10803;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10805 = x10728 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10806 = x10782 + x10805;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10807 = x10730 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10808 = x10782 + x10807;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10809 = x10732 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10810 = x10782 + x10809;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10811 = x10734 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10812 = x10782 + x10811;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10813 = x10736 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10814 = x10782 + x10813;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10815 = x10738 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10816 = x10782 + x10815;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10817 = x10740 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10818 = x10782 + x10817;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10819 = x10742 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10820 = x10782 + x10819;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10821 = x10744 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10822 = x10782 + x10821;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10823 = x10746 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10824 = x10782 + x10823;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10825 = x10748 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10826 = x10782 + x10825;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10827 = x10750 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10828 = x10782 + x10827;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10829 = x10752 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10830 = x10782 + x10829;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][15 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10784);
      reg = x10784;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10831 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x10831 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10832 = x10831 + x34;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10833 = x10832 * x10832;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10834 = x10833 * x10833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][39 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10834);
      reg = x10834;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10835 = args[2][39 * steps + ((cycle - 0) & mask)];
    assert(x10835 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10836 = x10835 * x10833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10837 = x10836 * x10832;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10838 = x10837 + x10786;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10839 = x10838 + x10788;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10840 = x10839 + x10790;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10841 = x10840 + x10792;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10842 = x10841 + x10794;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10843 = x10842 + x10796;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10844 = x10843 + x10798;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10845 = x10844 + x10800;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10846 = x10845 + x10802;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10847 = x10846 + x10804;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10848 = x10847 + x10806;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10849 = x10848 + x10808;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10850 = x10849 + x10810;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10851 = x10850 + x10812;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10852 = x10851 + x10814;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10853 = x10852 + x10816;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10854 = x10853 + x10818;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10855 = x10854 + x10820;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10856 = x10855 + x10822;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10857 = x10856 + x10824;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10858 = x10857 + x10826;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10859 = x10858 + x10828;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10860 = x10859 + x10830;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10861 = x10837 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10862 = x10860 + x10861;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10863 = x10786 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10864 = x10860 + x10863;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10865 = x10788 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10866 = x10860 + x10865;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10867 = x10790 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10868 = x10860 + x10867;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10869 = x10792 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10870 = x10860 + x10869;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10871 = x10794 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10872 = x10860 + x10871;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10873 = x10796 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10874 = x10860 + x10873;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10875 = x10798 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10876 = x10860 + x10875;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10877 = x10800 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10878 = x10860 + x10877;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10879 = x10802 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10880 = x10860 + x10879;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10881 = x10804 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10882 = x10860 + x10881;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10883 = x10806 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10884 = x10860 + x10883;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10885 = x10808 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10886 = x10860 + x10885;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10887 = x10810 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10888 = x10860 + x10887;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10889 = x10812 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10890 = x10860 + x10889;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10891 = x10814 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10892 = x10860 + x10891;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10893 = x10816 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10894 = x10860 + x10893;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10895 = x10818 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10896 = x10860 + x10895;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10897 = x10820 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10898 = x10860 + x10897;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10899 = x10822 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10900 = x10860 + x10899;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10901 = x10824 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10902 = x10860 + x10901;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10903 = x10826 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10904 = x10860 + x10903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10905 = x10828 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10906 = x10860 + x10905;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10907 = x10830 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10908 = x10860 + x10907;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10862);
      reg = x10862;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10909 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x10909 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10910 = x10909 + x33;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10911 = x10910 * x10910;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10912 = x10911 * x10911;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][40 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10912);
      reg = x10912;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10913 = args[2][40 * steps + ((cycle - 0) & mask)];
    assert(x10913 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10914 = x10913 * x10911;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10915 = x10914 * x10910;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10916 = x10915 + x10864;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10917 = x10916 + x10866;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10918 = x10917 + x10868;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10919 = x10918 + x10870;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10920 = x10919 + x10872;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10921 = x10920 + x10874;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10922 = x10921 + x10876;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10923 = x10922 + x10878;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10924 = x10923 + x10880;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10925 = x10924 + x10882;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10926 = x10925 + x10884;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10927 = x10926 + x10886;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10928 = x10927 + x10888;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10929 = x10928 + x10890;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10930 = x10929 + x10892;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10931 = x10930 + x10894;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10932 = x10931 + x10896;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10933 = x10932 + x10898;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10934 = x10933 + x10900;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10935 = x10934 + x10902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10936 = x10935 + x10904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10937 = x10936 + x10906;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10938 = x10937 + x10908;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10939 = x10915 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10940 = x10938 + x10939;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10941 = x10864 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10942 = x10938 + x10941;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10943 = x10866 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10944 = x10938 + x10943;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10945 = x10868 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10946 = x10938 + x10945;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10947 = x10870 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10948 = x10938 + x10947;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10949 = x10872 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10950 = x10938 + x10949;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10951 = x10874 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10952 = x10938 + x10951;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10953 = x10876 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10954 = x10938 + x10953;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10955 = x10878 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10956 = x10938 + x10955;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10957 = x10880 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10958 = x10938 + x10957;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10959 = x10882 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10960 = x10938 + x10959;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10961 = x10884 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10962 = x10938 + x10961;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10963 = x10886 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10964 = x10938 + x10963;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10965 = x10888 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10966 = x10938 + x10965;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10967 = x10890 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10968 = x10938 + x10967;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10969 = x10892 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10970 = x10938 + x10969;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10971 = x10894 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10972 = x10938 + x10971;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10973 = x10896 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10974 = x10938 + x10973;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10975 = x10898 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10976 = x10938 + x10975;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10977 = x10900 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10978 = x10938 + x10977;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10979 = x10902 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10980 = x10938 + x10979;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10981 = x10904 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10982 = x10938 + x10981;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10983 = x10906 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10984 = x10938 + x10983;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x10985 = x10908 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x10986 = x10938 + x10985;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][17 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10940);
      reg = x10940;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x10987 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x10987 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x10988 = x10987 + x32;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x10989 = x10988 * x10988;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x10990 = x10989 * x10989;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][41 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10990);
      reg = x10990;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x10991 = args[2][41 * steps + ((cycle - 0) & mask)];
    assert(x10991 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10992 = x10991 * x10989;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x10993 = x10992 * x10988;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10994 = x10993 + x10942;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10995 = x10994 + x10944;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10996 = x10995 + x10946;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10997 = x10996 + x10948;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10998 = x10997 + x10950;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x10999 = x10998 + x10952;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11000 = x10999 + x10954;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11001 = x11000 + x10956;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11002 = x11001 + x10958;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11003 = x11002 + x10960;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11004 = x11003 + x10962;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11005 = x11004 + x10964;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11006 = x11005 + x10966;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11007 = x11006 + x10968;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11008 = x11007 + x10970;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11009 = x11008 + x10972;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11010 = x11009 + x10974;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11011 = x11010 + x10976;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11012 = x11011 + x10978;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11013 = x11012 + x10980;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11014 = x11013 + x10982;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11015 = x11014 + x10984;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11016 = x11015 + x10986;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11017 = x10993 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11018 = x11016 + x11017;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11019 = x10942 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11020 = x11016 + x11019;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11021 = x10944 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11022 = x11016 + x11021;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11023 = x10946 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11024 = x11016 + x11023;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11025 = x10948 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11026 = x11016 + x11025;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11027 = x10950 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11028 = x11016 + x11027;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11029 = x10952 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11030 = x11016 + x11029;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11031 = x10954 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11032 = x11016 + x11031;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11033 = x10956 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11034 = x11016 + x11033;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11035 = x10958 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11036 = x11016 + x11035;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11037 = x10960 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11038 = x11016 + x11037;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11039 = x10962 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11040 = x11016 + x11039;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11041 = x10964 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11042 = x11016 + x11041;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11043 = x10966 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11044 = x11016 + x11043;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11045 = x10968 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11046 = x11016 + x11045;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11047 = x10970 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11048 = x11016 + x11047;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11049 = x10972 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11050 = x11016 + x11049;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11051 = x10974 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11052 = x11016 + x11051;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11053 = x10976 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11054 = x11016 + x11053;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11055 = x10978 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11056 = x11016 + x11055;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11057 = x10980 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11058 = x11016 + x11057;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11059 = x10982 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11060 = x11016 + x11059;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11061 = x10984 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11062 = x11016 + x11061;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11063 = x10986 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11064 = x11016 + x11063;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11018);
      reg = x11018;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x11065 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x11065 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x11066 = x11065 + x31;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x11067 = x11066 * x11066;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x11068 = x11067 * x11067;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][42 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11068);
      reg = x11068;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x11069 = args[2][42 * steps + ((cycle - 0) & mask)];
    assert(x11069 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11070 = x11069 * x11067;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11071 = x11070 * x11066;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11072 = x11071 + x11020;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11073 = x11072 + x11022;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11074 = x11073 + x11024;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11075 = x11074 + x11026;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11076 = x11075 + x11028;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11077 = x11076 + x11030;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11078 = x11077 + x11032;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11079 = x11078 + x11034;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11080 = x11079 + x11036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11081 = x11080 + x11038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11082 = x11081 + x11040;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11083 = x11082 + x11042;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11084 = x11083 + x11044;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11085 = x11084 + x11046;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11086 = x11085 + x11048;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11087 = x11086 + x11050;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11088 = x11087 + x11052;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11089 = x11088 + x11054;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11090 = x11089 + x11056;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11091 = x11090 + x11058;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11092 = x11091 + x11060;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11093 = x11092 + x11062;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11094 = x11093 + x11064;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11095 = x11071 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11096 = x11094 + x11095;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11097 = x11020 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11098 = x11094 + x11097;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11099 = x11022 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11100 = x11094 + x11099;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11101 = x11024 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11102 = x11094 + x11101;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11103 = x11026 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11104 = x11094 + x11103;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11105 = x11028 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11106 = x11094 + x11105;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11107 = x11030 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11108 = x11094 + x11107;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11109 = x11032 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11110 = x11094 + x11109;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11111 = x11034 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11112 = x11094 + x11111;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11113 = x11036 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11114 = x11094 + x11113;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11115 = x11038 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11116 = x11094 + x11115;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11117 = x11040 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11118 = x11094 + x11117;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11119 = x11042 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11120 = x11094 + x11119;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11121 = x11044 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11122 = x11094 + x11121;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11123 = x11046 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11124 = x11094 + x11123;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11125 = x11048 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11126 = x11094 + x11125;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11127 = x11050 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11128 = x11094 + x11127;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11129 = x11052 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11130 = x11094 + x11129;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11131 = x11054 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11132 = x11094 + x11131;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11133 = x11056 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11134 = x11094 + x11133;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11135 = x11058 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11136 = x11094 + x11135;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11137 = x11060 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11138 = x11094 + x11137;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11139 = x11062 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11140 = x11094 + x11139;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11141 = x11064 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11142 = x11094 + x11141;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][19 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11096);
      reg = x11096;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x11143 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x11143 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x11144 = x11143 + x30;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x11145 = x11144 * x11144;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x11146 = x11145 * x11145;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][43 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11146);
      reg = x11146;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x11147 = args[2][43 * steps + ((cycle - 0) & mask)];
    assert(x11147 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11148 = x11147 * x11145;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11149 = x11148 * x11144;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11150 = x11149 + x11098;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11151 = x11150 + x11100;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11152 = x11151 + x11102;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11153 = x11152 + x11104;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11154 = x11153 + x11106;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11155 = x11154 + x11108;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11156 = x11155 + x11110;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11157 = x11156 + x11112;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11158 = x11157 + x11114;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11159 = x11158 + x11116;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11160 = x11159 + x11118;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11161 = x11160 + x11120;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11162 = x11161 + x11122;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11163 = x11162 + x11124;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11164 = x11163 + x11126;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11165 = x11164 + x11128;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11166 = x11165 + x11130;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11167 = x11166 + x11132;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11168 = x11167 + x11134;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11169 = x11168 + x11136;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11170 = x11169 + x11138;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11171 = x11170 + x11140;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11172 = x11171 + x11142;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11173 = x11149 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11174 = x11172 + x11173;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11175 = x11098 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11176 = x11172 + x11175;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11177 = x11100 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11178 = x11172 + x11177;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11179 = x11102 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11180 = x11172 + x11179;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11181 = x11104 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11182 = x11172 + x11181;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11183 = x11106 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11184 = x11172 + x11183;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11185 = x11108 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11186 = x11172 + x11185;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11187 = x11110 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11188 = x11172 + x11187;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11189 = x11112 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11190 = x11172 + x11189;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11191 = x11114 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11192 = x11172 + x11191;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11193 = x11116 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11194 = x11172 + x11193;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11195 = x11118 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11196 = x11172 + x11195;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11197 = x11120 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11198 = x11172 + x11197;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11199 = x11122 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11200 = x11172 + x11199;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11201 = x11124 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11202 = x11172 + x11201;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11203 = x11126 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11204 = x11172 + x11203;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11205 = x11128 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11206 = x11172 + x11205;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11207 = x11130 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11208 = x11172 + x11207;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11209 = x11132 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11210 = x11172 + x11209;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11211 = x11134 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11212 = x11172 + x11211;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11213 = x11136 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11214 = x11172 + x11213;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11215 = x11138 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11216 = x11172 + x11215;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11217 = x11140 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11218 = x11172 + x11217;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11219 = x11142 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11220 = x11172 + x11219;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11174);
      reg = x11174;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x11221 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x11221 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x11222 = x11221 + x29;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x11223 = x11222 * x11222;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x11224 = x11223 * x11223;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][44 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11224);
      reg = x11224;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x11225 = args[2][44 * steps + ((cycle - 0) & mask)];
    assert(x11225 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11226 = x11225 * x11223;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11227 = x11226 * x11222;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11228 = x11227 + x11176;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11229 = x11228 + x11178;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11230 = x11229 + x11180;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11231 = x11230 + x11182;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11232 = x11231 + x11184;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11233 = x11232 + x11186;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11234 = x11233 + x11188;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11235 = x11234 + x11190;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11236 = x11235 + x11192;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11237 = x11236 + x11194;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11238 = x11237 + x11196;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11239 = x11238 + x11198;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11240 = x11239 + x11200;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11241 = x11240 + x11202;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11242 = x11241 + x11204;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11243 = x11242 + x11206;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11244 = x11243 + x11208;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11245 = x11244 + x11210;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11246 = x11245 + x11212;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11247 = x11246 + x11214;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11248 = x11247 + x11216;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11249 = x11248 + x11218;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11250 = x11249 + x11220;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11251 = x11227 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11252 = x11250 + x11251;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11253 = x11176 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11254 = x11250 + x11253;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11255 = x11178 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11256 = x11250 + x11255;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11257 = x11180 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11258 = x11250 + x11257;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11259 = x11182 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11260 = x11250 + x11259;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11261 = x11184 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11262 = x11250 + x11261;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11263 = x11186 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11264 = x11250 + x11263;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11265 = x11188 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11266 = x11250 + x11265;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11267 = x11190 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11268 = x11250 + x11267;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11269 = x11192 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11270 = x11250 + x11269;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11271 = x11194 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11272 = x11250 + x11271;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11273 = x11196 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11274 = x11250 + x11273;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11275 = x11198 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11276 = x11250 + x11275;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11277 = x11200 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11278 = x11250 + x11277;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11279 = x11202 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11280 = x11250 + x11279;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11281 = x11204 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11282 = x11250 + x11281;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11283 = x11206 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11284 = x11250 + x11283;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11285 = x11208 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11286 = x11250 + x11285;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11287 = x11210 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11288 = x11250 + x11287;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11289 = x11212 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11290 = x11250 + x11289;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11291 = x11214 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11292 = x11250 + x11291;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11293 = x11216 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11294 = x11250 + x11293;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11295 = x11218 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11296 = x11250 + x11295;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11297 = x11220 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11298 = x11250 + x11297;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][21 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11252);
      reg = x11252;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x11299 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x11299 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x11300 = x11299 + x28;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x11301 = x11300 * x11300;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x11302 = x11301 * x11301;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][45 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11302);
      reg = x11302;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x11303 = args[2][45 * steps + ((cycle - 0) & mask)];
    assert(x11303 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11304 = x11303 * x11301;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11305 = x11304 * x11300;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11306 = x11305 + x11254;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11307 = x11306 + x11256;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11308 = x11307 + x11258;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11309 = x11308 + x11260;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11310 = x11309 + x11262;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11311 = x11310 + x11264;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11312 = x11311 + x11266;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11313 = x11312 + x11268;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11314 = x11313 + x11270;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11315 = x11314 + x11272;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11316 = x11315 + x11274;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11317 = x11316 + x11276;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11318 = x11317 + x11278;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11319 = x11318 + x11280;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11320 = x11319 + x11282;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11321 = x11320 + x11284;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11322 = x11321 + x11286;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11323 = x11322 + x11288;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11324 = x11323 + x11290;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11325 = x11324 + x11292;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11326 = x11325 + x11294;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11327 = x11326 + x11296;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11328 = x11327 + x11298;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11329 = x11305 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11330 = x11328 + x11329;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11331 = x11254 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11332 = x11328 + x11331;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11333 = x11256 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11334 = x11328 + x11333;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11335 = x11258 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11336 = x11328 + x11335;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11337 = x11260 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11338 = x11328 + x11337;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11339 = x11262 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11340 = x11328 + x11339;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11341 = x11264 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11342 = x11328 + x11341;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11343 = x11266 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11344 = x11328 + x11343;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11345 = x11268 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11346 = x11328 + x11345;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11347 = x11270 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11348 = x11328 + x11347;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11349 = x11272 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11350 = x11328 + x11349;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11351 = x11274 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11352 = x11328 + x11351;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11353 = x11276 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11354 = x11328 + x11353;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11355 = x11278 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11356 = x11328 + x11355;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11357 = x11280 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11358 = x11328 + x11357;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11359 = x11282 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11360 = x11328 + x11359;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11361 = x11284 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11362 = x11328 + x11361;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11363 = x11286 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11364 = x11328 + x11363;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11365 = x11288 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11366 = x11328 + x11365;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11367 = x11290 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11368 = x11328 + x11367;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11369 = x11292 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11370 = x11328 + x11369;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11371 = x11294 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11372 = x11328 + x11371;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11373 = x11296 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11374 = x11328 + x11373;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11375 = x11298 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11376 = x11328 + x11375;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11330);
      reg = x11330;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x11377 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x11377 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x11378 = x11377 + x27;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x11379 = x11378 * x11378;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x11380 = x11379 * x11379;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][46 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11380);
      reg = x11380;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x11381 = args[2][46 * steps + ((cycle - 0) & mask)];
    assert(x11381 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11382 = x11381 * x11379;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11383 = x11382 * x11378;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11384 = x11383 + x11332;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11385 = x11384 + x11334;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11386 = x11385 + x11336;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11387 = x11386 + x11338;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11388 = x11387 + x11340;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11389 = x11388 + x11342;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11390 = x11389 + x11344;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11391 = x11390 + x11346;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11392 = x11391 + x11348;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11393 = x11392 + x11350;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11394 = x11393 + x11352;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11395 = x11394 + x11354;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11396 = x11395 + x11356;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11397 = x11396 + x11358;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11398 = x11397 + x11360;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11399 = x11398 + x11362;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11400 = x11399 + x11364;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11401 = x11400 + x11366;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11402 = x11401 + x11368;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11403 = x11402 + x11370;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11404 = x11403 + x11372;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11405 = x11404 + x11374;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11406 = x11405 + x11376;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11407 = x11383 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11408 = x11406 + x11407;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11409 = x11332 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11410 = x11406 + x11409;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11411 = x11334 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11412 = x11406 + x11411;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11413 = x11336 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11414 = x11406 + x11413;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11415 = x11338 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11416 = x11406 + x11415;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11417 = x11340 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11418 = x11406 + x11417;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11419 = x11342 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11420 = x11406 + x11419;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11421 = x11344 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11422 = x11406 + x11421;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11423 = x11346 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11424 = x11406 + x11423;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11425 = x11348 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11426 = x11406 + x11425;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11427 = x11350 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11428 = x11406 + x11427;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11429 = x11352 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11430 = x11406 + x11429;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11431 = x11354 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11432 = x11406 + x11431;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11433 = x11356 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11434 = x11406 + x11433;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11435 = x11358 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11436 = x11406 + x11435;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11437 = x11360 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11438 = x11406 + x11437;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11439 = x11362 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11440 = x11406 + x11439;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11441 = x11364 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11442 = x11406 + x11441;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11443 = x11366 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11444 = x11406 + x11443;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11445 = x11368 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11446 = x11406 + x11445;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11447 = x11370 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11448 = x11406 + x11447;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11449 = x11372 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11450 = x11406 + x11449;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11451 = x11374 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11452 = x11406 + x11451;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11453 = x11376 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11454 = x11406 + x11453;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][23 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11408);
      reg = x11408;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x11455 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x11455 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x11456 = x11455 + x26;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x11457 = x11456 * x11456;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x11458 = x11457 * x11457;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][47 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11458);
      reg = x11458;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x11459 = args[2][47 * steps + ((cycle - 0) & mask)];
    assert(x11459 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11460 = x11459 * x11457;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11461 = x11460 * x11456;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11462 = x11461 + x11410;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11463 = x11462 + x11412;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11464 = x11463 + x11414;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11465 = x11464 + x11416;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11466 = x11465 + x11418;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11467 = x11466 + x11420;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11468 = x11467 + x11422;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11469 = x11468 + x11424;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11470 = x11469 + x11426;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11471 = x11470 + x11428;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11472 = x11471 + x11430;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11473 = x11472 + x11432;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11474 = x11473 + x11434;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11475 = x11474 + x11436;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11476 = x11475 + x11438;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11477 = x11476 + x11440;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11478 = x11477 + x11442;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11479 = x11478 + x11444;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11480 = x11479 + x11446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11481 = x11480 + x11448;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11482 = x11481 + x11450;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11483 = x11482 + x11452;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11484 = x11483 + x11454;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11485 = x11461 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11486 = x11484 + x11485;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11487 = x11410 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11488 = x11484 + x11487;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11489 = x11412 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11490 = x11484 + x11489;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11491 = x11414 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11492 = x11484 + x11491;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11493 = x11416 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11494 = x11484 + x11493;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11495 = x11418 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11496 = x11484 + x11495;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11497 = x11420 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11498 = x11484 + x11497;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11499 = x11422 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11500 = x11484 + x11499;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11501 = x11424 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11502 = x11484 + x11501;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11503 = x11426 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11504 = x11484 + x11503;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11505 = x11428 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11506 = x11484 + x11505;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11507 = x11430 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11508 = x11484 + x11507;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11509 = x11432 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11510 = x11484 + x11509;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11511 = x11434 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11512 = x11484 + x11511;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11513 = x11436 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11514 = x11484 + x11513;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11515 = x11438 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11516 = x11484 + x11515;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11517 = x11440 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11518 = x11484 + x11517;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11519 = x11442 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11520 = x11484 + x11519;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11521 = x11444 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11522 = x11484 + x11521;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11523 = x11446 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11524 = x11484 + x11523;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11525 = x11448 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11526 = x11484 + x11525;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11527 = x11450 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11528 = x11484 + x11527;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11529 = x11452 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11530 = x11484 + x11529;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11531 = x11454 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11532 = x11484 + x11531;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11486);
      reg = x11486;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x11533 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x11533 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x11534 = x11533 + x25;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x11535 = x11534 * x11534;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x11536 = x11535 * x11535;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][48 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11536);
      reg = x11536;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x11537 = args[2][48 * steps + ((cycle - 0) & mask)];
    assert(x11537 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11538 = x11537 * x11535;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11539 = x11538 * x11534;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11540 = x11539 + x11488;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11541 = x11540 + x11490;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11542 = x11541 + x11492;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11543 = x11542 + x11494;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11544 = x11543 + x11496;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11545 = x11544 + x11498;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11546 = x11545 + x11500;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11547 = x11546 + x11502;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11548 = x11547 + x11504;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11549 = x11548 + x11506;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11550 = x11549 + x11508;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11551 = x11550 + x11510;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11552 = x11551 + x11512;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11553 = x11552 + x11514;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11554 = x11553 + x11516;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11555 = x11554 + x11518;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11556 = x11555 + x11520;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11557 = x11556 + x11522;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11558 = x11557 + x11524;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11559 = x11558 + x11526;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11560 = x11559 + x11528;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11561 = x11560 + x11530;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11562 = x11561 + x11532;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11563 = x11539 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11564 = x11562 + x11563;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11565 = x11488 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11566 = x11562 + x11565;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11567 = x11490 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11568 = x11562 + x11567;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11569 = x11492 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11570 = x11562 + x11569;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11571 = x11494 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11572 = x11562 + x11571;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11573 = x11496 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11574 = x11562 + x11573;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11575 = x11498 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11576 = x11562 + x11575;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11577 = x11500 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11578 = x11562 + x11577;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11579 = x11502 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11580 = x11562 + x11579;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11581 = x11504 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11582 = x11562 + x11581;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11583 = x11506 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11584 = x11562 + x11583;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11585 = x11508 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11586 = x11562 + x11585;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11587 = x11510 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11588 = x11562 + x11587;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11589 = x11512 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11590 = x11562 + x11589;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11591 = x11514 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11592 = x11562 + x11591;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11593 = x11516 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11594 = x11562 + x11593;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11595 = x11518 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11596 = x11562 + x11595;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11597 = x11520 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11598 = x11562 + x11597;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11599 = x11522 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11600 = x11562 + x11599;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11601 = x11524 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11602 = x11562 + x11601;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11603 = x11526 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11604 = x11562 + x11603;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11605 = x11528 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11606 = x11562 + x11605;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11607 = x11530 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11608 = x11562 + x11607;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11609 = x11532 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11610 = x11562 + x11609;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11564);
      reg = x11564;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":287:41))
    auto x11611 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x11611 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":290:13)
    auto x11612 = x11611 + x24;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":153:13)
    auto x11613 = x11612 * x11612;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":154:13)
    auto x11614 = x11613 * x11613;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":155:3)
    {
      auto& reg = args[2][49 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11614);
      reg = x11614;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":156:14))
    auto x11615 = args[2][49 * steps + ((cycle - 0) & mask)];
    assert(x11615 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11616 = x11615 * x11613;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":157:13)
    auto x11617 = x11616 * x11612;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11618 = x11617 + x11566;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11619 = x11618 + x11568;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11620 = x11619 + x11570;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11621 = x11620 + x11572;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11622 = x11621 + x11574;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11623 = x11622 + x11576;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11624 = x11623 + x11578;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11625 = x11624 + x11580;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11626 = x11625 + x11582;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11627 = x11626 + x11584;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11628 = x11627 + x11586;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11629 = x11628 + x11588;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11630 = x11629 + x11590;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11631 = x11630 + x11592;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11632 = x11631 + x11594;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11633 = x11632 + x11596;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11634 = x11633 + x11598;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11635 = x11634 + x11600;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11636 = x11635 + x11602;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11637 = x11636 + x11604;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11638 = x11637 + x11606;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11639 = x11638 + x11608;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":144:11)
    auto x11640 = x11639 + x11610;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11641 = x11617 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11642 = x11640 + x11641;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11643 = x11566 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11644 = x11640 + x11643;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11645 = x11568 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11646 = x11640 + x11645;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11647 = x11570 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11648 = x11640 + x11647;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11649 = x11572 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11650 = x11640 + x11649;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11651 = x11574 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11652 = x11640 + x11651;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11653 = x11576 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11654 = x11640 + x11653;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11655 = x11578 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11656 = x11640 + x11655;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11657 = x11580 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11658 = x11640 + x11657;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11659 = x11582 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11660 = x11640 + x11659;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11661 = x11584 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11662 = x11640 + x11661;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11663 = x11586 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11664 = x11640 + x11663;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11665 = x11588 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11666 = x11640 + x11665;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11667 = x11590 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11668 = x11640 + x11667;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11669 = x11592 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11670 = x11640 + x11669;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11671 = x11594 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11672 = x11640 + x11671;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11673 = x11596 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11674 = x11640 + x11673;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11675 = x11598 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11676 = x11640 + x11675;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11677 = x11600 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11678 = x11640 + x11677;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11679 = x11602 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11680 = x11640 + x11679;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11681 = x11604 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11682 = x11640 + x11681;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11683 = x11606 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11684 = x11640 + x11683;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11685 = x11608 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11686 = x11640 + x11685;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:20)
    auto x11687 = x11610 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":147:14)
    auto x11688 = x11640 + x11687;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":295:5)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11642);
      reg = x11642;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11689 = x11642 + x23;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][90 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11689);
      reg = x11689;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11690 = x11644 + x22;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][91 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11690);
      reg = x11690;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11691 = x11646 + x21;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11691);
      reg = x11691;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11692 = x11648 + x20;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11692);
      reg = x11692;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11693 = x11650 + x19;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][94 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11693);
      reg = x11693;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11694 = x11652 + x18;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][95 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11694);
      reg = x11694;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11695 = x11654 + x17;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][96 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11695);
      reg = x11695;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11696 = x11656 + x16;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11696);
      reg = x11696;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11697 = x11658 + x15;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11697);
      reg = x11697;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11698 = x11660 + x14;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11698);
      reg = x11698;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11699 = x11662 + x13;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11699);
      reg = x11699;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11700 = x11664 + x12;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][101 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11700);
      reg = x11700;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11701 = x11666 + x11;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][102 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11701);
      reg = x11701;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11702 = x11668 + x10;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][103 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11702);
      reg = x11702;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11703 = x11670 + x9;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11703);
      reg = x11703;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11704 = x11672 + x8;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11704);
      reg = x11704;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11705 = x11674 + x7;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11705);
      reg = x11705;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11706 = x11676 + x6;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11706);
      reg = x11706;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11707 = x11678 + x5;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11707);
      reg = x11707;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11708 = x11680 + x4;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11708);
      reg = x11708;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11709 = x11682 + x3;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11709);
      reg = x11709;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11710 = x11684 + x2;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11710);
      reg = x11710;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11711 = x11686 + x1;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11711);
      reg = x11711;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":327:13)
    auto x11712 = x11688 + x0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":328:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11712);
      reg = x11712;
    }
  }
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/poseidon2_store(Reg)"("./zirgen/components/mux.h":49:25))
  auto x11713 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x11713 != Fp::invalid());
  if (x11713 != 0) {
    // loc("top(recursion::Top)/code(recursion::Code)/write_addr(Reg)"("zirgen/circuit/recursion/top.cpp":22:49))
    auto x11714 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x11714 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_store(recursion::Poseidon2MemInst)/group(OneHot)/g0(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":348:39))
    auto x11715 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x11715 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11716 = args[2][90 * steps + ((cycle - 1) & mask)];
    assert(x11716 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11717 = x11715 * x11716;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11718 = args[2][91 * steps + ((cycle - 1) & mask)];
    assert(x11718 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11719 = x11715 * x11718;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11720 = args[2][92 * steps + ((cycle - 1) & mask)];
    assert(x11720 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11721 = x11715 * x11720;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11722 = args[2][93 * steps + ((cycle - 1) & mask)];
    assert(x11722 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11723 = x11715 * x11722;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11724 = args[2][94 * steps + ((cycle - 1) & mask)];
    assert(x11724 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11725 = x11715 * x11724;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11726 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x11726 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11727 = x11715 * x11726;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11728 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x11728 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11729 = x11715 * x11728;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11730 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x11730 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11731 = x11715 * x11730;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_store(recursion::Poseidon2MemInst)/group(OneHot)/g1(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":348:39))
    auto x11732 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x11732 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11733 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x11733 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11734 = x11732 * x11733;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11735 = x11717 + x11734;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11736 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x11736 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11737 = x11732 * x11736;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11738 = x11719 + x11737;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11739 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x11739 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11740 = x11732 * x11739;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11741 = x11721 + x11740;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11742 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x11742 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11743 = x11732 * x11742;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11744 = x11723 + x11743;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11745 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x11745 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11746 = x11732 * x11745;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11747 = x11725 + x11746;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11748 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x11748 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11749 = x11732 * x11748;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11750 = x11727 + x11749;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11751 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x11751 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11752 = x11732 * x11751;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11753 = x11729 + x11752;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11754 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x11754 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11755 = x11732 * x11754;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11756 = x11731 + x11755;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_store(recursion::Poseidon2MemInst)/group(OneHot)/g2(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":348:39))
    auto x11757 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x11757 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11758 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x11758 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11759 = x11757 * x11758;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11760 = x11735 + x11759;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11761 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x11761 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11762 = x11757 * x11761;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11763 = x11738 + x11762;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11764 = args[2][108 * steps + ((cycle - 1) & mask)];
    assert(x11764 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11765 = x11757 * x11764;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11766 = x11741 + x11765;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11767 = args[2][109 * steps + ((cycle - 1) & mask)];
    assert(x11767 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11768 = x11757 * x11767;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11769 = x11744 + x11768;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11770 = args[2][110 * steps + ((cycle - 1) & mask)];
    assert(x11770 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11771 = x11757 * x11770;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11772 = x11747 + x11771;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11773 = args[2][111 * steps + ((cycle - 1) & mask)];
    assert(x11773 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11774 = x11757 * x11773;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11775 = x11750 + x11774;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11776 = args[2][112 * steps + ((cycle - 1) & mask)];
    assert(x11776 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11777 = x11757 * x11776;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11778 = x11753 + x11777;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":348:88))
    auto x11779 = args[2][113 * steps + ((cycle - 1) & mask)];
    assert(x11779 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:39)
    auto x11780 = x11757 * x11779;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":348:22)
    auto x11781 = x11756 + x11780;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_store(recursion::Poseidon2MemInst)/do_mont(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x11782 = args[0][7 * steps + ((cycle - 0) & mask)];
    assert(x11782 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":350:13)
    auto x11783 = x11782 * x238;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":350:61)
    auto x11784 = x307 - x11782;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":350:13)
    auto x11785 = x11783 + x11784;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:37)
    auto x11786 = x11760 * x11785;
    // loc("zirgen/circuit/recursion/wom.cpp":87:3)
    {
      auto& reg = args[2][5 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11714);
      reg = x11714;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][6 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11786);
      reg = x11786;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][7 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][8 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11787 = args[2][5 * steps + ((cycle - 0) & mask)];
      assert(x11787 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11788 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x11788 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11789 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x11789 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11790 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x11790 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11791 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x11791 != Fp::invalid());
      host_args.at(0) = x11787;
      host_args.at(1) = x11788;
      host_args.at(2) = x11789;
      host_args.at(3) = x11790;
      host_args.at(4) = x11791;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:21)
    auto x11792 = x11714 + x307;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:37)
    auto x11793 = x11763 * x11785;
    // loc("zirgen/circuit/recursion/wom.cpp":87:3)
    {
      auto& reg = args[2][10 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11792);
      reg = x11792;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][11 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11793);
      reg = x11793;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][12 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][13 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][14 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11794 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x11794 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11795 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x11795 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11796 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x11796 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11797 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x11797 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11798 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x11798 != Fp::invalid());
      host_args.at(0) = x11794;
      host_args.at(1) = x11795;
      host_args.at(2) = x11796;
      host_args.at(3) = x11797;
      host_args.at(4) = x11798;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:21)
    auto x11799 = x11714 + x306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:37)
    auto x11800 = x11766 * x11785;
    // loc("zirgen/circuit/recursion/wom.cpp":87:3)
    {
      auto& reg = args[2][15 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11799);
      reg = x11799;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11800);
      reg = x11800;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][17 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][19 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11801 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x11801 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11802 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x11802 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11803 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x11803 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11804 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x11804 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11805 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11805 != Fp::invalid());
      host_args.at(0) = x11801;
      host_args.at(1) = x11802;
      host_args.at(2) = x11803;
      host_args.at(3) = x11804;
      host_args.at(4) = x11805;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:21)
    auto x11806 = x11714 + x305;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:37)
    auto x11807 = x11769 * x11785;
    // loc("zirgen/circuit/recursion/wom.cpp":87:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11806);
      reg = x11806;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][21 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11807);
      reg = x11807;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][23 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11808 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11808 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11809 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11809 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11810 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11810 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11811 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11811 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11812 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11812 != Fp::invalid());
      host_args.at(0) = x11808;
      host_args.at(1) = x11809;
      host_args.at(2) = x11810;
      host_args.at(3) = x11811;
      host_args.at(4) = x11812;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:21)
    auto x11813 = x11714 + x304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:37)
    auto x11814 = x11772 * x11785;
    // loc("zirgen/circuit/recursion/wom.cpp":87:3)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11813);
      reg = x11813;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11814);
      reg = x11814;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][27 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][28 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][29 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11815 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11815 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11816 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11816 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11817 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11817 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11818 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11818 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11819 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11819 != Fp::invalid());
      host_args.at(0) = x11815;
      host_args.at(1) = x11816;
      host_args.at(2) = x11817;
      host_args.at(3) = x11818;
      host_args.at(4) = x11819;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:21)
    auto x11820 = x11714 + x303;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:37)
    auto x11821 = x11775 * x11785;
    // loc("zirgen/circuit/recursion/wom.cpp":87:3)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11820);
      reg = x11820;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][31 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11821);
      reg = x11821;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][32 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][33 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][34 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11822 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11822 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11823 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11823 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11824 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11824 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11825 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11825 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11826 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x11826 != Fp::invalid());
      host_args.at(0) = x11822;
      host_args.at(1) = x11823;
      host_args.at(2) = x11824;
      host_args.at(3) = x11825;
      host_args.at(4) = x11826;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:21)
    auto x11827 = x11714 + x302;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:37)
    auto x11828 = x11778 * x11785;
    // loc("zirgen/circuit/recursion/wom.cpp":87:3)
    {
      auto& reg = args[2][35 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11827);
      reg = x11827;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][36 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11828);
      reg = x11828;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][37 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][38 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][39 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11829 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x11829 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11830 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x11830 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11831 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x11831 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11832 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x11832 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11833 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x11833 != Fp::invalid());
      host_args.at(0) = x11829;
      host_args.at(1) = x11830;
      host_args.at(2) = x11831;
      host_args.at(3) = x11832;
      host_args.at(4) = x11833;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:21)
    auto x11834 = x11714 + x301;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":352:37)
    auto x11835 = x11781 * x11785;
    // loc("zirgen/circuit/recursion/wom.cpp":87:3)
    {
      auto& reg = args[2][40 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11834);
      reg = x11834;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][41 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11835);
      reg = x11835;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][42 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][43 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":51:5)
    {
      auto& reg = args[2][44 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x308);
      reg = x308;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11836 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x11836 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11837 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x11837 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11838 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x11838 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11839 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x11839 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11840 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x11840 != Fp::invalid());
      host_args.at(0) = x11836;
      host_args.at(1) = x11837;
      host_args.at(2) = x11838;
      host_args.at(3) = x11839;
      host_args.at(4) = x11840;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][90 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11716);
      reg = x11716;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][91 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11718);
      reg = x11718;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11720);
      reg = x11720;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11722);
      reg = x11722;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][94 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11724);
      reg = x11724;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][95 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11726);
      reg = x11726;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][96 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11728);
      reg = x11728;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11730);
      reg = x11730;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11733);
      reg = x11733;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11736);
      reg = x11736;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11739);
      reg = x11739;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][101 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11742);
      reg = x11742;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][102 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11745);
      reg = x11745;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][103 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11748);
      reg = x11748;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11751);
      reg = x11751;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11754);
      reg = x11754;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11758);
      reg = x11758;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11761);
      reg = x11761;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11764);
      reg = x11764;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11767);
      reg = x11767;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11770);
      reg = x11770;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11773);
      reg = x11773;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11776);
      reg = x11776;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":355:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11779);
      reg = x11779;
    }
    // loc("./zirgen/components/onehot.h":46:19)
    auto x11841 = x11757 * x306;
    // loc("./zirgen/components/onehot.h":46:13)
    auto x11842 = x11732 + x11841;
    host_args.at(0) = x11842;
    host_args.at(1) = x11782;
    host(ctx, "log", "POSEIDON2_OUTPUT: group(%u), doMont(%u)", host_args.data(), 2, host_outs.data(), 0);
  }
  if (x1357 != 0) {
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11843 = args[0][7 * steps + ((cycle - 0) & mask)];
    assert(x11843 != Fp::invalid());
    if (x11843 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11844 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x11844 != Fp::invalid());
    if (x11844 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11845 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x11845 != Fp::invalid());
    if (x11845 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11846 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x11846 != Fp::invalid());
    if (x11846 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11847 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x11847 != Fp::invalid());
    if (x11847 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11848 = args[0][16 * steps + ((cycle - 0) & mask)];
    assert(x11848 != Fp::invalid());
    if (x11848 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x308);
          reg = x308;
        }
      }
    }
  }
  if (x8808 != 0) {
    {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
    }
  }
  if (x11713 != 0) {
    {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":51:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x308);
        reg = x308;
      }
    }
  }
  if (x309 != 0) {
    {
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11849 = args[2][5 * steps + ((cycle - 0) & mask)];
      assert(x11849 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11850 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x11850 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11851 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x11851 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11852 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x11852 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11853 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x11853 != Fp::invalid());
      host_args.at(0) = x11849;
      host_args.at(1) = x11850;
      host_args.at(2) = x11851;
      host_args.at(3) = x11852;
      host_args.at(4) = x11853;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11854 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x11854 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11855 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x11855 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11856 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x11856 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11857 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x11857 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11858 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x11858 != Fp::invalid());
      host_args.at(0) = x11854;
      host_args.at(1) = x11855;
      host_args.at(2) = x11856;
      host_args.at(3) = x11857;
      host_args.at(4) = x11858;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11859 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x11859 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11860 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x11860 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11861 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x11861 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11862 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x11862 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11863 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11863 != Fp::invalid());
      host_args.at(0) = x11859;
      host_args.at(1) = x11860;
      host_args.at(2) = x11861;
      host_args.at(3) = x11862;
      host_args.at(4) = x11863;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11864 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11864 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11865 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11865 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11866 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11866 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11867 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11867 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11868 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11868 != Fp::invalid());
      host_args.at(0) = x11864;
      host_args.at(1) = x11865;
      host_args.at(2) = x11866;
      host_args.at(3) = x11867;
      host_args.at(4) = x11868;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11869 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11869 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11870 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11870 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11871 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11871 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11872 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11872 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11873 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11873 != Fp::invalid());
      host_args.at(0) = x11869;
      host_args.at(1) = x11870;
      host_args.at(2) = x11871;
      host_args.at(3) = x11872;
      host_args.at(4) = x11873;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11874 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11874 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11875 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11875 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11876 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11876 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11877 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11877 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11878 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x11878 != Fp::invalid());
      host_args.at(0) = x11874;
      host_args.at(1) = x11875;
      host_args.at(2) = x11876;
      host_args.at(3) = x11877;
      host_args.at(4) = x11878;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11879 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x11879 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11880 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x11880 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11881 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x11881 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11882 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x11882 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11883 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x11883 != Fp::invalid());
      host_args.at(0) = x11879;
      host_args.at(1) = x11880;
      host_args.at(2) = x11881;
      host_args.at(3) = x11882;
      host_args.at(4) = x11883;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11884 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x11884 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11885 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x11885 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11886 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x11886 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11887 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x11887 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11888 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x11888 != Fp::invalid());
      host_args.at(0) = x11884;
      host_args.at(1) = x11885;
      host_args.at(2) = x11886;
      host_args.at(3) = x11887;
      host_args.at(4) = x11888;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11889 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x11889 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11890 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x11890 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11891 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x11891 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11892 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x11892 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11893 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x11893 != Fp::invalid());
      host_args.at(0) = x11889;
      host_args.at(1) = x11890;
      host_args.at(2) = x11891;
      host_args.at(3) = x11892;
      host_args.at(4) = x11893;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
    }
  }
  if (x1357 != 0) {
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11894 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x11894 != Fp::invalid());
    if (x11894 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11895 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11895 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11896 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11896 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11897 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11897 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11898 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11898 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11899 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11899 != Fp::invalid());
        host_args.at(0) = x11895;
        host_args.at(1) = x11896;
        host_args.at(2) = x11897;
        host_args.at(3) = x11898;
        host_args.at(4) = x11899;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11900 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11900 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11901 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11901 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11902 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11902 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11903 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11903 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11904 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11904 != Fp::invalid());
        host_args.at(0) = x11900;
        host_args.at(1) = x11901;
        host_args.at(2) = x11902;
        host_args.at(3) = x11903;
        host_args.at(4) = x11904;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11905 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x11905 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11906 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x11906 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11907 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x11907 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11908 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x11908 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11909 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x11909 != Fp::invalid());
        host_args.at(0) = x11905;
        host_args.at(1) = x11906;
        host_args.at(2) = x11907;
        host_args.at(3) = x11908;
        host_args.at(4) = x11909;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11910 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x11910 != Fp::invalid());
    if (x11910 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11911 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11911 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11912 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11912 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11913 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11913 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11914 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11914 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11915 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11915 != Fp::invalid());
        host_args.at(0) = x11911;
        host_args.at(1) = x11912;
        host_args.at(2) = x11913;
        host_args.at(3) = x11914;
        host_args.at(4) = x11915;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11916 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11916 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11917 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11917 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11918 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11918 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11919 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11919 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11920 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11920 != Fp::invalid());
        host_args.at(0) = x11916;
        host_args.at(1) = x11917;
        host_args.at(2) = x11918;
        host_args.at(3) = x11919;
        host_args.at(4) = x11920;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11921 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x11921 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11922 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x11922 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11923 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x11923 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11924 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x11924 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11925 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x11925 != Fp::invalid());
        host_args.at(0) = x11921;
        host_args.at(1) = x11922;
        host_args.at(2) = x11923;
        host_args.at(3) = x11924;
        host_args.at(4) = x11925;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11926 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x11926 != Fp::invalid());
    if (x11926 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11927 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11927 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11928 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11928 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11929 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11929 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11930 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11930 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11931 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11931 != Fp::invalid());
        host_args.at(0) = x11927;
        host_args.at(1) = x11928;
        host_args.at(2) = x11929;
        host_args.at(3) = x11930;
        host_args.at(4) = x11931;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11932 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11932 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11933 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11933 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11934 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11934 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11935 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11935 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11936 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11936 != Fp::invalid());
        host_args.at(0) = x11932;
        host_args.at(1) = x11933;
        host_args.at(2) = x11934;
        host_args.at(3) = x11935;
        host_args.at(4) = x11936;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11937 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x11937 != Fp::invalid());
    if (x11937 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11938 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11938 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11939 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11939 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11940 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11940 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11941 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11941 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11942 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11942 != Fp::invalid());
        host_args.at(0) = x11938;
        host_args.at(1) = x11939;
        host_args.at(2) = x11940;
        host_args.at(3) = x11941;
        host_args.at(4) = x11942;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11943 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11943 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11944 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11944 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11945 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11945 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11946 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11946 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11947 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11947 != Fp::invalid());
        host_args.at(0) = x11943;
        host_args.at(1) = x11944;
        host_args.at(2) = x11945;
        host_args.at(3) = x11946;
        host_args.at(4) = x11947;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11948 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x11948 != Fp::invalid());
    if (x11948 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11949 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11949 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11950 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11950 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11951 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11951 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11952 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11952 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11953 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11953 != Fp::invalid());
        host_args.at(0) = x11949;
        host_args.at(1) = x11950;
        host_args.at(2) = x11951;
        host_args.at(3) = x11952;
        host_args.at(4) = x11953;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11954 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11954 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11955 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11955 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11956 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11956 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11957 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11957 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11958 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11958 != Fp::invalid());
        host_args.at(0) = x11954;
        host_args.at(1) = x11955;
        host_args.at(2) = x11956;
        host_args.at(3) = x11957;
        host_args.at(4) = x11958;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11959 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x11959 != Fp::invalid());
    if (x11959 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11960 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11960 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11961 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11961 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11962 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11962 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11963 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11963 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11964 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11964 != Fp::invalid());
        host_args.at(0) = x11960;
        host_args.at(1) = x11961;
        host_args.at(2) = x11962;
        host_args.at(3) = x11963;
        host_args.at(4) = x11964;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11965 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11965 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11966 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11966 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11967 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11967 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11968 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11968 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11969 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11969 != Fp::invalid());
        host_args.at(0) = x11965;
        host_args.at(1) = x11966;
        host_args.at(2) = x11967;
        host_args.at(3) = x11968;
        host_args.at(4) = x11969;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11970 = args[0][16 * steps + ((cycle - 0) & mask)];
    assert(x11970 != Fp::invalid());
    if (x11970 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11971 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11971 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11972 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11972 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11973 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11973 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11974 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11974 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11975 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11975 != Fp::invalid());
        host_args.at(0) = x11971;
        host_args.at(1) = x11972;
        host_args.at(2) = x11973;
        host_args.at(3) = x11974;
        host_args.at(4) = x11975;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11976 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11976 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11977 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x11977 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11978 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x11978 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11979 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x11979 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11980 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x11980 != Fp::invalid());
        host_args.at(0) = x11976;
        host_args.at(1) = x11977;
        host_args.at(2) = x11978;
        host_args.at(3) = x11979;
        host_args.at(4) = x11980;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11981 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x11981 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11982 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x11982 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11983 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x11983 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11984 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x11984 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11985 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x11985 != Fp::invalid());
        host_args.at(0) = x11981;
        host_args.at(1) = x11982;
        host_args.at(2) = x11983;
        host_args.at(3) = x11984;
        host_args.at(4) = x11985;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11986 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x11986 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11987 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x11987 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11988 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x11988 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11989 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x11989 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
        auto x11990 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x11990 != Fp::invalid());
        host_args.at(0) = x11986;
        host_args.at(1) = x11987;
        host_args.at(2) = x11988;
        host_args.at(3) = x11989;
        host_args.at(4) = x11990;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
  }
  if (x8808 != 0) {
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11991 = args[2][5 * steps + ((cycle - 0) & mask)];
      assert(x11991 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11992 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x11992 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11993 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x11993 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11994 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x11994 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11995 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x11995 != Fp::invalid());
      host_args.at(0) = x11991;
      host_args.at(1) = x11992;
      host_args.at(2) = x11993;
      host_args.at(3) = x11994;
      host_args.at(4) = x11995;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11996 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x11996 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11997 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x11997 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11998 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x11998 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x11999 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x11999 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12000 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x12000 != Fp::invalid());
      host_args.at(0) = x11996;
      host_args.at(1) = x11997;
      host_args.at(2) = x11998;
      host_args.at(3) = x11999;
      host_args.at(4) = x12000;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12001 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x12001 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12002 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x12002 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12003 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x12003 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12004 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x12004 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12005 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x12005 != Fp::invalid());
      host_args.at(0) = x12001;
      host_args.at(1) = x12002;
      host_args.at(2) = x12003;
      host_args.at(3) = x12004;
      host_args.at(4) = x12005;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12006 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x12006 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12007 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x12007 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12008 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x12008 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12009 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x12009 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12010 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x12010 != Fp::invalid());
      host_args.at(0) = x12006;
      host_args.at(1) = x12007;
      host_args.at(2) = x12008;
      host_args.at(3) = x12009;
      host_args.at(4) = x12010;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12011 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x12011 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12012 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x12012 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12013 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x12013 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12014 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x12014 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12015 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x12015 != Fp::invalid());
      host_args.at(0) = x12011;
      host_args.at(1) = x12012;
      host_args.at(2) = x12013;
      host_args.at(3) = x12014;
      host_args.at(4) = x12015;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12016 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x12016 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12017 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x12017 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12018 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x12018 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12019 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x12019 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12020 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x12020 != Fp::invalid());
      host_args.at(0) = x12016;
      host_args.at(1) = x12017;
      host_args.at(2) = x12018;
      host_args.at(3) = x12019;
      host_args.at(4) = x12020;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12021 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x12021 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12022 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x12022 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12023 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x12023 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12024 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x12024 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12025 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x12025 != Fp::invalid());
      host_args.at(0) = x12021;
      host_args.at(1) = x12022;
      host_args.at(2) = x12023;
      host_args.at(3) = x12024;
      host_args.at(4) = x12025;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12026 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x12026 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12027 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x12027 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12028 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x12028 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12029 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x12029 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12030 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x12030 != Fp::invalid());
      host_args.at(0) = x12026;
      host_args.at(1) = x12027;
      host_args.at(2) = x12028;
      host_args.at(3) = x12029;
      host_args.at(4) = x12030;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12031 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x12031 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12032 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x12032 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12033 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x12033 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12034 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x12034 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12035 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x12035 != Fp::invalid());
      host_args.at(0) = x12031;
      host_args.at(1) = x12032;
      host_args.at(2) = x12033;
      host_args.at(3) = x12034;
      host_args.at(4) = x12035;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
    }
  }
  if (x11713 != 0) {
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12036 = args[2][5 * steps + ((cycle - 0) & mask)];
      assert(x12036 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12037 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x12037 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12038 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x12038 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12039 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x12039 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12040 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x12040 != Fp::invalid());
      host_args.at(0) = x12036;
      host_args.at(1) = x12037;
      host_args.at(2) = x12038;
      host_args.at(3) = x12039;
      host_args.at(4) = x12040;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12041 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x12041 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12042 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x12042 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12043 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x12043 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12044 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x12044 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12045 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x12045 != Fp::invalid());
      host_args.at(0) = x12041;
      host_args.at(1) = x12042;
      host_args.at(2) = x12043;
      host_args.at(3) = x12044;
      host_args.at(4) = x12045;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12046 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x12046 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12047 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x12047 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12048 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x12048 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12049 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x12049 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12050 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x12050 != Fp::invalid());
      host_args.at(0) = x12046;
      host_args.at(1) = x12047;
      host_args.at(2) = x12048;
      host_args.at(3) = x12049;
      host_args.at(4) = x12050;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12051 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x12051 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12052 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x12052 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12053 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x12053 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12054 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x12054 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12055 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x12055 != Fp::invalid());
      host_args.at(0) = x12051;
      host_args.at(1) = x12052;
      host_args.at(2) = x12053;
      host_args.at(3) = x12054;
      host_args.at(4) = x12055;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12056 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x12056 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12057 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x12057 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12058 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x12058 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12059 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x12059 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12060 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x12060 != Fp::invalid());
      host_args.at(0) = x12056;
      host_args.at(1) = x12057;
      host_args.at(2) = x12058;
      host_args.at(3) = x12059;
      host_args.at(4) = x12060;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12061 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x12061 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12062 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x12062 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12063 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x12063 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12064 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x12064 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12065 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x12065 != Fp::invalid());
      host_args.at(0) = x12061;
      host_args.at(1) = x12062;
      host_args.at(2) = x12063;
      host_args.at(3) = x12064;
      host_args.at(4) = x12065;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12066 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x12066 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12067 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x12067 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12068 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x12068 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12069 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x12069 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12070 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x12070 != Fp::invalid());
      host_args.at(0) = x12066;
      host_args.at(1) = x12067;
      host_args.at(2) = x12068;
      host_args.at(3) = x12069;
      host_args.at(4) = x12070;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12071 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x12071 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12072 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x12072 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12073 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x12073 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12074 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x12074 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12075 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x12075 != Fp::invalid());
      host_args.at(0) = x12071;
      host_args.at(1) = x12072;
      host_args.at(2) = x12073;
      host_args.at(3) = x12074;
      host_args.at(4) = x12075;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12076 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x12076 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12077 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x12077 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12078 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x12078 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12079 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x12079 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":44:14))
      auto x12080 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x12080 != Fp::invalid());
      host_args.at(0) = x12076;
      host_args.at(1) = x12077;
      host_args.at(2) = x12078;
      host_args.at(3) = x12079;
      host_args.at(4) = x12080;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
    }
  }
  return x308;
}

} // namespace risc0::circuit::recursion
// clang-format on
