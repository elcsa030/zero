// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 32> host_args;
  std::array<Fp, 32> host_outs;
  // loc("cirgen/circuit/rv32im/ffpu.cpp":41:20)
  Fp x0(943718400);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":37:25)
  Fp x1(268435454);
  // loc("cirgen/components/u32.cpp":46:26)
  Fp x2(2013265801);
  // loc("cirgen/components/u32.cpp":39:17)
  Fp x3(16711680);
  // loc("cirgen/components/u32.cpp":38:17)
  Fp x4(65280);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
  Fp x5(2013265910);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
  Fp x6(50331840);
  // loc("cirgen/circuit/rv32im/sha.cpp":180:20)
  Fp x7(47);
  // loc("cirgen/circuit/rv32im/sha.cpp":107:30)
  Fp x8(2013235201);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:46)
  Fp x9(2013204481);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:34)
  Fp x10(32768);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:46)
  Fp x11(2013143041);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:46)
  Fp x12(2013020161);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:34)
  Fp x13(8192);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:46)
  Fp x14(2012774401);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:34)
  Fp x15(4096);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:46)
  Fp x16(2012282881);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:34)
  Fp x17(2048);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:46)
  Fp x18(2011299841);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:34)
  Fp x19(1024);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:46)
  Fp x20(2009333761);
  // loc("cirgen/circuit/rv32im/sha.cpp":100:34)
  Fp x21(512);
  // loc("cirgen/circuit/rv32im/sha.cpp":260:24)
  Fp x22(50331743);
  // loc("cirgen/circuit/rv32im/sha.cpp":255:24)
  Fp x23(50331695);
  // loc("cirgen/circuit/rv32im/sha.cpp":250:24)
  Fp x24(50331687);
  // loc("cirgen/circuit/rv32im/sha.cpp":216:24)
  Fp x25(50331661);
  // loc("cirgen/circuit/rv32im/sha.cpp":215:24)
  Fp x26(50331660);
  // loc("cirgen/circuit/rv32im/ecall.cpp":38:45)
  Fp x27(50331659);
  // loc("cirgen/circuit/rv32im/ecall.cpp":36:43)
  Fp x28(50331658);
  // loc("cirgen/circuit/rv32im/ecall.cpp":128:49)
  Fp x29(50331653);
  // loc("cirgen/circuit/rv32im/ecall.cpp":123:21)
  Fp x30(115);
  // loc("cirgen/components/u32.cpp":228:19)
  Fp x31(131070);
  // loc("cirgen/components/u32.cpp":224:19)
  Fp x32(131072);
  // loc("cirgen/components/u32.cpp":179:21)
  Fp x33(15);
  // loc("cirgen/circuit/rv32im/multiply.cpp":61:32)
  Fp x34(31);
  // loc("cirgen/circuit/rv32im/multiply.cpp":59:34)
  Fp x35(192);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
  Fp x36(35);
  // loc("cirgen/circuit/rv32im/memio.cpp":76:79)
  Fp x37(16384);
  // loc("cirgen/circuit/rv32im/memio.cpp":76:56)
  Fp x38(4194304);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x39(23);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x40(55);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x41(103);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
  Fp x42(111);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
  Fp x43(99);
  // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
  Fp x44(240);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
  Fp x45(19);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
  Fp x46(51);
  // loc("cirgen/components/u32.cpp":55:36)
  Fp x47(1996488705);
  // loc("cirgen/components/u32.cpp":55:28)
  Fp x48(465814468);
  // loc("cirgen/circuit/rv32im/compute.cpp":130:39)
  Fp x49(50331648);
  // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
  Fp x50(248);
  // loc("cirgen/circuit/rv32im/compute.cpp":41:13)
  Fp x51(2013265919);
  // loc("cirgen/circuit/rv32im/compute.cpp":13:12)
  Fp x52(2013265920);
  // loc("cirgen/circuit/rv32im/decode.cpp":24:34)
  Fp x53(127);
  // loc("cirgen/circuit/rv32im/decode.cpp":20:36)
  Fp x54(48);
  // loc("cirgen/circuit/rv32im/decode.cpp":19:43)
  Fp x55(1981808641);
  // loc("cirgen/circuit/rv32im/decode.cpp":19:35)
  Fp x56(64);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:41)
  Fp x57(1006632961);
  // loc("cirgen/circuit/rv32im/decode.cpp":10:40)
  Fp x58(1761607681);
  // loc("cirgen/circuit/rv32im/decode.cpp":9:40)
  Fp x59(1887436801);
  // loc("cirgen/circuit/rv32im/decode.cpp":9:32)
  Fp x60(16);
  // loc("cirgen/circuit/rv32im/decode.cpp":8:41)
  Fp x61(1950351361);
  // loc("cirgen/circuit/rv32im/decode.cpp":8:41)
  Fp x62(32);
  // loc("cirgen/circuit/rv32im/decode.cpp":8:33)
  Fp x63(96);
  // loc("cirgen/circuit/rv32im/decode.cpp":7:40)
  Fp x64(1997537281);
  // loc("cirgen/circuit/rv32im/decode.cpp":7:32)
  Fp x65(128);
  // loc("./cirgen/components/onehot.h":31:32)
  Fp x66(12);
  // loc("./cirgen/components/onehot.h":31:32)
  Fp x67(11);
  // loc("./cirgen/components/onehot.h":31:32)
  Fp x68(10);
  // loc("./cirgen/components/onehot.h":31:32)
  Fp x69(9);
  // loc("./cirgen/components/onehot.h":31:32)
  Fp x70(8);
  // loc("./cirgen/components/onehot.h":31:32)
  Fp x71(7);
  // loc("./cirgen/components/onehot.h":31:32)
  Fp x72(6);
  // loc("./cirgen/components/onehot.h":31:32)
  Fp x73(5);
  // loc("cirgen/circuit/rv32im/body.cpp":27:21)
  Fp x74(67108864);
  // loc("cirgen/circuit/rv32im/body.cpp":26:21)
  Fp x75(16777216);
  // loc("cirgen/circuit/rv32im/body.cpp":25:21)
  Fp x76(65536);
  // loc("cirgen/circuit/rv32im/body.cpp":39:18)
  Fp x77(13);
  // loc("cirgen/circuit/rv32im/body.cpp":14:43)
  Fp x78(1509949441);
  // loc("cirgen/circuit/rv32im/body.cpp":13:32)
  Fp x79(3);
  // loc("cirgen/circuit/rv32im/body.cpp":10:29)
  Fp x80(4);
  // loc("cirgen/components/bytes.cpp":79:30)
  Fp x81(2005401601);
  // loc("cirgen/components/bytes.cpp":79:30)
  Fp x82(256);
  // loc("cirgen/components/bytes.cpp":78:26)
  Fp x83(255);
  // loc("cirgen/components/bytes.cpp":33:25)
  Fp x84(2);
  // loc("cirgen/components/bytes.cpp":30:29)
  Fp x85(254);
  // loc("cirgen/components/bytes.cpp":17:13)
  Fp x86(0);
  // loc("cirgen/circuit/rv32im/top.cpp":14:17)
  Fp x87(1);
  // loc("Top/Code/OneHot/Reg1"("./cirgen/components/mux.h":33:25))
  auto x88 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x88 != Fp::invalid());
  if (x88 != 0) {
    // loc("Top/Code/OneHot/Reg1"("cirgen/circuit/rv32im/top.cpp":14:69))
    auto x89 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x89 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":14:17)
    auto x90 = x87 - x89;
    // loc("Top/Code/Mux/1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x91 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x91 != Fp::invalid());
    if (x90 != 0) {
      // loc("cirgen/components/bytes.cpp":17:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":18:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
    }
    // loc("cirgen/components/bytes.cpp":99:17)
    auto x92 = x87 - x90;
    if (x92 != 0) {
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x93 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x93 != Fp::invalid());
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x94 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x94 != Fp::invalid());
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x95 = x94 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x96 = (x95 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x97 = x87 - x96;
        if (x97 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x98 = x94 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        if (x96 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x99 = x93 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x100 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x100 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x101 = x100 - x93;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x102 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x102 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x103 = x102 - x94;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x104 = x101 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x105 = x101 * x104;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x105 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x106 = x103 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x107 = x101 * x106;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x107 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x108 = x103 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x109 = x104 * x108;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x109 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x110 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x110 != Fp::invalid());
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
    auto x111 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x111 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x112 = x111 - x85;
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x113 = (x112 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":31:16)
      auto x114 = x87 - x113;
      if (x114 != 0) {
        // loc("cirgen/components/bytes.cpp":32:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x110);
          reg = x110;
        }
        // loc("cirgen/components/bytes.cpp":33:16)
        auto x115 = x111 + x84;
        // loc("cirgen/components/bytes.cpp":33:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x115);
          reg = x115;
        }
      }
      if (x113 != 0) {
        // loc("cirgen/components/bytes.cpp":36:17)
        auto x116 = x110 + x87;
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x116);
          reg = x116;
        }
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement1/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x117 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x117 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":40:18)
    auto x118 = x117 - x110;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement1/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x119 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x119 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":41:17)
    auto x120 = x119 - x111;
    // loc("cirgen/components/bytes.cpp":42:19)
    auto x121 = x118 - x87;
    // loc("cirgen/components/bytes.cpp":42:7)
    auto x122 = x118 * x121;
    // loc("cirgen/components/bytes.cpp":42:7)
    if (x122 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
    // loc("cirgen/components/bytes.cpp":43:19)
    auto x123 = x120 + x85;
    // loc("cirgen/components/bytes.cpp":43:7)
    auto x124 = x118 * x123;
    // loc("cirgen/components/bytes.cpp":43:7)
    if (x124 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
    // loc("cirgen/components/bytes.cpp":44:25)
    auto x125 = x120 - x84;
    // loc("cirgen/components/bytes.cpp":44:7)
    auto x126 = x121 * x125;
    // loc("cirgen/components/bytes.cpp":44:7)
    if (x126 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
    {
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x127 = x119 - x85;
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x128 = (x127 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":31:16)
      auto x129 = x87 - x128;
      if (x129 != 0) {
        // loc("cirgen/components/bytes.cpp":32:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x117);
          reg = x117;
        }
        // loc("cirgen/components/bytes.cpp":33:16)
        auto x130 = x119 + x84;
        // loc("cirgen/components/bytes.cpp":33:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x130);
          reg = x130;
        }
      }
      if (x128 != 0) {
        // loc("cirgen/components/bytes.cpp":36:17)
        auto x131 = x117 + x87;
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x131);
          reg = x131;
        }
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement2/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x132 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x132 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":40:18)
    auto x133 = x132 - x117;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement2/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x134 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x134 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":41:17)
    auto x135 = x134 - x119;
    // loc("cirgen/components/bytes.cpp":42:19)
    auto x136 = x133 - x87;
    // loc("cirgen/components/bytes.cpp":42:7)
    auto x137 = x133 * x136;
    // loc("cirgen/components/bytes.cpp":42:7)
    if (x137 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
    // loc("cirgen/components/bytes.cpp":43:19)
    auto x138 = x135 + x85;
    // loc("cirgen/components/bytes.cpp":43:7)
    auto x139 = x133 * x138;
    // loc("cirgen/components/bytes.cpp":43:7)
    if (x139 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
    // loc("cirgen/components/bytes.cpp":44:25)
    auto x140 = x135 - x84;
    // loc("cirgen/components/bytes.cpp":44:7)
    auto x141 = x136 * x140;
    // loc("cirgen/components/bytes.cpp":44:7)
    if (x141 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
    {
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x142 = x134 - x85;
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x143 = (x142 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":31:16)
      auto x144 = x87 - x143;
      if (x144 != 0) {
        // loc("cirgen/components/bytes.cpp":32:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x132);
          reg = x132;
        }
        // loc("cirgen/components/bytes.cpp":33:16)
        auto x145 = x134 + x84;
        // loc("cirgen/components/bytes.cpp":33:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x145);
          reg = x145;
        }
      }
      if (x143 != 0) {
        // loc("cirgen/components/bytes.cpp":36:17)
        auto x146 = x132 + x87;
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x146);
          reg = x146;
        }
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement3/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x147 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x147 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":40:18)
    auto x148 = x147 - x132;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement3/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x149 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x149 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":41:17)
    auto x150 = x149 - x134;
    // loc("cirgen/components/bytes.cpp":42:19)
    auto x151 = x148 - x87;
    // loc("cirgen/components/bytes.cpp":42:7)
    auto x152 = x148 * x151;
    // loc("cirgen/components/bytes.cpp":42:7)
    if (x152 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
    // loc("cirgen/components/bytes.cpp":43:19)
    auto x153 = x150 + x85;
    // loc("cirgen/components/bytes.cpp":43:7)
    auto x154 = x148 * x153;
    // loc("cirgen/components/bytes.cpp":43:7)
    if (x154 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
    // loc("cirgen/components/bytes.cpp":44:25)
    auto x155 = x150 - x84;
    // loc("cirgen/components/bytes.cpp":44:7)
    auto x156 = x151 * x155;
    // loc("cirgen/components/bytes.cpp":44:7)
    if (x156 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
    {
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x157 = x149 - x85;
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x158 = (x157 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":31:16)
      auto x159 = x87 - x158;
      if (x159 != 0) {
        // loc("cirgen/components/bytes.cpp":32:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x147);
          reg = x147;
        }
        // loc("cirgen/components/bytes.cpp":33:16)
        auto x160 = x149 + x84;
        // loc("cirgen/components/bytes.cpp":33:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x160);
          reg = x160;
        }
      }
      if (x158 != 0) {
        // loc("cirgen/components/bytes.cpp":36:17)
        auto x161 = x147 + x87;
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x161);
          reg = x161;
        }
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement4/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x162 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x162 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":40:18)
    auto x163 = x162 - x147;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x164 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x164 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":41:17)
    auto x165 = x164 - x149;
    // loc("cirgen/components/bytes.cpp":42:19)
    auto x166 = x163 - x87;
    // loc("cirgen/components/bytes.cpp":42:7)
    auto x167 = x163 * x166;
    // loc("cirgen/components/bytes.cpp":42:7)
    if (x167 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
    // loc("cirgen/components/bytes.cpp":43:19)
    auto x168 = x165 + x85;
    // loc("cirgen/components/bytes.cpp":43:7)
    auto x169 = x163 * x168;
    // loc("cirgen/components/bytes.cpp":43:7)
    if (x169 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
    // loc("cirgen/components/bytes.cpp":44:25)
    auto x170 = x165 - x84;
    // loc("cirgen/components/bytes.cpp":44:7)
    auto x171 = x166 * x170;
    // loc("cirgen/components/bytes.cpp":44:7)
    if (x171 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
    {
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x172 = x164 - x85;
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x173 = (x172 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":31:16)
      auto x174 = x87 - x173;
      if (x174 != 0) {
        // loc("cirgen/components/bytes.cpp":32:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x162);
          reg = x162;
        }
        // loc("cirgen/components/bytes.cpp":33:16)
        auto x175 = x164 + x84;
        // loc("cirgen/components/bytes.cpp":33:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x175);
          reg = x175;
        }
      }
      if (x173 != 0) {
        // loc("cirgen/components/bytes.cpp":36:17)
        auto x176 = x162 + x87;
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x176);
          reg = x176;
        }
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x177 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x177 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":40:18)
    auto x178 = x177 - x162;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x179 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x179 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":41:17)
    auto x180 = x179 - x164;
    // loc("cirgen/components/bytes.cpp":42:19)
    auto x181 = x178 - x87;
    // loc("cirgen/components/bytes.cpp":42:7)
    auto x182 = x178 * x181;
    // loc("cirgen/components/bytes.cpp":42:7)
    if (x182 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
    // loc("cirgen/components/bytes.cpp":43:19)
    auto x183 = x180 + x85;
    // loc("cirgen/components/bytes.cpp":43:7)
    auto x184 = x178 * x183;
    // loc("cirgen/components/bytes.cpp":43:7)
    if (x184 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
    // loc("cirgen/components/bytes.cpp":44:25)
    auto x185 = x180 - x84;
    // loc("cirgen/components/bytes.cpp":44:7)
    auto x186 = x181 * x185;
    // loc("cirgen/components/bytes.cpp":44:7)
    if (x186 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
    {
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x187 = x179 - x85;
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x188 = (x187 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":31:16)
      auto x189 = x87 - x188;
      if (x189 != 0) {
        // loc("cirgen/components/bytes.cpp":32:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x177);
          reg = x177;
        }
        // loc("cirgen/components/bytes.cpp":33:16)
        auto x190 = x179 + x84;
        // loc("cirgen/components/bytes.cpp":33:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x190);
          reg = x190;
        }
      }
      if (x188 != 0) {
        // loc("cirgen/components/bytes.cpp":36:17)
        auto x191 = x177 + x87;
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x191);
          reg = x191;
        }
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x192 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x192 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":40:18)
    auto x193 = x192 - x177;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x194 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x194 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":41:17)
    auto x195 = x194 - x179;
    // loc("cirgen/components/bytes.cpp":42:19)
    auto x196 = x193 - x87;
    // loc("cirgen/components/bytes.cpp":42:7)
    auto x197 = x193 * x196;
    // loc("cirgen/components/bytes.cpp":42:7)
    if (x197 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
    // loc("cirgen/components/bytes.cpp":43:19)
    auto x198 = x195 + x85;
    // loc("cirgen/components/bytes.cpp":43:7)
    auto x199 = x193 * x198;
    // loc("cirgen/components/bytes.cpp":43:7)
    if (x199 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
    // loc("cirgen/components/bytes.cpp":44:25)
    auto x200 = x195 - x84;
    // loc("cirgen/components/bytes.cpp":44:7)
    auto x201 = x196 * x200;
    // loc("cirgen/components/bytes.cpp":44:7)
    if (x201 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
    {
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x202 = x194 - x85;
      // loc("cirgen/components/bytes.cpp":30:20)
      auto x203 = (x202 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":31:16)
      auto x204 = x87 - x203;
      if (x204 != 0) {
        // loc("cirgen/components/bytes.cpp":32:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x192);
          reg = x192;
        }
        // loc("cirgen/components/bytes.cpp":33:16)
        auto x205 = x194 + x84;
        // loc("cirgen/components/bytes.cpp":33:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x205);
          reg = x205;
        }
      }
      if (x203 != 0) {
        // loc("cirgen/components/bytes.cpp":36:17)
        auto x206 = x192 + x87;
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x206);
          reg = x206;
        }
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x207 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x207 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":40:18)
    auto x208 = x207 - x192;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x209 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x209 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":41:17)
    auto x210 = x209 - x194;
    // loc("cirgen/components/bytes.cpp":42:19)
    auto x211 = x208 - x87;
    // loc("cirgen/components/bytes.cpp":42:7)
    auto x212 = x208 * x211;
    // loc("cirgen/components/bytes.cpp":42:7)
    if (x212 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
    // loc("cirgen/components/bytes.cpp":43:19)
    auto x213 = x210 + x85;
    // loc("cirgen/components/bytes.cpp":43:7)
    auto x214 = x208 * x213;
    // loc("cirgen/components/bytes.cpp":43:7)
    if (x214 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
    // loc("cirgen/components/bytes.cpp":44:25)
    auto x215 = x210 - x84;
    // loc("cirgen/components/bytes.cpp":44:7)
    auto x216 = x211 * x215;
    // loc("cirgen/components/bytes.cpp":44:7)
    if (x216 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
    if (x91 != 0) {
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":108:7)
      {
        auto& reg = args[2][50 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/bytes.cpp":109:7)
      {
        auto& reg = args[2][51 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
    }
    // loc("cirgen/components/bytes.cpp":112:16)
    auto x217 = x87 - x91;
    if (x217 != 0) {
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x218 = x209 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x219 = (x218 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x220 = x87 - x219;
        if (x220 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x207);
            reg = x207;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x221 = x209 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x221);
            reg = x221;
          }
        }
        if (x219 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x222 = x207 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x222);
            reg = x222;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x223 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x223 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x224 = x223 - x207;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x225 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x225 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x226 = x225 - x209;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x227 = x224 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x228 = x224 * x227;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x228 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x229 = x226 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x230 = x224 * x229;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x230 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x231 = x226 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x232 = x227 * x231;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x232 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x233 = x225 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x234 = (x233 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x235 = x87 - x234;
        if (x235 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x223);
            reg = x223;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x236 = x225 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x236);
            reg = x236;
          }
        }
        if (x234 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x237 = x223 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x237);
            reg = x237;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x238 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x238 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x239 = x238 - x223;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x240 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x240 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x241 = x240 - x225;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x242 = x239 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x243 = x239 * x242;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x243 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x244 = x241 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x245 = x239 * x244;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x245 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x246 = x241 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x247 = x242 * x246;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x247 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x248 = x240 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x249 = (x248 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x250 = x87 - x249;
        if (x250 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x238);
            reg = x238;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x251 = x240 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x251);
            reg = x251;
          }
        }
        if (x249 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x252 = x238 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x252);
            reg = x252;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x253 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x253 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x254 = x253 - x238;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x255 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x255 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x256 = x255 - x240;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x257 = x254 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x258 = x254 * x257;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x258 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x259 = x256 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x260 = x254 * x259;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x260 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x261 = x256 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x262 = x257 * x261;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x262 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x263 = x255 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x264 = (x263 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x265 = x87 - x264;
        if (x265 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x253);
            reg = x253;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x266 = x255 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x266);
            reg = x266;
          }
        }
        if (x264 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x267 = x253 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x267);
            reg = x267;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x268 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x268 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x269 = x268 - x253;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x270 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x270 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x271 = x270 - x255;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x272 = x269 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x273 = x269 * x272;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x273 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x274 = x271 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x275 = x269 * x274;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x275 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x276 = x271 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x277 = x272 * x276;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x277 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x278 = x270 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x279 = (x278 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x280 = x87 - x279;
        if (x280 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x268);
            reg = x268;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x281 = x270 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x281);
            reg = x281;
          }
        }
        if (x279 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x282 = x268 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x282);
            reg = x282;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x283 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x283 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x284 = x283 - x268;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x285 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x285 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x286 = x285 - x270;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x287 = x284 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x288 = x284 * x287;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x288 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x289 = x286 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x290 = x284 * x289;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x290 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x291 = x286 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x292 = x287 * x291;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x292 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x293 = x285 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x294 = (x293 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x295 = x87 - x294;
        if (x295 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x283);
            reg = x283;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x296 = x285 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x296);
            reg = x296;
          }
        }
        if (x294 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x297 = x283 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x297);
            reg = x297;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x298 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x298 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x299 = x298 - x283;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x300 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x300 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x301 = x300 - x285;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x302 = x299 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x303 = x299 * x302;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x303 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x304 = x301 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x305 = x299 * x304;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x305 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x306 = x301 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x307 = x302 * x306;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x307 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x308 = x300 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x309 = (x308 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x310 = x87 - x309;
        if (x310 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x298);
            reg = x298;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x311 = x300 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x311);
            reg = x311;
          }
        }
        if (x309 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x312 = x298 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x312);
            reg = x312;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x313 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x313 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x314 = x313 - x298;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x315 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x315 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x316 = x315 - x300;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x317 = x314 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x318 = x314 * x317;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x318 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x319 = x316 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x320 = x314 * x319;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x320 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x321 = x316 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x322 = x317 * x321;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x322 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x323 = x315 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x324 = (x323 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x325 = x87 - x324;
        if (x325 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x313);
            reg = x313;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x326 = x315 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x326);
            reg = x326;
          }
        }
        if (x324 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x327 = x313 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x327);
            reg = x327;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x328 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x328 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x329 = x328 - x313;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x330 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x330 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x331 = x330 - x315;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x332 = x329 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x333 = x329 * x332;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x333 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x334 = x331 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x335 = x329 * x334;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x335 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x336 = x331 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x337 = x332 * x336;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x337 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x338 = x330 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x339 = (x338 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x340 = x87 - x339;
        if (x340 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x328);
            reg = x328;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x341 = x330 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x341);
            reg = x341;
          }
        }
        if (x339 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x342 = x328 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x342);
            reg = x342;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement16/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x343 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x343 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x344 = x343 - x328;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement16/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x345 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x345 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x346 = x345 - x330;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x347 = x344 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x348 = x344 * x347;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x348 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x349 = x346 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x350 = x344 * x349;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x350 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x351 = x346 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x352 = x347 * x351;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x352 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x353 = x345 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x354 = (x353 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x355 = x87 - x354;
        if (x355 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x343);
            reg = x343;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x356 = x345 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x356);
            reg = x356;
          }
        }
        if (x354 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x357 = x343 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x357);
            reg = x357;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement17/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x358 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x358 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x359 = x358 - x343;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement17/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x360 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x360 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x361 = x360 - x345;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x362 = x359 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x363 = x359 * x362;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x363 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x364 = x361 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x365 = x359 * x364;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x365 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x366 = x361 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x367 = x362 * x366;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x367 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x368 = x360 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x369 = (x368 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x370 = x87 - x369;
        if (x370 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x358);
            reg = x358;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x371 = x360 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x371);
            reg = x371;
          }
        }
        if (x369 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x372 = x358 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x372);
            reg = x372;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement18/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x373 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x373 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x374 = x373 - x358;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement18/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x375 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x375 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x376 = x375 - x360;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x377 = x374 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x378 = x374 * x377;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x378 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x379 = x376 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x380 = x374 * x379;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x380 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x381 = x376 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x382 = x377 * x381;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x382 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x383 = x375 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x384 = (x383 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x385 = x87 - x384;
        if (x385 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x373);
            reg = x373;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x386 = x375 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x386);
            reg = x386;
          }
        }
        if (x384 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x387 = x373 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x387);
            reg = x387;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement19/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x388 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x388 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x389 = x388 - x373;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement19/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x390 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x390 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x391 = x390 - x375;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x392 = x389 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x393 = x389 * x392;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x393 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x394 = x391 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x395 = x389 * x394;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x395 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x396 = x391 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x397 = x392 * x396;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x397 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
      {
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x398 = x390 - x85;
        // loc("cirgen/components/bytes.cpp":30:20)
        auto x399 = (x398 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":31:16)
        auto x400 = x87 - x399;
        if (x400 != 0) {
          // loc("cirgen/components/bytes.cpp":32:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x388);
            reg = x388;
          }
          // loc("cirgen/components/bytes.cpp":33:16)
          auto x401 = x390 + x84;
          // loc("cirgen/components/bytes.cpp":33:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x401);
            reg = x401;
          }
        }
        if (x399 != 0) {
          // loc("cirgen/components/bytes.cpp":36:17)
          auto x402 = x388 + x87;
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x402);
            reg = x402;
          }
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x403 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x403 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":40:18)
      auto x404 = x403 - x388;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x405 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x405 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":41:17)
      auto x406 = x405 - x390;
      // loc("cirgen/components/bytes.cpp":42:19)
      auto x407 = x404 - x87;
      // loc("cirgen/components/bytes.cpp":42:7)
      auto x408 = x404 * x407;
      // loc("cirgen/components/bytes.cpp":42:7)
      if (x408 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:42");
      // loc("cirgen/components/bytes.cpp":43:19)
      auto x409 = x406 + x85;
      // loc("cirgen/components/bytes.cpp":43:7)
      auto x410 = x404 * x409;
      // loc("cirgen/components/bytes.cpp":43:7)
      if (x410 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:43");
      // loc("cirgen/components/bytes.cpp":44:25)
      auto x411 = x406 - x84;
      // loc("cirgen/components/bytes.cpp":44:7)
      auto x412 = x407 * x411;
      // loc("cirgen/components/bytes.cpp":44:7)
      if (x412 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:44");
    }
  }
  // loc("Top/Code/OneHot/Reg2"("./cirgen/components/mux.h":33:25))
  auto x413 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x413 != Fp::invalid());
  if (x413 != 0) {
    // loc("Top/Code/Mux/2/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
    auto x414 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x414 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":78:21)
      auto x415 = Fp(x414.asUInt32() & x83.asUInt32());
      // loc("cirgen/components/bytes.cpp":78:12)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x415);
        reg = x415;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":79:16))
    auto x416 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x416 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":79:11)
    auto x417 = x414 - x416;
    // loc("cirgen/components/bytes.cpp":79:10)
    auto x418 = x417 * x81;
    // loc("cirgen/components/bytes.cpp":83:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x418);
      reg = x418;
    }
    // loc("Top/Code/Mux/2/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
    auto x419 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x419 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":78:21)
      auto x420 = Fp(x419.asUInt32() & x83.asUInt32());
      // loc("cirgen/components/bytes.cpp":78:12)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x420);
        reg = x420;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("cirgen/components/bytes.cpp":79:16))
    auto x421 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x421 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":79:11)
    auto x422 = x419 - x421;
    // loc("cirgen/components/bytes.cpp":79:10)
    auto x423 = x422 * x81;
    // loc("cirgen/components/bytes.cpp":83:3)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x423);
      reg = x423;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("cirgen/components/bytes.cpp":74:10))
    auto x424 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x424 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("cirgen/components/bytes.cpp":74:10))
    auto x425 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x425 != Fp::invalid());
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x426 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x426 != Fp::invalid());
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x427 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x427 != Fp::invalid());
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][58 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x416);
      reg = x416;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][59 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x424);
      reg = x424;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][60 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x421);
      reg = x421;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][61 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x425);
      reg = x425;
    }
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x428 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x428 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x429 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x429 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x430 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x430 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x431 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x431 != Fp::invalid());
      host_args.at(0) = x427;
      host_args.at(1) = x428;
      host_args.at(2) = x429;
      host_args.at(3) = x430;
      host_args.at(4) = x431;
      host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x432 = args[2][58 * steps + ((cycle - 0) & mask)];
    assert(x432 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
    auto x433 = args[2][59 * steps + ((cycle - 0) & mask)];
    assert(x433 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
    auto x434 = args[2][60 * steps + ((cycle - 0) & mask)];
    assert(x434 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
    auto x435 = args[2][61 * steps + ((cycle - 0) & mask)];
    assert(x435 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":100:3)
    {
      auto& reg = args[2][55 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x427);
      reg = x427;
    }
    // loc("cirgen/components/ram.cpp":101:3)
    {
      auto& reg = args[2][56 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x426);
      reg = x426;
    }
    // loc("cirgen/components/ram.cpp":102:3)
    {
      auto& reg = args[2][57 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x87);
      reg = x87;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][58 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][59 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][60 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][61 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("Top/Code/Mux/2/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
    auto x436 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":78:21)
      auto x437 = Fp(x436.asUInt32() & x83.asUInt32());
      // loc("cirgen/components/bytes.cpp":78:12)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x437);
        reg = x437;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("cirgen/components/bytes.cpp":79:16))
    auto x438 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x438 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":79:11)
    auto x439 = x436 - x438;
    // loc("cirgen/components/bytes.cpp":79:10)
    auto x440 = x439 * x81;
    // loc("cirgen/components/bytes.cpp":83:3)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    // loc("Top/Code/Mux/2/Reg4"("./cirgen/compiler/edsl/component.h":81:27))
    auto x441 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x441 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":78:21)
      auto x442 = Fp(x441.asUInt32() & x83.asUInt32());
      // loc("cirgen/components/bytes.cpp":78:12)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x442);
        reg = x442;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":79:16))
    auto x443 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x443 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":79:11)
    auto x444 = x441 - x443;
    // loc("cirgen/components/bytes.cpp":79:10)
    auto x445 = x444 * x81;
    // loc("cirgen/components/bytes.cpp":83:3)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x445);
      reg = x445;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("cirgen/components/bytes.cpp":74:10))
    auto x446 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x446 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":74:10))
    auto x447 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x447 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":31:42)
    auto x448 = x427 + x87;
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][65 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x438);
      reg = x438;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][66 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x446);
      reg = x446;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][67 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x443);
      reg = x443;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][68 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x447);
      reg = x447;
    }
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x449 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x449 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x450 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x450 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x451 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x451 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x452 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x452 != Fp::invalid());
      host_args.at(0) = x448;
      host_args.at(1) = x449;
      host_args.at(2) = x450;
      host_args.at(3) = x451;
      host_args.at(4) = x452;
      host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x453 = args[2][65 * steps + ((cycle - 0) & mask)];
    assert(x453 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
    auto x454 = args[2][66 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
    auto x455 = args[2][67 * steps + ((cycle - 0) & mask)];
    assert(x455 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
    auto x456 = args[2][68 * steps + ((cycle - 0) & mask)];
    assert(x456 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":100:3)
    {
      auto& reg = args[2][62 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x448);
      reg = x448;
    }
    // loc("cirgen/components/ram.cpp":101:3)
    {
      auto& reg = args[2][63 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x426);
      reg = x426;
    }
    // loc("cirgen/components/ram.cpp":102:3)
    {
      auto& reg = args[2][64 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x87);
      reg = x87;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][65 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x453);
      reg = x453;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][66 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][67 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x455);
      reg = x455;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][68 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x456);
      reg = x456;
    }
    // loc("Top/Code/Mux/2/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
    auto x457 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":78:21)
      auto x458 = Fp(x457.asUInt32() & x83.asUInt32());
      // loc("cirgen/components/bytes.cpp":78:12)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x458);
        reg = x458;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":79:16))
    auto x459 = args[2][27 * steps + ((cycle - 0) & mask)];
    assert(x459 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":79:11)
    auto x460 = x457 - x459;
    // loc("cirgen/components/bytes.cpp":79:10)
    auto x461 = x460 * x81;
    // loc("cirgen/components/bytes.cpp":83:3)
    {
      auto& reg = args[2][28 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x461);
      reg = x461;
    }
    // loc("Top/Code/Mux/2/Reg6"("./cirgen/compiler/edsl/component.h":81:27))
    auto x462 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x462 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":78:21)
      auto x463 = Fp(x462.asUInt32() & x83.asUInt32());
      // loc("cirgen/components/bytes.cpp":78:12)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x463);
        reg = x463;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":79:16))
    auto x464 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x464 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":79:11)
    auto x465 = x462 - x464;
    // loc("cirgen/components/bytes.cpp":79:10)
    auto x466 = x465 * x81;
    // loc("cirgen/components/bytes.cpp":83:3)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x466);
      reg = x466;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":74:10))
    auto x467 = args[2][28 * steps + ((cycle - 0) & mask)];
    assert(x467 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":74:10))
    auto x468 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x468 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":31:42)
    auto x469 = x427 + x84;
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][72 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x459);
      reg = x459;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x467);
      reg = x467;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][74 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x464);
      reg = x464;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][75 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x470 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x470 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x471 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x471 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x472 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x472 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x473 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x473 != Fp::invalid());
      host_args.at(0) = x469;
      host_args.at(1) = x470;
      host_args.at(2) = x471;
      host_args.at(3) = x472;
      host_args.at(4) = x473;
      host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x474 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x474 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
    auto x475 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x475 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
    auto x476 = args[2][74 * steps + ((cycle - 0) & mask)];
    assert(x476 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
    auto x477 = args[2][75 * steps + ((cycle - 0) & mask)];
    assert(x477 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":100:3)
    {
      auto& reg = args[2][69 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x469);
      reg = x469;
    }
    // loc("cirgen/components/ram.cpp":101:3)
    {
      auto& reg = args[2][70 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x426);
      reg = x426;
    }
    // loc("cirgen/components/ram.cpp":102:3)
    {
      auto& reg = args[2][71 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x87);
      reg = x87;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][72 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x474);
      reg = x474;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x475);
      reg = x475;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][74 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x476);
      reg = x476;
    }
    // loc("cirgen/components/u32.cpp":24:5)
    {
      auto& reg = args[2][75 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x477);
      reg = x477;
    }
  }
  // loc("Top/Code/OneHot/Reg3"("./cirgen/components/mux.h":33:25))
  auto x478 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x478 != Fp::invalid());
  if (x478 != 0) {
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x479 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x479 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":10:23)
    auto x480 = x479 + x80;
    {
      // loc("cirgen/components/bytes.cpp":78:21)
      auto x481 = Fp(x480.asUInt32() & x83.asUInt32());
      // loc("cirgen/components/bytes.cpp":78:12)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x481);
        reg = x481;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
    auto x482 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x482 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":79:11)
    auto x483 = x480 - x482;
    // loc("cirgen/components/bytes.cpp":79:10)
    auto x484 = x483 * x81;
    {
      // loc("cirgen/components/bytes.cpp":78:21)
      auto x485 = Fp(x484.asUInt32() & x83.asUInt32());
      // loc("cirgen/components/bytes.cpp":78:12)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x485);
        reg = x485;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
    auto x486 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x486 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":79:11)
    auto x487 = x484 - x486;
    // loc("cirgen/components/bytes.cpp":79:10)
    auto x488 = x487 * x81;
    {
      // loc("cirgen/components/bytes.cpp":78:21)
      auto x489 = Fp(x488.asUInt32() & x83.asUInt32());
      // loc("cirgen/components/bytes.cpp":78:12)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x489);
        reg = x489;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
    auto x490 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x490 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":79:11)
    auto x491 = x488 - x490;
    // loc("cirgen/components/bytes.cpp":79:10)
    auto x492 = x491 * x81;
    {
      // loc("cirgen/circuit/rv32im/body.cpp":13:26)
      auto x493 = Fp(x492.asUInt32() & x79.asUInt32());
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x493);
        reg = x493;
      }
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x494 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x494 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":14:18)
    auto x495 = x492 - x494;
    // loc("cirgen/circuit/rv32im/body.cpp":14:17)
    auto x496 = x495 * x78;
    // loc("./cirgen/components/bits.h":53:23)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x496);
      reg = x496;
    }
    // loc("Top/Mux/3/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x497 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x497 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":18:23)
    auto x498 = x87 - x497;
    // loc("cirgen/circuit/rv32im/body.cpp":18:15)
    auto x499 = x497 * x498;
    // loc("cirgen/circuit/rv32im/body.cpp":18:3)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x499);
      reg = x499;
    }
    // loc("Top/Mux/3/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x500 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x500 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":19:17)
    auto x501 = x84 - x497;
    // loc("cirgen/circuit/rv32im/body.cpp":19:7)
    auto x502 = x500 * x501;
    // loc("cirgen/circuit/rv32im/body.cpp":19:7)
    if (x502 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
    // loc("cirgen/circuit/rv32im/body.cpp":39:3)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x77);
      reg = x77;
    }
    // loc("cirgen/circuit/rv32im/body.cpp":24:10)
    auto x503 = x486 * x82;
    // loc("cirgen/circuit/rv32im/body.cpp":23:10)
    auto x504 = x482 + x503;
    // loc("cirgen/circuit/rv32im/body.cpp":25:10)
    auto x505 = x490 * x76;
    // loc("cirgen/circuit/rv32im/body.cpp":23:10)
    auto x506 = x504 + x505;
    // loc("cirgen/circuit/rv32im/body.cpp":26:10)
    auto x507 = x494 * x75;
    // loc("cirgen/circuit/rv32im/body.cpp":23:10)
    auto x508 = x506 + x507;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x509 = x497 * x74;
    // loc("cirgen/circuit/rv32im/body.cpp":23:10)
    auto x510 = x508 + x509;
    // loc("cirgen/circuit/rv32im/body.cpp":23:10)
    auto x511 = x510 - x80;
    host_args.at(0) = x511;
    host(ctx, "log", "Reset: PC = 0x%x", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/Reg4"("./cirgen/components/mux.h":33:25))
  auto x512 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x512 != Fp::invalid());
  if (x512 != 0) {
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":74:10))
    auto x513 = args[2][10 * steps + ((cycle - 1) & mask)];
    assert(x513 != Fp::invalid());
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":74:10))
    auto x514 = args[2][11 * steps + ((cycle - 1) & mask)];
    assert(x514 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":24:10)
    auto x515 = x514 * x82;
    // loc("cirgen/circuit/rv32im/body.cpp":23:10)
    auto x516 = x513 + x515;
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":74:10))
    auto x517 = args[2][12 * steps + ((cycle - 1) & mask)];
    assert(x517 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":25:10)
    auto x518 = x517 * x76;
    // loc("cirgen/circuit/rv32im/body.cpp":23:10)
    auto x519 = x516 + x518;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x520 = args[2][72 * steps + ((cycle - 1) & mask)];
    assert(x520 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":26:10)
    auto x521 = x520 * x75;
    // loc("cirgen/circuit/rv32im/body.cpp":23:10)
    auto x522 = x519 + x521;
    // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x523 = args[2][73 * steps + ((cycle - 1) & mask)];
    assert(x523 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x524 = x523 * x74;
    // loc("cirgen/circuit/rv32im/body.cpp":23:10)
    auto x525 = x522 + x524;
    // loc("cirgen/circuit/rv32im/body.cpp":23:10)
    auto x526 = x525 - x80;
    {
      // loc("Top/Mux/4/Reg"("cirgen/circuit/rv32im/body.cpp":50:45))
      auto x527 = args[2][93 * steps + ((cycle - 1) & mask)];
      assert(x527 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":51:24)
      auto x528 = x527 - x77;
      // loc("cirgen/circuit/rv32im/body.cpp":51:24)
      auto x529 = (x528 == 0) ? Fp(1) : Fp(0);
      if (x529 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":53:29)
        auto x530 = x526 * x78;
        host_args.at(0) = x530;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x531 = host_outs.at(0);
        auto x532 = host_outs.at(1);
        auto x533 = host_outs.at(2);
        auto x534 = host_outs.at(3);
        // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x535 = args[0][0 * steps + ((cycle - 0) & mask)];
        assert(x535 != Fp::invalid());
        host_args.at(0) = x535;
        host_args.at(1) = x526;
        host_args.at(2) = x531;
        host_args.at(3) = x532;
        host_args.at(4) = x533;
        host_args.at(5) = x534;
        host(ctx, "log", "%u: BODY @%x: loaded %w", host_args.data(), 6, host_outs.data(), 0);
        host_args.at(0) = x526;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x531;
        host_args.at(1) = x532;
        host_args.at(2) = x533;
        host_args.at(3) = x534;
        host(ctx, "getMajor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x536 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":31:26)
          auto x537 = (x536 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x537);
            reg = x537;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x538 = x536 - x87;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x539 = (x538 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x539);
            reg = x539;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x540 = x536 - x84;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x541 = (x540 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x541);
            reg = x541;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x542 = x536 - x79;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x543 = (x542 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x543);
            reg = x543;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x544 = x536 - x80;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x545 = (x544 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x545);
            reg = x545;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x546 = x536 - x73;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x547 = (x546 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x547);
            reg = x547;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x548 = x536 - x72;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x549 = (x548 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x549);
            reg = x549;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x550 = x536 - x71;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x551 = (x550 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x551);
            reg = x551;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x552 = x536 - x70;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x553 = (x552 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x553);
            reg = x553;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x554 = x536 - x69;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x555 = (x554 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x555);
            reg = x555;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x556 = x536 - x68;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x557 = (x556 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x557);
            reg = x557;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x558 = x536 - x67;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x559 = (x558 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x559);
            reg = x559;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x560 = x536 - x66;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x561 = (x560 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x561);
            reg = x561;
          }
        }
        // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x562 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x562 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x563 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x563 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x564 = x563 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x565 = x562 + x564;
        // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x566 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x566 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x567 = x566 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x568 = x565 + x567;
        // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x569 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x569 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x570 = x569 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x571 = x568 + x570;
        // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x572 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x572 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x573 = x572 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x574 = x571 + x573;
        // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x575 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x575 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x576 = x575 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x577 = x574 + x576;
        // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x578 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x578 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x579 = x578 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x580 = x577 + x579;
        // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x581 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x581 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x582 = x581 * x70;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x583 = x580 + x582;
        // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x584 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x584 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x585 = x584 * x69;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x586 = x583 + x585;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x587 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x587 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x588 = x587 * x68;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x589 = x586 + x588;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x590 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x590 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x591 = x590 * x67;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x592 = x589 + x591;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x593 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x593 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x594 = x593 * x66;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x595 = x592 + x594;
        // loc("./cirgen/components/onehot.h":34:8)
        auto x596 = x595 - x536;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x596 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":60:20)
      auto x597 = x87 - x529;
      if (x597 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":61:47)
        auto x598 = x527 - x70;
        // loc("cirgen/circuit/rv32im/body.cpp":61:47)
        auto x599 = (x598 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/body.cpp":61:47)
        auto x600 = x87 - x599;
        if (x600 != 0) {
          // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x601 = args[0][0 * steps + ((cycle - 0) & mask)];
          assert(x601 != Fp::invalid());
          host_args.at(0) = x601;
          host_args.at(1) = x526;
          host_args.at(2) = x527;
          host(ctx, "log", "%u: BODY @%x: major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./cirgen/components/onehot.h":31:26)
          auto x602 = (x527 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x602);
            reg = x602;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x603 = x527 - x87;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x604 = (x603 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x604);
            reg = x604;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x605 = x527 - x84;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x606 = (x605 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x606);
            reg = x606;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x607 = x527 - x79;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x608 = (x607 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x608);
            reg = x608;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x609 = x527 - x80;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x610 = (x609 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x610);
            reg = x610;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x611 = x527 - x73;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x612 = (x611 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x612);
            reg = x612;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x613 = x527 - x72;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x614 = (x613 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x614);
            reg = x614;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x615 = x527 - x71;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x616 = (x615 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x616);
            reg = x616;
          }
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x599);
            reg = x599;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x617 = x527 - x69;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x618 = (x617 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x618);
            reg = x618;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x619 = x527 - x68;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x620 = (x619 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x620);
            reg = x620;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x621 = x527 - x67;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x622 = (x621 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x622);
            reg = x622;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x623 = x527 - x66;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x624 = (x623 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x624);
            reg = x624;
          }
        }
        // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x625 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x625 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x626 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x626 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x627 = x626 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x628 = x625 + x627;
        // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x629 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x629 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x630 = x629 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x631 = x628 + x630;
        // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x632 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x632 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x633 = x632 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x634 = x631 + x633;
        // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x635 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x635 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x636 = x635 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x637 = x634 + x636;
        // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x638 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x638 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x639 = x638 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x640 = x637 + x639;
        // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x641 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x641 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x642 = x641 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x643 = x640 + x642;
        // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x644 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x644 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x645 = x644 * x70;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x646 = x643 + x645;
        // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x647 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x647 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x648 = x647 * x69;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x649 = x646 + x648;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x650 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x650 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x651 = x650 * x68;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x652 = x649 + x651;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x653 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x653 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x654 = x653 * x67;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x655 = x652 + x654;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x656 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x656 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x657 = x656 * x66;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x658 = x655 + x657;
        // loc("./cirgen/components/onehot.h":34:8)
        auto x659 = x658 - x527;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x659 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg"("./cirgen/components/mux.h":33:25))
    auto x660 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x660 != Fp::invalid());
    if (x660 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x661 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x661 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":108:41)
      auto x662 = x526 * x78;
      {
        host_args.at(0) = x662;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x663 = host_outs.at(0);
        auto x664 = host_outs.at(1);
        auto x665 = host_outs.at(2);
        auto x666 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x663);
          reg = x663;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x664);
          reg = x664;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x665);
          reg = x665;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x666);
          reg = x666;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x667 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x668 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x669 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x670 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x670 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x662);
        reg = x662;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x661);
        reg = x661;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x667);
        reg = x667;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x668);
        reg = x668;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x669);
        reg = x669;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":7:16)
        auto x671 = Fp(x670.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":7:15)
        auto x672 = x671 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x672);
          reg = x672;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":8:17)
        auto x673 = Fp(x670.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":8:16)
        auto x674 = x673 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x674);
          reg = x674;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":9:16)
        auto x675 = Fp(x670.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":9:15)
        auto x676 = x675 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x676);
          reg = x676;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":10:16)
        auto x677 = Fp(x670.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":10:15)
        auto x678 = x677 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x678);
          reg = x678;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":11:17)
        auto x679 = Fp(x670.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x680 = x679 * x57;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x680);
          reg = x680;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x681 = Fp(x670.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x681);
          reg = x681;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:17)
        auto x682 = Fp(x669.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x683 = x682 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x683);
          reg = x683;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:18)
        auto x684 = Fp(x669.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:17)
        auto x685 = x684 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x685);
          reg = x685;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x686 = Fp(x669.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x687 = x686 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x687);
          reg = x687;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:18)
        auto x688 = Fp(x669.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x689 = x688 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x689);
          reg = x689;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:18)
        auto x690 = Fp(x669.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x690);
          reg = x690;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x691 = Fp(x668.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:16)
        auto x692 = x691 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x692);
          reg = x692;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:19)
        auto x693 = Fp(x668.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:18)
        auto x694 = x693 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x694);
          reg = x694;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:20)
        auto x695 = Fp(x668.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:19)
        auto x696 = x695 * x59;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x696);
          reg = x696;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:17)
        auto x697 = Fp(x668.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":21:16)
        auto x698 = x697 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x698);
          reg = x698;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x699 = Fp(x668.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x699);
          reg = x699;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:16)
        auto x700 = Fp(x667.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:15)
        auto x701 = x700 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x701);
          reg = x701;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:18)
        auto x702 = Fp(x667.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x702);
          reg = x702;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x703 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x703 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x704 = x703 * x56;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x705 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x705 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x706 = x705 * x60;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x707 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x707 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:25)
      auto x708 = x707 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x709 = x706 + x708;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x710 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x710 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:39)
      auto x711 = x710 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x712 = x709 + x711;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x713 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x713 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x714 = x712 + x713;
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x715 = x704 + x714;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x716 = x715 * x84;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x717 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x717 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x718 = x716 + x717;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      auto x719 = x670 - x718;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      if (x719 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:26");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x720 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x720 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x721 = x720 * x70;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x722 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x722 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:37)
      auto x723 = x722 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x724 = x721 + x723;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x725 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x725 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x726 = x724 + x725;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x727 = x726 * x60;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x728 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x728 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:69)
      auto x729 = x728 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x730 = x727 + x729;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x731 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x731 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x732 = x730 + x731;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      auto x733 = x669 - x732;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      if (x733 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:27");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x734 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x734 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x735 = x734 * x65;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x736 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x736 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x737 = x736 * x80;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x738 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x738 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x739 = x737 + x738;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:36)
      auto x740 = x739 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x741 = x735 + x740;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x742 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x742 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:53)
      auto x743 = x742 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x744 = x741 + x743;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x745 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x745 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x746 = x744 + x745;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      auto x747 = x668 - x746;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      if (x747 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:28");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x748 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x748 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x749 = x748 * x65;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x750 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x750 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x751 = x749 + x750;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      auto x752 = x667 - x751;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      if (x752 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:29");
      {
        host_args.at(0) = x667;
        host_args.at(1) = x668;
        host_args.at(2) = x669;
        host_args.at(3) = x670;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x753 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":31:26)
          auto x754 = (x753 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x754);
            reg = x754;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x755 = x753 - x87;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x756 = (x755 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x756);
            reg = x756;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x757 = x753 - x84;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x758 = (x757 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x758);
            reg = x758;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x759 = x753 - x79;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x760 = (x759 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x760);
            reg = x760;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x761 = x753 - x80;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x762 = (x761 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x762);
            reg = x762;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x763 = x753 - x73;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x764 = (x763 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x764);
            reg = x764;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x765 = x753 - x72;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x766 = (x765 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x766);
            reg = x766;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x767 = x753 - x71;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x768 = (x767 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x768);
            reg = x768;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x769 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x769 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x770 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x770 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x771 = x770 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x772 = x769 + x771;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x773 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x773 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x774 = x773 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x775 = x772 + x774;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x776 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x776 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x777 = x776 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x778 = x775 + x777;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x779 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x779 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x780 = x779 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x781 = x778 + x780;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x782 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x782 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x783 = x782 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x784 = x781 + x783;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x785 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x785 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x786 = x785 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x787 = x784 + x786;
        // loc("./cirgen/components/onehot.h":34:8)
        auto x788 = x787 - x753;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x788 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
      }
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":37:68))
        auto x789 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x789 != Fp::invalid());
        if (x789 != 0) {
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":21:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
        auto x790 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x790 != Fp::invalid());
        if (x790 != 0) {
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":39:69))
        auto x791 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x791 != Fp::invalid());
        if (x791 != 0) {
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":41:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
        auto x792 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x792 != Fp::invalid());
        if (x792 != 0) {
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":36:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
        auto x793 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x793 != Fp::invalid());
        if (x793 != 0) {
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":31:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":42:68))
        auto x794 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x794 != Fp::invalid());
        if (x794 != 0) {
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
        auto x795 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x795 != Fp::invalid());
        if (x795 != 0) {
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
        auto x796 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x796 != Fp::invalid());
        if (x796 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x797 = x710 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x798 = x713 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x799 = x797 + x798;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x800 = x717 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x801 = x800 + x726;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x802 = x799 + x801;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x803 = x703 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x804 = x705 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x805 = x803 + x804;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x806 = x805 + x707;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x807 = x703 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x802);
            reg = x802;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x806);
            reg = x806;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x807);
            reg = x807;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x807);
            reg = x807;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":21:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x808 = x728 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:26)
      auto x809 = x731 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x810 = x808 + x809;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x811 = x810 + x734;
      // loc("cirgen/circuit/rv32im/compute.cpp":130:39)
      auto x812 = x811 + x49;
      {
        host_args.at(0) = x812;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x813 = host_outs.at(0);
        auto x814 = host_outs.at(1);
        auto x815 = host_outs.at(2);
        auto x816 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x813);
          reg = x813;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x814);
          reg = x814;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x815);
          reg = x815;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x816);
          reg = x816;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x817 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x817 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x818 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x819 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x820 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x820 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x812);
        reg = x812;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x661);
        reg = x661;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x817);
        reg = x817;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x818);
        reg = x818;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x819);
        reg = x819;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x820);
        reg = x820;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x821 = x717 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x822 = x821 + x726;
      // loc("cirgen/circuit/rv32im/compute.cpp":131:39)
      auto x823 = x822 + x49;
      {
        host_args.at(0) = x823;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x824 = host_outs.at(0);
        auto x825 = host_outs.at(1);
        auto x826 = host_outs.at(2);
        auto x827 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x824);
          reg = x824;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x825);
          reg = x825;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x826);
          reg = x826;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x827);
          reg = x827;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x828 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x828 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x829 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x829 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x830 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x831 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x831 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x823);
        reg = x823;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x661);
        reg = x661;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x828);
        reg = x828;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x829);
        reg = x829;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x830);
        reg = x830;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x831);
        reg = x831;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x832 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x833 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x833 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x834 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x834 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x835 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x835 != Fp::invalid());
      host_args.at(0) = x832;
      host_args.at(1) = x833;
      host_args.at(2) = x834;
      host_args.at(3) = x835;
      host_args.at(4) = x811;
      host_args.at(5) = x817;
      host_args.at(6) = x818;
      host_args.at(7) = x819;
      host_args.at(8) = x820;
      host_args.at(9) = x822;
      host_args.at(10) = x828;
      host_args.at(11) = x829;
      host_args.at(12) = x830;
      host_args.at(13) = x831;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x836 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x836 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":141:17)
      auto x837 = x87 - x836;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x838 = x837 * x817;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x839 = x837 * x818;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x840 = x837 * x819;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x841 = x837 * x820;
      // loc("cirgen/circuit/rv32im/body.cpp":31:52)
      auto x842 = x523 * x80;
      // loc("cirgen/circuit/rv32im/body.cpp":31:41)
      auto x843 = x520 + x842;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x844 = x513 - x80;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x845 = x836 * x844;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x846 = x836 * x514;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x847 = x836 * x517;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x848 = x836 * x843;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x849 = x838 + x845;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x850 = x839 + x846;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x851 = x840 + x847;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x852 = x841 + x848;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x853 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x853 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":143:17)
      auto x854 = x87 - x853;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x855 = x854 * x828;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x856 = x854 * x829;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x857 = x854 * x830;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x858 = x854 * x831;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x859 = x853 * x832;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x860 = x853 * x833;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x861 = x853 * x834;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x862 = x853 * x835;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x863 = x855 + x859;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x864 = x856 + x860;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x865 = x857 + x861;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x866 = x858 + x862;
      host_args.at(0) = x849;
      host_args.at(1) = x850;
      host_args.at(2) = x851;
      host_args.at(3) = x852;
      host_args.at(4) = x863;
      host_args.at(5) = x864;
      host_args.at(6) = x865;
      host_args.at(7) = x866;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x867 = Fp(x852.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x868 = x867 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x868);
          reg = x868;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x869 = Fp(x852.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x870 = x869 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x870);
          reg = x870;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x871 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x871 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x872 = x871 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x873 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x873 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x874 = x873 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x875 = x872 + x874;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x876 = x852 - x875;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x876 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x877 = Fp(x866.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x878 = x877 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x878);
          reg = x878;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x879 = Fp(x866.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x880 = x879 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x880);
          reg = x880;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x881 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x881 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x882 = x881 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x883 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x883 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x884 = x883 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x885 = x882 + x884;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x886 = x866 - x885;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x886 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x863);
        reg = x863;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x864);
        reg = x864;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x865);
        reg = x865;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x866);
        reg = x866;
      }
      {
        // loc("cirgen/components/u32.cpp":103:20)
        auto x887 = Fp(x849.asUInt32() & x863.asUInt32());
        // loc("cirgen/components/u32.cpp":103:20)
        auto x888 = Fp(x850.asUInt32() & x864.asUInt32());
        // loc("cirgen/components/u32.cpp":103:20)
        auto x889 = Fp(x851.asUInt32() & x865.asUInt32());
        // loc("cirgen/components/u32.cpp":103:20)
        auto x890 = Fp(x852.asUInt32() & x866.asUInt32());
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x887);
          reg = x887;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x888);
          reg = x888;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x889);
          reg = x889;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x890);
          reg = x890;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x891 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x891 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x892 = x891 * x849;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x893 = x891 * x850;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x894 = x891 * x851;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x895 = x891 * x852;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x896 = x892 + x82;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x897 = x893 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x898 = x894 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x899 = x895 + x83;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x900 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x900 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x901 = x900 * x863;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x902 = x900 * x864;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x903 = x900 * x865;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x904 = x900 * x866;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x905 = x896 + x901;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x906 = x897 + x902;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x907 = x898 + x903;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x908 = x899 + x904;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":81:27))
      auto x909 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x910 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x911 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x912 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x913 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x913 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x914 = x909 * x910;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x915 = x909 * x911;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x916 = x909 * x912;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x917 = x909 * x913;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x918 = x905 + x914;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x919 = x906 + x915;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x920 = x907 + x916;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x921 = x908 + x917;
      // loc("cirgen/components/u32.cpp":136:29)
      auto x922 = x919 * x82;
      // loc("cirgen/components/u32.cpp":136:15)
      auto x923 = x918 + x922;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x924 = Fp(x923.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x924);
          reg = x924;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x925 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x925 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x926 = x923 - x925;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x927 = x926 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x928 = Fp(x927.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x928);
          reg = x928;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x929 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x929 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x930 = x927 - x929;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x931 = x930 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x931);
        reg = x931;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x932 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x932 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":138:16)
      auto x933 = x932 + x920;
      // loc("cirgen/components/u32.cpp":138:41)
      auto x934 = x921 * x82;
      // loc("cirgen/components/u32.cpp":138:16)
      auto x935 = x933 + x934;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x936 = Fp(x935.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x936);
          reg = x936;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x937 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x937 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x938 = x935 - x937;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x939 = x938 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x940 = Fp(x939.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x940);
          reg = x940;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x941 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x941 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x942 = x939 - x941;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x943 = x942 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x943);
        reg = x943;
      }
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x944 = Fp(x941.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x945 = x944 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x946 = Fp(x941.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x947 = x946 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x947);
          reg = x947;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x948 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x948 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x949 = x948 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x950 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x950 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x951 = x950 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x952 = x949 + x951;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x953 = x941 - x952;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x953 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      // loc("cirgen/circuit/rv32im/compute.cpp":65:23)
      auto x954 = x87 - x881;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:17)
      auto x955 = x871 * x954;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:34)
      auto x956 = x87 - x948;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:17)
      auto x957 = x955 * x956;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:45)
      auto x958 = x87 - x871;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:44)
      auto x959 = x958 * x881;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:44)
      auto x960 = x959 * x948;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:17)
      auto x961 = x957 + x960;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:3)
      {
        auto& reg = args[2][199 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x962 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x962 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":67:11)
      auto x963 = x962 + x948;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:27)
      auto x964 = x962 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:27)
      auto x965 = x964 * x948;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:11)
      auto x966 = x963 - x965;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x966);
        reg = x966;
      }
      // loc("cirgen/components/u32.cpp":127:26)
      auto x967 = x929 * x82;
      // loc("cirgen/components/u32.cpp":127:12)
      auto x968 = x925 + x967;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x969 = (x968 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x969);
          reg = x969;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x970 = inv(x968);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x970);
          reg = x970;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x971 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x971 != Fp::invalid());
      if (x971 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x968 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x972 = x87 - x971;
      if (x972 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x973 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x973 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x974 = x968 * x973;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x975 = x974 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x975 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("cirgen/components/u32.cpp":128:27)
      auto x976 = x941 * x82;
      // loc("cirgen/components/u32.cpp":128:13)
      auto x977 = x937 + x976;
      // loc("cirgen/components/u32.cpp":128:47)
      auto x978 = x972 * x76;
      // loc("cirgen/components/u32.cpp":128:13)
      auto x979 = x977 + x978;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x980 = (x979 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x980);
          reg = x980;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x981 = inv(x979);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x981);
          reg = x981;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x982 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x982 != Fp::invalid());
      if (x982 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x979 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x983 = x87 - x982;
      if (x983 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x984 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x984 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x985 = x979 * x984;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x986 = x985 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x986 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x987 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x988 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x988 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":93:10)
      auto x989 = x87 - x988;
      host_args.at(0) = x925;
      host_args.at(1) = x929;
      host_args.at(2) = x937;
      host_args.at(3) = x941;
      host_args.at(4) = x982;
      host_args.at(5) = x987;
      host_args.at(6) = x989;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x990 = x742 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:25)
      auto x991 = x745 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x992 = x990 + x991;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x993 = x992 + x748;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x994 = (x993 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x994);
          reg = x994;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x995 = inv(x993);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x995);
          reg = x995;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x996 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x996 != Fp::invalid());
      if (x996 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x993 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x997 = x87 - x996;
      if (x997 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x998 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x998 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x999 = x993 * x998;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x1000 = x999 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x1000 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":156:13)
      auto x1001 = x526 + x80;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":37:68))
      auto x1002 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x1002 != Fp::invalid());
      if (x1002 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
        auto x1003 = x750 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
        if (x1003 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:37");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
        if (x739 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:37");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
        if (x715 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:37");
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":21:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1004 = x1001 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1005 = Fp(x1004.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1005);
            reg = x1005;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1006 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1006 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1007 = x1004 - x1006;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1008 = x1007 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1009 = Fp(x1008.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1009);
            reg = x1009;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1010 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1010 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1011 = x1008 - x1010;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1012 = x1011 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1013 = Fp(x1012.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1013);
            reg = x1013;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1014 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1014 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1015 = x1012 - x1014;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1016 = x1015 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1017 = Fp(x1016.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1017);
            reg = x1017;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1018 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1018 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1019 = x1016 - x1018;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1020 = x1019 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1020);
          reg = x1020;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1021 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1021 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1022 = x87 - x1021;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1023 = x1021 * x1022;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1023);
          reg = x1023;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1024 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1024 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1025 = x84 - x1021;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1026 = x1024 * x1025;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1026 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1027 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1027 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1027);
          reg = x1027;
        }
        if (x997 != 0) {
          host_args.at(0) = x993;
          host_args.at(1) = x925;
          host_args.at(2) = x929;
          host_args.at(3) = x937;
          host_args.at(4) = x941;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
          auto x1028 = x993 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x925);
            reg = x925;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x929);
            reg = x929;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x937);
            reg = x937;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x941);
            reg = x941;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1029 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1029 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1030 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1030 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1031 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1031 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1032 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1032 != Fp::invalid());
            host_args.at(0) = x1028;
            host_args.at(1) = x1029;
            host_args.at(2) = x1030;
            host_args.at(3) = x1031;
            host_args.at(4) = x1032;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1033 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1033 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1034 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1034 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1035 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1035 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1036 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1036 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1028);
            reg = x1028;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1033);
            reg = x1033;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1034);
            reg = x1034;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1035);
            reg = x1035;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1036);
            reg = x1036;
          }
        }
        if (x996 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
      auto x1037 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1037 != Fp::invalid());
      if (x1037 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1038 = x750 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1038 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x739 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1039 = x715 - x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1039 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1040 = x1001 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1041 = Fp(x1040.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1041);
            reg = x1041;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1042 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1042 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1043 = x1040 - x1042;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1044 = x1043 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1045 = Fp(x1044.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1045);
            reg = x1045;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1046 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1046 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1047 = x1044 - x1046;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1048 = x1047 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1049 = Fp(x1048.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1049);
            reg = x1049;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1050 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1050 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1051 = x1048 - x1050;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1052 = x1051 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1053 = Fp(x1052.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1053);
            reg = x1053;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1054 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1054 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1055 = x1052 - x1054;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1056 = x1055 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1056);
          reg = x1056;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1057 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1057 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1058 = x87 - x1057;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1059 = x1057 * x1058;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1059);
          reg = x1059;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1060 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1060 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1061 = x84 - x1057;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1062 = x1060 * x1061;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1062 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1063 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1063 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1063);
          reg = x1063;
        }
        if (x997 != 0) {
          host_args.at(0) = x993;
          host_args.at(1) = x925;
          host_args.at(2) = x929;
          host_args.at(3) = x937;
          host_args.at(4) = x941;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
          auto x1064 = x993 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x925);
            reg = x925;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x929);
            reg = x929;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x937);
            reg = x937;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x941);
            reg = x941;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1065 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1065 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1066 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1066 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1067 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1067 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1068 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1068 != Fp::invalid());
            host_args.at(0) = x1064;
            host_args.at(1) = x1065;
            host_args.at(2) = x1066;
            host_args.at(3) = x1067;
            host_args.at(4) = x1068;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1069 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1069 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1070 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1070 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1071 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1071 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1072 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1072 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1064);
            reg = x1064;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1069);
            reg = x1069;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1070);
            reg = x1070;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1071);
            reg = x1071;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1072);
            reg = x1072;
          }
        }
        if (x996 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":39:69))
      auto x1073 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1073 != Fp::invalid());
      if (x1073 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        auto x1074 = x750 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        if (x1074 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        auto x1075 = x739 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        if (x1075 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        if (x715 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":41:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1076 = x1001 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1077 = Fp(x1076.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1077);
            reg = x1077;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1078 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1078 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1079 = x1076 - x1078;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1080 = x1079 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1081 = Fp(x1080.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1081);
            reg = x1081;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1082 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1082 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1083 = x1080 - x1082;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1084 = x1083 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1085 = Fp(x1084.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1085);
            reg = x1085;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1086 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1086 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1087 = x1084 - x1086;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1088 = x1087 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1089 = Fp(x1088.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1089);
            reg = x1089;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1090 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1090 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1091 = x1088 - x1090;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1092 = x1091 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1092);
          reg = x1092;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1093 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1093 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1094 = x87 - x1093;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1095 = x1093 * x1094;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1095);
          reg = x1095;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1096 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1096 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1097 = x84 - x1093;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1098 = x1096 * x1097;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1098 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1099 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1099 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1099);
          reg = x1099;
        }
        if (x997 != 0) {
          host_args.at(0) = x993;
          host_args.at(1) = x925;
          host_args.at(2) = x929;
          host_args.at(3) = x937;
          host_args.at(4) = x941;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
          auto x1100 = x993 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x925);
            reg = x925;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x929);
            reg = x929;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x937);
            reg = x937;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x941);
            reg = x941;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1101 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1101 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1102 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1102 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1103 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1103 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1104 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1104 != Fp::invalid());
            host_args.at(0) = x1100;
            host_args.at(1) = x1101;
            host_args.at(2) = x1102;
            host_args.at(3) = x1103;
            host_args.at(4) = x1104;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1105 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1105 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1106 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1106 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1107 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1107 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1108 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1108 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1100);
            reg = x1100;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1105);
            reg = x1105;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1106);
            reg = x1106;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1107);
            reg = x1107;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1108);
            reg = x1108;
          }
        }
        if (x996 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
      auto x1109 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1109 != Fp::invalid());
      if (x1109 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1110 = x750 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1110 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1111 = x739 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1111 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x715 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":36:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1112 = x1001 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1113 = Fp(x1112.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1113);
            reg = x1113;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1114 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1114 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1115 = x1112 - x1114;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1116 = x1115 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1117 = Fp(x1116.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1117);
            reg = x1117;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1118 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1118 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1119 = x1116 - x1118;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1120 = x1119 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1121 = Fp(x1120.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1121);
            reg = x1121;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1122 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1122 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1123 = x1120 - x1122;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1124 = x1123 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1125 = Fp(x1124.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1125);
            reg = x1125;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1126 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1126 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1127 = x1124 - x1126;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1128 = x1127 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1128);
          reg = x1128;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1129 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1129 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1130 = x87 - x1129;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1131 = x1129 * x1130;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1131);
          reg = x1131;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1132 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1132 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1133 = x84 - x1129;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1134 = x1132 * x1133;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1134 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1135 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1135 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1135);
          reg = x1135;
        }
        if (x997 != 0) {
          host_args.at(0) = x993;
          host_args.at(1) = x925;
          host_args.at(2) = x929;
          host_args.at(3) = x937;
          host_args.at(4) = x941;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
          auto x1136 = x993 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x925);
            reg = x925;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x929);
            reg = x929;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x937);
            reg = x937;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x941);
            reg = x941;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1137 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1137 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1138 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1138 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1139 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1139 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1140 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1140 != Fp::invalid());
            host_args.at(0) = x1136;
            host_args.at(1) = x1137;
            host_args.at(2) = x1138;
            host_args.at(3) = x1139;
            host_args.at(4) = x1140;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1141 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1141 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1142 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1142 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1143 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1143 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1144 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1144 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1136);
            reg = x1136;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1141);
            reg = x1141;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1142);
            reg = x1142;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1143);
            reg = x1143;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1144);
            reg = x1144;
          }
        }
        if (x996 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
      auto x1145 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1145 != Fp::invalid());
      if (x1145 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1146 = x750 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1146 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1147 = x739 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1147 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x715 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":31:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1148 = x1001 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1149 = Fp(x1148.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1149);
            reg = x1149;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1150 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1150 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1151 = x1148 - x1150;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1152 = x1151 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1153 = Fp(x1152.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1153);
            reg = x1153;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1154 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1154 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1155 = x1152 - x1154;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1156 = x1155 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1157 = Fp(x1156.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1157);
            reg = x1157;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1158 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1158 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1159 = x1156 - x1158;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1160 = x1159 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1161 = Fp(x1160.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1161);
            reg = x1161;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1162 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1162 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1163 = x1160 - x1162;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1164 = x1163 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1164);
          reg = x1164;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1165 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1165 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1166 = x87 - x1165;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1167 = x1165 * x1166;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1167);
          reg = x1167;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1168 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1168 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1169 = x84 - x1165;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1170 = x1168 * x1169;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1170 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1171 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1171 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1171);
          reg = x1171;
        }
        if (x997 != 0) {
          host_args.at(0) = x993;
          host_args.at(1) = x925;
          host_args.at(2) = x929;
          host_args.at(3) = x937;
          host_args.at(4) = x941;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
          auto x1172 = x993 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x925);
            reg = x925;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x929);
            reg = x929;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x937);
            reg = x937;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x941);
            reg = x941;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1173 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1173 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1174 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1174 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1175 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1175 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1176 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1176 != Fp::invalid());
            host_args.at(0) = x1172;
            host_args.at(1) = x1173;
            host_args.at(2) = x1174;
            host_args.at(3) = x1175;
            host_args.at(4) = x1176;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1177 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1177 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1178 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1178 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1179 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1179 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1180 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1180 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1172);
            reg = x1172;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1177);
            reg = x1177;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1178);
            reg = x1178;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1179);
            reg = x1179;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1180);
            reg = x1180;
          }
        }
        if (x996 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":42:68))
      auto x1181 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1181 != Fp::invalid());
      if (x1181 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        auto x1182 = x750 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        if (x1182 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        auto x1183 = x739 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        if (x1183 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        if (x715 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1184 = x1001 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1185 = Fp(x1184.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1185);
            reg = x1185;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1186 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1186 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1187 = x1184 - x1186;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1188 = x1187 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1189 = Fp(x1188.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1189);
            reg = x1189;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1190 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1190 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1191 = x1188 - x1190;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1192 = x1191 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1193 = Fp(x1192.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1193);
            reg = x1193;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1194 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1194 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1195 = x1192 - x1194;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1196 = x1195 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1197 = Fp(x1196.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1197);
            reg = x1197;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1198 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1198 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1199 = x1196 - x1198;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1200 = x1199 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1200);
          reg = x1200;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1201 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1201 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1202 = x87 - x1201;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1203 = x1201 * x1202;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1203);
          reg = x1203;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1204 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1204 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1205 = x84 - x1201;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1206 = x1204 * x1205;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1206 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1207 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1207 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1207);
          reg = x1207;
        }
        if (x997 != 0) {
          host_args.at(0) = x993;
          host_args.at(1) = x987;
          host_args.at(2) = x86;
          host_args.at(3) = x86;
          host_args.at(4) = x86;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
          auto x1208 = x993 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x987);
            reg = x987;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1209 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1209 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1210 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1210 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1211 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1211 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1212 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1212 != Fp::invalid());
            host_args.at(0) = x1208;
            host_args.at(1) = x1209;
            host_args.at(2) = x1210;
            host_args.at(3) = x1211;
            host_args.at(4) = x1212;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1213 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1213 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1214 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1214 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1215 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1215 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1216 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1216 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1208);
            reg = x1208;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1213);
            reg = x1213;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1214);
            reg = x1214;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1215);
            reg = x1215;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1216);
            reg = x1216;
          }
        }
        if (x996 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
      auto x1217 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1217 != Fp::invalid());
      if (x1217 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1218 = x750 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1218 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1219 = x739 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1219 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x715 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1220 = x1001 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1221 = Fp(x1220.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1221);
            reg = x1221;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1222 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1222 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1223 = x1220 - x1222;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1224 = x1223 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1225 = Fp(x1224.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1225);
            reg = x1225;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1226 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1226 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1227 = x1224 - x1226;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1228 = x1227 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1229 = Fp(x1228.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1229);
            reg = x1229;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1230 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1230 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1231 = x1228 - x1230;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1232 = x1231 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1233 = Fp(x1232.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1233);
            reg = x1233;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1234 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1234 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1235 = x1232 - x1234;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1236 = x1235 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1236);
          reg = x1236;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1237 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1237 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1238 = x87 - x1237;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1239 = x1237 * x1238;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1239);
          reg = x1239;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1240 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1240 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1241 = x84 - x1237;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1242 = x1240 * x1241;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1242 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1243 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1243 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1243);
          reg = x1243;
        }
        if (x997 != 0) {
          host_args.at(0) = x993;
          host_args.at(1) = x989;
          host_args.at(2) = x86;
          host_args.at(3) = x86;
          host_args.at(4) = x86;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
          auto x1244 = x993 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x989);
            reg = x989;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1245 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1245 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1246 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1246 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1247 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1247 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1248 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1248 != Fp::invalid());
            host_args.at(0) = x1244;
            host_args.at(1) = x1245;
            host_args.at(2) = x1246;
            host_args.at(3) = x1247;
            host_args.at(4) = x1248;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1249 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1249 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1250 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1250 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1251 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1251 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1252 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1252 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1244);
            reg = x1244;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1249);
            reg = x1249;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1250);
            reg = x1250;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1251);
            reg = x1251;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1252);
            reg = x1252;
          }
        }
        if (x996 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
      auto x1253 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1253 != Fp::invalid());
      if (x1253 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1254 = x750 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1254 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x739 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1255 = x710 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x1256 = x713 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1257 = x1255 + x1256;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1258 = x1257 + x822;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1259 = x703 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x1260 = x705 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1261 = x1259 + x1260;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1262 = x1261 + x707;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x1263 = x703 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1258);
          reg = x1258;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1262);
          reg = x1262;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1263);
          reg = x1263;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1263);
          reg = x1263;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":21:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1264 = x1001 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1265 = Fp(x1264.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1265);
            reg = x1265;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1266 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1266 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1267 = x1264 - x1266;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1268 = x1267 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1269 = Fp(x1268.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1269);
            reg = x1269;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1270 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1270 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1271 = x1268 - x1270;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1272 = x1271 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1273 = Fp(x1272.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1273);
            reg = x1273;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1274 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1274 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1275 = x1272 - x1274;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1276 = x1275 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1277 = Fp(x1276.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1277);
            reg = x1277;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1278 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1278 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1279 = x1276 - x1278;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1280 = x1279 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1280);
          reg = x1280;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1281 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1281 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1282 = x87 - x1281;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1283 = x1281 * x1282;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1283);
          reg = x1283;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1284 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1284 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1285 = x84 - x1281;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1286 = x1284 * x1285;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1286 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1287 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1287 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1287);
          reg = x1287;
        }
        if (x997 != 0) {
          host_args.at(0) = x993;
          host_args.at(1) = x925;
          host_args.at(2) = x929;
          host_args.at(3) = x937;
          host_args.at(4) = x941;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
          auto x1288 = x993 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x925);
            reg = x925;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x929);
            reg = x929;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x937);
            reg = x937;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x941);
            reg = x941;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1289 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1289 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1290 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1290 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1291 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1291 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1292 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1292 != Fp::invalid());
            host_args.at(0) = x1288;
            host_args.at(1) = x1289;
            host_args.at(2) = x1290;
            host_args.at(3) = x1291;
            host_args.at(4) = x1292;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1293 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1293 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1294 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1294 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1295 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1295 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1296 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1296 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1288);
            reg = x1288;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1293);
            reg = x1293;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1294);
            reg = x1294;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1295);
            reg = x1295;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1296);
            reg = x1296;
          }
        }
        if (x996 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/components/mux.h":33:25))
    auto x1297 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x1297 != Fp::invalid());
    if (x1297 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1298 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x1298 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":108:41)
      auto x1299 = x526 * x78;
      {
        host_args.at(0) = x1299;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1300 = host_outs.at(0);
        auto x1301 = host_outs.at(1);
        auto x1302 = host_outs.at(2);
        auto x1303 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1300);
          reg = x1300;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1301);
          reg = x1301;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1302);
          reg = x1302;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1303);
          reg = x1303;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1304 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x1304 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1305 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x1305 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1306 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x1306 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1307 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x1307 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1299);
        reg = x1299;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1298);
        reg = x1298;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1304);
        reg = x1304;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1305);
        reg = x1305;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1306);
        reg = x1306;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1307);
        reg = x1307;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":7:16)
        auto x1308 = Fp(x1307.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":7:15)
        auto x1309 = x1308 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1309);
          reg = x1309;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":8:17)
        auto x1310 = Fp(x1307.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":8:16)
        auto x1311 = x1310 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1311);
          reg = x1311;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":9:16)
        auto x1312 = Fp(x1307.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":9:15)
        auto x1313 = x1312 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1313);
          reg = x1313;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":10:16)
        auto x1314 = Fp(x1307.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":10:15)
        auto x1315 = x1314 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1315);
          reg = x1315;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":11:17)
        auto x1316 = Fp(x1307.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1317 = x1316 * x57;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1317);
          reg = x1317;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1318 = Fp(x1307.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1318);
          reg = x1318;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:17)
        auto x1319 = Fp(x1306.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1320 = x1319 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1320);
          reg = x1320;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:18)
        auto x1321 = Fp(x1306.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:17)
        auto x1322 = x1321 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1322);
          reg = x1322;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1323 = Fp(x1306.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1324 = x1323 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1324);
          reg = x1324;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:18)
        auto x1325 = Fp(x1306.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1326 = x1325 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1326);
          reg = x1326;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:18)
        auto x1327 = Fp(x1306.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1327);
          reg = x1327;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1328 = Fp(x1305.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:16)
        auto x1329 = x1328 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1329);
          reg = x1329;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:19)
        auto x1330 = Fp(x1305.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:18)
        auto x1331 = x1330 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1331);
          reg = x1331;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:20)
        auto x1332 = Fp(x1305.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:19)
        auto x1333 = x1332 * x59;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1333);
          reg = x1333;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:17)
        auto x1334 = Fp(x1305.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":21:16)
        auto x1335 = x1334 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1335);
          reg = x1335;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1336 = Fp(x1305.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1336);
          reg = x1336;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:16)
        auto x1337 = Fp(x1304.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:15)
        auto x1338 = x1337 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1338);
          reg = x1338;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:18)
        auto x1339 = Fp(x1304.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1339);
          reg = x1339;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1340 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x1340 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1341 = x1340 * x56;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1342 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1342 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1343 = x1342 * x60;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1344 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x1344 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:25)
      auto x1345 = x1344 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1346 = x1343 + x1345;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1347 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x1347 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:39)
      auto x1348 = x1347 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1349 = x1346 + x1348;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1350 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1350 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1351 = x1349 + x1350;
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1352 = x1341 + x1351;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x1353 = x1352 * x84;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1354 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x1354 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x1355 = x1353 + x1354;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      auto x1356 = x1307 - x1355;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      if (x1356 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:26");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1357 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x1357 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x1358 = x1357 * x70;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1359 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1359 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:37)
      auto x1360 = x1359 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x1361 = x1358 + x1360;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1362 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x1362 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x1363 = x1361 + x1362;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x1364 = x1363 * x60;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1365 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1365 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:69)
      auto x1366 = x1365 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x1367 = x1364 + x1366;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1368 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1368 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x1369 = x1367 + x1368;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      auto x1370 = x1306 - x1369;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      if (x1370 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:27");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1371 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x1371 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x1372 = x1371 * x65;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1373 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x1373 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1374 = x1373 * x80;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1375 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1375 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1376 = x1374 + x1375;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:36)
      auto x1377 = x1376 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x1378 = x1372 + x1377;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1379 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1379 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:53)
      auto x1380 = x1379 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x1381 = x1378 + x1380;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1382 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1382 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x1383 = x1381 + x1382;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      auto x1384 = x1305 - x1383;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      if (x1384 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:28");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1385 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x1385 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x1386 = x1385 * x65;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x1387 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x1387 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x1388 = x1386 + x1387;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      auto x1389 = x1304 - x1388;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      if (x1389 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:29");
      {
        host_args.at(0) = x1304;
        host_args.at(1) = x1305;
        host_args.at(2) = x1306;
        host_args.at(3) = x1307;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1390 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1391 = (x1390 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1391);
            reg = x1391;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1392 = x1390 - x87;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1393 = (x1392 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1393);
            reg = x1393;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1394 = x1390 - x84;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1395 = (x1394 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1395);
            reg = x1395;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1396 = x1390 - x79;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1397 = (x1396 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1397);
            reg = x1397;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1398 = x1390 - x80;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1399 = (x1398 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1399);
            reg = x1399;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1400 = x1390 - x73;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1401 = (x1400 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1401);
            reg = x1401;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1402 = x1390 - x72;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1403 = (x1402 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1403);
            reg = x1403;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1404 = x1390 - x71;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x1405 = (x1404 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1405);
            reg = x1405;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1406 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x1406 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1407 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1407 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x1408 = x1407 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x1409 = x1406 + x1408;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1410 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1410 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x1411 = x1410 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x1412 = x1409 + x1411;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1413 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1413 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x1414 = x1413 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x1415 = x1412 + x1414;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1416 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1416 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x1417 = x1416 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x1418 = x1415 + x1417;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1419 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1419 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x1420 = x1419 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x1421 = x1418 + x1420;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1422 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1422 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x1423 = x1422 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x1424 = x1421 + x1423;
        // loc("./cirgen/components/onehot.h":34:8)
        auto x1425 = x1424 - x1390;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x1425 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
      }
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":45:69))
        auto x1426 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x1426 != Fp::invalid());
        if (x1426 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1427 = x1347 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x1428 = x1350 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1429 = x1427 + x1428;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x1430 = x1354 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x1431 = x1430 + x1363;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1432 = x1429 + x1431;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1433 = x1340 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x1434 = x1342 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1435 = x1433 + x1434;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1436 = x1435 + x1344;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x1437 = x1340 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1432);
            reg = x1432;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1436);
            reg = x1436;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1437);
            reg = x1437;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1437);
            reg = x1437;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":41:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
        auto x1438 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x1438 != Fp::invalid());
        if (x1438 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1439 = x1347 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x1440 = x1350 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1441 = x1439 + x1440;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x1442 = x1354 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x1443 = x1442 + x1363;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1444 = x1441 + x1443;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1445 = x1340 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x1446 = x1342 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1447 = x1445 + x1446;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1448 = x1447 + x1344;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x1449 = x1340 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1444);
            reg = x1444;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1448);
            reg = x1448;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1449);
            reg = x1449;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1449);
            reg = x1449;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":36:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
        auto x1450 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1450 != Fp::invalid());
        if (x1450 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1451 = x1347 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x1452 = x1350 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1453 = x1451 + x1452;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x1454 = x1354 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x1455 = x1454 + x1363;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1456 = x1453 + x1455;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1457 = x1340 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x1458 = x1342 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1459 = x1457 + x1458;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1460 = x1459 + x1344;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x1461 = x1340 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1456);
            reg = x1456;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1460);
            reg = x1460;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1461);
            reg = x1461;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1461);
            reg = x1461;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":31:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":48:68))
        auto x1462 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1462 != Fp::invalid());
        if (x1462 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1463 = x1347 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x1464 = x1350 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1465 = x1463 + x1464;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x1466 = x1354 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x1467 = x1466 + x1363;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1468 = x1465 + x1467;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1469 = x1340 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x1470 = x1342 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1471 = x1469 + x1470;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1472 = x1471 + x1344;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x1473 = x1340 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1468);
            reg = x1468;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1472);
            reg = x1472;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1473);
            reg = x1473;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1473);
            reg = x1473;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
        auto x1474 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1474 != Fp::invalid());
        if (x1474 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1475 = x1347 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x1476 = x1350 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1477 = x1475 + x1476;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x1478 = x1354 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x1479 = x1478 + x1363;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x1480 = x1477 + x1479;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1481 = x1340 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x1482 = x1342 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1483 = x1481 + x1482;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x1484 = x1483 + x1344;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x1485 = x1340 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1480);
            reg = x1480;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1484);
            reg = x1484;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1485);
            reg = x1485;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1485);
            reg = x1485;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
        auto x1486 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1486 != Fp::invalid());
        if (x1486 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1487 = x1347 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
          auto x1488 = x1350 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1489 = x1487 + x1488;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:36)
          auto x1490 = x1379 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1491 = x1489 + x1490;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:51)
          auto x1492 = x1382 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1493 = x1491 + x1492;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1494 = x1340 * x44;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
          auto x1495 = x1385 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1496 = x1494 + x1495;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
          auto x1497 = x1342 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1498 = x1496 + x1497;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1499 = x1498 + x1344;
          // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
          auto x1500 = x1340 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1493);
            reg = x1493;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1499);
            reg = x1499;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1500);
            reg = x1500;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1500);
            reg = x1500;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
        auto x1501 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1501 != Fp::invalid());
        if (x1501 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1502 = x1347 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
          auto x1503 = x1350 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1504 = x1502 + x1503;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:36)
          auto x1505 = x1379 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1506 = x1504 + x1505;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:51)
          auto x1507 = x1382 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1508 = x1506 + x1507;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1509 = x1340 * x44;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
          auto x1510 = x1385 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1511 = x1509 + x1510;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
          auto x1512 = x1342 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1513 = x1511 + x1512;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1514 = x1513 + x1344;
          // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
          auto x1515 = x1340 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1508);
            reg = x1508;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1514);
            reg = x1514;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1515);
            reg = x1515;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1515);
            reg = x1515;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
        auto x1516 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1516 != Fp::invalid());
        if (x1516 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1517 = x1347 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
          auto x1518 = x1350 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1519 = x1517 + x1518;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:36)
          auto x1520 = x1379 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1521 = x1519 + x1520;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:51)
          auto x1522 = x1382 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x1523 = x1521 + x1522;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1524 = x1340 * x44;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
          auto x1525 = x1385 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1526 = x1524 + x1525;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
          auto x1527 = x1342 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1528 = x1526 + x1527;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x1529 = x1528 + x1344;
          // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
          auto x1530 = x1340 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1523);
            reg = x1523;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1529);
            reg = x1529;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1530);
            reg = x1530;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1530);
            reg = x1530;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x1531 = x1365 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:26)
      auto x1532 = x1368 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x1533 = x1531 + x1532;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x1534 = x1533 + x1371;
      // loc("cirgen/circuit/rv32im/compute.cpp":130:39)
      auto x1535 = x1534 + x49;
      {
        host_args.at(0) = x1535;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1536 = host_outs.at(0);
        auto x1537 = host_outs.at(1);
        auto x1538 = host_outs.at(2);
        auto x1539 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1536);
          reg = x1536;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1537);
          reg = x1537;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1538);
          reg = x1538;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1539);
          reg = x1539;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1540 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x1540 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1541 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x1541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1542 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1543 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1543 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1535);
        reg = x1535;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1298);
        reg = x1298;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1540);
        reg = x1540;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1541);
        reg = x1541;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1542);
        reg = x1542;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1543);
        reg = x1543;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1544 = x1354 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1545 = x1544 + x1363;
      // loc("cirgen/circuit/rv32im/compute.cpp":131:39)
      auto x1546 = x1545 + x49;
      {
        host_args.at(0) = x1546;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1547 = host_outs.at(0);
        auto x1548 = host_outs.at(1);
        auto x1549 = host_outs.at(2);
        auto x1550 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1547);
          reg = x1547;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1548);
          reg = x1548;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1549);
          reg = x1549;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1550);
          reg = x1550;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1551 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x1551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1552 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x1552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1553 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1554 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1554 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1546);
        reg = x1546;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1298);
        reg = x1298;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1551);
        reg = x1551;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1552);
        reg = x1552;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1553);
        reg = x1553;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1554);
        reg = x1554;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1555 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1556 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1557 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1558 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1558 != Fp::invalid());
      host_args.at(0) = x1555;
      host_args.at(1) = x1556;
      host_args.at(2) = x1557;
      host_args.at(3) = x1558;
      host_args.at(4) = x1534;
      host_args.at(5) = x1540;
      host_args.at(6) = x1541;
      host_args.at(7) = x1542;
      host_args.at(8) = x1543;
      host_args.at(9) = x1545;
      host_args.at(10) = x1551;
      host_args.at(11) = x1552;
      host_args.at(12) = x1553;
      host_args.at(13) = x1554;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1559 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1559 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":141:17)
      auto x1560 = x87 - x1559;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1561 = x1560 * x1540;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1562 = x1560 * x1541;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1563 = x1560 * x1542;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1564 = x1560 * x1543;
      // loc("cirgen/circuit/rv32im/body.cpp":31:52)
      auto x1565 = x523 * x80;
      // loc("cirgen/circuit/rv32im/body.cpp":31:41)
      auto x1566 = x520 + x1565;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x1567 = x513 - x80;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1568 = x1559 * x1567;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1569 = x1559 * x514;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1570 = x1559 * x517;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1571 = x1559 * x1566;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1572 = x1561 + x1568;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1573 = x1562 + x1569;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1574 = x1563 + x1570;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1575 = x1564 + x1571;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1576 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1576 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":143:17)
      auto x1577 = x87 - x1576;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1578 = x1577 * x1551;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1579 = x1577 * x1552;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1580 = x1577 * x1553;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1581 = x1577 * x1554;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1582 = x1576 * x1555;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1583 = x1576 * x1556;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1584 = x1576 * x1557;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1585 = x1576 * x1558;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1586 = x1578 + x1582;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1587 = x1579 + x1583;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1588 = x1580 + x1584;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1589 = x1581 + x1585;
      host_args.at(0) = x1572;
      host_args.at(1) = x1573;
      host_args.at(2) = x1574;
      host_args.at(3) = x1575;
      host_args.at(4) = x1586;
      host_args.at(5) = x1587;
      host_args.at(6) = x1588;
      host_args.at(7) = x1589;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x1590 = Fp(x1575.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x1591 = x1590 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1591);
          reg = x1591;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x1592 = Fp(x1575.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x1593 = x1592 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1593);
          reg = x1593;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1594 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x1594 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x1595 = x1594 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x1596 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x1596 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x1597 = x1596 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x1598 = x1595 + x1597;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x1599 = x1575 - x1598;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x1599 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x1600 = Fp(x1589.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x1601 = x1600 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1601);
          reg = x1601;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x1602 = Fp(x1589.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x1603 = x1602 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1603);
          reg = x1603;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1604 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1604 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x1605 = x1604 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x1606 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x1606 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x1607 = x1606 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x1608 = x1605 + x1607;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x1609 = x1589 - x1608;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x1609 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1586);
        reg = x1586;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1587);
        reg = x1587;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1588);
        reg = x1588;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1589);
        reg = x1589;
      }
      {
        // loc("cirgen/components/u32.cpp":103:20)
        auto x1610 = Fp(x1572.asUInt32() & x1586.asUInt32());
        // loc("cirgen/components/u32.cpp":103:20)
        auto x1611 = Fp(x1573.asUInt32() & x1587.asUInt32());
        // loc("cirgen/components/u32.cpp":103:20)
        auto x1612 = Fp(x1574.asUInt32() & x1588.asUInt32());
        // loc("cirgen/components/u32.cpp":103:20)
        auto x1613 = Fp(x1575.asUInt32() & x1589.asUInt32());
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1610);
          reg = x1610;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1611);
          reg = x1611;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1612);
          reg = x1612;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1613);
          reg = x1613;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1614 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1614 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1615 = x1614 * x1572;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1616 = x1614 * x1573;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1617 = x1614 * x1574;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1618 = x1614 * x1575;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1619 = x1615 + x82;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1620 = x1616 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1621 = x1617 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1622 = x1618 + x83;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1623 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1623 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1624 = x1623 * x1586;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1625 = x1623 * x1587;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1626 = x1623 * x1588;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1627 = x1623 * x1589;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1628 = x1619 + x1624;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1629 = x1620 + x1625;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1630 = x1621 + x1626;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1631 = x1622 + x1627;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1632 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1633 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x1633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1634 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1635 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1636 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1636 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1637 = x1632 * x1633;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1638 = x1632 * x1634;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1639 = x1632 * x1635;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x1640 = x1632 * x1636;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1641 = x1628 + x1637;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1642 = x1629 + x1638;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1643 = x1630 + x1639;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x1644 = x1631 + x1640;
      // loc("cirgen/components/u32.cpp":136:29)
      auto x1645 = x1642 * x82;
      // loc("cirgen/components/u32.cpp":136:15)
      auto x1646 = x1641 + x1645;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x1647 = Fp(x1646.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1647);
          reg = x1647;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x1648 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1648 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x1649 = x1646 - x1648;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x1650 = x1649 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x1651 = Fp(x1650.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1651);
          reg = x1651;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x1652 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1652 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x1653 = x1650 - x1652;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x1654 = x1653 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1654);
        reg = x1654;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1655 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1655 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":138:16)
      auto x1656 = x1655 + x1643;
      // loc("cirgen/components/u32.cpp":138:41)
      auto x1657 = x1644 * x82;
      // loc("cirgen/components/u32.cpp":138:16)
      auto x1658 = x1656 + x1657;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x1659 = Fp(x1658.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1659);
          reg = x1659;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x1660 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1660 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x1661 = x1658 - x1660;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x1662 = x1661 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x1663 = Fp(x1662.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1663);
          reg = x1663;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x1664 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1664 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x1665 = x1662 - x1664;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x1666 = x1665 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1666);
        reg = x1666;
      }
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x1667 = Fp(x1664.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x1668 = x1667 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1668);
          reg = x1668;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x1669 = Fp(x1664.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x1670 = x1669 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1670);
          reg = x1670;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1671 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x1671 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x1672 = x1671 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x1673 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1673 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x1674 = x1673 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x1675 = x1672 + x1674;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x1676 = x1664 - x1675;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x1676 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      // loc("cirgen/circuit/rv32im/compute.cpp":65:23)
      auto x1677 = x87 - x1604;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:17)
      auto x1678 = x1594 * x1677;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:34)
      auto x1679 = x87 - x1671;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:17)
      auto x1680 = x1678 * x1679;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:45)
      auto x1681 = x87 - x1594;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:44)
      auto x1682 = x1681 * x1604;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:44)
      auto x1683 = x1682 * x1671;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:17)
      auto x1684 = x1680 + x1683;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:3)
      {
        auto& reg = args[2][199 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1684);
        reg = x1684;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x1685 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1685 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":67:11)
      auto x1686 = x1685 + x1671;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:27)
      auto x1687 = x1685 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:27)
      auto x1688 = x1687 * x1671;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:11)
      auto x1689 = x1686 - x1688;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1689);
        reg = x1689;
      }
      // loc("cirgen/components/u32.cpp":127:26)
      auto x1690 = x1652 * x82;
      // loc("cirgen/components/u32.cpp":127:12)
      auto x1691 = x1648 + x1690;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x1692 = (x1691 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1692);
          reg = x1692;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x1693 = inv(x1691);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1693);
          reg = x1693;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1694 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1694 != Fp::invalid());
      if (x1694 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x1691 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x1695 = x87 - x1694;
      if (x1695 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1696 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x1696 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x1697 = x1691 * x1696;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x1698 = x1697 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x1698 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("cirgen/components/u32.cpp":128:27)
      auto x1699 = x1664 * x82;
      // loc("cirgen/components/u32.cpp":128:13)
      auto x1700 = x1660 + x1699;
      // loc("cirgen/components/u32.cpp":128:47)
      auto x1701 = x1695 * x76;
      // loc("cirgen/components/u32.cpp":128:13)
      auto x1702 = x1700 + x1701;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x1703 = (x1702 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1703);
          reg = x1703;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x1704 = inv(x1702);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1704);
          reg = x1704;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1705 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x1705 != Fp::invalid());
      if (x1705 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x1702 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x1706 = x87 - x1705;
      if (x1706 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1707 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x1707 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x1708 = x1702 * x1707;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x1709 = x1708 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x1709 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1710 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1711 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1711 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":93:10)
      auto x1712 = x87 - x1711;
      host_args.at(0) = x1648;
      host_args.at(1) = x1652;
      host_args.at(2) = x1660;
      host_args.at(3) = x1664;
      host_args.at(4) = x1705;
      host_args.at(5) = x1710;
      host_args.at(6) = x1712;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1713 = x1379 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:25)
      auto x1714 = x1382 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1715 = x1713 + x1714;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1716 = x1715 + x1385;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x1717 = (x1716 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1717);
          reg = x1717;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x1718 = inv(x1716);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1718);
          reg = x1718;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x1719 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1719 != Fp::invalid());
      if (x1719 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x1716 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x1720 = x87 - x1719;
      if (x1720 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1721 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x1721 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x1722 = x1716 * x1721;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x1723 = x1722 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x1723 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":156:13)
      auto x1724 = x526 + x80;
      // loc("cirgen/components/u32.cpp":52:25)
      auto x1725 = x1556 * x82;
      // loc("cirgen/components/u32.cpp":52:13)
      auto x1726 = x1555 + x1725;
      // loc("cirgen/components/u32.cpp":52:49)
      auto x1727 = x1557 * x76;
      // loc("cirgen/components/u32.cpp":52:13)
      auto x1728 = x1726 + x1727;
      // loc("cirgen/components/u32.cpp":55:17)
      auto x1729 = x1558 * x48;
      // loc("cirgen/components/u32.cpp":55:16)
      auto x1730 = x1729 * x47;
      // loc("cirgen/components/u32.cpp":55:10)
      auto x1731 = x1728 + x1730;
      // loc("cirgen/circuit/rv32im/compute.cpp":157:14)
      auto x1732 = x526 + x1731;
      // loc("cirgen/circuit/rv32im/compute.cpp":164:13)
      auto x1733 = x1705 * x1732;
      // loc("cirgen/circuit/rv32im/compute.cpp":164:35)
      auto x1734 = x1706 * x1724;
      // loc("cirgen/circuit/rv32im/compute.cpp":164:13)
      auto x1735 = x1733 + x1734;
      // loc("cirgen/circuit/rv32im/compute.cpp":165:13)
      auto x1736 = x1705 * x1724;
      // loc("cirgen/circuit/rv32im/compute.cpp":165:34)
      auto x1737 = x1706 * x1732;
      // loc("cirgen/circuit/rv32im/compute.cpp":165:13)
      auto x1738 = x1736 + x1737;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x1739 = x1710 * x1732;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:36)
      auto x1740 = x87 - x1710;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:35)
      auto x1741 = x1740 * x1724;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x1742 = x1739 + x1741;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":45:69))
      auto x1743 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x1743 != Fp::invalid());
      if (x1743 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
        auto x1744 = x1387 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
        if (x1744 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
        auto x1745 = x1376 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
        if (x1745 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1746 = x1347 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x1747 = x1350 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1748 = x1746 + x1747;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1749 = x1748 + x1545;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1750 = x1340 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x1751 = x1342 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1752 = x1750 + x1751;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1753 = x1752 + x1344;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x1754 = x1340 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1749);
          reg = x1749;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1753);
          reg = x1753;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1754);
          reg = x1754;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1754);
          reg = x1754;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":41:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1755 = x1724 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1756 = Fp(x1755.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1756);
            reg = x1756;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1757 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1757 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1758 = x1755 - x1757;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1759 = x1758 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1760 = Fp(x1759.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1760);
            reg = x1760;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1761 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1761 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1762 = x1759 - x1761;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1763 = x1762 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1764 = Fp(x1763.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1764);
            reg = x1764;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1765 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1765 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1766 = x1763 - x1765;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1767 = x1766 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1768 = Fp(x1767.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1768);
            reg = x1768;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1769 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1769 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1770 = x1767 - x1769;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1771 = x1770 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1771);
          reg = x1771;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1772 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1772 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1773 = x87 - x1772;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1774 = x1772 * x1773;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1774);
          reg = x1774;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1775 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1775 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1776 = x84 - x1772;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1777 = x1775 * x1776;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1777 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1778 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1778 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1778);
          reg = x1778;
        }
        if (x1720 != 0) {
          host_args.at(0) = x1716;
          host_args.at(1) = x1648;
          host_args.at(2) = x1652;
          host_args.at(3) = x1660;
          host_args.at(4) = x1664;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
          auto x1779 = x1716 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1648);
            reg = x1648;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1652);
            reg = x1652;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1660);
            reg = x1660;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1664);
            reg = x1664;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1780 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1780 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1781 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1781 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1782 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1782 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1783 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1783 != Fp::invalid());
            host_args.at(0) = x1779;
            host_args.at(1) = x1780;
            host_args.at(2) = x1781;
            host_args.at(3) = x1782;
            host_args.at(4) = x1783;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1784 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1784 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1785 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1785 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1786 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1786 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1787 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1787 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1779);
            reg = x1779;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1784);
            reg = x1784;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1785);
            reg = x1785;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1786);
            reg = x1786;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1787);
            reg = x1787;
          }
        }
        if (x1719 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
      auto x1788 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1788 != Fp::invalid());
      if (x1788 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1789 = x1387 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1789 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1790 = x1376 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1791 = x1347 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x1792 = x1350 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1793 = x1791 + x1792;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1794 = x1793 + x1545;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1795 = x1340 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x1796 = x1342 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1797 = x1795 + x1796;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1798 = x1797 + x1344;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x1799 = x1340 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1794);
          reg = x1794;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1798);
          reg = x1798;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1799);
          reg = x1799;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1799);
          reg = x1799;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":36:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1800 = x1724 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1801 = Fp(x1800.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1801);
            reg = x1801;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1802 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1802 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1803 = x1800 - x1802;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1804 = x1803 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1805 = Fp(x1804.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1805);
            reg = x1805;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1806 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1806 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1807 = x1804 - x1806;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1808 = x1807 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1809 = Fp(x1808.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1809);
            reg = x1809;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1810 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1810 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1811 = x1808 - x1810;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1812 = x1811 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1813 = Fp(x1812.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1813);
            reg = x1813;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1814 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1814 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1815 = x1812 - x1814;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1816 = x1815 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1816);
          reg = x1816;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1817 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1817 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1818 = x87 - x1817;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1819 = x1817 * x1818;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1819);
          reg = x1819;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1820 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1820 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1821 = x84 - x1817;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1822 = x1820 * x1821;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1822 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1823 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1823 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1823);
          reg = x1823;
        }
        if (x1720 != 0) {
          host_args.at(0) = x1716;
          host_args.at(1) = x1648;
          host_args.at(2) = x1652;
          host_args.at(3) = x1660;
          host_args.at(4) = x1664;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
          auto x1824 = x1716 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1648);
            reg = x1648;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1652);
            reg = x1652;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1660);
            reg = x1660;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1664);
            reg = x1664;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1825 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1825 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1826 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1826 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1827 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1827 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1828 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1828 != Fp::invalid());
            host_args.at(0) = x1824;
            host_args.at(1) = x1825;
            host_args.at(2) = x1826;
            host_args.at(3) = x1827;
            host_args.at(4) = x1828;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1829 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1829 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1830 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1830 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1831 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1831 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1832 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1832 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1824);
            reg = x1824;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1829);
            reg = x1829;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1830);
            reg = x1830;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1831);
            reg = x1831;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1832);
            reg = x1832;
          }
        }
        if (x1719 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
      auto x1833 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1833 != Fp::invalid());
      if (x1833 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1834 = x1387 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1834 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1835 = x1376 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1835 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1836 = x1347 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x1837 = x1350 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1838 = x1836 + x1837;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1839 = x1838 + x1545;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1840 = x1340 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x1841 = x1342 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1842 = x1840 + x1841;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1843 = x1842 + x1344;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x1844 = x1340 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1839);
          reg = x1839;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1843);
          reg = x1843;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1844);
          reg = x1844;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1844);
          reg = x1844;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":31:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1845 = x1724 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1846 = Fp(x1845.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1846);
            reg = x1846;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1847 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1847 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1848 = x1845 - x1847;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1849 = x1848 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1850 = Fp(x1849.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1850);
            reg = x1850;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1851 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1851 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1852 = x1849 - x1851;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1853 = x1852 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1854 = Fp(x1853.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1855 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1855 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1856 = x1853 - x1855;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1857 = x1856 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1858 = Fp(x1857.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1858);
            reg = x1858;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1859 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1859 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1860 = x1857 - x1859;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1861 = x1860 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1861);
          reg = x1861;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1862 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1862 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1863 = x87 - x1862;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1864 = x1862 * x1863;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1864);
          reg = x1864;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1865 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1865 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1866 = x84 - x1862;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1867 = x1865 * x1866;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1867 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1868 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1868 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1868);
          reg = x1868;
        }
        if (x1720 != 0) {
          host_args.at(0) = x1716;
          host_args.at(1) = x1648;
          host_args.at(2) = x1652;
          host_args.at(3) = x1660;
          host_args.at(4) = x1664;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
          auto x1869 = x1716 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1648);
            reg = x1648;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1652);
            reg = x1652;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1660);
            reg = x1660;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1664);
            reg = x1664;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1870 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1870 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1871 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1871 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1872 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1872 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1873 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1873 != Fp::invalid());
            host_args.at(0) = x1869;
            host_args.at(1) = x1870;
            host_args.at(2) = x1871;
            host_args.at(3) = x1872;
            host_args.at(4) = x1873;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1874 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1874 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1875 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1875 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1876 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1876 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1877 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1877 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1869);
            reg = x1869;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1874);
            reg = x1874;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1875);
            reg = x1875;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1876);
            reg = x1876;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1877);
            reg = x1877;
          }
        }
        if (x1719 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":48:68))
      auto x1878 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1878 != Fp::invalid());
      if (x1878 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
        auto x1879 = x1387 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
        if (x1879 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
        auto x1880 = x1376 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
        if (x1880 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1881 = x1347 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x1882 = x1350 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1883 = x1881 + x1882;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1884 = x1883 + x1545;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1885 = x1340 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x1886 = x1342 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1887 = x1885 + x1886;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1888 = x1887 + x1344;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x1889 = x1340 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1884);
          reg = x1884;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1888);
          reg = x1888;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1889);
          reg = x1889;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1889);
          reg = x1889;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1890 = x1724 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1891 = Fp(x1890.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1891);
            reg = x1891;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1892 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1892 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1893 = x1890 - x1892;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1894 = x1893 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1895 = Fp(x1894.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1895);
            reg = x1895;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1896 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1896 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1897 = x1894 - x1896;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1898 = x1897 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1899 = Fp(x1898.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1899);
            reg = x1899;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1900 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1900 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1901 = x1898 - x1900;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1902 = x1901 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1903 = Fp(x1902.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1903);
            reg = x1903;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1904 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1904 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1905 = x1902 - x1904;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1906 = x1905 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1906);
          reg = x1906;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1907 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1907 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1908 = x87 - x1907;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1909 = x1907 * x1908;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1909);
          reg = x1909;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1910 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1910 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1911 = x84 - x1907;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1912 = x1910 * x1911;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1912 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1913 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1913 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1913);
          reg = x1913;
        }
        if (x1720 != 0) {
          host_args.at(0) = x1716;
          host_args.at(1) = x1710;
          host_args.at(2) = x86;
          host_args.at(3) = x86;
          host_args.at(4) = x86;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
          auto x1914 = x1716 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1915 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1915 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1916 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1916 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1917 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1917 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1918 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1918 != Fp::invalid());
            host_args.at(0) = x1914;
            host_args.at(1) = x1915;
            host_args.at(2) = x1916;
            host_args.at(3) = x1917;
            host_args.at(4) = x1918;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1919 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1919 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1920 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1920 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1921 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1921 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1922 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1922 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1914);
            reg = x1914;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1919);
            reg = x1919;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1920);
            reg = x1920;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1921);
            reg = x1921;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1922);
            reg = x1922;
          }
        }
        if (x1719 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
      auto x1923 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1923 != Fp::invalid());
      if (x1923 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1924 = x1387 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1924 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1925 = x1376 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1925 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1926 = x1347 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x1927 = x1350 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1928 = x1926 + x1927;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x1929 = x1928 + x1545;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1930 = x1340 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x1931 = x1342 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1932 = x1930 + x1931;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x1933 = x1932 + x1344;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x1934 = x1340 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1929);
          reg = x1929;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1933);
          reg = x1933;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1934);
          reg = x1934;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1934);
          reg = x1934;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1935 = x1724 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1936 = Fp(x1935.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1936);
            reg = x1936;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1937 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1937 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1938 = x1935 - x1937;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1939 = x1938 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1940 = Fp(x1939.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1940);
            reg = x1940;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1941 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1941 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1942 = x1939 - x1941;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1943 = x1942 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1944 = Fp(x1943.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1944);
            reg = x1944;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1945 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1945 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1946 = x1943 - x1945;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1947 = x1946 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1948 = Fp(x1947.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1948);
            reg = x1948;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1949 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1949 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1950 = x1947 - x1949;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1951 = x1950 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1951);
          reg = x1951;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1952 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1952 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x1953 = x87 - x1952;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x1954 = x1952 * x1953;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1954);
          reg = x1954;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x1955 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1955 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x1956 = x84 - x1952;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x1957 = x1955 * x1956;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x1957 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1958 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1958 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1958);
          reg = x1958;
        }
        if (x1720 != 0) {
          host_args.at(0) = x1716;
          host_args.at(1) = x1712;
          host_args.at(2) = x86;
          host_args.at(3) = x86;
          host_args.at(4) = x86;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
          auto x1959 = x1716 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1712);
            reg = x1712;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1960 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1960 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1961 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1961 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1962 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1962 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x1963 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1963 != Fp::invalid());
            host_args.at(0) = x1959;
            host_args.at(1) = x1960;
            host_args.at(2) = x1961;
            host_args.at(3) = x1962;
            host_args.at(4) = x1963;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1964 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1964 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1965 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1965 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1966 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1966 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x1967 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1967 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1959);
            reg = x1959;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1964);
            reg = x1964;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1965);
            reg = x1965;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1966);
            reg = x1966;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1967);
            reg = x1967;
          }
        }
        if (x1719 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
      auto x1968 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1968 != Fp::invalid());
      if (x1968 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1969 = x1387 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1969 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1376 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x1970 = x1347 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
        auto x1971 = x1350 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x1972 = x1970 + x1971;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x1973 = x1972 + x1713;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x1974 = x1973 + x1714;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x1975 = x1340 * x44;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
        auto x1976 = x1385 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x1977 = x1975 + x1976;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
        auto x1978 = x1342 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x1979 = x1977 + x1978;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x1980 = x1979 + x1344;
        // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
        auto x1981 = x1340 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1974);
          reg = x1974;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1980);
          reg = x1980;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1981);
          reg = x1981;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1981);
          reg = x1981;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x1982 = x1735 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1983 = Fp(x1982.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1983);
            reg = x1983;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1984 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1984 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1985 = x1982 - x1984;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1986 = x1985 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1987 = Fp(x1986.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1987);
            reg = x1987;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x1988 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1988 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1989 = x1986 - x1988;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1990 = x1989 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x1991 = Fp(x1990.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1991);
            reg = x1991;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x1992 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1992 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x1993 = x1990 - x1992;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x1994 = x1993 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x1995 = Fp(x1994.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1995);
            reg = x1995;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1996 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1996 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x1997 = x1994 - x1996;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x1998 = x1997 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1998);
          reg = x1998;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x1999 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1999 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x2000 = x87 - x1999;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x2001 = x1999 * x2000;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2001);
          reg = x2001;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2002 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2002 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x2003 = x84 - x1999;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x2004 = x2002 * x2003;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x2004 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2005 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2005 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2005);
          reg = x2005;
        }
        if (x86 != 0) {
          host_args.at(0) = x1716;
          host_args.at(1) = x1648;
          host_args.at(2) = x1652;
          host_args.at(3) = x1660;
          host_args.at(4) = x1664;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
          auto x2006 = x1716 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1648);
            reg = x1648;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1652);
            reg = x1652;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1660);
            reg = x1660;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1664);
            reg = x1664;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2007 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2007 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2008 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2008 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2009 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2009 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2010 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2010 != Fp::invalid());
            host_args.at(0) = x2006;
            host_args.at(1) = x2007;
            host_args.at(2) = x2008;
            host_args.at(3) = x2009;
            host_args.at(4) = x2010;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2011 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2011 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2012 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2012 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2013 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2013 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2014 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2014 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2006);
            reg = x2006;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2011);
            reg = x2011;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2012);
            reg = x2012;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2013);
            reg = x2013;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2014);
            reg = x2014;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x2015 = x1719 + x87;
        if (x2015 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
      auto x2016 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2016 != Fp::invalid());
      if (x2016 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2017 = x1387 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x2017 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2018 = x1376 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x2018 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2019 = x1347 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
        auto x2020 = x1350 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2021 = x2019 + x2020;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2022 = x2021 + x1713;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2023 = x2022 + x1714;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2024 = x1340 * x44;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
        auto x2025 = x1385 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2026 = x2024 + x2025;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
        auto x2027 = x1342 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2028 = x2026 + x2027;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2029 = x2028 + x1344;
        // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
        auto x2030 = x1340 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2023);
          reg = x2023;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2029);
          reg = x2029;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2030);
          reg = x2030;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2030);
          reg = x2030;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x2031 = x1738 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2032 = Fp(x2031.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2032);
            reg = x2032;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2033 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2033 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2034 = x2031 - x2033;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2035 = x2034 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2036 = Fp(x2035.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2036);
            reg = x2036;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x2037 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2037 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2038 = x2035 - x2037;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2039 = x2038 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2040 = Fp(x2039.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2040);
            reg = x2040;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2041 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2041 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2042 = x2039 - x2041;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2043 = x2042 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x2044 = Fp(x2043.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2044);
            reg = x2044;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2045 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2045 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x2046 = x2043 - x2045;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x2047 = x2046 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2047);
          reg = x2047;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2048 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2048 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x2049 = x87 - x2048;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x2050 = x2048 * x2049;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2050);
          reg = x2050;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2051 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2051 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x2052 = x84 - x2048;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x2053 = x2051 * x2052;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x2053 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2054 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2054 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2054);
          reg = x2054;
        }
        if (x86 != 0) {
          host_args.at(0) = x1716;
          host_args.at(1) = x1648;
          host_args.at(2) = x1652;
          host_args.at(3) = x1660;
          host_args.at(4) = x1664;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
          auto x2055 = x1716 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1648);
            reg = x1648;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1652);
            reg = x1652;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1660);
            reg = x1660;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1664);
            reg = x1664;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2056 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2056 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2057 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2057 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2058 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2058 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2059 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2059 != Fp::invalid());
            host_args.at(0) = x2055;
            host_args.at(1) = x2056;
            host_args.at(2) = x2057;
            host_args.at(3) = x2058;
            host_args.at(4) = x2059;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2060 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2060 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2061 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2061 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2062 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2062 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2063 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2063 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2055);
            reg = x2055;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2060);
            reg = x2060;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2061);
            reg = x2061;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2062);
            reg = x2062;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2063);
            reg = x2063;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2064 = x1719 + x87;
        if (x2064 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
      auto x2065 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2065 != Fp::invalid());
      if (x2065 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2066 = x1387 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2066 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2067 = x1376 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2067 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2068 = x1347 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
        auto x2069 = x1350 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2070 = x2068 + x2069;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2071 = x2070 + x1713;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2072 = x2071 + x1714;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2073 = x1340 * x44;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
        auto x2074 = x1385 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2075 = x2073 + x2074;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
        auto x2076 = x1342 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2077 = x2075 + x2076;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2078 = x2077 + x1344;
        // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
        auto x2079 = x1340 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2072);
          reg = x2072;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2078);
          reg = x2078;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2079);
          reg = x2079;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2079);
          reg = x2079;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x2080 = x1742 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2081 = Fp(x2080.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2081);
            reg = x2081;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2082 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2082 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2083 = x2080 - x2082;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2084 = x2083 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2085 = Fp(x2084.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2085);
            reg = x2085;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x2086 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2086 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2087 = x2084 - x2086;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2088 = x2087 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2089 = Fp(x2088.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2089);
            reg = x2089;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2090 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2090 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2091 = x2088 - x2090;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2092 = x2091 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x2093 = Fp(x2092.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2093);
            reg = x2093;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2094 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2094 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x2095 = x2092 - x2094;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x2096 = x2095 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2096);
          reg = x2096;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2097 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2097 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x2098 = x87 - x2097;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x2099 = x2097 * x2098;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2099);
          reg = x2099;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2100 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2100 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x2101 = x84 - x2097;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x2102 = x2100 * x2101;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x2102 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2103 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2103 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2103);
          reg = x2103;
        }
        if (x86 != 0) {
          host_args.at(0) = x1716;
          host_args.at(1) = x1648;
          host_args.at(2) = x1652;
          host_args.at(3) = x1660;
          host_args.at(4) = x1664;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
          auto x2104 = x1716 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1648);
            reg = x1648;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1652);
            reg = x1652;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1660);
            reg = x1660;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1664);
            reg = x1664;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2105 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2105 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2106 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2106 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2107 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2107 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2108 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2108 != Fp::invalid());
            host_args.at(0) = x2104;
            host_args.at(1) = x2105;
            host_args.at(2) = x2106;
            host_args.at(3) = x2107;
            host_args.at(4) = x2108;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2109 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2109 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2110 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2110 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2111 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2111 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2112 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2112 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2104);
            reg = x2104;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2109);
            reg = x2109;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2110);
            reg = x2110;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2111);
            reg = x2111;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2112);
            reg = x2112;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2113 = x1719 + x87;
        if (x2113 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/components/mux.h":33:25))
    auto x2114 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x2114 != Fp::invalid());
    if (x2114 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2115 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2115 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":108:41)
      auto x2116 = x526 * x78;
      {
        host_args.at(0) = x2116;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2117 = host_outs.at(0);
        auto x2118 = host_outs.at(1);
        auto x2119 = host_outs.at(2);
        auto x2120 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2117);
          reg = x2117;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2118);
          reg = x2118;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2119);
          reg = x2119;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2120);
          reg = x2120;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2121 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x2121 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2122 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2122 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2123 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2123 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2124 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2124 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2116);
        reg = x2116;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2115);
        reg = x2115;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2121);
        reg = x2121;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2122);
        reg = x2122;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2123);
        reg = x2123;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2124);
        reg = x2124;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":7:16)
        auto x2125 = Fp(x2124.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":7:15)
        auto x2126 = x2125 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2126);
          reg = x2126;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":8:17)
        auto x2127 = Fp(x2124.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":8:16)
        auto x2128 = x2127 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2128);
          reg = x2128;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":9:16)
        auto x2129 = Fp(x2124.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":9:15)
        auto x2130 = x2129 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2130);
          reg = x2130;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":10:16)
        auto x2131 = Fp(x2124.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":10:15)
        auto x2132 = x2131 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2132);
          reg = x2132;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":11:17)
        auto x2133 = Fp(x2124.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2134 = x2133 * x57;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2134);
          reg = x2134;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2135 = Fp(x2124.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2135);
          reg = x2135;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:17)
        auto x2136 = Fp(x2123.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2137 = x2136 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2137);
          reg = x2137;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:18)
        auto x2138 = Fp(x2123.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:17)
        auto x2139 = x2138 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2139);
          reg = x2139;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2140 = Fp(x2123.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2141 = x2140 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2141);
          reg = x2141;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:18)
        auto x2142 = Fp(x2123.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2143 = x2142 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2143);
          reg = x2143;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:18)
        auto x2144 = Fp(x2123.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2144);
          reg = x2144;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2145 = Fp(x2122.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:16)
        auto x2146 = x2145 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2146);
          reg = x2146;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:19)
        auto x2147 = Fp(x2122.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:18)
        auto x2148 = x2147 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2148);
          reg = x2148;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:20)
        auto x2149 = Fp(x2122.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:19)
        auto x2150 = x2149 * x59;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2150);
          reg = x2150;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:17)
        auto x2151 = Fp(x2122.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":21:16)
        auto x2152 = x2151 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2152);
          reg = x2152;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2153 = Fp(x2122.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2153);
          reg = x2153;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:16)
        auto x2154 = Fp(x2121.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:15)
        auto x2155 = x2154 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2155);
          reg = x2155;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:18)
        auto x2156 = Fp(x2121.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2156);
          reg = x2156;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2157 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x2157 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2158 = x2157 * x56;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2159 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2159 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2160 = x2159 * x60;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2161 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x2161 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:25)
      auto x2162 = x2161 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2163 = x2160 + x2162;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2164 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x2164 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:39)
      auto x2165 = x2164 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2166 = x2163 + x2165;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2167 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2167 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2168 = x2166 + x2167;
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2169 = x2158 + x2168;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x2170 = x2169 * x84;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2171 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x2171 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x2172 = x2170 + x2171;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      auto x2173 = x2124 - x2172;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      if (x2173 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:26");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2174 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x2174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x2175 = x2174 * x70;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2176 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2176 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:37)
      auto x2177 = x2176 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x2178 = x2175 + x2177;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2179 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x2179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x2180 = x2178 + x2179;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x2181 = x2180 * x60;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2182 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:69)
      auto x2183 = x2182 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x2184 = x2181 + x2183;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2185 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2185 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x2186 = x2184 + x2185;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      auto x2187 = x2123 - x2186;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      if (x2187 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:27");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2188 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x2188 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x2189 = x2188 * x65;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2190 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x2190 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2191 = x2190 * x80;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2192 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2192 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2193 = x2191 + x2192;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:36)
      auto x2194 = x2193 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x2195 = x2189 + x2194;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2196 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2196 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:53)
      auto x2197 = x2196 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x2198 = x2195 + x2197;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2199 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2199 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x2200 = x2198 + x2199;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      auto x2201 = x2122 - x2200;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      if (x2201 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:28");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2202 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x2202 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x2203 = x2202 * x65;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x2204 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x2204 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x2205 = x2203 + x2204;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      auto x2206 = x2121 - x2205;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      if (x2206 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:29");
      {
        host_args.at(0) = x2121;
        host_args.at(1) = x2122;
        host_args.at(2) = x2123;
        host_args.at(3) = x2124;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2207 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2208 = (x2207 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2208);
            reg = x2208;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2209 = x2207 - x87;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2210 = (x2209 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2210);
            reg = x2210;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2211 = x2207 - x84;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2212 = (x2211 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2212);
            reg = x2212;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2213 = x2207 - x79;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2214 = (x2213 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2214);
            reg = x2214;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2215 = x2207 - x80;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2216 = (x2215 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2216);
            reg = x2216;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2217 = x2207 - x73;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2218 = (x2217 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2218);
            reg = x2218;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2219 = x2207 - x72;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2220 = (x2219 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2220);
            reg = x2220;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2221 = x2207 - x71;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2222 = (x2221 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2222);
            reg = x2222;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2223 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x2223 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2224 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2224 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2225 = x2224 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2226 = x2223 + x2225;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2227 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2227 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2228 = x2227 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2229 = x2226 + x2228;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2230 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2230 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2231 = x2230 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2232 = x2229 + x2231;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2233 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2233 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2234 = x2233 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2235 = x2232 + x2234;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2236 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2236 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2237 = x2236 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2238 = x2235 + x2237;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2239 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2239 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2240 = x2239 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2241 = x2238 + x2240;
        // loc("./cirgen/components/onehot.h":34:8)
        auto x2242 = x2241 - x2207;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x2242 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
      }
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
        auto x2243 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x2243 != Fp::invalid());
        if (x2243 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2244 = x2164 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
          auto x2245 = x2167 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2246 = x2244 + x2245;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:36)
          auto x2247 = x2196 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2248 = x2246 + x2247;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:51)
          auto x2249 = x2199 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2250 = x2248 + x2249;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2251 = x2157 * x44;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
          auto x2252 = x2202 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2253 = x2251 + x2252;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
          auto x2254 = x2159 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2255 = x2253 + x2254;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2256 = x2255 + x2161;
          // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
          auto x2257 = x2157 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2250);
            reg = x2250;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2256);
            reg = x2256;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2257);
            reg = x2257;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2257);
            reg = x2257;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
        auto x2258 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x2258 != Fp::invalid());
        if (x2258 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2259 = x2164 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
          auto x2260 = x2167 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2261 = x2259 + x2260;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:36)
          auto x2262 = x2196 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2263 = x2261 + x2262;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:51)
          auto x2264 = x2199 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2265 = x2263 + x2264;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2266 = x2157 * x44;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
          auto x2267 = x2202 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2268 = x2266 + x2267;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
          auto x2269 = x2159 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2270 = x2268 + x2269;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2271 = x2270 + x2161;
          // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
          auto x2272 = x2157 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2265);
            reg = x2265;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2271);
            reg = x2271;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2272);
            reg = x2272;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2272);
            reg = x2272;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
        auto x2273 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2273 != Fp::invalid());
        if (x2273 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2274 = x2164 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
          auto x2275 = x2167 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2276 = x2274 + x2275;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:36)
          auto x2277 = x2196 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2278 = x2276 + x2277;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:51)
          auto x2279 = x2199 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
          auto x2280 = x2278 + x2279;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2281 = x2157 * x44;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
          auto x2282 = x2202 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2283 = x2281 + x2282;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
          auto x2284 = x2159 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2285 = x2283 + x2284;
          // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
          auto x2286 = x2285 + x2161;
          // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
          auto x2287 = x2157 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2280);
            reg = x2280;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2286);
            reg = x2286;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2287);
            reg = x2287;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2287);
            reg = x2287;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
        auto x2288 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2288 != Fp::invalid());
        if (x2288 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":102:7)
          auto x2289 = x2164 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":102:21)
          auto x2290 = x2167 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":102:7)
          auto x2291 = x2289 + x2290;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x2292 = x2171 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x2293 = x2292 + x2180;
          // loc("cirgen/circuit/rv32im/decode.cpp":102:7)
          auto x2294 = x2291 + x2293;
          // loc("cirgen/circuit/rv32im/decode.cpp":102:7)
          auto x2295 = x2294 - x2179;
          // loc("cirgen/circuit/rv32im/decode.cpp":103:39)
          auto x2296 = x2179 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":103:7)
          auto x2297 = x2195 + x2296;
          // loc("cirgen/circuit/rv32im/decode.cpp":103:54)
          auto x2298 = x2159 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":103:7)
          auto x2299 = x2297 + x2298;
          // loc("cirgen/circuit/rv32im/decode.cpp":103:7)
          auto x2300 = x2299 + x2161;
          // loc("cirgen/circuit/rv32im/decode.cpp":104:7)
          auto x2301 = x2157 * x44;
          // loc("cirgen/circuit/rv32im/decode.cpp":104:7)
          auto x2302 = x2301 + x2183;
          // loc("cirgen/circuit/rv32im/decode.cpp":104:7)
          auto x2303 = x2302 + x2185;
          // loc("cirgen/circuit/rv32im/decode.cpp":105:7)
          auto x2304 = x2157 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2295);
            reg = x2295;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2300);
            reg = x2300;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2303);
            reg = x2303;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2304);
            reg = x2304;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":21:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
        auto x2305 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2305 != Fp::invalid());
        if (x2305 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x2306 = x2164 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x2307 = x2167 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x2308 = x2306 + x2307;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x2309 = x2171 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x2310 = x2309 + x2180;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x2311 = x2308 + x2310;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x2312 = x2157 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x2313 = x2159 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x2314 = x2312 + x2313;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x2315 = x2314 + x2161;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x2316 = x2157 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2311);
            reg = x2311;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2315);
            reg = x2315;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2316);
            reg = x2316;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2316);
            reg = x2316;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":21:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
        auto x2317 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2317 != Fp::invalid());
        if (x2317 != 0) {
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2195);
            reg = x2195;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2186);
            reg = x2186;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2172);
            reg = x2172;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":46:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
        auto x2318 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2318 != Fp::invalid());
        if (x2318 != 0) {
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2195);
            reg = x2195;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2186);
            reg = x2186;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2172);
            reg = x2172;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":21:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x2319 = x2182 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:26)
      auto x2320 = x2185 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x2321 = x2319 + x2320;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x2322 = x2321 + x2188;
      // loc("cirgen/circuit/rv32im/compute.cpp":130:39)
      auto x2323 = x2322 + x49;
      {
        host_args.at(0) = x2323;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2324 = host_outs.at(0);
        auto x2325 = host_outs.at(1);
        auto x2326 = host_outs.at(2);
        auto x2327 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2324);
          reg = x2324;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2325);
          reg = x2325;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2326);
          reg = x2326;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2327);
          reg = x2327;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2328 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x2328 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2329 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2329 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2330 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2330 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2331 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2331 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2323);
        reg = x2323;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2115);
        reg = x2115;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2328);
        reg = x2328;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2329);
        reg = x2329;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2330);
        reg = x2330;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2331);
        reg = x2331;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2332 = x2171 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2333 = x2332 + x2180;
      // loc("cirgen/circuit/rv32im/compute.cpp":131:39)
      auto x2334 = x2333 + x49;
      {
        host_args.at(0) = x2334;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2335 = host_outs.at(0);
        auto x2336 = host_outs.at(1);
        auto x2337 = host_outs.at(2);
        auto x2338 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2335);
          reg = x2335;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2336);
          reg = x2336;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2337);
          reg = x2337;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2338);
          reg = x2338;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2339 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x2339 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2340 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2340 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2341 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2341 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2342 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2342 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2334);
        reg = x2334;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2115);
        reg = x2115;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2339);
        reg = x2339;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2340);
        reg = x2340;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2341);
        reg = x2341;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2342);
        reg = x2342;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2343 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2343 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2344 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2344 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2345 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2345 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2346 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2346 != Fp::invalid());
      host_args.at(0) = x2343;
      host_args.at(1) = x2344;
      host_args.at(2) = x2345;
      host_args.at(3) = x2346;
      host_args.at(4) = x2322;
      host_args.at(5) = x2328;
      host_args.at(6) = x2329;
      host_args.at(7) = x2330;
      host_args.at(8) = x2331;
      host_args.at(9) = x2333;
      host_args.at(10) = x2339;
      host_args.at(11) = x2340;
      host_args.at(12) = x2341;
      host_args.at(13) = x2342;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2347 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2347 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":141:17)
      auto x2348 = x87 - x2347;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2349 = x2348 * x2328;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2350 = x2348 * x2329;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2351 = x2348 * x2330;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2352 = x2348 * x2331;
      // loc("cirgen/circuit/rv32im/body.cpp":31:52)
      auto x2353 = x523 * x80;
      // loc("cirgen/circuit/rv32im/body.cpp":31:41)
      auto x2354 = x520 + x2353;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x2355 = x513 - x80;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2356 = x2347 * x2355;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2357 = x2347 * x514;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2358 = x2347 * x517;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2359 = x2347 * x2354;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2360 = x2349 + x2356;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2361 = x2350 + x2357;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2362 = x2351 + x2358;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2363 = x2352 + x2359;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2364 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2364 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":143:17)
      auto x2365 = x87 - x2364;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2366 = x2365 * x2339;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2367 = x2365 * x2340;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2368 = x2365 * x2341;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2369 = x2365 * x2342;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2370 = x2364 * x2343;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2371 = x2364 * x2344;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2372 = x2364 * x2345;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2373 = x2364 * x2346;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2374 = x2366 + x2370;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2375 = x2367 + x2371;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2376 = x2368 + x2372;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2377 = x2369 + x2373;
      host_args.at(0) = x2360;
      host_args.at(1) = x2361;
      host_args.at(2) = x2362;
      host_args.at(3) = x2363;
      host_args.at(4) = x2374;
      host_args.at(5) = x2375;
      host_args.at(6) = x2376;
      host_args.at(7) = x2377;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x2378 = Fp(x2363.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x2379 = x2378 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2379);
          reg = x2379;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x2380 = Fp(x2363.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x2381 = x2380 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2381);
          reg = x2381;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2382 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x2382 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x2383 = x2382 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x2384 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x2384 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x2385 = x2384 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x2386 = x2383 + x2385;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x2387 = x2363 - x2386;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x2387 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x2388 = Fp(x2377.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x2389 = x2388 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2389);
          reg = x2389;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x2390 = Fp(x2377.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x2391 = x2390 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2391);
          reg = x2391;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2392 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x2392 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x2393 = x2392 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x2394 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2394 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x2395 = x2394 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x2396 = x2393 + x2395;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x2397 = x2377 - x2396;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x2397 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2374);
        reg = x2374;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2375);
        reg = x2375;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2376);
        reg = x2376;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2377);
        reg = x2377;
      }
      {
        // loc("cirgen/components/u32.cpp":103:20)
        auto x2398 = Fp(x2360.asUInt32() & x2374.asUInt32());
        // loc("cirgen/components/u32.cpp":103:20)
        auto x2399 = Fp(x2361.asUInt32() & x2375.asUInt32());
        // loc("cirgen/components/u32.cpp":103:20)
        auto x2400 = Fp(x2362.asUInt32() & x2376.asUInt32());
        // loc("cirgen/components/u32.cpp":103:20)
        auto x2401 = Fp(x2363.asUInt32() & x2377.asUInt32());
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2398);
          reg = x2398;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2399);
          reg = x2399;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2400);
          reg = x2400;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2401);
          reg = x2401;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2402 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2402 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2403 = x2402 * x2360;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2404 = x2402 * x2361;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2405 = x2402 * x2362;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2406 = x2402 * x2363;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2407 = x2403 + x82;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2408 = x2404 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2409 = x2405 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2410 = x2406 + x83;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2411 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2411 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2412 = x2411 * x2374;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2413 = x2411 * x2375;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2414 = x2411 * x2376;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2415 = x2411 * x2377;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2416 = x2407 + x2412;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2417 = x2408 + x2413;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2418 = x2409 + x2414;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2419 = x2410 + x2415;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2420 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2420 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2421 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x2421 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2422 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2422 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2423 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2423 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2424 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2424 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2425 = x2420 * x2421;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2426 = x2420 * x2422;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2427 = x2420 * x2423;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x2428 = x2420 * x2424;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2429 = x2416 + x2425;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2430 = x2417 + x2426;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2431 = x2418 + x2427;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x2432 = x2419 + x2428;
      // loc("cirgen/components/u32.cpp":136:29)
      auto x2433 = x2430 * x82;
      // loc("cirgen/components/u32.cpp":136:15)
      auto x2434 = x2429 + x2433;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x2435 = Fp(x2434.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2435);
          reg = x2435;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x2436 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2436 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x2437 = x2434 - x2436;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x2438 = x2437 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x2439 = Fp(x2438.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2439);
          reg = x2439;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x2440 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2440 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x2441 = x2438 - x2440;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x2442 = x2441 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2442);
        reg = x2442;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2443 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2443 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":138:16)
      auto x2444 = x2443 + x2431;
      // loc("cirgen/components/u32.cpp":138:41)
      auto x2445 = x2432 * x82;
      // loc("cirgen/components/u32.cpp":138:16)
      auto x2446 = x2444 + x2445;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x2447 = Fp(x2446.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2447);
          reg = x2447;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x2448 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2448 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x2449 = x2446 - x2448;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x2450 = x2449 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x2451 = Fp(x2450.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2451);
          reg = x2451;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x2452 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2452 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x2453 = x2450 - x2452;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x2454 = x2453 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2454);
        reg = x2454;
      }
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x2455 = Fp(x2452.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x2456 = x2455 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2456);
          reg = x2456;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x2457 = Fp(x2452.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x2458 = x2457 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2458);
          reg = x2458;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2459 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x2459 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x2460 = x2459 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x2461 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2461 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x2462 = x2461 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x2463 = x2460 + x2462;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x2464 = x2452 - x2463;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x2464 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      // loc("cirgen/circuit/rv32im/compute.cpp":65:23)
      auto x2465 = x87 - x2392;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:17)
      auto x2466 = x2382 * x2465;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:34)
      auto x2467 = x87 - x2459;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:17)
      auto x2468 = x2466 * x2467;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:45)
      auto x2469 = x87 - x2382;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:44)
      auto x2470 = x2469 * x2392;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:44)
      auto x2471 = x2470 * x2459;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:17)
      auto x2472 = x2468 + x2471;
      // loc("cirgen/circuit/rv32im/compute.cpp":65:3)
      {
        auto& reg = args[2][199 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2472);
        reg = x2472;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x2473 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2473 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":67:11)
      auto x2474 = x2473 + x2459;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:27)
      auto x2475 = x2473 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:27)
      auto x2476 = x2475 * x2459;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:11)
      auto x2477 = x2474 - x2476;
      // loc("cirgen/circuit/rv32im/compute.cpp":67:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2477);
        reg = x2477;
      }
      // loc("cirgen/components/u32.cpp":127:26)
      auto x2478 = x2440 * x82;
      // loc("cirgen/components/u32.cpp":127:12)
      auto x2479 = x2436 + x2478;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x2480 = (x2479 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2480);
          reg = x2480;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x2481 = inv(x2479);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2481);
          reg = x2481;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2482 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x2482 != Fp::invalid());
      if (x2482 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x2479 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x2483 = x87 - x2482;
      if (x2483 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2484 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x2484 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x2485 = x2479 * x2484;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x2486 = x2485 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x2486 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("cirgen/components/u32.cpp":128:27)
      auto x2487 = x2452 * x82;
      // loc("cirgen/components/u32.cpp":128:13)
      auto x2488 = x2448 + x2487;
      // loc("cirgen/components/u32.cpp":128:47)
      auto x2489 = x2483 * x76;
      // loc("cirgen/components/u32.cpp":128:13)
      auto x2490 = x2488 + x2489;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x2491 = (x2490 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2491);
          reg = x2491;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x2492 = inv(x2490);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2492);
          reg = x2492;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2493 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x2493 != Fp::invalid());
      if (x2493 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x2490 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x2494 = x87 - x2493;
      if (x2494 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2495 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x2495 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x2496 = x2490 * x2495;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x2497 = x2496 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x2497 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2498 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2498 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2499 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x2499 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":93:10)
      auto x2500 = x87 - x2499;
      host_args.at(0) = x2436;
      host_args.at(1) = x2440;
      host_args.at(2) = x2448;
      host_args.at(3) = x2452;
      host_args.at(4) = x2493;
      host_args.at(5) = x2498;
      host_args.at(6) = x2500;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2501 = x2196 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:25)
      auto x2502 = x2199 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2503 = x2501 + x2502;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2504 = x2503 + x2202;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x2505 = (x2504 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2505);
          reg = x2505;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x2506 = inv(x2504);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2506);
          reg = x2506;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2507 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x2507 != Fp::invalid());
      if (x2507 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x2504 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x2508 = x87 - x2507;
      if (x2508 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2509 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x2509 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x2510 = x2504 * x2509;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x2511 = x2510 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x2511 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":156:13)
      auto x2512 = x526 + x80;
      // loc("cirgen/components/u32.cpp":52:25)
      auto x2513 = x2344 * x82;
      // loc("cirgen/components/u32.cpp":52:13)
      auto x2514 = x2343 + x2513;
      // loc("cirgen/components/u32.cpp":52:49)
      auto x2515 = x2345 * x76;
      // loc("cirgen/components/u32.cpp":52:13)
      auto x2516 = x2514 + x2515;
      // loc("cirgen/components/u32.cpp":55:17)
      auto x2517 = x2346 * x48;
      // loc("cirgen/components/u32.cpp":55:16)
      auto x2518 = x2517 * x47;
      // loc("cirgen/components/u32.cpp":55:10)
      auto x2519 = x2516 + x2518;
      // loc("cirgen/circuit/rv32im/compute.cpp":157:14)
      auto x2520 = x526 + x2519;
      // loc("cirgen/circuit/rv32im/compute.cpp":162:57)
      auto x2521 = x2448 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":162:13)
      auto x2522 = x2479 + x2521;
      // loc("cirgen/circuit/rv32im/compute.cpp":163:14)
      auto x2523 = x2452 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":162:13)
      auto x2524 = x2522 + x2523;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:13)
      auto x2525 = x2498 * x2512;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:35)
      auto x2526 = x87 - x2498;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:34)
      auto x2527 = x2526 * x2520;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:13)
      auto x2528 = x2525 + x2527;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:14)
      auto x2529 = x2500 * x2520;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:38)
      auto x2530 = x87 - x2500;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:37)
      auto x2531 = x2530 * x2512;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:14)
      auto x2532 = x2529 + x2531;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:14)
      auto x2533 = x2500 * x2512;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:36)
      auto x2534 = x2530 * x2520;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:14)
      auto x2535 = x2533 + x2534;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
      auto x2536 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x2536 != Fp::invalid());
      if (x2536 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2537 = x2204 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2537 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2538 = x2193 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2538 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2539 = x2164 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
        auto x2540 = x2167 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2541 = x2539 + x2540;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2542 = x2541 + x2501;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2543 = x2542 + x2502;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2544 = x2157 * x44;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
        auto x2545 = x2202 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2546 = x2544 + x2545;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
        auto x2547 = x2159 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2548 = x2546 + x2547;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2549 = x2548 + x2161;
        // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
        auto x2550 = x2157 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2543);
          reg = x2543;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2549);
          reg = x2549;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2550);
          reg = x2550;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2550);
          reg = x2550;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x2551 = x2528 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2552 = Fp(x2551.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2552);
            reg = x2552;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2553 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2553 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2554 = x2551 - x2553;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2555 = x2554 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2556 = Fp(x2555.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2556);
            reg = x2556;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x2557 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2557 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2558 = x2555 - x2557;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2559 = x2558 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2560 = Fp(x2559.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2560);
            reg = x2560;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2561 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2561 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2562 = x2559 - x2561;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2563 = x2562 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x2564 = Fp(x2563.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2564);
            reg = x2564;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2565 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2565 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x2566 = x2563 - x2565;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x2567 = x2566 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2567);
          reg = x2567;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2568 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2568 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x2569 = x87 - x2568;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x2570 = x2568 * x2569;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2570);
          reg = x2570;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2571 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2571 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x2572 = x84 - x2568;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x2573 = x2571 * x2572;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x2573 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2574 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2574 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2574);
          reg = x2574;
        }
        if (x86 != 0) {
          host_args.at(0) = x2504;
          host_args.at(1) = x2436;
          host_args.at(2) = x2440;
          host_args.at(3) = x2448;
          host_args.at(4) = x2452;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
          auto x2575 = x2504 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2436);
            reg = x2436;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2440);
            reg = x2440;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2448);
            reg = x2448;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2452);
            reg = x2452;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2576 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2576 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2577 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2577 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2578 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2578 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2579 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2579 != Fp::invalid());
            host_args.at(0) = x2575;
            host_args.at(1) = x2576;
            host_args.at(2) = x2577;
            host_args.at(3) = x2578;
            host_args.at(4) = x2579;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2580 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2580 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2581 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2581 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2582 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2582 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2583 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2583 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2575);
            reg = x2575;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2115);
            reg = x2115;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2580);
            reg = x2580;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2581);
            reg = x2581;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2582);
            reg = x2582;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2583);
            reg = x2583;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2584 = x2507 + x87;
        if (x2584 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
      auto x2585 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2585 != Fp::invalid());
      if (x2585 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2586 = x2204 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2586 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2587 = x2193 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2587 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2588 = x2164 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
        auto x2589 = x2167 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2590 = x2588 + x2589;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2591 = x2590 + x2501;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2592 = x2591 + x2502;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2593 = x2157 * x44;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
        auto x2594 = x2202 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2595 = x2593 + x2594;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
        auto x2596 = x2159 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2597 = x2595 + x2596;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2598 = x2597 + x2161;
        // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
        auto x2599 = x2157 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2592);
          reg = x2592;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2598);
          reg = x2598;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2599);
          reg = x2599;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2599);
          reg = x2599;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x2600 = x2532 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2601 = Fp(x2600.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2601);
            reg = x2601;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2602 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2602 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2603 = x2600 - x2602;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2604 = x2603 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2605 = Fp(x2604.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2605);
            reg = x2605;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x2606 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2606 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2607 = x2604 - x2606;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2608 = x2607 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2609 = Fp(x2608.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2609);
            reg = x2609;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2610 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2610 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2611 = x2608 - x2610;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2612 = x2611 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x2613 = Fp(x2612.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2613);
            reg = x2613;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2614 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2614 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x2615 = x2612 - x2614;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x2616 = x2615 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2616);
          reg = x2616;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2617 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2617 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x2618 = x87 - x2617;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x2619 = x2617 * x2618;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2619);
          reg = x2619;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2620 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2620 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x2621 = x84 - x2617;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x2622 = x2620 * x2621;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x2622 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2623 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2623 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2623);
          reg = x2623;
        }
        if (x86 != 0) {
          host_args.at(0) = x2504;
          host_args.at(1) = x2436;
          host_args.at(2) = x2440;
          host_args.at(3) = x2448;
          host_args.at(4) = x2452;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
          auto x2624 = x2504 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2436);
            reg = x2436;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2440);
            reg = x2440;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2448);
            reg = x2448;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2452);
            reg = x2452;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2625 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2625 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2626 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2626 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2627 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2627 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2628 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2628 != Fp::invalid());
            host_args.at(0) = x2624;
            host_args.at(1) = x2625;
            host_args.at(2) = x2626;
            host_args.at(3) = x2627;
            host_args.at(4) = x2628;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2629 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2629 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2630 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2630 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2631 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2631 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2632 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2632 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2624);
            reg = x2624;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2115);
            reg = x2115;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2629);
            reg = x2629;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2630);
            reg = x2630;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2631);
            reg = x2631;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2632);
            reg = x2632;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2633 = x2507 + x87;
        if (x2633 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
      auto x2634 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2634 != Fp::invalid());
      if (x2634 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2635 = x2204 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2635 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2636 = x2193 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2636 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2637 = x2164 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:21)
        auto x2638 = x2167 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2639 = x2637 + x2638;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2640 = x2639 + x2501;
        // loc("cirgen/circuit/rv32im/decode.cpp":84:7)
        auto x2641 = x2640 + x2502;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2642 = x2157 * x44;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:21)
        auto x2643 = x2202 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2644 = x2642 + x2643;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:35)
        auto x2645 = x2159 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2646 = x2644 + x2645;
        // loc("cirgen/circuit/rv32im/decode.cpp":85:7)
        auto x2647 = x2646 + x2161;
        // loc("cirgen/circuit/rv32im/decode.cpp":86:7)
        auto x2648 = x2157 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2641);
          reg = x2641;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2647);
          reg = x2647;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2648);
          reg = x2648;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2648);
          reg = x2648;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":26:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x2649 = x2535 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2650 = Fp(x2649.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2650);
            reg = x2650;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2651 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2651 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2652 = x2649 - x2651;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2653 = x2652 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2654 = Fp(x2653.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2654);
            reg = x2654;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x2655 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2655 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2656 = x2653 - x2655;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2657 = x2656 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2658 = Fp(x2657.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2658);
            reg = x2658;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2659 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2659 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2660 = x2657 - x2659;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2661 = x2660 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x2662 = Fp(x2661.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2662);
            reg = x2662;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2663 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2663 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x2664 = x2661 - x2663;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x2665 = x2664 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2665);
          reg = x2665;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2666 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2666 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x2667 = x87 - x2666;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x2668 = x2666 * x2667;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2668);
          reg = x2668;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2669 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2669 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x2670 = x84 - x2666;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x2671 = x2669 * x2670;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x2671 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2672 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2672 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2672);
          reg = x2672;
        }
        if (x86 != 0) {
          host_args.at(0) = x2504;
          host_args.at(1) = x2436;
          host_args.at(2) = x2440;
          host_args.at(3) = x2448;
          host_args.at(4) = x2452;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
          auto x2673 = x2504 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2436);
            reg = x2436;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2440);
            reg = x2440;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2448);
            reg = x2448;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2452);
            reg = x2452;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2674 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2674 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2675 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2675 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2676 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2676 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2677 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2677 != Fp::invalid());
            host_args.at(0) = x2673;
            host_args.at(1) = x2674;
            host_args.at(2) = x2675;
            host_args.at(3) = x2676;
            host_args.at(4) = x2677;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2678 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2678 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2679 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2679 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2680 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2680 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2681 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2681 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2673);
            reg = x2673;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2115);
            reg = x2115;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2678);
            reg = x2678;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2679);
            reg = x2679;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2680);
            reg = x2680;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2681);
            reg = x2681;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2682 = x2507 + x87;
        if (x2682 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
      auto x2683 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2683 != Fp::invalid());
      if (x2683 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2684 = x2204 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2684 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("cirgen/circuit/rv32im/decode.cpp":102:7)
        auto x2685 = x2164 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":102:21)
        auto x2686 = x2167 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":102:7)
        auto x2687 = x2685 + x2686;
        // loc("cirgen/circuit/rv32im/decode.cpp":102:7)
        auto x2688 = x2687 + x2333;
        // loc("cirgen/circuit/rv32im/decode.cpp":102:7)
        auto x2689 = x2688 - x2179;
        // loc("cirgen/circuit/rv32im/decode.cpp":103:39)
        auto x2690 = x2179 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":103:7)
        auto x2691 = x2195 + x2690;
        // loc("cirgen/circuit/rv32im/decode.cpp":103:54)
        auto x2692 = x2159 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":103:7)
        auto x2693 = x2691 + x2692;
        // loc("cirgen/circuit/rv32im/decode.cpp":103:7)
        auto x2694 = x2693 + x2161;
        // loc("cirgen/circuit/rv32im/decode.cpp":104:7)
        auto x2695 = x2157 * x44;
        // loc("cirgen/circuit/rv32im/decode.cpp":104:7)
        auto x2696 = x2695 + x2183;
        // loc("cirgen/circuit/rv32im/decode.cpp":104:7)
        auto x2697 = x2696 + x2185;
        // loc("cirgen/circuit/rv32im/decode.cpp":105:7)
        auto x2698 = x2157 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2689);
          reg = x2689;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2694);
          reg = x2694;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2697);
          reg = x2697;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2698);
          reg = x2698;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":21:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x2699 = x2520 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2700 = Fp(x2699.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2700);
            reg = x2700;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2701 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2701 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2702 = x2699 - x2701;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2703 = x2702 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2704 = Fp(x2703.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2704);
            reg = x2704;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x2705 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2705 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2706 = x2703 - x2705;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2707 = x2706 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2708 = Fp(x2707.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2708);
            reg = x2708;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2709 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2709 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2710 = x2707 - x2709;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2711 = x2710 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x2712 = Fp(x2711.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2712);
            reg = x2712;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2713 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2713 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x2714 = x2711 - x2713;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x2715 = x2714 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2715);
          reg = x2715;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2716 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2716 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x2717 = x87 - x2716;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x2718 = x2716 * x2717;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2718);
          reg = x2718;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2719 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2719 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x2720 = x84 - x2716;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x2721 = x2719 * x2720;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x2721 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2722 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2722 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2722);
          reg = x2722;
        }
        if (x2508 != 0) {
          host_args.at(0) = x2504;
          host_args.at(1) = x513;
          host_args.at(2) = x514;
          host_args.at(3) = x517;
          host_args.at(4) = x2354;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
          auto x2723 = x2504 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x513);
            reg = x513;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x514);
            reg = x514;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x517);
            reg = x517;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2354);
            reg = x2354;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2724 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2724 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2725 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2725 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2726 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2726 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2727 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2727 != Fp::invalid());
            host_args.at(0) = x2723;
            host_args.at(1) = x2724;
            host_args.at(2) = x2725;
            host_args.at(3) = x2726;
            host_args.at(4) = x2727;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2728 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2728 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2729 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2729 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2730 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2730 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2731 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2731 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2723);
            reg = x2723;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2115);
            reg = x2115;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2728);
            reg = x2728;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2729);
            reg = x2729;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2730);
            reg = x2730;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2731);
            reg = x2731;
          }
        }
        if (x2507 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
      auto x2732 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2732 != Fp::invalid());
      if (x2732 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2733 = x2204 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2733 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2193 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x2734 = x2164 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x2735 = x2167 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x2736 = x2734 + x2735;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x2737 = x2736 + x2333;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x2738 = x2157 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x2739 = x2159 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x2740 = x2738 + x2739;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x2741 = x2740 + x2161;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x2742 = x2157 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2737);
          reg = x2737;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2741);
          reg = x2741;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2742);
          reg = x2742;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2742);
          reg = x2742;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":21:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x2743 = x2524 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2744 = Fp(x2743.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2744);
            reg = x2744;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2745 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2745 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2746 = x2743 - x2745;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2747 = x2746 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2748 = Fp(x2747.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2748);
            reg = x2748;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x2749 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2749 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2750 = x2747 - x2749;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2751 = x2750 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2752 = Fp(x2751.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2752);
            reg = x2752;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2753 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2753 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2754 = x2751 - x2753;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2755 = x2754 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x2756 = Fp(x2755.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2756);
            reg = x2756;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2757 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2757 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x2758 = x2755 - x2757;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x2759 = x2758 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2759);
          reg = x2759;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2760 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2760 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x2761 = x87 - x2760;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x2762 = x2760 * x2761;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2762);
          reg = x2762;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2763 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2763 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x2764 = x84 - x2760;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x2765 = x2763 * x2764;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x2765 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2766 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2766 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2766);
          reg = x2766;
        }
        if (x2508 != 0) {
          host_args.at(0) = x2504;
          host_args.at(1) = x513;
          host_args.at(2) = x514;
          host_args.at(3) = x517;
          host_args.at(4) = x2354;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
          auto x2767 = x2504 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x513);
            reg = x513;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x514);
            reg = x514;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x517);
            reg = x517;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2354);
            reg = x2354;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2768 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2768 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2769 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2769 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2770 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2770 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2771 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2771 != Fp::invalid());
            host_args.at(0) = x2767;
            host_args.at(1) = x2768;
            host_args.at(2) = x2769;
            host_args.at(3) = x2770;
            host_args.at(4) = x2771;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2772 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2772 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2773 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2773 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2774 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2774 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2775 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2775 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2767);
            reg = x2767;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2115);
            reg = x2115;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2772);
            reg = x2772;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2773);
            reg = x2773;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2774);
            reg = x2774;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2775);
            reg = x2775;
          }
        }
        if (x2507 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
      auto x2776 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2776 != Fp::invalid());
      if (x2776 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x2777 = x2204 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2777 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2195);
          reg = x2195;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2186);
          reg = x2186;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2172);
          reg = x2172;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":46:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x2778 = x2512 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2779 = Fp(x2778.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2779);
            reg = x2779;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2780 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2780 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2781 = x2778 - x2780;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2782 = x2781 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2783 = Fp(x2782.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2783);
            reg = x2783;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x2784 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2784 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2785 = x2782 - x2784;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2786 = x2785 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2787 = Fp(x2786.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2787);
            reg = x2787;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2788 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2788 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2789 = x2786 - x2788;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2790 = x2789 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x2791 = Fp(x2790.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2791);
            reg = x2791;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2792 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2792 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x2793 = x2790 - x2792;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x2794 = x2793 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2794);
          reg = x2794;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2795 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2795 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x2796 = x87 - x2795;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x2797 = x2795 * x2796;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2797);
          reg = x2797;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2798 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2798 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x2799 = x84 - x2795;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x2800 = x2798 * x2799;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x2800 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2801 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2801 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2801);
          reg = x2801;
        }
        if (x2508 != 0) {
          host_args.at(0) = x2504;
          host_args.at(1) = x2436;
          host_args.at(2) = x2440;
          host_args.at(3) = x2448;
          host_args.at(4) = x2452;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
          auto x2802 = x2504 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2436);
            reg = x2436;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2440);
            reg = x2440;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2448);
            reg = x2448;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2452);
            reg = x2452;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2803 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2803 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2804 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2804 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2805 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2805 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2806 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2806 != Fp::invalid());
            host_args.at(0) = x2802;
            host_args.at(1) = x2803;
            host_args.at(2) = x2804;
            host_args.at(3) = x2805;
            host_args.at(4) = x2806;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2807 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2807 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2808 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2808 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2809 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2809 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2810 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2810 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2802);
            reg = x2802;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2115);
            reg = x2115;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2807);
            reg = x2807;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2808);
            reg = x2808;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2809);
            reg = x2809;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2810);
            reg = x2810;
          }
        }
        if (x2507 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
      auto x2811 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2811 != Fp::invalid());
      if (x2811 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x2812 = x2204 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x2812 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:59");
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2195);
          reg = x2195;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2186);
          reg = x2186;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2172);
          reg = x2172;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":15:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":16:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":21:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x2813 = x2512 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2814 = Fp(x2813.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2814);
            reg = x2814;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2815 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2815 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2816 = x2813 - x2815;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2817 = x2816 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2818 = Fp(x2817.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2818);
            reg = x2818;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x2819 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2819 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2820 = x2817 - x2819;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2821 = x2820 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x2822 = Fp(x2821.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2822);
            reg = x2822;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x2823 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2823 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x2824 = x2821 - x2823;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x2825 = x2824 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x2826 = Fp(x2825.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2826);
            reg = x2826;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2827 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2827 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x2828 = x2825 - x2827;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x2829 = x2828 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2829);
          reg = x2829;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2830 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2830 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x2831 = x87 - x2830;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x2832 = x2830 * x2831;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2832);
          reg = x2832;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2833 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2833 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x2834 = x84 - x2830;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x2835 = x2833 * x2834;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x2835 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":81:27))
        auto x2836 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2836 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2836);
          reg = x2836;
        }
        if (x2508 != 0) {
          host_args.at(0) = x2504;
          host_args.at(1) = x2436;
          host_args.at(2) = x2440;
          host_args.at(3) = x2448;
          host_args.at(4) = x2452;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
          auto x2837 = x2504 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2436);
            reg = x2436;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2440);
            reg = x2440;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2448);
            reg = x2448;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2452);
            reg = x2452;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2838 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2838 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2839 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2839 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2840 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2840 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x2841 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2841 != Fp::invalid());
            host_args.at(0) = x2837;
            host_args.at(1) = x2838;
            host_args.at(2) = x2839;
            host_args.at(3) = x2840;
            host_args.at(4) = x2841;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2842 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2842 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2843 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2843 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2844 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2844 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x2845 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2845 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2115);
            reg = x2115;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2842);
            reg = x2842;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2843);
            reg = x2843;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2844);
            reg = x2844;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2845);
            reg = x2845;
          }
        }
        if (x2507 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/components/mux.h":33:25))
    auto x2846 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x2846 != Fp::invalid());
    if (x2846 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2847 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2847 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":16:41)
      auto x2848 = x526 * x78;
      {
        host_args.at(0) = x2848;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2849 = host_outs.at(0);
        auto x2850 = host_outs.at(1);
        auto x2851 = host_outs.at(2);
        auto x2852 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2849);
          reg = x2849;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2850);
          reg = x2850;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2851);
          reg = x2851;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2852);
          reg = x2852;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2853 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x2853 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2854 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2854 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2855 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2856 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2856 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2848);
        reg = x2848;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2847);
        reg = x2847;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2853);
        reg = x2853;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2854);
        reg = x2854;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2855);
        reg = x2855;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2856);
        reg = x2856;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":7:16)
        auto x2857 = Fp(x2856.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":7:15)
        auto x2858 = x2857 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2858);
          reg = x2858;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":8:17)
        auto x2859 = Fp(x2856.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":8:16)
        auto x2860 = x2859 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2860);
          reg = x2860;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":9:16)
        auto x2861 = Fp(x2856.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":9:15)
        auto x2862 = x2861 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2862);
          reg = x2862;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":10:16)
        auto x2863 = Fp(x2856.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":10:15)
        auto x2864 = x2863 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2864);
          reg = x2864;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":11:17)
        auto x2865 = Fp(x2856.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2866 = x2865 * x57;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2866);
          reg = x2866;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2867 = Fp(x2856.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2867);
          reg = x2867;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:17)
        auto x2868 = Fp(x2855.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2869 = x2868 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2869);
          reg = x2869;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:18)
        auto x2870 = Fp(x2855.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:17)
        auto x2871 = x2870 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2871);
          reg = x2871;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2872 = Fp(x2855.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2873 = x2872 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2873);
          reg = x2873;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:18)
        auto x2874 = Fp(x2855.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2875 = x2874 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2875);
          reg = x2875;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:18)
        auto x2876 = Fp(x2855.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2876);
          reg = x2876;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2877 = Fp(x2854.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:16)
        auto x2878 = x2877 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2878);
          reg = x2878;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:19)
        auto x2879 = Fp(x2854.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:18)
        auto x2880 = x2879 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2880);
          reg = x2880;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:20)
        auto x2881 = Fp(x2854.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:19)
        auto x2882 = x2881 * x59;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2882);
          reg = x2882;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:17)
        auto x2883 = Fp(x2854.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":21:16)
        auto x2884 = x2883 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2884);
          reg = x2884;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2885 = Fp(x2854.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2885);
          reg = x2885;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:16)
        auto x2886 = Fp(x2853.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:15)
        auto x2887 = x2886 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2887);
          reg = x2887;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:18)
        auto x2888 = Fp(x2853.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2888);
          reg = x2888;
        }
      }
      // loc("Top/Mux/4/Mux/3/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2889 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2889 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2890 = x2889 * x56;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2891 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2891 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2892 = x2891 * x60;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2893 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2893 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:25)
      auto x2894 = x2893 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2895 = x2892 + x2894;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2896 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2896 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:39)
      auto x2897 = x2896 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2898 = x2895 + x2897;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2899 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2899 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2900 = x2898 + x2899;
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2901 = x2890 + x2900;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x2902 = x2901 * x84;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2903 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2903 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x2904 = x2902 + x2903;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      auto x2905 = x2856 - x2904;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      if (x2905 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:26");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2906 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2906 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x2907 = x2906 * x70;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2908 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2908 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:37)
      auto x2909 = x2908 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x2910 = x2907 + x2909;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2911 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2911 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x2912 = x2910 + x2911;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x2913 = x2912 * x60;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2914 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2914 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:69)
      auto x2915 = x2914 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x2916 = x2913 + x2915;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2917 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2917 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x2918 = x2916 + x2917;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      auto x2919 = x2855 - x2918;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      if (x2919 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:27");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2920 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2920 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x2921 = x2920 * x65;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2922 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2922 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2923 = x2922 * x80;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2924 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2924 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2925 = x2923 + x2924;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:36)
      auto x2926 = x2925 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x2927 = x2921 + x2926;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2928 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2928 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:53)
      auto x2929 = x2928 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x2930 = x2927 + x2929;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2931 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2931 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x2932 = x2930 + x2931;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      auto x2933 = x2854 - x2932;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      if (x2933 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:28");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x2934 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2934 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x2935 = x2934 * x65;
      // loc("Top/Mux/4/Mux/3/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x2936 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2936 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x2937 = x2935 + x2936;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      auto x2938 = x2853 - x2937;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      if (x2938 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:29");
      {
        host_args.at(0) = x2853;
        host_args.at(1) = x2854;
        host_args.at(2) = x2855;
        host_args.at(3) = x2856;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2939 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2940 = (x2939 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2940);
            reg = x2940;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2941 = x2939 - x87;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2942 = (x2941 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2942);
            reg = x2942;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2943 = x2939 - x84;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2944 = (x2943 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2944);
            reg = x2944;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2945 = x2939 - x79;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2946 = (x2945 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2946);
            reg = x2946;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2947 = x2939 - x80;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2948 = (x2947 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2948);
            reg = x2948;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2949 = x2939 - x73;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2950 = (x2949 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2950);
            reg = x2950;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2951 = x2939 - x72;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2952 = (x2951 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2952);
            reg = x2952;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2953 = x2939 - x71;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x2954 = (x2953 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2954);
            reg = x2954;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2955 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x2955 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2956 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2956 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2957 = x2956 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2958 = x2955 + x2957;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2959 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2959 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2960 = x2959 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2961 = x2958 + x2960;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2962 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x2962 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2963 = x2962 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2964 = x2961 + x2963;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2965 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x2965 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2966 = x2965 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2967 = x2964 + x2966;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2968 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x2968 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2969 = x2968 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2970 = x2967 + x2969;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x2971 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x2971 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x2972 = x2971 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x2973 = x2970 + x2972;
        // loc("./cirgen/components/onehot.h":34:8)
        auto x2974 = x2973 - x2939;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x2974 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
      }
      {
        // loc("Top/Mux/4/Mux/3/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x2975 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2975 != Fp::invalid());
        if (x2975 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x2976 = x2896 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x2977 = x2899 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x2978 = x2976 + x2977;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x2979 = x2903 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x2980 = x2979 + x2912;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x2981 = x2978 + x2980;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x2982 = x2889 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x2983 = x2891 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x2984 = x2982 + x2983;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x2985 = x2984 + x2893;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x2986 = x2889 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2981);
            reg = x2981;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2985);
            reg = x2985;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2986);
            reg = x2986;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2986);
            reg = x2986;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x2987 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x2987 != Fp::invalid());
        if (x2987 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x2988 = x2896 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x2989 = x2899 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x2990 = x2988 + x2989;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x2991 = x2903 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x2992 = x2991 + x2912;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x2993 = x2990 + x2992;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x2994 = x2889 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x2995 = x2891 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x2996 = x2994 + x2995;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x2997 = x2996 + x2893;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x2998 = x2889 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2993);
            reg = x2993;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2997);
            reg = x2997;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2998);
            reg = x2998;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2998);
            reg = x2998;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x2999 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2999 != Fp::invalid());
        if (x2999 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x3000 = x2896 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x3001 = x2899 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x3002 = x3000 + x3001;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x3003 = x2903 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x3004 = x3003 + x2912;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x3005 = x3002 + x3004;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x3006 = x2889 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x3007 = x2891 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x3008 = x3006 + x3007;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x3009 = x3008 + x2893;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x3010 = x2889 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3005);
            reg = x3005;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3009);
            reg = x3009;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3010);
            reg = x3010;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3010);
            reg = x3010;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3011 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x3011 != Fp::invalid());
        if (x3011 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x3012 = x2896 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x3013 = x2899 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x3014 = x3012 + x3013;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x3015 = x2903 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x3016 = x3015 + x2912;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x3017 = x3014 + x3016;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x3018 = x2889 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x3019 = x2891 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x3020 = x3018 + x3019;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x3021 = x3020 + x2893;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x3022 = x2889 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3017);
            reg = x3017;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3021);
            reg = x3021;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3022);
            reg = x3022;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3022);
            reg = x3022;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3023 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3023 != Fp::invalid());
        if (x3023 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x3024 = x2896 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
          auto x3025 = x2899 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x3026 = x3024 + x3025;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x3027 = x2903 * x60;
          // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
          auto x3028 = x3027 + x2912;
          // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
          auto x3029 = x3026 + x3028;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x3030 = x2889 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
          auto x3031 = x2891 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x3032 = x3030 + x3031;
          // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
          auto x3033 = x3032 + x2893;
          // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
          auto x3034 = x2889 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3029);
            reg = x3029;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3033);
            reg = x3033;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3034);
            reg = x3034;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3034);
            reg = x3034;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3035 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3035 != Fp::invalid());
        if (x3035 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
          auto x3036 = x2896 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":75:21)
          auto x3037 = x2899 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
          auto x3038 = x3036 + x3037;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3039 = x2928 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:25)
          auto x3040 = x2931 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3041 = x3039 + x3040;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3042 = x3041 + x2934;
          // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
          auto x3043 = x3038 + x3042;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
          auto x3044 = x2889 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:21)
          auto x3045 = x2891 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
          auto x3046 = x3044 + x3045;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
          auto x3047 = x3046 + x2893;
          // loc("cirgen/circuit/rv32im/decode.cpp":77:7)
          auto x3048 = x2889 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3043);
            reg = x3043;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3047);
            reg = x3047;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3048);
            reg = x3048;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3048);
            reg = x3048;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3049 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3049 != Fp::invalid());
        if (x3049 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
          auto x3050 = x2896 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":75:21)
          auto x3051 = x2899 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
          auto x3052 = x3050 + x3051;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3053 = x2928 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:25)
          auto x3054 = x2931 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3055 = x3053 + x3054;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3056 = x3055 + x2934;
          // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
          auto x3057 = x3052 + x3056;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
          auto x3058 = x2889 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:21)
          auto x3059 = x2891 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
          auto x3060 = x3058 + x3059;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
          auto x3061 = x3060 + x2893;
          // loc("cirgen/circuit/rv32im/decode.cpp":77:7)
          auto x3062 = x2889 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3057);
            reg = x3057;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3061);
            reg = x3061;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3062);
            reg = x3062;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3062);
            reg = x3062;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":84:46))
        auto x3063 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3063 != Fp::invalid());
        if (x3063 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
          auto x3064 = x2896 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":75:21)
          auto x3065 = x2899 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
          auto x3066 = x3064 + x3065;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3067 = x2928 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:25)
          auto x3068 = x2931 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3069 = x3067 + x3068;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3070 = x3069 + x2934;
          // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
          auto x3071 = x3066 + x3070;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
          auto x3072 = x2889 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:21)
          auto x3073 = x2891 * x84;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
          auto x3074 = x3072 + x3073;
          // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
          auto x3075 = x3074 + x2893;
          // loc("cirgen/circuit/rv32im/decode.cpp":77:7)
          auto x3076 = x2889 * x83;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3071);
            reg = x3071;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3075);
            reg = x3075;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3076);
            reg = x3076;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3076);
            reg = x3076;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x3077 = x2914 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:26)
      auto x3078 = x2917 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x3079 = x3077 + x3078;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x3080 = x3079 + x2920;
      // loc("cirgen/circuit/rv32im/memio.cpp":34:39)
      auto x3081 = x3080 + x49;
      {
        host_args.at(0) = x3081;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3082 = host_outs.at(0);
        auto x3083 = host_outs.at(1);
        auto x3084 = host_outs.at(2);
        auto x3085 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3082);
          reg = x3082;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3083);
          reg = x3083;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3084);
          reg = x3084;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3085);
          reg = x3085;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3086 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x3086 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3087 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3087 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3088 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3088 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3089 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3089 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3081);
        reg = x3081;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2847);
        reg = x2847;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3086);
        reg = x3086;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3087);
        reg = x3087;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3088);
        reg = x3088;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3089);
        reg = x3089;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3090 = x2903 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3091 = x3090 + x2912;
      // loc("cirgen/circuit/rv32im/memio.cpp":35:39)
      auto x3092 = x3091 + x49;
      {
        host_args.at(0) = x3092;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3093 = host_outs.at(0);
        auto x3094 = host_outs.at(1);
        auto x3095 = host_outs.at(2);
        auto x3096 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3093);
          reg = x3093;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3094);
          reg = x3094;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3095);
          reg = x3095;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3096);
          reg = x3096;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3097 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x3097 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3098 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3098 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3099 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3099 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3100 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3100 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3092);
        reg = x3092;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2847);
        reg = x2847;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3097);
        reg = x3097;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3098);
        reg = x3098;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3099);
        reg = x3099;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3100);
        reg = x3100;
      }
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3101 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3101 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3102 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3102 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3103 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3103 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3104 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3104 != Fp::invalid());
      host_args.at(0) = x3101;
      host_args.at(1) = x3102;
      host_args.at(2) = x3103;
      host_args.at(3) = x3104;
      host_args.at(4) = x3080;
      host_args.at(5) = x3086;
      host_args.at(6) = x3087;
      host_args.at(7) = x3088;
      host_args.at(8) = x3089;
      host_args.at(9) = x3091;
      host_args.at(10) = x3097;
      host_args.at(11) = x3098;
      host_args.at(12) = x3099;
      host_args.at(13) = x3100;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3105 = x2928 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:25)
      auto x3106 = x2931 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3107 = x3105 + x3106;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3108 = x3107 + x2934;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x3109 = (x3108 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3109);
          reg = x3109;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x3110 = inv(x3108);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3110);
          reg = x3110;
        }
      }
      // loc("Top/Mux/4/Mux/3/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3111 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3111 != Fp::invalid());
      if (x3111 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x3108 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x3112 = x87 - x3111;
      if (x3112 != 0) {
        // loc("Top/Mux/4/Mux/3/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x3113 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3113 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x3114 = x3108 * x3113;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x3115 = x3114 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x3115 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      {
        // loc("cirgen/circuit/rv32im/memio.cpp":44:17)
        auto x3116 = x3086 + x3101;
        // loc("cirgen/circuit/rv32im/memio.cpp":45:18)
        auto x3117 = Fp(x3116.asUInt32() & x79.asUInt32());
        {
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3118 = (x3117 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3118);
            reg = x3118;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3119 = x3117 - x87;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3120 = (x3119 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3120);
            reg = x3120;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3121 = x3117 - x84;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3122 = (x3121 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3122);
            reg = x3122;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3123 = x3117 - x79;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3124 = (x3123 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3124);
            reg = x3124;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x3125 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3125 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x3126 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3126 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x3127 = x3126 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x3128 = x3125 + x3127;
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x3129 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3129 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x3130 = x3129 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x3131 = x3128 + x3130;
        // loc("./cirgen/components/onehot.h":34:8)
        auto x3132 = x3131 - x3117;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x3132 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
        // loc("cirgen/circuit/rv32im/memio.cpp":46:20)
        auto x3133 = Fp(x3116.asUInt32() & x82.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":46:19)
        auto x3134 = x3133 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x3135 = Fp(x3134.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3135);
            reg = x3135;
          }
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":47:15)
        auto x3136 = x3116 - x3131;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3137 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x3137 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":47:33)
        auto x3138 = x3137 * x82;
        // loc("cirgen/circuit/rv32im/memio.cpp":47:15)
        auto x3139 = x3136 - x3138;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3139);
          reg = x3139;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":49:22)
        auto x3140 = x3139 * x78;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3140);
          reg = x3140;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":50:17)
        auto x3141 = x3087 + x3102;
        // loc("cirgen/circuit/rv32im/memio.cpp":50:17)
        auto x3142 = x3141 + x3137;
        // loc("cirgen/circuit/rv32im/memio.cpp":51:24)
        auto x3143 = Fp(x3142.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3143);
          reg = x3143;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":52:25)
        auto x3144 = Fp(x3142.asUInt32() & x82.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":52:24)
        auto x3145 = x3144 * x81;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3145);
          reg = x3145;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":53:17)
        auto x3146 = x3088 + x3103;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":74:10))
        auto x3147 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3147 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":53:17)
        auto x3148 = x3146 + x3147;
        // loc("cirgen/circuit/rv32im/memio.cpp":54:24)
        auto x3149 = Fp(x3148.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3149);
          reg = x3149;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":55:25)
        auto x3150 = Fp(x3148.asUInt32() & x82.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3151 = x3150 * x81;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3151);
          reg = x3151;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":56:17)
        auto x3152 = x3089 + x3104;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3153 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3153 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":56:17)
        auto x3154 = x3152 + x3153;
        // loc("cirgen/circuit/rv32im/memio.cpp":57:23)
        auto x3155 = Fp(x3154.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3155);
          reg = x3155;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3156 = Fp(x3154.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":58:23)
        auto x3157 = x3156 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3157);
          reg = x3157;
        }
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x3158 = Fp(x3151.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3158);
            reg = x3158;
          }
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x3159 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3159 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x3160 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3160 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":62:16)
      auto x3161 = x3160 * x80;
      // loc("cirgen/circuit/rv32im/memio.cpp":62:6)
      auto x3162 = x3159 - x3161;
      // loc("cirgen/circuit/rv32im/memio.cpp":62:6)
      if (x3162 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:62");
      // loc("cirgen/circuit/rv32im/memio.cpp":64:6)
      auto x3163 = x3086 + x3101;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x3164 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3164 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":64:35)
      auto x3165 = x3164 * x82;
      // loc("cirgen/circuit/rv32im/memio.cpp":64:35)
      auto x3166 = x3165 + x3159;
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x3167 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x3167 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x3168 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3168 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":40:19)
      auto x3169 = x3168 * x84;
      // loc("./cirgen/components/onehot.h":40:13)
      auto x3170 = x3167 + x3169;
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x3171 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3171 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":40:19)
      auto x3172 = x3171 * x79;
      // loc("./cirgen/components/onehot.h":40:13)
      auto x3173 = x3170 + x3172;
      // loc("cirgen/circuit/rv32im/memio.cpp":64:35)
      auto x3174 = x3166 + x3173;
      // loc("cirgen/circuit/rv32im/memio.cpp":64:6)
      auto x3175 = x3163 - x3174;
      // loc("cirgen/circuit/rv32im/memio.cpp":64:6)
      if (x3175 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:64");
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      auto x3176 = x3087 + x3102;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      auto x3177 = x3176 + x3164;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x3178 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3178 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":66:46)
      auto x3179 = x3178 * x82;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x3180 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3180 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":66:46)
      auto x3181 = x3179 + x3180;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      auto x3182 = x3177 - x3181;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      if (x3182 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:66");
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3183 = x3088 + x3103;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3184 = x3183 + x3178;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x3185 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3185 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":68:46)
      auto x3186 = x3185 * x82;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x3187 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3187 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":68:46)
      auto x3188 = x3186 + x3187;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3189 = x3184 - x3188;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      if (x3189 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:68");
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3190 = x3089 + x3104;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3191 = x3190 + x3185;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x3192 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3192 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3193 = x3192 * x82;
      // loc("Top/Mux/4/Mux/3/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3194 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3194 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:63)
      auto x3195 = x3194 * x80;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3196 = x3193 + x3195;
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3197 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3197 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3198 = x3196 + x3197;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3199 = x3191 - x3198;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      if (x3199 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:70");
      // loc("cirgen/circuit/rv32im/memio.cpp":73:15)
      auto x3200 = x87 - x3194;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:7)
      auto x3201 = x3194 * x3200;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:28)
      auto x3202 = x84 - x3194;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:7)
      auto x3203 = x3201 * x3202;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:7)
      if (x3203 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:73");
      // loc("cirgen/circuit/rv32im/memio.cpp":76:14)
      auto x3204 = x3194 * x75;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:41)
      auto x3205 = x3197 * x38;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:14)
      auto x3206 = x3204 + x3205;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:68)
      auto x3207 = x3187 * x37;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:14)
      auto x3208 = x3206 + x3207;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:14)
      auto x3209 = x3180 * x56;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:14)
      auto x3210 = x3208 + x3209;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:14)
      auto x3211 = x3210 + x3160;
      {
        host_args.at(0) = x3211;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3212 = host_outs.at(0);
        auto x3213 = host_outs.at(1);
        auto x3214 = host_outs.at(2);
        auto x3215 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3212);
          reg = x3212;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3213);
          reg = x3213;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3214);
          reg = x3214;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3215);
          reg = x3215;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3216 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x3216 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3217 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x3217 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3218 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3218 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3219 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3219 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3211);
        reg = x3211;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2847);
        reg = x2847;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3216);
        reg = x3216;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3217);
        reg = x3217;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3218);
        reg = x3218;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3219);
        reg = x3219;
      }
      host_args.at(0) = x3211;
      host_args.at(1) = x3173;
      host_args.at(2) = x3216;
      host_args.at(3) = x3217;
      host_args.at(4) = x3218;
      host_args.at(5) = x3219;
      host(ctx, "log", "  Addr = 0x%x, lowBits = %u, loaded = %w", host_args.data(), 6, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/memio.cpp":81:17)
      auto x3220 = x526 + x80;
      // loc("cirgen/circuit/rv32im/body.cpp":10:23)
      auto x3221 = x3220 + x80;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3222 = Fp(x3221.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3222);
          reg = x3222;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x3223 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3223 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3224 = x3221 - x3223;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3225 = x3224 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3226 = Fp(x3225.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3226);
          reg = x3226;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x3227 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3227 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3228 = x3225 - x3227;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3229 = x3228 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3230 = Fp(x3229.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3230);
          reg = x3230;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x3231 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3231 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3232 = x3229 - x3231;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3233 = x3232 * x81;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":13:26)
        auto x3234 = Fp(x3233.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3234);
          reg = x3234;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3235 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3235 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:18)
      auto x3236 = x3233 - x3235;
      // loc("cirgen/circuit/rv32im/body.cpp":14:17)
      auto x3237 = x3236 * x78;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3237);
        reg = x3237;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3238 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3238 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:23)
      auto x3239 = x87 - x3238;
      // loc("cirgen/circuit/rv32im/body.cpp":18:15)
      auto x3240 = x3238 * x3239;
      // loc("cirgen/circuit/rv32im/body.cpp":18:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3240);
        reg = x3240;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x3241 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x3241 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":19:17)
      auto x3242 = x84 - x3238;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      auto x3243 = x3241 * x3242;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      if (x3243 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
      // loc("cirgen/circuit/rv32im/memio.cpp":82:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x77);
        reg = x77;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
      auto x3244 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3244 != Fp::invalid());
      if (x3244 != 0) {
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3245 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3245 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3246 = x3245 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3246 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3247 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3247 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3248 = x3247 + x3168;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3249 = x3248 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3249 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3250 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3250 != Fp::invalid());
        if (x3250 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3251 = Fp(x3216.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3251);
              reg = x3251;
            }
          }
        }
        if (x3167 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3252 = Fp(x3217.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3252);
              reg = x3252;
            }
          }
        }
        if (x3168 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3253 = Fp(x3218.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3253);
              reg = x3253;
            }
          }
        }
        if (x3171 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3254 = Fp(x3219.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3254);
              reg = x3254;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
          auto x3255 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3255 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3256 = Fp(x3255.asUInt32() & x65.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3257 = x3256 * x64;
          // loc("cirgen/components/bytes.cpp":83:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3257);
            reg = x3257;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3258 = Fp(x3255.asUInt32() & x53.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3259 = x3258 * x84;
          // loc("cirgen/components/bytes.cpp":83:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3259);
            reg = x3259;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":74:10))
        auto x3260 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3260 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3261 = x87 - x3260;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3262 = x3260 * x3261;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3262 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3263 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3263 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3264 = x3260 * x65;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3265 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3265 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3266 = x3265 * x57;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3267 = x3264 + x3266;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3268 = x3263 - x3267;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3268 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3269 = x3260 * x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3270 = x3250 * x3216;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3271 = x3167 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3272 = x3270 + x3271;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3273 = x3168 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3274 = x3272 + x3273;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3275 = x3171 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3276 = x3274 + x3275;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3276);
          reg = x3276;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3269);
          reg = x3269;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3269);
          reg = x3269;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3269);
          reg = x3269;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3277 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3277 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3278 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3278 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3279 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3279 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3280 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3280 != Fp::invalid());
        host_args.at(0) = x3269;
        host_args.at(1) = x3277;
        host_args.at(2) = x3278;
        host_args.at(3) = x3279;
        host_args.at(4) = x3280;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3112 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3281 = x3108 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3277);
            reg = x3277;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3278);
            reg = x3278;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3279);
            reg = x3279;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3280);
            reg = x3280;
          }
          {
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3282 = args[2][138 * steps + ((cycle - 0) & mask)];
            assert(x3282 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3283 = args[2][139 * steps + ((cycle - 0) & mask)];
            assert(x3283 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3284 = args[2][140 * steps + ((cycle - 0) & mask)];
            assert(x3284 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3285 = args[2][141 * steps + ((cycle - 0) & mask)];
            assert(x3285 != Fp::invalid());
            host_args.at(0) = x3281;
            host_args.at(1) = x3282;
            host_args.at(2) = x3283;
            host_args.at(3) = x3284;
            host_args.at(4) = x3285;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3286 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3286 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3287 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3287 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3288 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3288 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3289 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3289 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3281);
            reg = x3281;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2847);
            reg = x2847;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3286);
            reg = x3286;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3287);
            reg = x3287;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3288);
            reg = x3288;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3289);
            reg = x3289;
          }
        }
        if (x3111 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3290 = x2936 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3290 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x2925 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3291 = x2896 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x3292 = x2899 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3293 = x3291 + x3292;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3294 = x3293 + x3091;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3295 = x2889 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x3296 = x2891 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3297 = x3295 + x3296;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3298 = x3297 + x2893;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x3299 = x2889 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3294);
          reg = x3294;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3298);
          reg = x3298;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3299);
          reg = x3299;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3299);
          reg = x3299;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
      auto x3300 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3300 != Fp::invalid());
      if (x3300 != 0) {
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3301 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3301 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3302 = x3301 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3302 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3303 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3303 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3304 = x3303 + x3168;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3305 = x3304 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3305 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3306 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3306 != Fp::invalid());
        if (x3306 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3307 = Fp(x3217.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3307);
              reg = x3307;
            }
          }
        }
        if (x3168 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3308 = Fp(x3219.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3308);
              reg = x3308;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
          auto x3309 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3309 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3310 = Fp(x3309.asUInt32() & x65.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3311 = x3310 * x64;
          // loc("cirgen/components/bytes.cpp":83:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3311);
            reg = x3311;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3312 = Fp(x3309.asUInt32() & x53.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3313 = x3312 * x84;
          // loc("cirgen/components/bytes.cpp":83:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3313);
            reg = x3313;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":74:10))
        auto x3314 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3314 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3315 = x87 - x3314;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3316 = x3314 * x3315;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3316 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3317 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3317 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3318 = x3314 * x65;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3319 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3319 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3320 = x3319 * x57;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3321 = x3318 + x3320;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3322 = x3317 - x3321;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3322 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3323 = x3314 * x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3324 = x3306 * x3216;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3325 = x3168 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3326 = x3324 + x3325;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3327 = x3306 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3328 = x3168 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3329 = x3327 + x3328;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3326);
          reg = x3326;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3329);
          reg = x3329;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3323);
          reg = x3323;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3323);
          reg = x3323;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3330 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3330 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3331 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3331 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3332 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3332 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3333 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3333 != Fp::invalid());
        host_args.at(0) = x3323;
        host_args.at(1) = x3330;
        host_args.at(2) = x3331;
        host_args.at(3) = x3332;
        host_args.at(4) = x3333;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3112 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3334 = x3108 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3330);
            reg = x3330;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3331);
            reg = x3331;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3332);
            reg = x3332;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3333);
            reg = x3333;
          }
          {
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3335 = args[2][138 * steps + ((cycle - 0) & mask)];
            assert(x3335 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3336 = args[2][139 * steps + ((cycle - 0) & mask)];
            assert(x3336 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3337 = args[2][140 * steps + ((cycle - 0) & mask)];
            assert(x3337 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3338 = args[2][141 * steps + ((cycle - 0) & mask)];
            assert(x3338 != Fp::invalid());
            host_args.at(0) = x3334;
            host_args.at(1) = x3335;
            host_args.at(2) = x3336;
            host_args.at(3) = x3337;
            host_args.at(4) = x3338;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3339 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3339 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3340 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3340 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3341 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3341 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3342 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3342 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3334);
            reg = x3334;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2847);
            reg = x2847;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3339);
            reg = x3339;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3340);
            reg = x3340;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3341);
            reg = x3341;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3342);
            reg = x3342;
          }
        }
        if (x3111 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3343 = x2936 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3343 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3344 = x2925 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3344 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3345 = x2896 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x3346 = x2899 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3347 = x3345 + x3346;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3348 = x3347 + x3091;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3349 = x2889 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x3350 = x2891 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3351 = x3349 + x3350;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3352 = x3351 + x2893;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x3353 = x2889 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3348);
          reg = x3348;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3352);
          reg = x3352;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3353);
          reg = x3353;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3353);
          reg = x3353;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
      auto x3354 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3354 != Fp::invalid());
      if (x3354 != 0) {
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3355 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3355 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3356 = x3355 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3356 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3357 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3357 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3358 = x3357 + x3168;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3359 = x3358 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3359 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3360 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3360 != Fp::invalid());
        if (x3360 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3361 = Fp(x3219.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3361);
              reg = x3361;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
          auto x3362 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3362 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3363 = Fp(x3362.asUInt32() & x65.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3364 = x3363 * x64;
          // loc("cirgen/components/bytes.cpp":83:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3364);
            reg = x3364;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3365 = Fp(x3362.asUInt32() & x53.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3366 = x3365 * x84;
          // loc("cirgen/components/bytes.cpp":83:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3366);
            reg = x3366;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":74:10))
        auto x3367 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3367 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3368 = x87 - x3367;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3369 = x3367 * x3368;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3369 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3370 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3370 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3371 = x3367 * x65;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3372 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3372 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3373 = x3372 * x57;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3374 = x3371 + x3373;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3375 = x3370 - x3374;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3375 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3376 = x3360 * x3216;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3377 = x3360 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3378 = x3360 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3379 = x3360 * x3219;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3376);
          reg = x3376;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3377);
          reg = x3377;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3378);
          reg = x3378;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3379);
          reg = x3379;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3380 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3380 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3381 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3381 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3382 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3382 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3383 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3383 != Fp::invalid());
        host_args.at(0) = x86;
        host_args.at(1) = x3380;
        host_args.at(2) = x3381;
        host_args.at(3) = x3382;
        host_args.at(4) = x3383;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3112 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3384 = x3108 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3380);
            reg = x3380;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3381);
            reg = x3381;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3382);
            reg = x3382;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3383);
            reg = x3383;
          }
          {
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3385 = args[2][138 * steps + ((cycle - 0) & mask)];
            assert(x3385 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3386 = args[2][139 * steps + ((cycle - 0) & mask)];
            assert(x3386 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3387 = args[2][140 * steps + ((cycle - 0) & mask)];
            assert(x3387 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3388 = args[2][141 * steps + ((cycle - 0) & mask)];
            assert(x3388 != Fp::invalid());
            host_args.at(0) = x3384;
            host_args.at(1) = x3385;
            host_args.at(2) = x3386;
            host_args.at(3) = x3387;
            host_args.at(4) = x3388;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3389 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3389 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3390 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3390 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3391 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3391 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3392 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3392 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3384);
            reg = x3384;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2847);
            reg = x2847;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3389);
            reg = x3389;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3390);
            reg = x3390;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3391);
            reg = x3391;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3392);
            reg = x3392;
          }
        }
        if (x3111 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3393 = x2936 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3393 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3394 = x2925 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3394 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3395 = x2896 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x3396 = x2899 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3397 = x3395 + x3396;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3398 = x3397 + x3091;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3399 = x2889 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x3400 = x2891 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3401 = x3399 + x3400;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3402 = x3401 + x2893;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x3403 = x2889 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3398);
          reg = x3398;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3402);
          reg = x3402;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3403);
          reg = x3403;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3403);
          reg = x3403;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
      auto x3404 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3404 != Fp::invalid());
      if (x3404 != 0) {
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3405 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3405 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3406 = x3405 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3406 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3407 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3407 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3408 = x3407 + x3168;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3409 = x3408 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3409 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3410 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3410 != Fp::invalid());
        if (x3410 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3411 = Fp(x3216.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3411);
              reg = x3411;
            }
          }
        }
        if (x3167 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3412 = Fp(x3217.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3412);
              reg = x3412;
            }
          }
        }
        if (x3168 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3413 = Fp(x3218.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3413);
              reg = x3413;
            }
          }
        }
        if (x3171 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3414 = Fp(x3219.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3414);
              reg = x3414;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
          auto x3415 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3415 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3416 = Fp(x3415.asUInt32() & x65.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3417 = x3416 * x64;
          // loc("cirgen/components/bytes.cpp":83:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3417);
            reg = x3417;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3418 = Fp(x3415.asUInt32() & x53.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3419 = x3418 * x84;
          // loc("cirgen/components/bytes.cpp":83:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3419);
            reg = x3419;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":74:10))
        auto x3420 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3420 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3421 = x87 - x3420;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3422 = x3420 * x3421;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3422 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3423 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3423 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3424 = x3420 * x65;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3425 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3425 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3426 = x3425 * x57;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3427 = x3424 + x3426;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3428 = x3423 - x3427;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3428 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3429 = x3410 * x3216;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3430 = x3167 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3431 = x3429 + x3430;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3432 = x3168 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3433 = x3431 + x3432;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3434 = x3171 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3435 = x3433 + x3434;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3435);
          reg = x3435;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3436 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3436 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3437 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3437 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3438 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3438 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3439 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3439 != Fp::invalid());
        host_args.at(0) = x86;
        host_args.at(1) = x3436;
        host_args.at(2) = x3437;
        host_args.at(3) = x3438;
        host_args.at(4) = x3439;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3112 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3440 = x3108 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3436);
            reg = x3436;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3437);
            reg = x3437;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3438);
            reg = x3438;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3439);
            reg = x3439;
          }
          {
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3441 = args[2][138 * steps + ((cycle - 0) & mask)];
            assert(x3441 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3442 = args[2][139 * steps + ((cycle - 0) & mask)];
            assert(x3442 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3443 = args[2][140 * steps + ((cycle - 0) & mask)];
            assert(x3443 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3444 = args[2][141 * steps + ((cycle - 0) & mask)];
            assert(x3444 != Fp::invalid());
            host_args.at(0) = x3440;
            host_args.at(1) = x3441;
            host_args.at(2) = x3442;
            host_args.at(3) = x3443;
            host_args.at(4) = x3444;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3445 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3445 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3446 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3446 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3447 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3447 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3448 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3448 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3440);
            reg = x3440;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2847);
            reg = x2847;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3445);
            reg = x3445;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3446);
            reg = x3446;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3447);
            reg = x3447;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3448);
            reg = x3448;
          }
        }
        if (x3111 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3449 = x2936 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3449 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3450 = x2925 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3450 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3451 = x2896 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x3452 = x2899 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3453 = x3451 + x3452;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3454 = x3453 + x3091;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3455 = x2889 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x3456 = x2891 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3457 = x3455 + x3456;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3458 = x3457 + x2893;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x3459 = x2889 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3454);
          reg = x3454;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3458);
          reg = x3458;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3459);
          reg = x3459;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3459);
          reg = x3459;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
      auto x3460 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3460 != Fp::invalid());
      if (x3460 != 0) {
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3461 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3461 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3462 = x3461 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3462 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3463 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3463 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3464 = x3463 + x3168;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3465 = x3464 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3465 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3466 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3466 != Fp::invalid());
        if (x3466 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3467 = Fp(x3217.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3467);
              reg = x3467;
            }
          }
        }
        if (x3168 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":78:21)
            auto x3468 = Fp(x3219.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/bytes.cpp":78:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3468);
              reg = x3468;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
          auto x3469 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3469 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3470 = Fp(x3469.asUInt32() & x65.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3471 = x3470 * x64;
          // loc("cirgen/components/bytes.cpp":83:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3471);
            reg = x3471;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3472 = Fp(x3469.asUInt32() & x53.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3473 = x3472 * x84;
          // loc("cirgen/components/bytes.cpp":83:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3473);
            reg = x3473;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":74:10))
        auto x3474 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3474 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3475 = x87 - x3474;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3476 = x3474 * x3475;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3476 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3477 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3477 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3478 = x3474 * x65;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x3479 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3479 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3480 = x3479 * x57;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3481 = x3478 + x3480;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3482 = x3477 - x3481;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3482 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3483 = x3466 * x3216;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3484 = x3168 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3485 = x3483 + x3484;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3486 = x3466 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3487 = x3168 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3488 = x3486 + x3487;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3485);
          reg = x3485;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3488);
          reg = x3488;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3489 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3489 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3490 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3490 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3491 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3491 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3492 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3492 != Fp::invalid());
        host_args.at(0) = x86;
        host_args.at(1) = x3489;
        host_args.at(2) = x3490;
        host_args.at(3) = x3491;
        host_args.at(4) = x3492;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3112 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3493 = x3108 + x49;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3489);
            reg = x3489;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3490);
            reg = x3490;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3491);
            reg = x3491;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3492);
            reg = x3492;
          }
          {
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3494 = args[2][138 * steps + ((cycle - 0) & mask)];
            assert(x3494 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3495 = args[2][139 * steps + ((cycle - 0) & mask)];
            assert(x3495 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3496 = args[2][140 * steps + ((cycle - 0) & mask)];
            assert(x3496 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x3497 = args[2][141 * steps + ((cycle - 0) & mask)];
            assert(x3497 != Fp::invalid());
            host_args.at(0) = x3493;
            host_args.at(1) = x3494;
            host_args.at(2) = x3495;
            host_args.at(3) = x3496;
            host_args.at(4) = x3497;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3498 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3498 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3499 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3499 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3500 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3500 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3501 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3501 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3493);
            reg = x3493;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2847);
            reg = x2847;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3498);
            reg = x3498;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3499);
            reg = x3499;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3500);
            reg = x3500;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3501);
            reg = x3501;
          }
        }
        if (x3111 != 0) {
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3502 = x2936 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3502 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3503 = x2925 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3503 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3504 = x2896 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
        auto x3505 = x2899 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3506 = x3504 + x3505;
        // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
        auto x3507 = x3506 + x3091;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3508 = x2889 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:21)
        auto x3509 = x2891 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3510 = x3508 + x3509;
        // loc("cirgen/circuit/rv32im/decode.cpp":67:7)
        auto x3511 = x3510 + x2893;
        // loc("cirgen/circuit/rv32im/decode.cpp":68:7)
        auto x3512 = x2889 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3507);
          reg = x3507;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3511);
          reg = x3511;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3512);
          reg = x3512;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3512);
          reg = x3512;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
      auto x3513 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3513 != Fp::invalid());
      if (x3513 != 0) {
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3514 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3514 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3515 = x3514 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3515 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3516 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3516 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3517 = x3516 + x3168;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3518 = x3517 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3518 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3519 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3519 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3520 = x3519 * x3097;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3521 = x87 - x3519;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3522 = x3521 * x3216;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3523 = x3520 + x3522;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3524 = x3167 * x3097;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3525 = x87 - x3167;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3526 = x3525 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3527 = x3524 + x3526;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3528 = x3168 * x3097;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3529 = x87 - x3168;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3530 = x3529 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3531 = x3528 + x3530;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3532 = x3171 * x3097;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3533 = x87 - x3171;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3534 = x3533 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3535 = x3532 + x3534;
        host_args.at(0) = x3523;
        host_args.at(1) = x3527;
        host_args.at(2) = x3531;
        host_args.at(3) = x3535;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3523);
          reg = x3523;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3527);
          reg = x3527;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3531);
          reg = x3531;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3535);
          reg = x3535;
        }
        {
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3536 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3536 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3537 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3537 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3538 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3538 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3539 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3539 != Fp::invalid());
          host_args.at(0) = x3211;
          host_args.at(1) = x3536;
          host_args.at(2) = x3537;
          host_args.at(3) = x3538;
          host_args.at(4) = x3539;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3540 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x3540 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3541 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3541 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3542 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3543 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3543 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3211);
          reg = x3211;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2847);
          reg = x2847;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3540);
          reg = x3540;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3541);
          reg = x3541;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3542);
          reg = x3542;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3543);
          reg = x3543;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3544 = x2936 - x36;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3544 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x2925 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
        auto x3545 = x2896 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":75:21)
        auto x3546 = x2899 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
        auto x3547 = x3545 + x3546;
        // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
        auto x3548 = x3547 + x3108;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
        auto x3549 = x2889 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:21)
        auto x3550 = x2891 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
        auto x3551 = x3549 + x3550;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
        auto x3552 = x3551 + x2893;
        // loc("cirgen/circuit/rv32im/decode.cpp":77:7)
        auto x3553 = x2889 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3548);
          reg = x3548;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3552);
          reg = x3552;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3553);
          reg = x3553;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3553);
          reg = x3553;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
      auto x3554 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3554 != Fp::invalid());
      if (x3554 != 0) {
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3555 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3555 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3556 = x3555 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3556 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3557 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3557 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3558 = x3557 + x3168;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3559 = x3558 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3559 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3560 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3560 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3561 = x3560 * x3097;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3562 = x87 - x3560;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3563 = x3562 * x3216;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3564 = x3561 + x3563;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3565 = x3168 * x3097;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3566 = x87 - x3168;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3567 = x3566 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3568 = x3565 + x3567;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3569 = x3560 * x3098;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3570 = x3562 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3571 = x3569 + x3570;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3572 = x3168 * x3098;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3573 = x3566 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3574 = x3572 + x3573;
        host_args.at(0) = x3564;
        host_args.at(1) = x3571;
        host_args.at(2) = x3568;
        host_args.at(3) = x3574;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3564);
          reg = x3564;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3571);
          reg = x3571;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3568);
          reg = x3568;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3574);
          reg = x3574;
        }
        {
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3575 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3575 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3576 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3576 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3577 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3577 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3578 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3578 != Fp::invalid());
          host_args.at(0) = x3211;
          host_args.at(1) = x3575;
          host_args.at(2) = x3576;
          host_args.at(3) = x3577;
          host_args.at(4) = x3578;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3579 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x3579 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3580 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3580 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3581 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3581 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3582 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3582 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3211);
          reg = x3211;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2847);
          reg = x2847;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3579);
          reg = x3579;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3580);
          reg = x3580;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3581);
          reg = x3581;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3582);
          reg = x3582;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3583 = x2936 - x36;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3583 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3584 = x2925 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3584 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
        auto x3585 = x2896 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":75:21)
        auto x3586 = x2899 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
        auto x3587 = x3585 + x3586;
        // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
        auto x3588 = x3587 + x3108;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
        auto x3589 = x2889 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:21)
        auto x3590 = x2891 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
        auto x3591 = x3589 + x3590;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
        auto x3592 = x3591 + x2893;
        // loc("cirgen/circuit/rv32im/decode.cpp":77:7)
        auto x3593 = x2889 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3588);
          reg = x3588;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3592);
          reg = x3592;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3593);
          reg = x3593;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3593);
          reg = x3593;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":84:46))
      auto x3594 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3594 != Fp::invalid());
      if (x3594 != 0) {
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":84:46))
          auto x3595 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3595 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
          auto x3596 = x3595 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
          if (x3596 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:84");
        }
        if (x86 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":84:46))
          auto x3597 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3597 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
          auto x3598 = x3597 + x3168;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
          auto x3599 = x3598 - x87;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
          if (x3599 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:84");
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":84:46))
        auto x3600 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3600 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3601 = x3600 * x3097;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3602 = x87 - x3600;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3603 = x3602 * x3216;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3604 = x3601 + x3603;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3605 = x3600 * x3098;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3606 = x3602 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3607 = x3605 + x3606;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3608 = x3600 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3609 = x3602 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3610 = x3608 + x3609;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3611 = x3600 * x3100;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3612 = x3602 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3613 = x3611 + x3612;
        host_args.at(0) = x3604;
        host_args.at(1) = x3607;
        host_args.at(2) = x3610;
        host_args.at(3) = x3613;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3604);
          reg = x3604;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3607);
          reg = x3607;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3610);
          reg = x3610;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3613);
          reg = x3613;
        }
        {
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3614 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3614 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3615 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3615 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3616 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3616 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3617 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3617 != Fp::invalid());
          host_args.at(0) = x3211;
          host_args.at(1) = x3614;
          host_args.at(2) = x3615;
          host_args.at(3) = x3616;
          host_args.at(4) = x3617;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3618 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x3618 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3619 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3620 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3621 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3621 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3211);
          reg = x3211;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2847);
          reg = x2847;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3618);
          reg = x3618;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3619);
          reg = x3619;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3620);
          reg = x3620;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3621);
          reg = x3621;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3622 = x2936 - x36;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        if (x3622 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:84");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3623 = x2925 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        if (x3623 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:84");
        // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
        auto x3624 = x2896 * x65;
        // loc("cirgen/circuit/rv32im/decode.cpp":75:21)
        auto x3625 = x2899 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
        auto x3626 = x3624 + x3625;
        // loc("cirgen/circuit/rv32im/decode.cpp":75:7)
        auto x3627 = x3626 + x3108;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
        auto x3628 = x2889 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:21)
        auto x3629 = x2891 * x84;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
        auto x3630 = x3628 + x3629;
        // loc("cirgen/circuit/rv32im/decode.cpp":76:7)
        auto x3631 = x3630 + x2893;
        // loc("cirgen/circuit/rv32im/decode.cpp":77:7)
        auto x3632 = x2889 * x83;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3627);
          reg = x3627;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3631);
          reg = x3631;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3632);
          reg = x3632;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3632);
          reg = x3632;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/components/mux.h":33:25))
    auto x3633 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x3633 != Fp::invalid());
    if (x3633 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3634 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x3634 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":16:41)
      auto x3635 = x526 * x78;
      {
        host_args.at(0) = x3635;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3636 = host_outs.at(0);
        auto x3637 = host_outs.at(1);
        auto x3638 = host_outs.at(2);
        auto x3639 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3636);
          reg = x3636;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3637);
          reg = x3637;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3638);
          reg = x3638;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3639);
          reg = x3639;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3640 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x3640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3641 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x3641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3642 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x3642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3643 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x3643 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3635);
        reg = x3635;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3634);
        reg = x3634;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3640);
        reg = x3640;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3641);
        reg = x3641;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3642);
        reg = x3642;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3643);
        reg = x3643;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":7:16)
        auto x3644 = Fp(x3643.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":7:15)
        auto x3645 = x3644 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3645);
          reg = x3645;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":8:17)
        auto x3646 = Fp(x3643.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":8:16)
        auto x3647 = x3646 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3647);
          reg = x3647;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":9:16)
        auto x3648 = Fp(x3643.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":9:15)
        auto x3649 = x3648 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3649);
          reg = x3649;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":10:16)
        auto x3650 = Fp(x3643.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":10:15)
        auto x3651 = x3650 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3651);
          reg = x3651;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":11:17)
        auto x3652 = Fp(x3643.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3653 = x3652 * x57;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3653);
          reg = x3653;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3654 = Fp(x3643.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3654);
          reg = x3654;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:17)
        auto x3655 = Fp(x3642.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3656 = x3655 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3656);
          reg = x3656;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:18)
        auto x3657 = Fp(x3642.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:17)
        auto x3658 = x3657 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3658);
          reg = x3658;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3659 = Fp(x3642.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3660 = x3659 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3660);
          reg = x3660;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:18)
        auto x3661 = Fp(x3642.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3662 = x3661 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3662);
          reg = x3662;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:18)
        auto x3663 = Fp(x3642.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3663);
          reg = x3663;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3664 = Fp(x3641.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:16)
        auto x3665 = x3664 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3665);
          reg = x3665;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:19)
        auto x3666 = Fp(x3641.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:18)
        auto x3667 = x3666 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3667);
          reg = x3667;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:20)
        auto x3668 = Fp(x3641.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:19)
        auto x3669 = x3668 * x59;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3669);
          reg = x3669;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:17)
        auto x3670 = Fp(x3641.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":21:16)
        auto x3671 = x3670 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3671);
          reg = x3671;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3672 = Fp(x3641.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3672);
          reg = x3672;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:16)
        auto x3673 = Fp(x3640.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:15)
        auto x3674 = x3673 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3674);
          reg = x3674;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:18)
        auto x3675 = Fp(x3640.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3675);
          reg = x3675;
        }
      }
      // loc("Top/Mux/4/Mux/4/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3676 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x3676 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3677 = x3676 * x56;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3678 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3678 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3679 = x3678 * x60;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3680 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x3680 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:25)
      auto x3681 = x3680 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3682 = x3679 + x3681;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3683 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x3683 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:39)
      auto x3684 = x3683 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3685 = x3682 + x3684;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3686 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3686 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3687 = x3685 + x3686;
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3688 = x3677 + x3687;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x3689 = x3688 * x84;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3690 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x3690 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x3691 = x3689 + x3690;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      auto x3692 = x3643 - x3691;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      if (x3692 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:26");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3693 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x3693 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x3694 = x3693 * x70;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3695 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3695 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:37)
      auto x3696 = x3695 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x3697 = x3694 + x3696;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3698 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x3698 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x3699 = x3697 + x3698;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x3700 = x3699 * x60;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3701 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3701 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:69)
      auto x3702 = x3701 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x3703 = x3700 + x3702;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3704 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3704 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x3705 = x3703 + x3704;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      auto x3706 = x3642 - x3705;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      if (x3706 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:27");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3707 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x3707 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x3708 = x3707 * x65;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3709 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x3709 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3710 = x3709 * x80;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3711 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3711 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3712 = x3710 + x3711;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:36)
      auto x3713 = x3712 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x3714 = x3708 + x3713;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3715 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x3715 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:53)
      auto x3716 = x3715 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x3717 = x3714 + x3716;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3718 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3718 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x3719 = x3717 + x3718;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      auto x3720 = x3641 - x3719;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      if (x3720 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:28");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3721 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x3721 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x3722 = x3721 * x65;
      // loc("Top/Mux/4/Mux/4/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x3723 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x3723 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x3724 = x3722 + x3723;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      auto x3725 = x3640 - x3724;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      if (x3725 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:29");
      {
        host_args.at(0) = x3640;
        host_args.at(1) = x3641;
        host_args.at(2) = x3642;
        host_args.at(3) = x3643;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3726 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3727 = (x3726 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3727);
            reg = x3727;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3728 = x3726 - x87;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3729 = (x3728 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3729);
            reg = x3729;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3730 = x3726 - x84;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3731 = (x3730 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3731);
            reg = x3731;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3732 = x3726 - x79;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3733 = (x3732 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3733);
            reg = x3733;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3734 = x3726 - x80;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3735 = (x3734 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3735);
            reg = x3735;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3736 = x3726 - x73;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x3737 = (x3736 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3737);
            reg = x3737;
          }
        }
        // loc("Top/Mux/4/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x3738 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x3738 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x3739 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x3739 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x3740 = x3739 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x3741 = x3738 + x3740;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x3742 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x3742 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x3743 = x3742 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x3744 = x3741 + x3743;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x3745 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x3745 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x3746 = x3745 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x3747 = x3744 + x3746;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x3748 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x3748 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x3749 = x3748 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x3750 = x3747 + x3749;
        // loc("./cirgen/components/onehot.h":34:8)
        auto x3751 = x3750 - x3726;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x3751 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
      }
      host_args.at(0) = x86;
      host_args.at(1) = x86;
      host_args.at(2) = x86;
      host_args.at(3) = x86;
      host_args.at(4) = x86;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/4/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":102:49))
      auto x3752 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":103:49))
      auto x3753 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3753 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
      auto x3754 = x3752 + x3753;
      // loc("Top/Mux/4/Mux/4/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":104:49))
      auto x3755 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3755 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
      auto x3756 = x3754 + x3755;
      // loc("Top/Mux/4/Mux/4/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":105:49))
      auto x3757 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":106:49))
      auto x3758 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3758 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
      auto x3759 = x3757 + x3758;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x3760 = x3701 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:26)
      auto x3761 = x3704 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x3762 = x3760 + x3761;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x3763 = x3762 + x3707;
      // loc("cirgen/circuit/rv32im/multiply.cpp":50:39)
      auto x3764 = x3763 + x49;
      {
        host_args.at(0) = x3764;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3765 = host_outs.at(0);
        auto x3766 = host_outs.at(1);
        auto x3767 = host_outs.at(2);
        auto x3768 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3765);
          reg = x3765;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3766);
          reg = x3766;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3767);
          reg = x3767;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3768);
          reg = x3768;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3769 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x3769 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3770 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3770 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3771 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3771 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3772 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3772 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3764);
        reg = x3764;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3634);
        reg = x3634;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3769);
        reg = x3769;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3770);
        reg = x3770;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3771);
        reg = x3771;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3772);
        reg = x3772;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3773 = x3690 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3774 = x3773 + x3699;
      // loc("cirgen/circuit/rv32im/multiply.cpp":51:39)
      auto x3775 = x3774 + x49;
      {
        host_args.at(0) = x3775;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3776 = host_outs.at(0);
        auto x3777 = host_outs.at(1);
        auto x3778 = host_outs.at(2);
        auto x3779 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3776);
          reg = x3776;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3777);
          reg = x3777;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3778);
          reg = x3778;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3779);
          reg = x3779;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3780 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x3780 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3781 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3781 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3782 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3782 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3783 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3783 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3775);
        reg = x3775;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3634);
        reg = x3634;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3780);
        reg = x3780;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3781);
        reg = x3781;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3782);
        reg = x3782;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3783);
        reg = x3783;
      }
      host_args.at(0) = x3763;
      host_args.at(1) = x3769;
      host_args.at(2) = x3770;
      host_args.at(3) = x3771;
      host_args.at(4) = x3772;
      host_args.at(5) = x3774;
      host_args.at(6) = x3780;
      host_args.at(7) = x3781;
      host_args.at(8) = x3782;
      host_args.at(9) = x3783;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
      auto x3784 = x3683 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
      auto x3785 = x3686 * x62;
      // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
      auto x3786 = x3784 + x3785;
      // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
      auto x3787 = x3786 + x3774;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x3788 = x3758 * x3787;
      // loc("cirgen/circuit/rv32im/multiply.cpp":57:35)
      auto x3789 = x87 - x3758;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x3790 = x3789 * x3780;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x3791 = x3788 + x3790;
      {
        // loc("cirgen/circuit/rv32im/multiply.cpp":59:16)
        auto x3792 = Fp(x3791.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":59:15)
        auto x3793 = x3792 * x55;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3793);
          reg = x3793;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":60:16)
        auto x3794 = Fp(x3791.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":60:15)
        auto x3795 = x3794 * x61;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3795);
          reg = x3795;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":61:14)
        auto x3796 = Fp(x3791.asUInt32() & x34.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":177:21)
          auto x3797 = Fp(x3796.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3797);
            reg = x3797;
          }
          // loc("cirgen/components/u32.cpp":177:21)
          auto x3798 = Fp(x3796.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/u32.cpp":177:20)
          auto x3799 = x3798 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3799);
            reg = x3799;
          }
          // loc("cirgen/components/u32.cpp":177:21)
          auto x3800 = Fp(x3796.asUInt32() & x80.asUInt32());
          // loc("cirgen/components/u32.cpp":177:20)
          auto x3801 = x3800 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3801);
            reg = x3801;
          }
          // loc("cirgen/components/u32.cpp":177:21)
          auto x3802 = Fp(x3796.asUInt32() & x70.asUInt32());
          // loc("cirgen/components/u32.cpp":177:20)
          auto x3803 = x3802 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3803);
            reg = x3803;
          }
          // loc("cirgen/components/u32.cpp":177:21)
          auto x3804 = Fp(x3796.asUInt32() & x60.asUInt32());
          // loc("cirgen/components/u32.cpp":177:20)
          auto x3805 = x3804 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3805);
            reg = x3805;
          }
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3806 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x3806 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":179:21)
          auto x3807 = x3806 * x33;
          // loc("cirgen/components/u32.cpp":179:17)
          auto x3808 = x3807 + x87;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3809 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x3809 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":179:42)
          auto x3810 = x3809 * x79;
          // loc("cirgen/components/u32.cpp":179:38)
          auto x3811 = x3810 + x87;
          // loc("cirgen/components/u32.cpp":179:16)
          auto x3812 = x3808 * x3811;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3813 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x3813 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":179:58)
          auto x3814 = x3813 + x87;
          // loc("cirgen/components/u32.cpp":179:16)
          auto x3815 = x3812 * x3814;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3816 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x3816 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":180:15)
          auto x3817 = x3816 * x84;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x3818 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x3818 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":180:15)
          auto x3819 = x3817 + x3818;
          // loc("cirgen/components/u32.cpp":182:13)
          auto x3820 = (x3819 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":182:9)
          auto x3821 = x3820 * x3815;
          // loc("cirgen/components/u32.cpp":182:34)
          auto x3822 = x3819 - x87;
          // loc("cirgen/components/u32.cpp":182:34)
          auto x3823 = (x3822 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":182:30)
          auto x3824 = x3823 * x3815;
          // loc("cirgen/components/u32.cpp":182:55)
          auto x3825 = x3819 - x84;
          // loc("cirgen/components/u32.cpp":182:55)
          auto x3826 = (x3825 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":182:51)
          auto x3827 = x3826 * x3815;
          // loc("cirgen/components/u32.cpp":182:76)
          auto x3828 = x3819 - x79;
          // loc("cirgen/components/u32.cpp":182:76)
          auto x3829 = (x3828 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":182:72)
          auto x3830 = x3829 * x3815;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3821);
            reg = x3821;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3824);
            reg = x3824;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3827);
            reg = x3827;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3830);
            reg = x3830;
          }
        }
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3831 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x3831 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3832 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3832 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":191:17)
        auto x3833 = x3832 * x84;
        // loc("cirgen/components/u32.cpp":191:11)
        auto x3834 = x3831 + x3833;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3835 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3835 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":191:17)
        auto x3836 = x3835 * x80;
        // loc("cirgen/components/u32.cpp":191:11)
        auto x3837 = x3834 + x3836;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3838 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3838 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":191:17)
        auto x3839 = x3838 * x70;
        // loc("cirgen/components/u32.cpp":191:11)
        auto x3840 = x3837 + x3839;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x3841 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3841 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":191:17)
        auto x3842 = x3841 * x60;
        // loc("cirgen/components/u32.cpp":191:11)
        auto x3843 = x3840 + x3842;
        // loc("cirgen/components/u32.cpp":185:6)
        auto x3844 = x3843 - x3796;
        // loc("cirgen/components/u32.cpp":185:6)
        if (x3844 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:185");
      }
      // loc("Top/Mux/4/Mux/4/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3845 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3845 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":63:23)
      auto x3846 = x3845 * x56;
      // loc("Top/Mux/4/Mux/4/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3847 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3847 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":63:37)
      auto x3848 = x3847 * x62;
      // loc("cirgen/circuit/rv32im/multiply.cpp":63:23)
      auto x3849 = x3846 + x3848;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3850 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3850 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3851 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3851 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":191:17)
      auto x3852 = x3851 * x84;
      // loc("cirgen/components/u32.cpp":191:11)
      auto x3853 = x3850 + x3852;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3854 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3854 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":191:17)
      auto x3855 = x3854 * x80;
      // loc("cirgen/components/u32.cpp":191:11)
      auto x3856 = x3853 + x3855;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3857 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3857 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":191:17)
      auto x3858 = x3857 * x70;
      // loc("cirgen/components/u32.cpp":191:11)
      auto x3859 = x3856 + x3858;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3860 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3860 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":191:17)
      auto x3861 = x3860 * x60;
      // loc("cirgen/components/u32.cpp":191:11)
      auto x3862 = x3859 + x3861;
      // loc("cirgen/circuit/rv32im/multiply.cpp":63:23)
      auto x3863 = x3849 + x3862;
      // loc("cirgen/circuit/rv32im/multiply.cpp":63:6)
      auto x3864 = x3791 - x3863;
      // loc("cirgen/circuit/rv32im/multiply.cpp":63:6)
      if (x3864 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/multiply.cpp:63");
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3865 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3865 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3866 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3866 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3867 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x3867 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3868 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x3868 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x3869 = x3759 * x3865;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x3870 = x3759 * x3866;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x3871 = x3759 * x3867;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x3872 = x3759 * x3868;
      // loc("cirgen/circuit/rv32im/multiply.cpp":66:42)
      auto x3873 = x87 - x3759;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x3874 = x3873 * x3780;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x3875 = x3873 * x3781;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x3876 = x3873 * x3782;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x3877 = x3873 * x3783;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x3878 = x3869 + x3874;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x3879 = x3870 + x3875;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x3880 = x3871 + x3876;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x3881 = x3872 + x3877;
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x3882 = Fp(x3772.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x3883 = x3882 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3883);
          reg = x3883;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x3884 = Fp(x3772.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x3885 = x3884 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3885);
          reg = x3885;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3886 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3886 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x3887 = x3886 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x3888 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3888 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x3889 = x3888 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x3890 = x3887 + x3889;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x3891 = x3772 - x3890;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x3891 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x3892 = Fp(x3881.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x3893 = x3892 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3893);
          reg = x3893;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x3894 = Fp(x3881.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x3895 = x3894 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3895);
          reg = x3895;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3896 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3896 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x3897 = x3896 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x3898 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3898 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x3899 = x3898 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x3900 = x3897 + x3899;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x3901 = x3881 - x3900;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x3901 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      // loc("cirgen/components/u32.cpp":203:13)
      auto x3902 = x3752 * x3896;
      // loc("cirgen/components/u32.cpp":203:3)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3902);
        reg = x3902;
      }
      // loc("cirgen/components/u32.cpp":204:13)
      auto x3903 = x3754 * x3886;
      // loc("cirgen/components/u32.cpp":204:3)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3903);
        reg = x3903;
      }
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3904 = x3769 * x3878;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3905 = x3770 * x3878;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3906 = x3769 * x3879;
      // loc("cirgen/components/u32.cpp":219:20)
      auto x3907 = x3905 + x3906;
      // loc("cirgen/components/u32.cpp":221:19)
      auto x3908 = x3907 * x82;
      // loc("cirgen/components/u32.cpp":221:13)
      auto x3909 = x3904 + x3908;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3910 = Fp(x3909.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3910);
          reg = x3910;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x3911 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3911 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3912 = x3909 - x3911;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3913 = x3912 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3914 = Fp(x3913.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3914);
          reg = x3914;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x3915 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3915 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3916 = x3913 - x3915;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3917 = x3916 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3918 = Fp(x3917.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3918);
          reg = x3918;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x3919 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3919 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3920 = x3917 - x3919;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3921 = x3920 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3921);
        reg = x3921;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3922 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3922 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":209:19)
      auto x3923 = x3922 * x82;
      // loc("cirgen/components/u32.cpp":209:13)
      auto x3924 = x3919 + x3923;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3925 = x3771 * x3878;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3926 = x3770 * x3879;
      // loc("cirgen/components/u32.cpp":219:20)
      auto x3927 = x3925 + x3926;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3928 = x3769 * x3880;
      // loc("cirgen/components/u32.cpp":219:20)
      auto x3929 = x3927 + x3928;
      // loc("cirgen/components/u32.cpp":221:13)
      auto x3930 = x3924 + x3929;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3931 = x3772 * x3878;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3932 = x3771 * x3879;
      // loc("cirgen/components/u32.cpp":219:20)
      auto x3933 = x3931 + x3932;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3934 = x3770 * x3880;
      // loc("cirgen/components/u32.cpp":219:20)
      auto x3935 = x3933 + x3934;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3936 = x3769 * x3881;
      // loc("cirgen/components/u32.cpp":219:20)
      auto x3937 = x3935 + x3936;
      // loc("cirgen/components/u32.cpp":221:19)
      auto x3938 = x3937 * x82;
      // loc("cirgen/components/u32.cpp":221:13)
      auto x3939 = x3930 + x3938;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3940 = Fp(x3939.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3940);
          reg = x3940;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x3941 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3941 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3942 = x3939 - x3941;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3943 = x3942 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3944 = Fp(x3943.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3944);
          reg = x3944;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x3945 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3945 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3946 = x3943 - x3945;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3947 = x3946 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3948 = Fp(x3947.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3948);
          reg = x3948;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x3949 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3949 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3950 = x3947 - x3949;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3951 = x3950 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3951);
        reg = x3951;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3952 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x3952 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":209:19)
      auto x3953 = x3952 * x82;
      // loc("cirgen/components/u32.cpp":209:13)
      auto x3954 = x3949 + x3953;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3955 = x3772 * x3879;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3956 = x3771 * x3880;
      // loc("cirgen/components/u32.cpp":219:20)
      auto x3957 = x3955 + x3956;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3958 = x3770 * x3881;
      // loc("cirgen/components/u32.cpp":219:20)
      auto x3959 = x3957 + x3958;
      // loc("cirgen/components/u32.cpp":221:13)
      auto x3960 = x3954 + x3959;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3961 = x3772 * x3880;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3962 = x3771 * x3881;
      // loc("cirgen/components/u32.cpp":219:20)
      auto x3963 = x3961 + x3962;
      // loc("cirgen/components/u32.cpp":221:19)
      auto x3964 = x3963 * x82;
      // loc("cirgen/components/u32.cpp":221:13)
      auto x3965 = x3960 + x3964;
      // loc("cirgen/components/u32.cpp":224:13)
      auto x3966 = x3965 + x32;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x3967 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3967 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":224:53)
      auto x3968 = x3770 * x82;
      // loc("cirgen/components/u32.cpp":224:38)
      auto x3969 = x3769 + x3968;
      // loc("cirgen/components/u32.cpp":224:30)
      auto x3970 = x3967 * x3969;
      // loc("cirgen/components/u32.cpp":224:13)
      auto x3971 = x3966 - x3970;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x3972 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x3972 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":225:37)
      auto x3973 = x3879 * x82;
      // loc("cirgen/components/u32.cpp":225:22)
      auto x3974 = x3878 + x3973;
      // loc("cirgen/components/u32.cpp":225:14)
      auto x3975 = x3972 * x3974;
      // loc("cirgen/components/u32.cpp":224:13)
      auto x3976 = x3971 - x3975;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3977 = Fp(x3976.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3977);
          reg = x3977;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x3978 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x3978 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3979 = x3976 - x3978;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3980 = x3979 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3981 = Fp(x3980.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3981);
          reg = x3981;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x3982 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x3982 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3983 = x3980 - x3982;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3984 = x3983 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x3985 = Fp(x3984.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3985);
          reg = x3985;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x3986 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x3986 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x3987 = x3984 - x3986;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x3988 = x3987 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3988);
        reg = x3988;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x3989 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x3989 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":209:19)
      auto x3990 = x3989 * x82;
      // loc("cirgen/components/u32.cpp":209:13)
      auto x3991 = x3986 + x3990;
      // loc("cirgen/components/u32.cpp":219:31)
      auto x3992 = x3772 * x3881;
      // loc("cirgen/components/u32.cpp":221:13)
      auto x3993 = x3991 + x3992;
      // loc("cirgen/components/u32.cpp":228:13)
      auto x3994 = x3993 + x31;
      // loc("cirgen/components/u32.cpp":228:53)
      auto x3995 = x3772 * x82;
      // loc("cirgen/components/u32.cpp":228:38)
      auto x3996 = x3771 + x3995;
      // loc("cirgen/components/u32.cpp":228:30)
      auto x3997 = x3967 * x3996;
      // loc("cirgen/components/u32.cpp":228:13)
      auto x3998 = x3994 - x3997;
      // loc("cirgen/components/u32.cpp":229:37)
      auto x3999 = x3881 * x82;
      // loc("cirgen/components/u32.cpp":229:22)
      auto x4000 = x3880 + x3999;
      // loc("cirgen/components/u32.cpp":229:14)
      auto x4001 = x3972 * x4000;
      // loc("cirgen/components/u32.cpp":228:13)
      auto x4002 = x3998 - x4001;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4003 = Fp(x4002.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4003);
          reg = x4003;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x4004 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x4004 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4005 = x4002 - x4004;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4006 = x4005 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4007 = Fp(x4006.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4007);
          reg = x4007;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x4008 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x4008 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4009 = x4006 - x4008;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4010 = x4009 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4010);
        reg = x4010;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4011 = x3715 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:25)
      auto x4012 = x3718 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4013 = x4011 + x4012;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4014 = x4013 + x3721;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x4015 = (x4014 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4015);
          reg = x4015;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x4016 = inv(x4014);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4016);
          reg = x4016;
        }
      }
      // loc("Top/Mux/4/Mux/4/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4017 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x4017 != Fp::invalid());
      if (x4017 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x4014 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x4018 = x87 - x4017;
      if (x4018 != 0) {
        // loc("Top/Mux/4/Mux/4/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x4019 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x4019 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x4020 = x4014 * x4019;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x4021 = x4020 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x4021 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":74:17)
      auto x4022 = x526 + x80;
      // loc("cirgen/circuit/rv32im/body.cpp":10:23)
      auto x4023 = x4022 + x80;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4024 = Fp(x4023.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4024);
          reg = x4024;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x4025 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4025 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4026 = x4023 - x4025;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4027 = x4026 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4028 = Fp(x4027.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4028);
          reg = x4028;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x4029 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4029 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4030 = x4027 - x4029;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4031 = x4030 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4032 = Fp(x4031.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4032);
          reg = x4032;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x4033 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4033 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4034 = x4031 - x4033;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4035 = x4034 * x81;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":13:26)
        auto x4036 = Fp(x4035.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4036);
          reg = x4036;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4037 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4037 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:18)
      auto x4038 = x4035 - x4037;
      // loc("cirgen/circuit/rv32im/body.cpp":14:17)
      auto x4039 = x4038 * x78;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4039);
        reg = x4039;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4040 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4040 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:23)
      auto x4041 = x87 - x4040;
      // loc("cirgen/circuit/rv32im/body.cpp":18:15)
      auto x4042 = x4040 * x4041;
      // loc("cirgen/circuit/rv32im/body.cpp":18:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4042);
        reg = x4042;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x4043 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4043 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":19:17)
      auto x4044 = x84 - x4040;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      auto x4045 = x4043 * x4044;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      if (x4045 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
      // loc("cirgen/circuit/rv32im/multiply.cpp":75:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x77);
        reg = x77;
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":76:38)
      auto x4046 = x3756 * x4018;
      if (x4046 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":77:29)
        auto x4047 = x4014 + x49;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3978);
          reg = x3978;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3982);
          reg = x3982;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4004);
          reg = x4004;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4008);
          reg = x4008;
        }
        {
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4048 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x4048 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4049 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x4049 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4050 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x4050 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4051 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x4051 != Fp::invalid());
          host_args.at(0) = x4047;
          host_args.at(1) = x4048;
          host_args.at(2) = x4049;
          host_args.at(3) = x4050;
          host_args.at(4) = x4051;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4052 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x4052 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4053 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4053 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4054 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4054 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4055 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4055 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4047);
          reg = x4047;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3634);
          reg = x3634;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4052);
          reg = x4052;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4053);
          reg = x4053;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4054);
          reg = x4054;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4055);
          reg = x4055;
        }
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:44)
      auto x4056 = x87 - x3756;
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:44)
      auto x4057 = x4056 * x4018;
      if (x4057 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":80:29)
        auto x4058 = x4014 + x49;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3911);
          reg = x3911;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3915);
          reg = x3915;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3941);
          reg = x3941;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3945);
          reg = x3945;
        }
        {
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4059 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x4059 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4060 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x4060 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4061 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x4061 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4062 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x4062 != Fp::invalid());
          host_args.at(0) = x4058;
          host_args.at(1) = x4059;
          host_args.at(2) = x4060;
          host_args.at(3) = x4061;
          host_args.at(4) = x4062;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4063 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x4063 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4064 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4064 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4065 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4065 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4066 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4066 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4058);
          reg = x4058;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3634);
          reg = x3634;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4063);
          reg = x4063;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4064);
          reg = x4064;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4065);
          reg = x4065;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4066);
          reg = x4066;
        }
      }
      if (x4017 != 0) {
        // loc("cirgen/components/ram.cpp":39:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":40:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":41:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
      // loc("Top/Mux/4/Mux/4/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":101:49))
      auto x4067 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4067 != Fp::invalid());
      if (x4067 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4068 = x3723 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4068 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3712 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4069 = x3688 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4069 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3752 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4070 = x3723 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4070 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4071 = x3712 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4071 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4072 = x3688 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4072 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x3753 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4073 = x3723 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4073 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4074 = x3712 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4074 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4075 = x3688 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4075 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x3755 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4076 = x3723 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4076 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4077 = x3712 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4077 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4078 = x3688 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4078 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x3757 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4079 = x3723 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4079 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4080 = x3712 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4080 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3688 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x3758 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4081 = x3723 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4081 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4082 = x3712 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4082 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3688 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/components/mux.h":33:25))
    auto x4083 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x4083 != Fp::invalid());
    if (x4083 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4084 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x4084 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":16:41)
      auto x4085 = x526 * x78;
      {
        host_args.at(0) = x4085;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x4086 = host_outs.at(0);
        auto x4087 = host_outs.at(1);
        auto x4088 = host_outs.at(2);
        auto x4089 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4086);
          reg = x4086;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4087);
          reg = x4087;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4088);
          reg = x4088;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4089);
          reg = x4089;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4090 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4090 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4091 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4091 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4092 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4092 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4093 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4093 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4085);
        reg = x4085;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4084);
        reg = x4084;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4090);
        reg = x4090;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4091);
        reg = x4091;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4092);
        reg = x4092;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4093);
        reg = x4093;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":7:16)
        auto x4094 = Fp(x4093.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":7:15)
        auto x4095 = x4094 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4095);
          reg = x4095;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":8:17)
        auto x4096 = Fp(x4093.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":8:16)
        auto x4097 = x4096 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4097);
          reg = x4097;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":9:16)
        auto x4098 = Fp(x4093.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":9:15)
        auto x4099 = x4098 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4099);
          reg = x4099;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":10:16)
        auto x4100 = Fp(x4093.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":10:15)
        auto x4101 = x4100 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4101);
          reg = x4101;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":11:17)
        auto x4102 = Fp(x4093.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4103 = x4102 * x57;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4103);
          reg = x4103;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4104 = Fp(x4093.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4104);
          reg = x4104;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:17)
        auto x4105 = Fp(x4092.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4106 = x4105 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4106);
          reg = x4106;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:18)
        auto x4107 = Fp(x4092.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:17)
        auto x4108 = x4107 * x61;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4108);
          reg = x4108;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4109 = Fp(x4092.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x4110 = x4109 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4110);
          reg = x4110;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:18)
        auto x4111 = Fp(x4092.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4112 = x4111 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4112);
          reg = x4112;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:18)
        auto x4113 = Fp(x4092.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4113);
          reg = x4113;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x4114 = Fp(x4091.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:16)
        auto x4115 = x4114 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4115);
          reg = x4115;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:19)
        auto x4116 = Fp(x4091.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:18)
        auto x4117 = x4116 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4117);
          reg = x4117;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:20)
        auto x4118 = Fp(x4091.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:19)
        auto x4119 = x4118 * x59;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4119);
          reg = x4119;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:17)
        auto x4120 = Fp(x4091.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":21:16)
        auto x4121 = x4120 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4121);
          reg = x4121;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4122 = Fp(x4091.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4122);
          reg = x4122;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:16)
        auto x4123 = Fp(x4090.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:15)
        auto x4124 = x4123 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4124);
          reg = x4124;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:18)
        auto x4125 = Fp(x4090.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4125);
          reg = x4125;
        }
      }
      // loc("Top/Mux/4/Mux/5/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4126 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4126 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4127 = x4126 * x56;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4128 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4128 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4129 = x4128 * x60;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4130 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4130 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:25)
      auto x4131 = x4130 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4132 = x4129 + x4131;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4133 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4133 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:39)
      auto x4134 = x4133 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4135 = x4132 + x4134;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4136 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4136 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4137 = x4135 + x4136;
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4138 = x4127 + x4137;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x4139 = x4138 * x84;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4140 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4140 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":26:21)
      auto x4141 = x4139 + x4140;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      auto x4142 = x4093 - x4141;
      // loc("cirgen/circuit/rv32im/decode.cpp":26:6)
      if (x4142 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:26");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4143 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4143 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x4144 = x4143 * x70;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4145 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4145 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:37)
      auto x4146 = x4145 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x4147 = x4144 + x4146;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4148 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4148 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:22)
      auto x4149 = x4147 + x4148;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x4150 = x4149 * x60;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4151 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4151 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:69)
      auto x4152 = x4151 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x4153 = x4150 + x4152;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4154 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4154 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":27:21)
      auto x4155 = x4153 + x4154;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      auto x4156 = x4092 - x4155;
      // loc("cirgen/circuit/rv32im/decode.cpp":27:6)
      if (x4156 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:27");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4157 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4157 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x4158 = x4157 * x65;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4159 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4159 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4160 = x4159 * x80;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4161 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4161 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4162 = x4160 + x4161;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:36)
      auto x4163 = x4162 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x4164 = x4158 + x4163;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4165 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4165 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:53)
      auto x4166 = x4165 * x80;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x4167 = x4164 + x4166;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4168 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4168 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":28:21)
      auto x4169 = x4167 + x4168;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      auto x4170 = x4091 - x4169;
      // loc("cirgen/circuit/rv32im/decode.cpp":28:6)
      if (x4170 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:28");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4171 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4171 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x4172 = x4171 * x65;
      // loc("Top/Mux/4/Mux/5/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x4173 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4173 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":29:21)
      auto x4174 = x4172 + x4173;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      auto x4175 = x4090 - x4174;
      // loc("cirgen/circuit/rv32im/decode.cpp":29:6)
      if (x4175 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:29");
      {
        host_args.at(0) = x4090;
        host_args.at(1) = x4091;
        host_args.at(2) = x4092;
        host_args.at(3) = x4093;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x4176 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4177 = (x4176 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4177);
            reg = x4177;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4178 = x4176 - x87;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4179 = (x4178 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4179);
            reg = x4179;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4180 = x4176 - x84;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4181 = (x4180 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4181);
            reg = x4181;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4182 = x4176 - x79;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4183 = (x4182 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4183);
            reg = x4183;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4184 = x4176 - x80;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4185 = (x4184 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4185);
            reg = x4185;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4186 = x4176 - x73;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4187 = (x4186 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4187);
            reg = x4187;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4188 = x4176 - x72;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4189 = (x4188 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4189);
            reg = x4189;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4190 = x4176 - x71;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x4191 = (x4190 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4191);
            reg = x4191;
          }
        }
        // loc("Top/Mux/4/Mux/5/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x4192 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x4192 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x4193 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x4193 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x4194 = x4193 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x4195 = x4192 + x4194;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x4196 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x4196 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x4197 = x4196 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x4198 = x4195 + x4197;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x4199 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x4199 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x4200 = x4199 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x4201 = x4198 + x4200;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x4202 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x4202 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x4203 = x4202 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x4204 = x4201 + x4203;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x4205 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x4205 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x4206 = x4205 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x4207 = x4204 + x4206;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x4208 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x4208 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x4209 = x4208 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x4210 = x4207 + x4209;
        // loc("./cirgen/components/onehot.h":34:8)
        auto x4211 = x4210 - x4176;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x4211 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":123:49))
      auto x4212 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4212 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":125:49))
      auto x4213 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4213 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
      auto x4214 = x4212 + x4213;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":126:49))
      auto x4215 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4215 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
      auto x4216 = x4213 + x4215;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":127:49))
      auto x4217 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4217 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":128:49))
      auto x4218 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4218 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
      auto x4219 = x4217 + x4218;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
      auto x4220 = x4214 + x4218;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":129:49))
      auto x4221 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4221 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4222 = x4219 + x4221;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":130:49))
      auto x4223 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4223 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4224 = x4221 + x4223;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4225 = x4222 + x4223;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4226 = x4220 + x4223;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4227 = x4218 + x4223;
      // loc("cirgen/circuit/rv32im/divide.cpp":42:3)
      {
        auto& reg = args[2][188 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4226);
        reg = x4226;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":43:3)
      {
        auto& reg = args[2][189 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4227);
        reg = x4227;
      }
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":47:8))
      auto x4228 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4228 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg1"("cirgen/circuit/rv32im/divide.cpp":48:8))
      auto x4229 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4229 != Fp::invalid());
      host_args.at(0) = x4224;
      host_args.at(1) = x4225;
      host_args.at(2) = x4228;
      host_args.at(3) = x4229;
      host_args.at(4) = x4216;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x4230 = x4151 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:26)
      auto x4231 = x4154 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x4232 = x4230 + x4231;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:10)
      auto x4233 = x4232 + x4157;
      // loc("cirgen/circuit/rv32im/divide.cpp":52:39)
      auto x4234 = x4233 + x49;
      {
        host_args.at(0) = x4234;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x4235 = host_outs.at(0);
        auto x4236 = host_outs.at(1);
        auto x4237 = host_outs.at(2);
        auto x4238 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4235);
          reg = x4235;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4236);
          reg = x4236;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4237);
          reg = x4237;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4238);
          reg = x4238;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4239 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4239 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4240 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4240 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4241 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4241 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4242 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4242 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4234);
        reg = x4234;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4084);
        reg = x4084;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4239);
        reg = x4239;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4240);
        reg = x4240;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4241);
        reg = x4241;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4242);
        reg = x4242;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4243 = x4140 * x60;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4244 = x4243 + x4149;
      // loc("cirgen/circuit/rv32im/divide.cpp":53:39)
      auto x4245 = x4244 + x49;
      {
        host_args.at(0) = x4245;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x4246 = host_outs.at(0);
        auto x4247 = host_outs.at(1);
        auto x4248 = host_outs.at(2);
        auto x4249 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4246);
          reg = x4246;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4247);
          reg = x4247;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4248);
          reg = x4248;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4249);
          reg = x4249;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4250 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4250 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4251 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4251 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4252 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4252 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4253 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4253 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4245);
        reg = x4245;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4084);
        reg = x4084;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4250);
        reg = x4250;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4251);
        reg = x4251;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4252);
        reg = x4252;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4253);
        reg = x4253;
      }
      host_args.at(0) = x4233;
      host_args.at(1) = x4239;
      host_args.at(2) = x4240;
      host_args.at(3) = x4241;
      host_args.at(4) = x4242;
      host_args.at(5) = x4244;
      host_args.at(6) = x4250;
      host_args.at(7) = x4251;
      host_args.at(8) = x4252;
      host_args.at(9) = x4253;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
      auto x4254 = x4133 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":66:21)
      auto x4255 = x4136 * x62;
      // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
      auto x4256 = x4254 + x4255;
      // loc("cirgen/circuit/rv32im/decode.cpp":66:7)
      auto x4257 = x4256 + x4244;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4258 = x4224 * x4257;
      // loc("cirgen/circuit/rv32im/divide.cpp":59:35)
      auto x4259 = x87 - x4224;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4260 = x4259 * x4250;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4261 = x4258 + x4260;
      {
        // loc("cirgen/circuit/rv32im/divide.cpp":61:16)
        auto x4262 = Fp(x4261.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":61:15)
        auto x4263 = x4262 * x55;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4263);
          reg = x4263;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":62:16)
        auto x4264 = Fp(x4261.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":62:15)
        auto x4265 = x4264 * x61;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4265);
          reg = x4265;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":63:14)
        auto x4266 = Fp(x4261.asUInt32() & x34.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":177:21)
          auto x4267 = Fp(x4266.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4267);
            reg = x4267;
          }
          // loc("cirgen/components/u32.cpp":177:21)
          auto x4268 = Fp(x4266.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/u32.cpp":177:20)
          auto x4269 = x4268 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4269);
            reg = x4269;
          }
          // loc("cirgen/components/u32.cpp":177:21)
          auto x4270 = Fp(x4266.asUInt32() & x80.asUInt32());
          // loc("cirgen/components/u32.cpp":177:20)
          auto x4271 = x4270 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4271);
            reg = x4271;
          }
          // loc("cirgen/components/u32.cpp":177:21)
          auto x4272 = Fp(x4266.asUInt32() & x70.asUInt32());
          // loc("cirgen/components/u32.cpp":177:20)
          auto x4273 = x4272 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4273);
            reg = x4273;
          }
          // loc("cirgen/components/u32.cpp":177:21)
          auto x4274 = Fp(x4266.asUInt32() & x60.asUInt32());
          // loc("cirgen/components/u32.cpp":177:20)
          auto x4275 = x4274 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4275);
            reg = x4275;
          }
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4276 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x4276 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":179:21)
          auto x4277 = x4276 * x33;
          // loc("cirgen/components/u32.cpp":179:17)
          auto x4278 = x4277 + x87;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4279 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x4279 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":179:42)
          auto x4280 = x4279 * x79;
          // loc("cirgen/components/u32.cpp":179:38)
          auto x4281 = x4280 + x87;
          // loc("cirgen/components/u32.cpp":179:16)
          auto x4282 = x4278 * x4281;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4283 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x4283 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":179:58)
          auto x4284 = x4283 + x87;
          // loc("cirgen/components/u32.cpp":179:16)
          auto x4285 = x4282 * x4284;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4286 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x4286 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":180:15)
          auto x4287 = x4286 * x84;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4288 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x4288 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":180:15)
          auto x4289 = x4287 + x4288;
          // loc("cirgen/components/u32.cpp":182:13)
          auto x4290 = (x4289 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":182:9)
          auto x4291 = x4290 * x4285;
          // loc("cirgen/components/u32.cpp":182:34)
          auto x4292 = x4289 - x87;
          // loc("cirgen/components/u32.cpp":182:34)
          auto x4293 = (x4292 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":182:30)
          auto x4294 = x4293 * x4285;
          // loc("cirgen/components/u32.cpp":182:55)
          auto x4295 = x4289 - x84;
          // loc("cirgen/components/u32.cpp":182:55)
          auto x4296 = (x4295 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":182:51)
          auto x4297 = x4296 * x4285;
          // loc("cirgen/components/u32.cpp":182:76)
          auto x4298 = x4289 - x79;
          // loc("cirgen/components/u32.cpp":182:76)
          auto x4299 = (x4298 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":182:72)
          auto x4300 = x4299 * x4285;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4291);
            reg = x4291;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4294);
            reg = x4294;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4297);
            reg = x4297;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4300);
            reg = x4300;
          }
        }
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4301 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x4301 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4302 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x4302 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":191:17)
        auto x4303 = x4302 * x84;
        // loc("cirgen/components/u32.cpp":191:11)
        auto x4304 = x4301 + x4303;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4305 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x4305 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":191:17)
        auto x4306 = x4305 * x80;
        // loc("cirgen/components/u32.cpp":191:11)
        auto x4307 = x4304 + x4306;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4308 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4308 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":191:17)
        auto x4309 = x4308 * x70;
        // loc("cirgen/components/u32.cpp":191:11)
        auto x4310 = x4307 + x4309;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4311 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4311 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":191:17)
        auto x4312 = x4311 * x60;
        // loc("cirgen/components/u32.cpp":191:11)
        auto x4313 = x4310 + x4312;
        // loc("cirgen/components/u32.cpp":185:6)
        auto x4314 = x4313 - x4266;
        // loc("cirgen/components/u32.cpp":185:6)
        if (x4314 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:185");
      }
      // loc("Top/Mux/4/Mux/5/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4315 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4315 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":65:23)
      auto x4316 = x4315 * x56;
      // loc("Top/Mux/4/Mux/5/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4317 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4317 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":65:37)
      auto x4318 = x4317 * x62;
      // loc("cirgen/circuit/rv32im/divide.cpp":65:23)
      auto x4319 = x4316 + x4318;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4320 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4320 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4321 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4321 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":191:17)
      auto x4322 = x4321 * x84;
      // loc("cirgen/components/u32.cpp":191:11)
      auto x4323 = x4320 + x4322;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4324 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4324 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":191:17)
      auto x4325 = x4324 * x80;
      // loc("cirgen/components/u32.cpp":191:11)
      auto x4326 = x4323 + x4325;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4327 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4327 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":191:17)
      auto x4328 = x4327 * x70;
      // loc("cirgen/components/u32.cpp":191:11)
      auto x4329 = x4326 + x4328;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4330 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4330 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":191:17)
      auto x4331 = x4330 * x60;
      // loc("cirgen/components/u32.cpp":191:11)
      auto x4332 = x4329 + x4331;
      // loc("cirgen/circuit/rv32im/divide.cpp":65:23)
      auto x4333 = x4319 + x4332;
      // loc("cirgen/circuit/rv32im/divide.cpp":65:6)
      auto x4334 = x4261 - x4333;
      // loc("cirgen/circuit/rv32im/divide.cpp":65:6)
      if (x4334 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:65");
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4335 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4335 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4336 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4336 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4337 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4337 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4338 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4338 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4339 = x4225 * x4335;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4340 = x4225 * x4336;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4341 = x4225 * x4337;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4342 = x4225 * x4338;
      // loc("cirgen/circuit/rv32im/divide.cpp":68:42)
      auto x4343 = x87 - x4225;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4344 = x4343 * x4250;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4345 = x4343 * x4251;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4346 = x4343 * x4252;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4347 = x4343 * x4253;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4348 = x4339 + x4344;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4349 = x4340 + x4345;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4350 = x4341 + x4346;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4351 = x4342 + x4347;
      // loc("cirgen/components/bytes.cpp":83:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4348);
        reg = x4348;
      }
      // loc("cirgen/components/bytes.cpp":83:3)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4349);
        reg = x4349;
      }
      // loc("cirgen/components/bytes.cpp":83:3)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4350);
        reg = x4350;
      }
      // loc("cirgen/components/bytes.cpp":83:3)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4351);
        reg = x4351;
      }
      {
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":74:10))
        auto x4352 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x4352 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x4353 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x4353 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":74:10))
        auto x4354 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x4354 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":74:10))
        auto x4355 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x4355 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/divide.cpp":79:16)
        auto x4356 = x4228 + x4229;
        host_args.at(0) = x4239;
        host_args.at(1) = x4240;
        host_args.at(2) = x4241;
        host_args.at(3) = x4242;
        host_args.at(4) = x4352;
        host_args.at(5) = x4353;
        host_args.at(6) = x4354;
        host_args.at(7) = x4355;
        host_args.at(8) = x4356;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        auto x4357 = host_outs.at(0);
        auto x4358 = host_outs.at(1);
        auto x4359 = host_outs.at(2);
        auto x4360 = host_outs.at(3);
        auto x4361 = host_outs.at(4);
        auto x4362 = host_outs.at(5);
        auto x4363 = host_outs.at(6);
        auto x4364 = host_outs.at(7);
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4357);
          reg = x4357;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4361);
          reg = x4361;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4358);
          reg = x4358;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4362);
          reg = x4362;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4359);
          reg = x4359;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4363);
          reg = x4363;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4360);
          reg = x4360;
        }
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4364);
          reg = x4364;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4365 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4365 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4366 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4366 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4367 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4367 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4368 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4368 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4369 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4369 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4370 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4370 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4371 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x4371 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4372 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x4372 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4373 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x4373 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4374 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x4374 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4375 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x4375 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4376 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x4376 != Fp::invalid());
      host_args.at(0) = x4239;
      host_args.at(1) = x4240;
      host_args.at(2) = x4241;
      host_args.at(3) = x4242;
      host_args.at(4) = x4365;
      host_args.at(5) = x4366;
      host_args.at(6) = x4367;
      host_args.at(7) = x4368;
      host_args.at(8) = x4369;
      host_args.at(9) = x4370;
      host_args.at(10) = x4371;
      host_args.at(11) = x4372;
      host_args.at(12) = x4373;
      host_args.at(13) = x4374;
      host_args.at(14) = x4375;
      host_args.at(15) = x4376;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4377 = x4165 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:25)
      auto x4378 = x4168 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4379 = x4377 + x4378;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4380 = x4379 + x4171;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x4381 = (x4380 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4381);
          reg = x4381;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x4382 = inv(x4380);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4382);
          reg = x4382;
        }
      }
      // loc("Top/Mux/4/Mux/5/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4383 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4383 != Fp::invalid());
      if (x4383 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x4380 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x4384 = x87 - x4383;
      if (x4384 != 0) {
        // loc("Top/Mux/4/Mux/5/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x4385 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x4385 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x4386 = x4380 * x4385;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x4387 = x4386 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x4387 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":90:37)
      auto x4388 = x4216 * x4384;
      if (x4388 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":92:16)
        auto x4389 = x4380 + x49;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4373);
          reg = x4373;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4374);
          reg = x4374;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4375);
          reg = x4375;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4376);
          reg = x4376;
        }
        {
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4390 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x4390 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4391 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x4391 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4392 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x4392 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4393 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x4393 != Fp::invalid());
          host_args.at(0) = x4389;
          host_args.at(1) = x4390;
          host_args.at(2) = x4391;
          host_args.at(3) = x4392;
          host_args.at(4) = x4393;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4394 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x4394 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4395 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4395 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4396 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4396 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4397 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4397 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4389);
          reg = x4389;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4084);
          reg = x4084;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4394);
          reg = x4394;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4395);
          reg = x4395;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4396);
          reg = x4396;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4397);
          reg = x4397;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":94:43)
      auto x4398 = x87 - x4216;
      // loc("cirgen/circuit/rv32im/divide.cpp":94:43)
      auto x4399 = x4398 * x4384;
      if (x4399 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":96:16)
        auto x4400 = x4380 + x49;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4369);
          reg = x4369;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4370);
          reg = x4370;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4371);
          reg = x4371;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4372);
          reg = x4372;
        }
        {
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4401 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x4401 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4402 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x4402 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4403 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x4403 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x4404 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x4404 != Fp::invalid());
          host_args.at(0) = x4400;
          host_args.at(1) = x4401;
          host_args.at(2) = x4402;
          host_args.at(3) = x4403;
          host_args.at(4) = x4404;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4405 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x4405 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4406 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4406 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4407 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4407 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x4408 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4408 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4400);
          reg = x4400;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4084);
          reg = x4084;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4405);
          reg = x4405;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4406);
          reg = x4406;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4407);
          reg = x4407;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4408);
          reg = x4408;
        }
      }
      if (x4383 != 0) {
        // loc("cirgen/components/ram.cpp":39:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":40:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":41:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":101:17)
      auto x4409 = x526 + x80;
      // loc("cirgen/circuit/rv32im/body.cpp":10:23)
      auto x4410 = x4409 + x80;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4411 = Fp(x4410.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4411);
          reg = x4411;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x4412 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4412 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4413 = x4410 - x4412;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4414 = x4413 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4415 = Fp(x4414.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4415);
          reg = x4415;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x4416 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4416 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4417 = x4414 - x4416;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4418 = x4417 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4419 = Fp(x4418.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4419);
          reg = x4419;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x4420 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4420 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4421 = x4418 - x4420;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4422 = x4421 * x81;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":13:26)
        auto x4423 = Fp(x4422.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4423);
          reg = x4423;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4424 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4424 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:18)
      auto x4425 = x4422 - x4424;
      // loc("cirgen/circuit/rv32im/body.cpp":14:17)
      auto x4426 = x4425 * x78;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4426);
        reg = x4426;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4427 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4427 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:23)
      auto x4428 = x87 - x4427;
      // loc("cirgen/circuit/rv32im/body.cpp":18:15)
      auto x4429 = x4427 * x4428;
      // loc("cirgen/circuit/rv32im/body.cpp":18:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4429);
        reg = x4429;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x4430 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4430 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":19:17)
      auto x4431 = x84 - x4427;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      auto x4432 = x4430 * x4431;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      if (x4432 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
      // loc("cirgen/circuit/rv32im/divide.cpp":102:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x71);
        reg = x71;
      }
      if (x4212 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        auto x4433 = x4173 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        if (x4433 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:123");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        auto x4434 = x4162 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        if (x4434 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:123");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        auto x4435 = x4138 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        if (x4435 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:123");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":124:49))
      auto x4436 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4436 != Fp::invalid());
      if (x4436 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4437 = x4173 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4437 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4438 = x4162 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4438 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4439 = x4138 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4439 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
      }
      if (x4213 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4440 = x4173 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4440 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4441 = x4162 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4441 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4442 = x4138 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4442 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4215 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4443 = x4173 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4443 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4444 = x4162 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4444 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4445 = x4138 - x87;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4445 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4217 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4446 = x4173 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4446 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4447 = x4162 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4447 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4138 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4218 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4448 = x4173 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4448 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4449 = x4162 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4449 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4450 = x4138 - x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4450 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4221 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4451 = x4173 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4451 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4452 = x4162 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4452 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4138 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4223 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4453 = x4173 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4453 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4454 = x4162 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4454 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4455 = x4138 - x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4455 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/components/mux.h":33:25))
    auto x4456 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x4456 != Fp::invalid());
    if (x4456 != 0) {
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4457 = args[2][117 * steps + ((cycle - 1) & mask)];
      assert(x4457 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4458 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4458 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4459 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4459 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4460 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4460 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4461 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x4461 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4462 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x4462 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4463 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x4463 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4464 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x4464 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4465 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x4465 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4466 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x4466 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4467 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x4467 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4468 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x4468 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4469 = Fp(x4457.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4469);
          reg = x4469;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4470 = Fp(x4461.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4470);
          reg = x4470;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4471 = Fp(x4457.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4472 = x4471 * x57;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4472);
          reg = x4472;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4473 = Fp(x4461.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4474 = x4473 * x57;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4474);
          reg = x4474;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4475 = Fp(x4457.asUInt32() & x80.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4476 = x4475 * x78;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4476);
          reg = x4476;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4477 = Fp(x4461.asUInt32() & x80.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4478 = x4477 * x78;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4478);
          reg = x4478;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4479 = Fp(x4457.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4480 = x4479 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4480);
          reg = x4480;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4481 = Fp(x4461.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4482 = x4481 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4482);
          reg = x4482;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4483 = Fp(x4457.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4484 = x4483 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4484);
          reg = x4484;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4485 = Fp(x4461.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4486 = x4485 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4486);
          reg = x4486;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4487 = Fp(x4457.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4488 = x4487 * x61;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4488);
          reg = x4488;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4489 = Fp(x4461.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4490 = x4489 * x61;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4490);
          reg = x4490;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4491 = Fp(x4457.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4492 = x4491 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4492);
          reg = x4492;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4493 = Fp(x4461.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4494 = x4493 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4494);
          reg = x4494;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4495 = Fp(x4457.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4496 = x4495 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4496);
          reg = x4496;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4497 = Fp(x4461.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4498 = x4497 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4498);
          reg = x4498;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4499 = Fp(x4458.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4499);
          reg = x4499;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4500 = Fp(x4462.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4500);
          reg = x4500;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4501 = Fp(x4458.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4502 = x4501 * x57;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4502);
          reg = x4502;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4503 = Fp(x4462.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4504 = x4503 * x57;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4504);
          reg = x4504;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4505 = Fp(x4458.asUInt32() & x80.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4506 = x4505 * x78;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4506);
          reg = x4506;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4507 = Fp(x4462.asUInt32() & x80.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4508 = x4507 * x78;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4508);
          reg = x4508;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4509 = Fp(x4458.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4510 = x4509 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4510);
          reg = x4510;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4511 = Fp(x4462.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4512 = x4511 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4512);
          reg = x4512;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4513 = Fp(x4458.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4514 = x4513 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4514);
          reg = x4514;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4515 = Fp(x4462.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4516 = x4515 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4516);
          reg = x4516;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4517 = Fp(x4458.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4518 = x4517 * x61;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4518);
          reg = x4518;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4519 = Fp(x4462.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4520 = x4519 * x61;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4520);
          reg = x4520;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4521 = Fp(x4458.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4522 = x4521 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4522);
          reg = x4522;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4523 = Fp(x4462.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4524 = x4523 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4524);
          reg = x4524;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4525 = Fp(x4458.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4526 = x4525 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4526);
          reg = x4526;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4527 = Fp(x4462.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4528 = x4527 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4528);
          reg = x4528;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4529 = Fp(x4459.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4529);
          reg = x4529;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4530 = Fp(x4463.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4530);
          reg = x4530;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4531 = Fp(x4459.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4532 = x4531 * x57;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4532);
          reg = x4532;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4533 = Fp(x4463.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4534 = x4533 * x57;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4534);
          reg = x4534;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4535 = Fp(x4459.asUInt32() & x80.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4536 = x4535 * x78;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4536);
          reg = x4536;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4537 = Fp(x4463.asUInt32() & x80.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4538 = x4537 * x78;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4538);
          reg = x4538;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4539 = Fp(x4459.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4540 = x4539 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4540);
          reg = x4540;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4541 = Fp(x4463.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4542 = x4541 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4542);
          reg = x4542;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4543 = Fp(x4459.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4544 = x4543 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4544);
          reg = x4544;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4545 = Fp(x4463.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4546 = x4545 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4546);
          reg = x4546;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4547 = Fp(x4459.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4548 = x4547 * x61;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4548);
          reg = x4548;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4549 = Fp(x4463.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4550 = x4549 * x61;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4550);
          reg = x4550;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4551 = Fp(x4459.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4552 = x4551 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4552);
          reg = x4552;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4553 = Fp(x4463.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4554 = x4553 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4554);
          reg = x4554;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4555 = Fp(x4459.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4556 = x4555 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4556);
          reg = x4556;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4557 = Fp(x4463.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4558 = x4557 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4558);
          reg = x4558;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4559 = Fp(x4460.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4559);
          reg = x4559;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4560 = Fp(x4464.asUInt32() & x87.asUInt32());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4560);
          reg = x4560;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4561 = Fp(x4460.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4562 = x4561 * x57;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4562);
          reg = x4562;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4563 = Fp(x4464.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4564 = x4563 * x57;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4564);
          reg = x4564;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4565 = Fp(x4460.asUInt32() & x80.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4566 = x4565 * x78;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4566);
          reg = x4566;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4567 = Fp(x4464.asUInt32() & x80.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4568 = x4567 * x78;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4568);
          reg = x4568;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4569 = Fp(x4460.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4570 = x4569 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4570);
          reg = x4570;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4571 = Fp(x4464.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4572 = x4571 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4572);
          reg = x4572;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4573 = Fp(x4460.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4574 = x4573 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4574);
          reg = x4574;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4575 = Fp(x4464.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4576 = x4575 * x59;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4576);
          reg = x4576;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4577 = Fp(x4460.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4578 = x4577 * x61;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4578);
          reg = x4578;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4579 = Fp(x4464.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4580 = x4579 * x61;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4580);
          reg = x4580;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4581 = Fp(x4460.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4582 = x4581 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4582);
          reg = x4582;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4583 = Fp(x4464.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4584 = x4583 * x55;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4584);
          reg = x4584;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":206:37)
        auto x4585 = Fp(x4460.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":206:36)
        auto x4586 = x4585 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4586);
          reg = x4586;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":207:37)
        auto x4587 = Fp(x4464.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":207:36)
        auto x4588 = x4587 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4588);
          reg = x4588;
        }
      }
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4589 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x4589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4590 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x4590 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4591 = x4589 * x4590;
      // loc("Top/Mux/4/Mux/6/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4592 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4593 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x4593 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4594 = x4592 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4595 = x4589 + x4594;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4596 = x4593 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4597 = x4590 + x4596;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4598 = x4592 * x4593;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4599 = x4598 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4600 = x4591 + x4599;
      // loc("Top/Mux/4/Mux/6/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4601 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4602 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x4602 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4603 = x4601 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4604 = x4595 + x4603;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4605 = x4602 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4606 = x4597 + x4605;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4607 = x4601 * x4602;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4608 = x4607 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4609 = x4600 + x4608;
      // loc("Top/Mux/4/Mux/6/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4610 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4611 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x4611 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4612 = x4610 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4613 = x4604 + x4612;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4614 = x4611 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4615 = x4606 + x4614;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4616 = x4610 * x4611;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4617 = x4616 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4618 = x4609 + x4617;
      // loc("Top/Mux/4/Mux/6/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4619 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4620 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x4620 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4621 = x4619 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4622 = x4613 + x4621;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4623 = x4620 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4624 = x4615 + x4623;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4625 = x4619 * x4620;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4626 = x4625 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4627 = x4618 + x4626;
      // loc("Top/Mux/4/Mux/6/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4628 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4628 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4629 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x4629 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4630 = x4628 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4631 = x4622 + x4630;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4632 = x4629 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4633 = x4624 + x4632;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4634 = x4628 * x4629;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4635 = x4634 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4636 = x4627 + x4635;
      // loc("Top/Mux/4/Mux/6/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4637 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4638 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x4638 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4639 = x4637 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4640 = x4631 + x4639;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4641 = x4638 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4642 = x4633 + x4641;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4643 = x4637 * x4638;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4644 = x4643 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4645 = x4636 + x4644;
      // loc("Top/Mux/4/Mux/6/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4646 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4647 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x4647 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4648 = x4646 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4649 = x4640 + x4648;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4650 = x4647 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4651 = x4642 + x4650;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4652 = x4646 * x4647;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4653 = x4652 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4654 = x4645 + x4653;
      // loc("Top/Mux/4/Mux/6/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4655 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4655 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4656 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x4656 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4657 = x4655 * x4656;
      // loc("Top/Mux/4/Mux/6/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4658 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4658 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4659 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4659 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4660 = x4658 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4661 = x4655 + x4660;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4662 = x4659 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4663 = x4656 + x4662;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4664 = x4658 * x4659;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4665 = x4664 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4666 = x4657 + x4665;
      // loc("Top/Mux/4/Mux/6/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4667 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4668 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4668 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4669 = x4667 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4670 = x4661 + x4669;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4671 = x4668 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4672 = x4663 + x4671;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4673 = x4667 * x4668;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4674 = x4673 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4675 = x4666 + x4674;
      // loc("Top/Mux/4/Mux/6/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4676 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4677 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4677 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4678 = x4676 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4679 = x4670 + x4678;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4680 = x4677 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4681 = x4672 + x4680;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4682 = x4676 * x4677;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4683 = x4682 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4684 = x4675 + x4683;
      // loc("Top/Mux/4/Mux/6/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4685 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4685 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4686 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4686 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4687 = x4685 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4688 = x4679 + x4687;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4689 = x4686 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4690 = x4681 + x4689;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4691 = x4685 * x4686;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4692 = x4691 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4693 = x4684 + x4692;
      // loc("Top/Mux/4/Mux/6/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4694 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4695 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4695 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4696 = x4694 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4697 = x4688 + x4696;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4698 = x4695 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4699 = x4690 + x4698;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4700 = x4694 * x4695;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4701 = x4700 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4702 = x4693 + x4701;
      // loc("Top/Mux/4/Mux/6/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4703 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4703 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4704 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4704 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4705 = x4703 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4706 = x4697 + x4705;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4707 = x4704 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4708 = x4699 + x4707;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4709 = x4703 * x4704;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4710 = x4709 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4711 = x4702 + x4710;
      // loc("Top/Mux/4/Mux/6/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4712 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4712 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4713 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4713 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4714 = x4712 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4715 = x4706 + x4714;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4716 = x4713 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4717 = x4708 + x4716;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4718 = x4712 * x4713;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4719 = x4718 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4720 = x4711 + x4719;
      // loc("Top/Mux/4/Mux/6/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4721 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4721 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4722 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4722 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4723 = x4721 * x4722;
      // loc("Top/Mux/4/Mux/6/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4724 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4724 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4725 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4725 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4726 = x4724 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4727 = x4721 + x4726;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4728 = x4725 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4729 = x4722 + x4728;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4730 = x4724 * x4725;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4731 = x4730 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4732 = x4723 + x4731;
      // loc("Top/Mux/4/Mux/6/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4733 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4734 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4734 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4735 = x4733 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4736 = x4727 + x4735;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4737 = x4734 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4738 = x4729 + x4737;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4739 = x4733 * x4734;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4740 = x4739 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4741 = x4732 + x4740;
      // loc("Top/Mux/4/Mux/6/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4742 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4742 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4743 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4743 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4744 = x4742 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4745 = x4736 + x4744;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4746 = x4743 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4747 = x4738 + x4746;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4748 = x4742 * x4743;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4749 = x4748 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4750 = x4741 + x4749;
      // loc("Top/Mux/4/Mux/6/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4751 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4752 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4752 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4753 = x4751 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4754 = x4745 + x4753;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4755 = x4752 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4756 = x4747 + x4755;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4757 = x4751 * x4752;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4758 = x4757 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4759 = x4750 + x4758;
      // loc("Top/Mux/4/Mux/6/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4760 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4760 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4761 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4761 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4762 = x4760 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4763 = x4754 + x4762;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4764 = x4761 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4765 = x4756 + x4764;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4766 = x4760 * x4761;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4767 = x4766 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4768 = x4759 + x4767;
      // loc("Top/Mux/4/Mux/6/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4769 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4769 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4770 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4770 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4771 = x4769 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4772 = x4763 + x4771;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4773 = x4770 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4774 = x4765 + x4773;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4775 = x4769 * x4770;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4776 = x4775 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4777 = x4768 + x4776;
      // loc("Top/Mux/4/Mux/6/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4778 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x4778 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4779 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4779 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4780 = x4778 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4781 = x4772 + x4780;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4782 = x4779 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4783 = x4774 + x4782;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4784 = x4778 * x4779;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4785 = x4784 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4786 = x4777 + x4785;
      // loc("Top/Mux/4/Mux/6/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4787 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x4787 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4788 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4788 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4789 = x4787 * x4788;
      // loc("Top/Mux/4/Mux/6/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4790 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4790 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4791 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4791 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4792 = x4790 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4793 = x4787 + x4792;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4794 = x4791 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4795 = x4788 + x4794;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4796 = x4790 * x4791;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4797 = x4796 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4798 = x4789 + x4797;
      // loc("Top/Mux/4/Mux/6/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4799 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4799 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4800 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4800 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4801 = x4799 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4802 = x4793 + x4801;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4803 = x4800 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4804 = x4795 + x4803;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4805 = x4799 * x4800;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4806 = x4805 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4807 = x4798 + x4806;
      // loc("Top/Mux/4/Mux/6/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4808 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4808 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4809 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4809 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4810 = x4808 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4811 = x4802 + x4810;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4812 = x4809 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4813 = x4804 + x4812;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4814 = x4808 * x4809;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4815 = x4814 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4816 = x4807 + x4815;
      // loc("Top/Mux/4/Mux/6/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4817 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4817 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4818 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4818 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4819 = x4817 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4820 = x4811 + x4819;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4821 = x4818 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4822 = x4813 + x4821;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4823 = x4817 * x4818;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4824 = x4823 * x60;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4825 = x4816 + x4824;
      // loc("Top/Mux/4/Mux/6/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4826 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4826 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4827 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4827 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4828 = x4826 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4829 = x4820 + x4828;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4830 = x4827 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4831 = x4822 + x4830;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4832 = x4826 * x4827;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4833 = x4832 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4834 = x4825 + x4833;
      // loc("Top/Mux/4/Mux/6/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4835 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x4835 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4836 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4836 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4837 = x4835 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4838 = x4829 + x4837;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4839 = x4836 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4840 = x4831 + x4839;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4841 = x4835 * x4836;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4842 = x4841 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4843 = x4834 + x4842;
      // loc("Top/Mux/4/Mux/6/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4844 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x4844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4845 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4845 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":218:41)
      auto x4846 = x4844 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":218:24)
      auto x4847 = x4838 + x4846;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:41)
      auto x4848 = x4845 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":219:24)
      auto x4849 = x4840 + x4848;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4850 = x4844 * x4845;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:41)
      auto x4851 = x4850 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":220:24)
      auto x4852 = x4843 + x4851;
      host_args.at(0) = x4457;
      host_args.at(1) = x4458;
      host_args.at(2) = x4459;
      host_args.at(3) = x4460;
      host_args.at(4) = x4649;
      host_args.at(5) = x4715;
      host_args.at(6) = x4781;
      host_args.at(7) = x4847;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4461;
      host_args.at(1) = x4462;
      host_args.at(2) = x4463;
      host_args.at(3) = x4464;
      host_args.at(4) = x4651;
      host_args.at(5) = x4717;
      host_args.at(6) = x4783;
      host_args.at(7) = x4849;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4465;
      host_args.at(1) = x4466;
      host_args.at(2) = x4467;
      host_args.at(3) = x4468;
      host_args.at(4) = x4654;
      host_args.at(5) = x4720;
      host_args.at(6) = x4786;
      host_args.at(7) = x4852;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/compute.cpp":226:3)
      auto x4853 = x4457 - x4649;
      // loc("cirgen/circuit/rv32im/compute.cpp":226:3)
      if (x4853 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:226");
      // loc("cirgen/circuit/rv32im/compute.cpp":226:3)
      auto x4854 = x4458 - x4715;
      // loc("cirgen/circuit/rv32im/compute.cpp":226:3)
      if (x4854 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:226");
      // loc("cirgen/circuit/rv32im/compute.cpp":226:3)
      auto x4855 = x4459 - x4781;
      // loc("cirgen/circuit/rv32im/compute.cpp":226:3)
      if (x4855 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:226");
      // loc("cirgen/circuit/rv32im/compute.cpp":226:3)
      auto x4856 = x4460 - x4847;
      // loc("cirgen/circuit/rv32im/compute.cpp":226:3)
      if (x4856 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:226");
      // loc("cirgen/circuit/rv32im/compute.cpp":227:3)
      auto x4857 = x4461 - x4651;
      // loc("cirgen/circuit/rv32im/compute.cpp":227:3)
      if (x4857 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:227");
      // loc("cirgen/circuit/rv32im/compute.cpp":227:3)
      auto x4858 = x4462 - x4717;
      // loc("cirgen/circuit/rv32im/compute.cpp":227:3)
      if (x4858 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:227");
      // loc("cirgen/circuit/rv32im/compute.cpp":227:3)
      auto x4859 = x4463 - x4783;
      // loc("cirgen/circuit/rv32im/compute.cpp":227:3)
      if (x4859 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:227");
      // loc("cirgen/circuit/rv32im/compute.cpp":227:3)
      auto x4860 = x4464 - x4849;
      // loc("cirgen/circuit/rv32im/compute.cpp":227:3)
      if (x4860 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:227");
      // loc("cirgen/circuit/rv32im/compute.cpp":228:3)
      auto x4861 = x4465 - x4654;
      // loc("cirgen/circuit/rv32im/compute.cpp":228:3)
      if (x4861 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:228");
      // loc("cirgen/circuit/rv32im/compute.cpp":228:3)
      auto x4862 = x4466 - x4720;
      // loc("cirgen/circuit/rv32im/compute.cpp":228:3)
      if (x4862 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:228");
      // loc("cirgen/circuit/rv32im/compute.cpp":228:3)
      auto x4863 = x4467 - x4786;
      // loc("cirgen/circuit/rv32im/compute.cpp":228:3)
      if (x4863 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:228");
      // loc("cirgen/circuit/rv32im/compute.cpp":228:3)
      auto x4864 = x4468 - x4852;
      // loc("cirgen/circuit/rv32im/compute.cpp":228:3)
      if (x4864 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:228");
      // loc("cirgen/circuit/rv32im/body.cpp":10:23)
      auto x4865 = x526 + x80;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4866 = Fp(x4865.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4866);
          reg = x4866;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x4867 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4867 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4868 = x4865 - x4867;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4869 = x4868 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4870 = Fp(x4869.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4870);
          reg = x4870;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x4871 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4871 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4872 = x4869 - x4871;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4873 = x4872 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4874 = Fp(x4873.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4874);
          reg = x4874;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x4875 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4875 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4876 = x4873 - x4875;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4877 = x4876 * x81;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":13:26)
        auto x4878 = Fp(x4877.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4878);
          reg = x4878;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4879 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4879 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:18)
      auto x4880 = x4877 - x4879;
      // loc("cirgen/circuit/rv32im/body.cpp":14:17)
      auto x4881 = x4880 * x78;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4881);
        reg = x4881;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4882 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4882 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:23)
      auto x4883 = x87 - x4882;
      // loc("cirgen/circuit/rv32im/body.cpp":18:15)
      auto x4884 = x4882 * x4883;
      // loc("cirgen/circuit/rv32im/body.cpp":18:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4884);
        reg = x4884;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x4885 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4885 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":19:17)
      auto x4886 = x84 - x4882;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      auto x4887 = x4885 * x4886;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      if (x4887 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x77);
        reg = x77;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/components/mux.h":33:25))
    auto x4888 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x4888 != Fp::invalid());
    if (x4888 != 0) {
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4889 = args[2][117 * steps + ((cycle - 1) & mask)];
      assert(x4889 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4890 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4890 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4891 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4891 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4892 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4892 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4893 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x4893 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4894 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x4894 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4895 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x4895 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4896 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x4896 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4897 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x4897 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4898 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x4898 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4899 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x4899 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4900 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x4900 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4901 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x4901 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4902 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x4902 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4903 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x4903 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4904 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x4904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":131:51))
      auto x4905 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x4905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg1"("cirgen/circuit/rv32im/divide.cpp":132:51))
      auto x4906 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x4906 != Fp::invalid());
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x4907 = Fp(x4892.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x4908 = x4907 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4908);
          reg = x4908;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x4909 = Fp(x4892.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x4910 = x4909 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4910);
          reg = x4910;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4911 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x4911 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x4912 = x4911 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x4913 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x4913 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x4914 = x4913 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x4915 = x4912 + x4914;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x4916 = x4892 - x4915;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x4916 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      {
        // loc("cirgen/components/u32.cpp":110:18)
        auto x4917 = Fp(x4896.asUInt32() & x65.asUInt32());
        // loc("cirgen/components/u32.cpp":110:17)
        auto x4918 = x4917 * x64;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4918);
          reg = x4918;
        }
        // loc("cirgen/components/u32.cpp":111:25)
        auto x4919 = Fp(x4896.asUInt32() & x53.asUInt32());
        // loc("cirgen/components/u32.cpp":111:24)
        auto x4920 = x4919 * x84;
        // loc("cirgen/components/bytes.cpp":83:3)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4920);
          reg = x4920;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4921 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4921 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:19)
      auto x4922 = x4921 * x65;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x4923 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x4923 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":113:34)
      auto x4924 = x4923 * x57;
      // loc("cirgen/components/u32.cpp":113:19)
      auto x4925 = x4922 + x4924;
      // loc("cirgen/components/u32.cpp":113:6)
      auto x4926 = x4896 - x4925;
      // loc("cirgen/components/u32.cpp":113:6)
      if (x4926 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:113");
      // loc("cirgen/circuit/rv32im/divide.cpp":135:17)
      auto x4927 = x4905 * x4911;
      // loc("cirgen/circuit/rv32im/divide.cpp":135:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4927);
        reg = x4927;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":136:29)
      auto x4928 = x87 - x4906;
      // loc("cirgen/circuit/rv32im/divide.cpp":136:17)
      auto x4929 = x4905 * x4928;
      // loc("cirgen/circuit/rv32im/divide.cpp":136:17)
      auto x4930 = x4929 * x4921;
      // loc("cirgen/circuit/rv32im/divide.cpp":136:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4930);
        reg = x4930;
      }
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x4931 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4931 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":138:47)
      auto x4932 = x87 - x4931;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4933 = x4932 * x4889;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4934 = x4932 * x4890;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4935 = x4932 * x4891;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4936 = x4932 * x4892;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4937 = x4933 + x82;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4938 = x4934 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4939 = x4935 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4940 = x4936 + x83;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4941 = x4931 * x4889;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4942 = x4931 * x4890;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4943 = x4931 * x4891;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4944 = x4931 * x4892;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x4945 = x4937 - x4941;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x4946 = x4938 - x4942;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x4947 = x4939 - x4943;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x4948 = x4940 - x4944;
      // loc("cirgen/circuit/rv32im/divide.cpp":139:17)
      auto x4949 = x4931 * x4906;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x4950 = x4945 - x4949;
      // loc("cirgen/components/u32.cpp":136:29)
      auto x4951 = x4946 * x82;
      // loc("cirgen/components/u32.cpp":136:15)
      auto x4952 = x4950 + x4951;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4953 = Fp(x4952.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4953);
          reg = x4953;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x4954 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x4954 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4955 = x4952 - x4954;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4956 = x4955 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4957 = Fp(x4956.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4957);
          reg = x4957;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x4958 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x4958 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4959 = x4956 - x4958;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4960 = x4959 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4960);
        reg = x4960;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x4961 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x4961 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":138:16)
      auto x4962 = x4961 + x4947;
      // loc("cirgen/components/u32.cpp":138:41)
      auto x4963 = x4948 * x82;
      // loc("cirgen/components/u32.cpp":138:16)
      auto x4964 = x4962 + x4963;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4965 = Fp(x4964.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4965);
          reg = x4965;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x4966 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x4966 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4967 = x4964 - x4966;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4968 = x4967 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4969 = Fp(x4968.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4969);
          reg = x4969;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x4970 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4970 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4971 = x4968 - x4970;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4972 = x4971 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4972);
        reg = x4972;
      }
      host_args.at(0) = x4889;
      host_args.at(1) = x4890;
      host_args.at(2) = x4891;
      host_args.at(3) = x4892;
      host_args.at(4) = x4954;
      host_args.at(5) = x4958;
      host_args.at(6) = x4966;
      host_args.at(7) = x4970;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/7/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x4973 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4973 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":141:47)
      auto x4974 = x87 - x4973;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4975 = x4974 * x4893;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4976 = x4974 * x4894;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4977 = x4974 * x4895;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4978 = x4974 * x4896;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4979 = x4975 + x82;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4980 = x4976 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4981 = x4977 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x4982 = x4978 + x83;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4983 = x4973 * x4893;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4984 = x4973 * x4894;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4985 = x4973 * x4895;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x4986 = x4973 * x4896;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x4987 = x4979 - x4983;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x4988 = x4980 - x4984;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x4989 = x4981 - x4985;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x4990 = x4982 - x4986;
      // loc("cirgen/circuit/rv32im/divide.cpp":142:17)
      auto x4991 = x4973 * x4906;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x4992 = x4987 - x4991;
      // loc("cirgen/components/u32.cpp":136:29)
      auto x4993 = x4988 * x82;
      // loc("cirgen/components/u32.cpp":136:15)
      auto x4994 = x4992 + x4993;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4995 = Fp(x4994.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4995);
          reg = x4995;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x4996 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4996 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x4997 = x4994 - x4996;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x4998 = x4997 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x4999 = Fp(x4998.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4999);
          reg = x4999;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5000 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5000 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5001 = x4998 - x5000;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5002 = x5001 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5002);
        reg = x5002;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize1/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5003 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5003 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":138:16)
      auto x5004 = x5003 + x4989;
      // loc("cirgen/components/u32.cpp":138:41)
      auto x5005 = x4990 * x82;
      // loc("cirgen/components/u32.cpp":138:16)
      auto x5006 = x5004 + x5005;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5007 = Fp(x5006.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5007);
          reg = x5007;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5008 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5008 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5009 = x5006 - x5008;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5010 = x5009 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5011 = Fp(x5010.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5011);
          reg = x5011;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5012 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5012 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5013 = x5010 - x5012;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5014 = x5013 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5014);
        reg = x5014;
      }
      host_args.at(0) = x4893;
      host_args.at(1) = x4894;
      host_args.at(2) = x4895;
      host_args.at(3) = x4896;
      host_args.at(4) = x4996;
      host_args.at(5) = x5000;
      host_args.at(6) = x5008;
      host_args.at(7) = x5012;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":127:26)
      auto x5015 = x5000 * x82;
      // loc("cirgen/components/u32.cpp":127:12)
      auto x5016 = x4996 + x5015;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x5017 = (x5016 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5017);
          reg = x5017;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x5018 = inv(x5016);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5018);
          reg = x5018;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5019 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5019 != Fp::invalid());
      if (x5019 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x5016 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x5020 = x87 - x5019;
      if (x5020 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5021 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5021 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x5022 = x5016 * x5021;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x5023 = x5022 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x5023 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("cirgen/components/u32.cpp":128:27)
      auto x5024 = x5012 * x82;
      // loc("cirgen/components/u32.cpp":128:13)
      auto x5025 = x5008 + x5024;
      // loc("cirgen/components/u32.cpp":128:47)
      auto x5026 = x5020 * x76;
      // loc("cirgen/components/u32.cpp":128:13)
      auto x5027 = x5025 + x5026;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x5028 = (x5027 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5028);
          reg = x5028;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x5029 = inv(x5027);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5029);
          reg = x5029;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5030 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5030 != Fp::invalid());
      if (x5030 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x5027 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x5031 = x87 - x5030;
      if (x5031 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5032 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x5032 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x5033 = x5027 * x5032;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x5034 = x5033 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x5034 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":145:16)
      auto x5035 = x4931 + x4973;
      // loc("cirgen/circuit/rv32im/divide.cpp":145:38)
      auto x5036 = x4931 * x84;
      // loc("cirgen/circuit/rv32im/divide.cpp":145:38)
      auto x5037 = x5036 * x4973;
      // loc("cirgen/circuit/rv32im/divide.cpp":145:16)
      auto x5038 = x5035 - x5037;
      // loc("cirgen/circuit/rv32im/divide.cpp":145:64)
      auto x5039 = x5030 * x4931;
      // loc("cirgen/circuit/rv32im/divide.cpp":145:16)
      auto x5040 = x5038 - x5039;
      // loc("cirgen/circuit/rv32im/divide.cpp":145:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5040);
        reg = x5040;
      }
      // loc("Top/Mux/4/Mux/7/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x5041 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5041 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":147:46)
      auto x5042 = x87 - x5041;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5043 = x5042 * x4897;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5044 = x5042 * x4898;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5045 = x5042 * x4899;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5046 = x5042 * x4900;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5047 = x5043 + x82;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5048 = x5044 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5049 = x5045 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5050 = x5046 + x83;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5051 = x5041 * x4897;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5052 = x5041 * x4898;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5053 = x5041 * x4899;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5054 = x5041 * x4900;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5055 = x5047 - x5051;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5056 = x5048 - x5052;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5057 = x5049 - x5053;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5058 = x5050 - x5054;
      // loc("cirgen/circuit/rv32im/divide.cpp":148:16)
      auto x5059 = x5041 * x4906;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5060 = x5055 - x5059;
      // loc("cirgen/components/u32.cpp":136:29)
      auto x5061 = x5056 * x82;
      // loc("cirgen/components/u32.cpp":136:15)
      auto x5062 = x5060 + x5061;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5063 = Fp(x5062.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5063);
          reg = x5063;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5064 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5064 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5065 = x5062 - x5064;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5066 = x5065 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5067 = Fp(x5066.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5067);
          reg = x5067;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5068 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5068 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5069 = x5066 - x5068;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5070 = x5069 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5070);
        reg = x5070;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize2/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5071 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5071 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":138:16)
      auto x5072 = x5071 + x5057;
      // loc("cirgen/components/u32.cpp":138:41)
      auto x5073 = x5058 * x82;
      // loc("cirgen/components/u32.cpp":138:16)
      auto x5074 = x5072 + x5073;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5075 = Fp(x5074.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5075);
          reg = x5075;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5076 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5076 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5077 = x5074 - x5076;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5078 = x5077 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5079 = Fp(x5078.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5079);
          reg = x5079;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5080 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5080 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5081 = x5078 - x5080;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5082 = x5081 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5082);
        reg = x5082;
      }
      host_args.at(0) = x4897;
      host_args.at(1) = x4898;
      host_args.at(2) = x4899;
      host_args.at(3) = x4900;
      host_args.at(4) = x5064;
      host_args.at(5) = x5068;
      host_args.at(6) = x5076;
      host_args.at(7) = x5080;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5083 = x4932 * x4901;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5084 = x4932 * x4902;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5085 = x4932 * x4903;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5086 = x4932 * x4904;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5087 = x5083 + x82;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5088 = x5084 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5089 = x5085 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5090 = x5086 + x83;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5091 = x4931 * x4901;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5092 = x4931 * x4902;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5093 = x4931 * x4903;
      // loc("cirgen/components/u32.cpp":95:20)
      auto x5094 = x4931 * x4904;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5095 = x5087 - x5091;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5096 = x5088 - x5092;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5097 = x5089 - x5093;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5098 = x5090 - x5094;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5099 = x5095 - x4949;
      // loc("cirgen/components/u32.cpp":136:29)
      auto x5100 = x5096 * x82;
      // loc("cirgen/components/u32.cpp":136:15)
      auto x5101 = x5099 + x5100;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5102 = Fp(x5101.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5102);
          reg = x5102;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5103 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5103 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5104 = x5101 - x5103;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5105 = x5104 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5106 = Fp(x5105.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5106);
          reg = x5106;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5107 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5107 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5108 = x5105 - x5107;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5109 = x5108 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5109);
        reg = x5109;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize3/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5110 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5110 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":138:16)
      auto x5111 = x5110 + x5097;
      // loc("cirgen/components/u32.cpp":138:41)
      auto x5112 = x5098 * x82;
      // loc("cirgen/components/u32.cpp":138:16)
      auto x5113 = x5111 + x5112;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5114 = Fp(x5113.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5114);
          reg = x5114;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5115 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5115 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5116 = x5113 - x5115;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5117 = x5116 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5118 = Fp(x5117.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5118);
          reg = x5118;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5119 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5119 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5120 = x5117 - x5119;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5121 = x5120 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5121);
        reg = x5121;
      }
      host_args.at(0) = x4901;
      host_args.at(1) = x4902;
      host_args.at(2) = x4903;
      host_args.at(3) = x4904;
      host_args.at(4) = x5103;
      host_args.at(5) = x5107;
      host_args.at(6) = x5115;
      host_args.at(7) = x5119;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5122 = x4996 + x82;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5123 = x5000 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5124 = x5008 + x83;
      // loc("cirgen/components/u32.cpp":79:20)
      auto x5125 = x5012 + x83;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5126 = x5122 - x87;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5127 = x5126 - x5103;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5128 = x5123 - x5107;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5129 = x5124 - x5115;
      // loc("cirgen/components/u32.cpp":87:20)
      auto x5130 = x5125 - x5119;
      // loc("cirgen/components/u32.cpp":136:29)
      auto x5131 = x5128 * x82;
      // loc("cirgen/components/u32.cpp":136:15)
      auto x5132 = x5127 + x5131;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5133 = Fp(x5132.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5133);
          reg = x5133;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5134 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5134 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5135 = x5132 - x5134;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5136 = x5135 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5137 = Fp(x5136.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5137);
          reg = x5137;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5138 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5138 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5139 = x5136 - x5138;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5140 = x5139 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5140);
        reg = x5140;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize4/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5141 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5141 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":138:16)
      auto x5142 = x5141 + x5129;
      // loc("cirgen/components/u32.cpp":138:41)
      auto x5143 = x5130 * x82;
      // loc("cirgen/components/u32.cpp":138:16)
      auto x5144 = x5142 + x5143;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5145 = Fp(x5144.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5145);
          reg = x5145;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5146 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5146 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5147 = x5144 - x5146;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5148 = x5147 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5149 = Fp(x5148.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5149);
          reg = x5149;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5150 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5150 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5151 = x5148 - x5150;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5152 = x5151 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5152);
        reg = x5152;
      }
      // loc("cirgen/components/u32.cpp":250:14)
      auto x5153 = x5064 * x4996;
      // loc("cirgen/components/u32.cpp":250:14)
      auto x5154 = x5153 + x5103;
      // loc("cirgen/components/u32.cpp":251:21)
      auto x5155 = x5064 * x5000;
      // loc("cirgen/components/u32.cpp":251:51)
      auto x5156 = x5068 * x4996;
      // loc("cirgen/components/u32.cpp":251:21)
      auto x5157 = x5155 + x5156;
      // loc("cirgen/components/u32.cpp":251:21)
      auto x5158 = x5157 + x5107;
      // loc("cirgen/components/u32.cpp":251:14)
      auto x5159 = x5158 * x82;
      // loc("cirgen/components/u32.cpp":250:14)
      auto x5160 = x5154 + x5159;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5161 = Fp(x5160.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5161);
          reg = x5161;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5162 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5162 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5163 = x5160 - x5162;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5164 = x5163 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5165 = Fp(x5164.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5165);
          reg = x5165;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5166 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5166 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5167 = x5164 - x5166;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5168 = x5167 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5169 = Fp(x5168.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5169);
          reg = x5169;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5170 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5170 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5171 = x5168 - x5170;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5172 = x5171 * x81;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5172);
        reg = x5172;
      }
      // loc("Top/Mux/4/Mux/7/U32MulAcc/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5173 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5173 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":254:15)
      auto x5174 = x5173 * x82;
      // loc("cirgen/components/u32.cpp":254:15)
      auto x5175 = x5174 + x5170;
      // loc("cirgen/components/u32.cpp":256:7)
      auto x5176 = x5068 * x5012;
      // loc("cirgen/components/u32.cpp":256:7)
      if (x5176 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:256");
      // loc("cirgen/components/u32.cpp":257:7)
      auto x5177 = x5076 * x5008;
      // loc("cirgen/components/u32.cpp":257:7)
      if (x5177 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:257");
      // loc("cirgen/components/u32.cpp":258:7)
      auto x5178 = x5080 * x5000;
      // loc("cirgen/components/u32.cpp":258:7)
      if (x5178 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:258");
      // loc("cirgen/components/u32.cpp":259:7)
      auto x5179 = x5076 * x5012;
      // loc("cirgen/components/u32.cpp":259:7)
      if (x5179 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:259");
      // loc("cirgen/components/u32.cpp":260:7)
      auto x5180 = x5080 * x5008;
      // loc("cirgen/components/u32.cpp":260:7)
      if (x5180 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:260");
      // loc("cirgen/components/u32.cpp":261:7)
      auto x5181 = x5080 * x5012;
      // loc("cirgen/components/u32.cpp":261:7)
      if (x5181 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:261");
      // loc("cirgen/components/u32.cpp":263:15)
      auto x5182 = x5076 * x4996;
      // loc("cirgen/components/u32.cpp":263:45)
      auto x5183 = x5068 * x5000;
      // loc("cirgen/components/u32.cpp":263:15)
      auto x5184 = x5182 + x5183;
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5185 = x5064 * x5008;
      // loc("cirgen/components/u32.cpp":263:15)
      auto x5186 = x5184 + x5185;
      // loc("cirgen/components/u32.cpp":263:15)
      auto x5187 = x5186 + x5115;
      // loc("cirgen/components/u32.cpp":263:15)
      auto x5188 = x5187 + x5175;
      // loc("cirgen/components/u32.cpp":265:22)
      auto x5189 = x5080 * x4996;
      // loc("cirgen/components/u32.cpp":265:52)
      auto x5190 = x5076 * x5000;
      // loc("cirgen/components/u32.cpp":265:22)
      auto x5191 = x5189 + x5190;
      // loc("cirgen/components/u32.cpp":266:22)
      auto x5192 = x5068 * x5008;
      // loc("cirgen/components/u32.cpp":265:22)
      auto x5193 = x5191 + x5192;
      // loc("cirgen/components/u32.cpp":266:52)
      auto x5194 = x5064 * x5012;
      // loc("cirgen/components/u32.cpp":265:22)
      auto x5195 = x5193 + x5194;
      // loc("cirgen/components/u32.cpp":265:22)
      auto x5196 = x5195 + x5119;
      // loc("cirgen/components/u32.cpp":265:15)
      auto x5197 = x5196 * x82;
      // loc("cirgen/components/u32.cpp":263:15)
      auto x5198 = x5188 + x5197;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5199 = Fp(x5198.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5199);
          reg = x5199;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5200 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5200 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5201 = x5198 - x5200;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5202 = x5201 * x81;
      // loc("cirgen/components/bytes.cpp":83:3)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5202);
        reg = x5202;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":74:10))
      auto x5203 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5203 != Fp::invalid());
      // loc("Top/Mux/4/Mux/7/U32Normalize4/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5204 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5204 != Fp::invalid());
      host_args.at(0) = x5162;
      host_args.at(1) = x5166;
      host_args.at(2) = x5200;
      host_args.at(3) = x5203;
      host_args.at(4) = x5204;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/divide.cpp":157:3)
      auto x5205 = x5162 - x4954;
      // loc("cirgen/circuit/rv32im/divide.cpp":157:3)
      if (x5205 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:157");
      // loc("cirgen/circuit/rv32im/divide.cpp":157:3)
      auto x5206 = x5166 - x4958;
      // loc("cirgen/circuit/rv32im/divide.cpp":157:3)
      if (x5206 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:157");
      // loc("cirgen/circuit/rv32im/divide.cpp":157:3)
      auto x5207 = x5200 - x4966;
      // loc("cirgen/circuit/rv32im/divide.cpp":157:3)
      if (x5207 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:157");
      // loc("cirgen/circuit/rv32im/divide.cpp":157:3)
      auto x5208 = x5203 - x4970;
      // loc("cirgen/circuit/rv32im/divide.cpp":157:3)
      if (x5208 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:157");
      if (x5031 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":158:36)
        auto x5209 = x5204 - x87;
        // loc("cirgen/circuit/rv32im/divide.cpp":158:36)
        if (x5209 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:158");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":10:23)
      auto x5210 = x526 + x80;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5211 = Fp(x5210.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5211);
          reg = x5211;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5212 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5212 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5213 = x5210 - x5212;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5214 = x5213 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5215 = Fp(x5214.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5215);
          reg = x5215;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5216 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5216 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5217 = x5214 - x5216;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5218 = x5217 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5219 = Fp(x5218.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5219);
          reg = x5219;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5220 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5220 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5221 = x5218 - x5220;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5222 = x5221 * x81;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":13:26)
        auto x5223 = Fp(x5222.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5223);
          reg = x5223;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5224 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5224 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:18)
      auto x5225 = x5222 - x5224;
      // loc("cirgen/circuit/rv32im/body.cpp":14:17)
      auto x5226 = x5225 * x78;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5226);
        reg = x5226;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5227 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5227 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:23)
      auto x5228 = x87 - x5227;
      // loc("cirgen/circuit/rv32im/body.cpp":18:15)
      auto x5229 = x5227 * x5228;
      // loc("cirgen/circuit/rv32im/body.cpp":18:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5229);
        reg = x5229;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x5230 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5230 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":19:17)
      auto x5231 = x84 - x5227;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      auto x5232 = x5230 * x5231;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      if (x5232 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
      // loc("cirgen/circuit/rv32im/divide.cpp":160:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x77);
        reg = x77;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/components/mux.h":33:25))
    auto x5233 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x5233 != Fp::invalid());
    if (x5233 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5234 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5234 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":121:41)
      auto x5235 = x526 * x78;
      {
        host_args.at(0) = x5235;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x5236 = host_outs.at(0);
        auto x5237 = host_outs.at(1);
        auto x5238 = host_outs.at(2);
        auto x5239 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5236);
          reg = x5236;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5237);
          reg = x5237;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5238);
          reg = x5238;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5239);
          reg = x5239;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5240 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x5240 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5241 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5241 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5242 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5242 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5243 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5243 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5235);
        reg = x5235;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5234);
        reg = x5234;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5240);
        reg = x5240;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5241);
        reg = x5241;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5242);
        reg = x5242;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5243);
        reg = x5243;
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":123:6)
      auto x5244 = x5240 - x30;
      // loc("cirgen/circuit/rv32im/ecall.cpp":123:6)
      if (x5244 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:123");
      // loc("cirgen/circuit/rv32im/ecall.cpp":124:7)
      if (x5241 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:124");
      // loc("cirgen/circuit/rv32im/ecall.cpp":125:7)
      if (x5242 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:125");
      // loc("cirgen/circuit/rv32im/ecall.cpp":126:7)
      if (x5243 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:126");
      {
        host_args.at(0) = x29;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x5245 = host_outs.at(0);
        auto x5246 = host_outs.at(1);
        auto x5247 = host_outs.at(2);
        auto x5248 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5245);
          reg = x5245;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5246);
          reg = x5246;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5247);
          reg = x5247;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5248);
          reg = x5248;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5249 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x5249 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5250 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5250 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5251 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5251 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5252 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5252 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x29);
        reg = x29;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5234);
        reg = x5234;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5249);
        reg = x5249;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5250);
        reg = x5250;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5251);
        reg = x5251;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5252);
        reg = x5252;
      }
      {
        // loc("./cirgen/components/onehot.h":31:26)
        auto x5253 = (x5249 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":31:9)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5253);
          reg = x5253;
        }
        // loc("./cirgen/components/onehot.h":31:26)
        auto x5254 = x5249 - x87;
        // loc("./cirgen/components/onehot.h":31:26)
        auto x5255 = (x5254 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":31:9)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5255);
          reg = x5255;
        }
        // loc("./cirgen/components/onehot.h":31:26)
        auto x5256 = x5249 - x84;
        // loc("./cirgen/components/onehot.h":31:26)
        auto x5257 = (x5256 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":31:9)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5257);
          reg = x5257;
        }
        // loc("./cirgen/components/onehot.h":31:26)
        auto x5258 = x5249 - x79;
        // loc("./cirgen/components/onehot.h":31:26)
        auto x5259 = (x5258 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":31:9)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5259);
          reg = x5259;
        }
        // loc("./cirgen/components/onehot.h":31:26)
        auto x5260 = x5249 - x80;
        // loc("./cirgen/components/onehot.h":31:26)
        auto x5261 = (x5260 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":31:9)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5261);
          reg = x5261;
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x5262 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x5262 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x5263 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x5263 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":40:19)
      auto x5264 = x5263 * x84;
      // loc("./cirgen/components/onehot.h":40:13)
      auto x5265 = x5262 + x5264;
      // loc("Top/Mux/4/Mux/8/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x5266 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x5266 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":40:19)
      auto x5267 = x5266 * x79;
      // loc("./cirgen/components/onehot.h":40:13)
      auto x5268 = x5265 + x5267;
      // loc("Top/Mux/4/Mux/8/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x5269 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x5269 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":40:19)
      auto x5270 = x5269 * x80;
      // loc("./cirgen/components/onehot.h":40:13)
      auto x5271 = x5268 + x5270;
      // loc("./cirgen/components/onehot.h":34:8)
      auto x5272 = x5271 - x5249;
      // loc("./cirgen/components/onehot.h":34:8)
      if (x5272 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":132:46)
        auto x5273 = (x5271 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":132:46)
        auto x5274 = x87 - x5273;
        if (x5274 != 0) {
          host_args.at(0) = x5249;
          host_args.at(1) = x5250;
          host_args.at(2) = x5251;
          host_args.at(3) = x5252;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/Reg"("./cirgen/components/mux.h":33:25))
      auto x5275 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x5275 != Fp::invalid());
      if (x5275 != 0) {
        {
          host_args.at(0) = x5249;
          host_args.at(1) = x5250;
          host_args.at(2) = x5251;
          host_args.at(3) = x5252;
          host(ctx, "halt", "", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x5276 = x526 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5277 = Fp(x5276.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5277);
            reg = x5277;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x5278 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5278 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5279 = x5276 - x5278;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5280 = x5279 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5281 = Fp(x5280.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5281);
            reg = x5281;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x5282 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5282 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5283 = x5280 - x5282;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5284 = x5283 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5285 = Fp(x5284.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5285);
            reg = x5285;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x5286 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5286 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5287 = x5284 - x5286;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5288 = x5287 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x5289 = Fp(x5288.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5289);
            reg = x5289;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5290 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5290 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x5291 = x5288 - x5290;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x5292 = x5291 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5292);
          reg = x5292;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5293 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5293 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x5294 = x87 - x5293;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x5295 = x5293 * x5294;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5295);
          reg = x5295;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5296 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5296 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x5297 = x84 - x5293;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x5298 = x5296 * x5297;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x5298 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("cirgen/circuit/rv32im/ecall.cpp":20:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
      }
      if (x5262 != 0) {
        {
          host_args.at(0) = x28;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5299 = host_outs.at(0);
          auto x5300 = host_outs.at(1);
          auto x5301 = host_outs.at(2);
          auto x5302 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5299);
            reg = x5299;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5300);
            reg = x5300;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5301);
            reg = x5301;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5302);
            reg = x5302;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5303 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5303 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5304 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5304 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5305 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5305 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5306 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5306 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5234);
          reg = x5234;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5303);
          reg = x5303;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5304);
          reg = x5304;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5305);
          reg = x5305;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5306);
          reg = x5306;
        }
        {
          host_args.at(0) = x27;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5307 = host_outs.at(0);
          auto x5308 = host_outs.at(1);
          auto x5309 = host_outs.at(2);
          auto x5310 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5307);
            reg = x5307;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5308);
            reg = x5308;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5309);
            reg = x5309;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5310);
            reg = x5310;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5311 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5311 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5312 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5312 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5313 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5313 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5314 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5314 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5234);
          reg = x5234;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5311);
          reg = x5311;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5312);
          reg = x5312;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5313);
          reg = x5313;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5314);
          reg = x5314;
        }
        {
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5315 = (x5303 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5315);
            reg = x5315;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5316 = x5303 - x87;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5317 = (x5316 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5317);
            reg = x5317;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5318 = x5303 - x84;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5319 = (x5318 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5319);
            reg = x5319;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5320 = x5303 - x79;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5321 = (x5320 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5321);
            reg = x5321;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5322 = x5303 - x80;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5323 = (x5322 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5323);
            reg = x5323;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5324 = x5303 - x73;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5325 = (x5324 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5325);
            reg = x5325;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5326 = x5303 - x72;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5327 = (x5326 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5327);
            reg = x5327;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5328 = x5303 - x71;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5329 = (x5328 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5329);
            reg = x5329;
          }
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5330 = x5303 - x70;
          // loc("./cirgen/components/onehot.h":31:26)
          auto x5331 = (x5330 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5331);
            reg = x5331;
          }
        }
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5332 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x5332 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5333 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x5333 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5334 = x5333 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5335 = x5332 + x5334;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5336 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x5336 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5337 = x5336 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5338 = x5335 + x5337;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5339 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x5339 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5340 = x5339 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5341 = x5338 + x5340;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5342 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x5342 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5343 = x5342 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5344 = x5341 + x5343;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5345 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x5345 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5346 = x5345 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5347 = x5344 + x5346;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5348 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x5348 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5349 = x5348 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5350 = x5347 + x5349;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5351 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x5351 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5352 = x5351 * x70;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5353 = x5350 + x5352;
        // loc("./cirgen/components/onehot.h":34:8)
        auto x5354 = x5353 - x5303;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x5354 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg"("cirgen/circuit/rv32im/ecall.cpp":43:24))
        auto x5355 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x5355 != Fp::invalid());
        if (x5355 != 0) {
          host_args.at(0) = x5353;
          host_args.at(1) = x5311;
          host_args.at(2) = x5312;
          host_args.at(3) = x5313;
          host_args.at(4) = x5314;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5356 = x5312 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5357 = x5356 + x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][0] = x5357;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5358 = x5314 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5359 = x5358 + x5313;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][1] = x5359;
        }
        if (x5332 != 0) {
          host_args.at(0) = x5353;
          host_args.at(1) = x5311;
          host_args.at(2) = x5312;
          host_args.at(3) = x5313;
          host_args.at(4) = x5314;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5360 = x5312 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5361 = x5360 + x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][2] = x5361;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5362 = x5314 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5363 = x5362 + x5313;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][3] = x5363;
        }
        if (x5333 != 0) {
          host_args.at(0) = x5353;
          host_args.at(1) = x5311;
          host_args.at(2) = x5312;
          host_args.at(3) = x5313;
          host_args.at(4) = x5314;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5364 = x5312 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5365 = x5364 + x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][4] = x5365;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5366 = x5314 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5367 = x5366 + x5313;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][5] = x5367;
        }
        if (x5336 != 0) {
          host_args.at(0) = x5353;
          host_args.at(1) = x5311;
          host_args.at(2) = x5312;
          host_args.at(3) = x5313;
          host_args.at(4) = x5314;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5368 = x5312 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5369 = x5368 + x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][6] = x5369;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5370 = x5314 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5371 = x5370 + x5313;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][7] = x5371;
        }
        if (x5339 != 0) {
          host_args.at(0) = x5353;
          host_args.at(1) = x5311;
          host_args.at(2) = x5312;
          host_args.at(3) = x5313;
          host_args.at(4) = x5314;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5372 = x5312 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5373 = x5372 + x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][8] = x5373;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5374 = x5314 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5375 = x5374 + x5313;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][9] = x5375;
        }
        if (x5342 != 0) {
          host_args.at(0) = x5353;
          host_args.at(1) = x5311;
          host_args.at(2) = x5312;
          host_args.at(3) = x5313;
          host_args.at(4) = x5314;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5376 = x5312 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5377 = x5376 + x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][10] = x5377;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5378 = x5314 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5379 = x5378 + x5313;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][11] = x5379;
        }
        if (x5345 != 0) {
          host_args.at(0) = x5353;
          host_args.at(1) = x5311;
          host_args.at(2) = x5312;
          host_args.at(3) = x5313;
          host_args.at(4) = x5314;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5380 = x5312 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5381 = x5380 + x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][12] = x5381;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5382 = x5314 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5383 = x5382 + x5313;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][13] = x5383;
        }
        if (x5348 != 0) {
          host_args.at(0) = x5353;
          host_args.at(1) = x5311;
          host_args.at(2) = x5312;
          host_args.at(3) = x5313;
          host_args.at(4) = x5314;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5384 = x5312 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5385 = x5384 + x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][14] = x5385;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5386 = x5314 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5387 = x5386 + x5313;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][15] = x5387;
        }
        if (x5351 != 0) {
          host_args.at(0) = x5353;
          host_args.at(1) = x5311;
          host_args.at(2) = x5312;
          host_args.at(3) = x5313;
          host_args.at(4) = x5314;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5388 = x5312 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:27)
          auto x5389 = x5388 + x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][16] = x5389;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5390 = x5314 * x82;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:31)
          auto x5391 = x5390 + x5313;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][17] = x5391;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":50:17)
        auto x5392 = x526 + x80;
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x5393 = x5392 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5394 = Fp(x5393.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5394);
            reg = x5394;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x5395 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5395 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5396 = x5393 - x5395;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5397 = x5396 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5398 = Fp(x5397.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5398);
            reg = x5398;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x5399 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5399 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5400 = x5397 - x5399;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5401 = x5400 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5402 = Fp(x5401.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5402);
            reg = x5402;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x5403 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5403 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5404 = x5401 - x5403;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5405 = x5404 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x5406 = Fp(x5405.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5406);
            reg = x5406;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5407 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5407 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x5408 = x5405 - x5407;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x5409 = x5408 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5409);
          reg = x5409;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5410 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5410 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x5411 = x87 - x5410;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x5412 = x5410 * x5411;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5412);
          reg = x5412;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5413 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5413 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x5414 = x84 - x5410;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x5415 = x5413 * x5414;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x5415 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("cirgen/circuit/rv32im/ecall.cpp":51:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
      }
      if (x5263 != 0) {
        {
          host_args.at(0) = x5249;
          host_args.at(1) = x5250;
          host_args.at(2) = x5251;
          host_args.at(3) = x5252;
          host(ctx, "log", "  Doing syscall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
          host(ctx, "syscall", "", host_args.data(), 0, host_outs.data(), 8);
          auto x5416 = host_outs.at(0);
          auto x5417 = host_outs.at(1);
          auto x5418 = host_outs.at(2);
          auto x5419 = host_outs.at(3);
          auto x5420 = host_outs.at(4);
          auto x5421 = host_outs.at(5);
          auto x5422 = host_outs.at(6);
          auto x5423 = host_outs.at(7);
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5416);
            reg = x5416;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5417);
            reg = x5417;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5418);
            reg = x5418;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5419);
            reg = x5419;
          }
          {
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x5424 = args[2][124 * steps + ((cycle - 0) & mask)];
            assert(x5424 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x5425 = args[2][125 * steps + ((cycle - 0) & mask)];
            assert(x5425 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x5426 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x5426 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x5427 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x5427 != Fp::invalid());
            host_args.at(0) = x28;
            host_args.at(1) = x5424;
            host_args.at(2) = x5425;
            host_args.at(3) = x5426;
            host_args.at(4) = x5427;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5428 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x5428 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5429 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x5429 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5430 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x5430 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5431 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x5431 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x28);
            reg = x28;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5234);
            reg = x5234;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5428);
            reg = x5428;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5429);
            reg = x5429;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5430);
            reg = x5430;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5431);
            reg = x5431;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5420);
            reg = x5420;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5421);
            reg = x5421;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5422);
            reg = x5422;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5423);
            reg = x5423;
          }
          {
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x5432 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x5432 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x5433 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x5433 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x5434 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x5434 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x5435 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x5435 != Fp::invalid());
            host_args.at(0) = x27;
            host_args.at(1) = x5432;
            host_args.at(2) = x5433;
            host_args.at(3) = x5434;
            host_args.at(4) = x5435;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5436 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x5436 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5437 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x5437 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5438 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x5438 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5439 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x5439 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x27);
            reg = x27;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5234);
            reg = x5234;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5436);
            reg = x5436;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5437);
            reg = x5437;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5438);
            reg = x5438;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5439);
            reg = x5439;
          }
          host_args.at(0) = x5428;
          host_args.at(1) = x5429;
          host_args.at(2) = x5430;
          host_args.at(3) = x5431;
          host(ctx, "log", "  A0 = %w", host_args.data(), 4, host_outs.data(), 0);
          host_args.at(0) = x5436;
          host_args.at(1) = x5437;
          host_args.at(2) = x5438;
          host_args.at(3) = x5439;
          host(ctx, "log", "  A1 = %w", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":110:10))
        auto x5440 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5440 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":71:6)
        auto x5441 = x5440 - x5234;
        // loc("cirgen/circuit/rv32im/ecall.cpp":71:6)
        if (x5441 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:71");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg1"("cirgen/components/ram.cpp":110:10))
        auto x5442 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5442 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":72:6)
        auto x5443 = x5442 - x5234;
        // loc("cirgen/circuit/rv32im/ecall.cpp":72:6)
        if (x5443 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:72");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":107:10))
        auto x5444 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5444 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":73:6)
        auto x5445 = x5444 - x28;
        // loc("cirgen/circuit/rv32im/ecall.cpp":73:6)
        if (x5445 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:73");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg"("cirgen/components/ram.cpp":107:10))
        auto x5446 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5446 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":74:6)
        auto x5447 = x5446 - x27;
        // loc("cirgen/circuit/rv32im/ecall.cpp":74:6)
        if (x5447 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:74");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg2"("cirgen/components/ram.cpp":113:10))
        auto x5448 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x5448 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        auto x5449 = x5448 - x87;
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        if (x5449 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:75");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg2"("cirgen/components/ram.cpp":113:10))
        auto x5450 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x5450 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        auto x5451 = x5450 - x87;
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        if (x5451 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:76");
        // loc("cirgen/circuit/rv32im/ecall.cpp":78:17)
        auto x5452 = x526 + x80;
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x5453 = x5452 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5454 = Fp(x5453.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5454);
            reg = x5454;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x5455 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5455 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5456 = x5453 - x5455;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5457 = x5456 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5458 = Fp(x5457.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5458);
            reg = x5458;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x5459 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5459 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5460 = x5457 - x5459;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5461 = x5460 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5462 = Fp(x5461.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5462);
            reg = x5462;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x5463 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5463 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5464 = x5461 - x5463;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5465 = x5464 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x5466 = Fp(x5465.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5466);
            reg = x5466;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5467 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5467 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x5468 = x5465 - x5467;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x5469 = x5468 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5469);
          reg = x5469;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5470 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5470 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x5471 = x87 - x5470;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x5472 = x5470 * x5471;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5472);
          reg = x5472;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5473 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5473 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x5474 = x84 - x5470;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x5475 = x5473 * x5474;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x5475 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("cirgen/circuit/rv32im/ecall.cpp":79:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
      }
      if (x5266 != 0) {
        {
          host_args.at(0) = x28;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5476 = host_outs.at(0);
          auto x5477 = host_outs.at(1);
          auto x5478 = host_outs.at(2);
          auto x5479 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5476);
            reg = x5476;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5477);
            reg = x5477;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5478);
            reg = x5478;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5479);
            reg = x5479;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5480 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5480 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5481 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5481 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5482 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5482 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5483 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5483 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5234);
          reg = x5234;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5480);
          reg = x5480;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5481);
          reg = x5481;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5482);
          reg = x5482;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5483);
          reg = x5483;
        }
        {
          host_args.at(0) = x27;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5484 = host_outs.at(0);
          auto x5485 = host_outs.at(1);
          auto x5486 = host_outs.at(2);
          auto x5487 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5484);
            reg = x5484;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5485);
            reg = x5485;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5486);
            reg = x5486;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5487);
            reg = x5487;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5488 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5488 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5489 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5489 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5490 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5490 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5491 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5491 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5234);
          reg = x5234;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5488);
          reg = x5488;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5489);
          reg = x5489;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5490);
          reg = x5490;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5491);
          reg = x5491;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":91:17)
        auto x5492 = x526 + x80;
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x5493 = x5492 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5494 = Fp(x5493.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5494);
            reg = x5494;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x5495 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5495 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5496 = x5493 - x5495;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5497 = x5496 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5498 = Fp(x5497.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5498);
            reg = x5498;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x5499 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5499 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5500 = x5497 - x5499;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5501 = x5500 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5502 = Fp(x5501.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5502);
            reg = x5502;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x5503 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5503 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5504 = x5501 - x5503;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5505 = x5504 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x5506 = Fp(x5505.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5506);
            reg = x5506;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5507 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5507 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x5508 = x5505 - x5507;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x5509 = x5508 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5509);
          reg = x5509;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5510 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5510 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x5511 = x87 - x5510;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x5512 = x5510 * x5511;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5512);
          reg = x5512;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5513 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5513 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x5514 = x84 - x5510;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x5515 = x5513 * x5514;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x5515 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("cirgen/circuit/rv32im/ecall.cpp":92:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
      }
      if (x5269 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":101:3)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x526);
          reg = x526;
        }
        {
          host_args.at(0) = x28;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5516 = host_outs.at(0);
          auto x5517 = host_outs.at(1);
          auto x5518 = host_outs.at(2);
          auto x5519 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5516);
            reg = x5516;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5517);
            reg = x5517;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5518);
            reg = x5518;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5519);
            reg = x5519;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5520 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5521 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5522 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5522 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5523 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5523 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5234);
          reg = x5234;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5520);
          reg = x5520;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5521);
          reg = x5521;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5522);
          reg = x5522;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5523);
          reg = x5523;
        }
        {
          host_args.at(0) = x27;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5524 = host_outs.at(0);
          auto x5525 = host_outs.at(1);
          auto x5526 = host_outs.at(2);
          auto x5527 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5524);
            reg = x5524;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5525);
            reg = x5525;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5526);
            reg = x5526;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5527);
            reg = x5527;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5528 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5528 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5529 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5529 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5530 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5530 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5531 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5531 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5234);
          reg = x5234;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5528);
          reg = x5528;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5529);
          reg = x5529;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5530);
          reg = x5530;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5531);
          reg = x5531;
        }
        // loc("./cirgen/components/u32.h":16:34)
        auto x5532 = x5521 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5533 = x5520 + x5532;
        // loc("./cirgen/components/u32.h":16:51)
        auto x5534 = x5522 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5535 = x5533 + x5534;
        // loc("./cirgen/components/u32.h":16:74)
        auto x5536 = x5523 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5537 = x5535 + x5536;
        // loc("cirgen/circuit/rv32im/ecall.cpp":110:17)
        auto x5538 = x5537 - x80;
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x5539 = x5538 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5540 = Fp(x5539.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5540);
            reg = x5540;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x5541 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5541 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5542 = x5539 - x5541;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5543 = x5542 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5544 = Fp(x5543.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5544);
            reg = x5544;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x5545 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5545 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5546 = x5543 - x5545;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5547 = x5546 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5548 = Fp(x5547.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5548);
            reg = x5548;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x5549 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5549 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x5550 = x5547 - x5549;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x5551 = x5550 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x5552 = Fp(x5551.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5552);
            reg = x5552;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5553 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5553 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x5554 = x5551 - x5553;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x5555 = x5554 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5555);
          reg = x5555;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5556 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5556 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x5557 = x87 - x5556;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x5558 = x5556 * x5557;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5558);
          reg = x5558;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5559 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5559 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x5560 = x84 - x5556;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x5561 = x5559 * x5560;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x5561 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("cirgen/circuit/rv32im/ecall.cpp":111:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/components/mux.h":33:25))
    auto x5562 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x5562 != Fp::invalid());
    if (x5562 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5563 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5563 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/sha.cpp":157:69))
      auto x5564 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x5564 != Fp::invalid());
      if (x5564 != 0) {
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":160:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        {
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":163:22)
      auto x5565 = x87 - x5564;
      if (x5565 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5566 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5566 != Fp::invalid());
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x5567 = Fp(x5566.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5567);
            reg = x5567;
          }
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x5568 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5568 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":188:18)
      auto x5569 = x87 - x5568;
      if (x5569 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5570 = args[2][137 * steps + ((cycle - 1) & mask)];
        assert(x5570 != Fp::invalid());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5570);
          reg = x5570;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":191:40))
        auto x5571 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5571 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":191:40)
        auto x5572 = x5571 - x87;
        // loc("cirgen/circuit/rv32im/sha.cpp":191:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5572);
          reg = x5572;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5573 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x5573 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x5574 = (x5573 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5574);
          reg = x5574;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x5575 = inv(x5573);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5575);
          reg = x5575;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5576 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x5576 != Fp::invalid());
      if (x5576 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x5573 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x5577 = x87 - x5576;
      if (x5577 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5578 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5578 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x5579 = x5573 * x5578;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x5580 = x5579 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x5580 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      if (x5576 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":197:7)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
      }
      if (x5577 != 0) {
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5581 = x2114 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5582 = x1297 + x5581;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5583 = x2846 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5584 = x5582 + x5583;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5585 = x3633 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5586 = x5584 + x5585;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5587 = x4083 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5588 = x5586 + x5587;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5589 = x4456 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5590 = x5588 + x5589;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5591 = x4888 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5592 = x5590 + x5591;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5593 = x5233 * x70;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5594 = x5592 + x5593;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5595 = x5562 * x69;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5596 = x5594 + x5595;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5597 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x5597 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5598 = x5597 * x68;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5599 = x5596 + x5598;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5600 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x5600 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5601 = x5600 * x67;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5602 = x5599 + x5601;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5603 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x5603 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x5604 = x5603 * x66;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x5605 = x5602 + x5604;
        // loc("cirgen/circuit/rv32im/sha.cpp":208:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5605);
          reg = x5605;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":10:23)
      auto x5606 = x526 + x80;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5607 = Fp(x5606.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5607);
          reg = x5607;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5608 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5608 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5609 = x5606 - x5608;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5610 = x5609 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5611 = Fp(x5610.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5611);
          reg = x5611;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x5612 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5612 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5613 = x5610 - x5612;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5614 = x5613 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x5615 = Fp(x5614.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5615);
          reg = x5615;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x5616 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5616 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x5617 = x5614 - x5616;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x5618 = x5617 * x81;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":13:26)
        auto x5619 = Fp(x5618.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5619);
          reg = x5619;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5620 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5620 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:18)
      auto x5621 = x5618 - x5620;
      // loc("cirgen/circuit/rv32im/body.cpp":14:17)
      auto x5622 = x5621 * x78;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5622);
        reg = x5622;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5623 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5623 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:23)
      auto x5624 = x87 - x5623;
      // loc("cirgen/circuit/rv32im/body.cpp":18:15)
      auto x5625 = x5623 * x5624;
      // loc("cirgen/circuit/rv32im/body.cpp":18:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5625);
        reg = x5625;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x5626 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5626 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":19:17)
      auto x5627 = x84 - x5623;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      auto x5628 = x5626 * x5627;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      if (x5628 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x5629 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x5629 != Fp::invalid());
      host_args.at(0) = x69;
      host_args.at(1) = x5629;
      host_args.at(2) = x5573;
      host(ctx, "log", "IN SHA: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5564 != 0) {
        {
          host_args.at(0) = x26;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5630 = host_outs.at(0);
          auto x5631 = host_outs.at(1);
          auto x5632 = host_outs.at(2);
          auto x5633 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5630);
            reg = x5630;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5631);
            reg = x5631;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5632);
            reg = x5632;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5633);
            reg = x5633;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5634 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5634 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5635 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5635 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5636 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5636 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5637 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5637 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5634);
          reg = x5634;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5635);
          reg = x5635;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5636);
          reg = x5636;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5637);
          reg = x5637;
        }
        {
          host_args.at(0) = x25;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5638 = host_outs.at(0);
          auto x5639 = host_outs.at(1);
          auto x5640 = host_outs.at(2);
          auto x5641 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5638);
            reg = x5638;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5639);
            reg = x5639;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5640);
            reg = x5640;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5641);
            reg = x5641;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5642 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x5642 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5643 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5643 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5644 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5644 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5645 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5645 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5642);
          reg = x5642;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5643);
          reg = x5643;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5644);
          reg = x5644;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5645);
          reg = x5645;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5646 = args[2][124 * steps + ((cycle - 1) & mask)];
        assert(x5646 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5647 = args[2][125 * steps + ((cycle - 1) & mask)];
        assert(x5647 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5648 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x5648 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5649 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x5649 != Fp::invalid());
        // loc("./cirgen/components/u32.h":16:34)
        auto x5650 = x5647 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5651 = x5646 + x5650;
        // loc("./cirgen/components/u32.h":16:51)
        auto x5652 = x5648 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5653 = x5651 + x5652;
        // loc("./cirgen/components/u32.h":16:74)
        auto x5654 = x5649 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5655 = x5653 + x5654;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:58)
        auto x5656 = x5655 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5656);
          reg = x5656;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5657 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x5657 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5658 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5658 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5659 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5659 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5660 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5660 != Fp::invalid());
        // loc("./cirgen/components/u32.h":16:34)
        auto x5661 = x5658 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5662 = x5657 + x5661;
        // loc("./cirgen/components/u32.h":16:51)
        auto x5663 = x5659 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5664 = x5662 + x5663;
        // loc("./cirgen/components/u32.h":16:74)
        auto x5665 = x5660 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5666 = x5664 + x5665;
        // loc("cirgen/circuit/rv32im/sha.cpp":218:57)
        auto x5667 = x5666 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5667);
          reg = x5667;
        }
        // loc("./cirgen/components/u32.h":16:34)
        auto x5668 = x5635 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5669 = x5634 + x5668;
        // loc("./cirgen/components/u32.h":16:51)
        auto x5670 = x5636 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5671 = x5669 + x5670;
        // loc("./cirgen/components/u32.h":16:74)
        auto x5672 = x5637 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5673 = x5671 + x5672;
        // loc("cirgen/circuit/rv32im/sha.cpp":219:16)
        auto x5674 = x5673 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":219:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5674);
          reg = x5674;
        }
        // loc("./cirgen/components/u32.h":16:34)
        auto x5675 = x5643 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5676 = x5642 + x5675;
        // loc("./cirgen/components/u32.h":16:51)
        auto x5677 = x5644 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5678 = x5676 + x5677;
        // loc("./cirgen/components/u32.h":16:74)
        auto x5679 = x5645 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x5680 = x5678 + x5679;
        // loc("cirgen/circuit/rv32im/sha.cpp":220:16)
        auto x5681 = x5680 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":220:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5681);
          reg = x5681;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5682 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x5682 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":222:10)
        auto x5683 = x5682 * x80;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5684 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5684 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        auto x5685 = x5684 * x80;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5686 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5686 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        auto x5687 = x5686 * x80;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5688 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5688 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":225:10)
        auto x5689 = x5688 * x80;
        host_args.at(0) = x5683;
        host_args.at(1) = x5685;
        host_args.at(2) = x5687;
        host_args.at(3) = x5689;
        host(ctx, "log", "  FIRST_CYCLE: stateOut = %x, stateIn = %x, data0 = %x, data1 = %x", host_args.data(), 4, host_outs.data(), 0);
      }
      if (x5565 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":228:42))
        auto x5690 = args[2][130 * steps + ((cycle - 1) & mask)];
        assert(x5690 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":228:5)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5690);
          reg = x5690;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":229:40))
        auto x5691 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x5691 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":229:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5691);
          reg = x5691;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":230:36))
        auto x5692 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5692 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5692);
          reg = x5692;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":231:36))
        auto x5693 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5693 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5693);
          reg = x5693;
        }
      }
      if (x87 != 0) {
        if (x5565 != 0) {
          // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
          auto x5694 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x5694 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":243:26)
          auto x5695 = x5694 + x5573;
          {
            host_args.at(0) = x5695;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x5696 = host_outs.at(0);
            auto x5697 = host_outs.at(1);
            auto x5698 = host_outs.at(2);
            auto x5699 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][110 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5696);
              reg = x5696;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5697);
              reg = x5697;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5698);
              reg = x5698;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5699);
              reg = x5699;
            }
          }
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5700 = args[2][110 * steps + ((cycle - 0) & mask)];
          assert(x5700 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5701 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x5701 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5702 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x5702 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5703 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x5703 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5695);
            reg = x5695;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5563);
            reg = x5563;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5700);
            reg = x5700;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5701);
            reg = x5701;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5702);
            reg = x5702;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5703);
            reg = x5703;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":244:26)
          auto x5704 = x5695 + x80;
          {
            host_args.at(0) = x5704;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x5705 = host_outs.at(0);
            auto x5706 = host_outs.at(1);
            auto x5707 = host_outs.at(2);
            auto x5708 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5705);
              reg = x5705;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5706);
              reg = x5706;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5707);
              reg = x5707;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5708);
              reg = x5708;
            }
          }
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5709 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x5709 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5710 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x5710 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5711 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x5711 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x5712 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x5712 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5704);
            reg = x5704;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5563);
            reg = x5563;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5709);
            reg = x5709;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5710);
            reg = x5710;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5711);
            reg = x5711;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5712);
            reg = x5712;
          }
        }
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5713 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5713 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":249:24)
        auto x5714 = x5713 + x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":249:24)
        auto x5715 = x5714 - x5573;
        {
          host_args.at(0) = x5715;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5716 = host_outs.at(0);
          auto x5717 = host_outs.at(1);
          auto x5718 = host_outs.at(2);
          auto x5719 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5716);
            reg = x5716;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5717);
            reg = x5717;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5718);
            reg = x5718;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5719);
            reg = x5719;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5720 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5720 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5721 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5721 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5722 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5722 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5723 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5723 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5715);
          reg = x5715;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5720);
          reg = x5720;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5721);
          reg = x5721;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5722);
          reg = x5722;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5723);
          reg = x5723;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":250:24)
        auto x5724 = x24 - x5573;
        {
          host_args.at(0) = x5724;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5725 = host_outs.at(0);
          auto x5726 = host_outs.at(1);
          auto x5727 = host_outs.at(2);
          auto x5728 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5725);
            reg = x5725;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5726);
            reg = x5726;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5727);
            reg = x5727;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5728);
            reg = x5728;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5729 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x5729 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5730 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5730 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5731 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5731 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5732 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5732 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5724);
          reg = x5724;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5729);
          reg = x5729;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5730);
          reg = x5730;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5731);
          reg = x5731;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5732);
          reg = x5732;
        }
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x5733 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5733 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":254:24)
        auto x5734 = x5733 + x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":254:24)
        auto x5735 = x5734 - x5573;
        {
          host_args.at(0) = x5735;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5736 = host_outs.at(0);
          auto x5737 = host_outs.at(1);
          auto x5738 = host_outs.at(2);
          auto x5739 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5736);
            reg = x5736;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5737);
            reg = x5737;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5738);
            reg = x5738;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5739);
            reg = x5739;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5740 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5740 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5741 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5741 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5742 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5742 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5743 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5743 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5735);
          reg = x5735;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5740);
          reg = x5740;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5741);
          reg = x5741;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5742);
          reg = x5742;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5743);
          reg = x5743;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":255:24)
        auto x5744 = x23 - x5573;
        {
          host_args.at(0) = x5744;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5745 = host_outs.at(0);
          auto x5746 = host_outs.at(1);
          auto x5747 = host_outs.at(2);
          auto x5748 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5745);
            reg = x5745;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5746);
            reg = x5746;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5747);
            reg = x5747;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5748);
            reg = x5748;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5749 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x5749 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5750 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5750 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5751 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5751 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5752 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5752 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5744);
          reg = x5744;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5749);
          reg = x5749;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5750);
          reg = x5750;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5751);
          reg = x5751;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5752);
          reg = x5752;
        }
      }
      if (x86 != 0) {
        {
          host_args.at(0) = x86;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5753 = host_outs.at(0);
          auto x5754 = host_outs.at(1);
          auto x5755 = host_outs.at(2);
          auto x5756 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5753);
            reg = x5753;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5754);
            reg = x5754;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5755);
            reg = x5755;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5756);
            reg = x5756;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5757 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5757 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5758 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5758 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5759 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5759 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5760 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5760 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5757);
          reg = x5757;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5758);
          reg = x5758;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5759);
          reg = x5759;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5760);
          reg = x5760;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":260:24)
        auto x5761 = x22 - x5573;
        {
          host_args.at(0) = x5761;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5762 = host_outs.at(0);
          auto x5763 = host_outs.at(1);
          auto x5764 = host_outs.at(2);
          auto x5765 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5762);
            reg = x5762;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5763);
            reg = x5763;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5764);
            reg = x5764;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5765);
            reg = x5765;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5766 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x5766 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5767 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5767 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5768 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5768 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5769 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5769 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5761);
          reg = x5761;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5766);
          reg = x5766;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5767);
          reg = x5767;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5768);
          reg = x5768;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5769);
          reg = x5769;
        }
      }
      if (x87 != 0) {
        {
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5770 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x5770 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5771 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x5771 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5772 = x5771 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5773 = x5770 + x5772;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5774 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x5774 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5775 = x5774 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5776 = x5773 + x5775;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5777 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x5777 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5778 = x5777 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5779 = x5776 + x5778;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5780 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x5780 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5781 = x5780 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5782 = x5779 + x5781;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5783 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x5783 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5784 = x5783 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5785 = x5782 + x5784;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5786 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x5786 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5787 = x5786 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5788 = x5785 + x5787;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5789 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x5789 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5790 = x5789 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5791 = x5788 + x5790;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5792 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x5792 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5793 = x5792 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5794 = x5791 + x5793;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5795 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x5795 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5796 = x5795 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5797 = x5794 + x5796;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5798 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x5798 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5799 = x5798 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5800 = x5797 + x5799;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5801 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x5801 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5802 = x5801 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5803 = x5800 + x5802;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5804 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x5804 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5805 = x5804 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5806 = x5803 + x5805;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5807 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x5807 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5808 = x5807 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5809 = x5806 + x5808;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5810 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x5810 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5811 = x5810 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5812 = x5809 + x5811;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5813 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x5813 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5814 = x5813 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5815 = x5812 + x5814;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x5816 = x86 - x5815;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x5817 = x5816 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5817);
          reg = x5817;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5818 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x5818 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5819 = Fp(x5818.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5819);
            reg = x5819;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5820 = Fp(x5818.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5821 = x5820 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5821);
            reg = x5821;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5822 = Fp(x5818.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5823 = x5822 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5823);
            reg = x5823;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5824 = Fp(x5818.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5825 = x5824 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5825);
            reg = x5825;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5826 = Fp(x5818.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5827 = x5826 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5827);
            reg = x5827;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5828 = Fp(x5818.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5829 = x5828 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5829);
            reg = x5829;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5830 = Fp(x5818.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5831 = x5830 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5831);
            reg = x5831;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5832 = Fp(x5818.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5833 = x5832 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5833);
            reg = x5833;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5834 = Fp(x5818.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5835 = x5834 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5835);
            reg = x5835;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5836 = Fp(x5818.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5837 = x5836 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5837);
            reg = x5837;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5838 = Fp(x5818.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5839 = x5838 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5839);
            reg = x5839;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5840 = Fp(x5818.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5841 = x5840 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5841);
            reg = x5841;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5842 = Fp(x5818.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5843 = x5842 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5843);
            reg = x5843;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5844 = Fp(x5818.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5845 = x5844 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5845);
            reg = x5845;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5846 = Fp(x5818.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5847 = x5846 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5847);
            reg = x5847;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5848 = Fp(x5818.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5849 = x5848 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5849);
            reg = x5849;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5850 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x5850 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5851 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x5851 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5852 = x5851 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5853 = x5850 + x5852;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5854 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x5854 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5855 = x5854 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5856 = x5853 + x5855;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5857 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x5857 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5858 = x5857 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5859 = x5856 + x5858;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5860 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x5860 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5861 = x5860 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5862 = x5859 + x5861;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5863 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x5863 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5864 = x5863 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5865 = x5862 + x5864;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5866 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x5866 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5867 = x5866 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5868 = x5865 + x5867;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5869 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x5869 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5870 = x5869 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5871 = x5868 + x5870;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5872 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x5872 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5873 = x5872 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5874 = x5871 + x5873;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5875 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x5875 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5876 = x5875 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5877 = x5874 + x5876;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5878 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x5878 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5879 = x5878 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5880 = x5877 + x5879;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5881 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x5881 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5882 = x5881 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5883 = x5880 + x5882;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5884 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x5884 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5885 = x5884 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5886 = x5883 + x5885;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5887 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x5887 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5888 = x5887 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5889 = x5886 + x5888;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5890 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x5890 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5891 = x5890 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5892 = x5889 + x5891;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5893 = args[2][41 * steps + ((cycle - 0) & mask)];
        assert(x5893 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5894 = x5893 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5895 = x5892 + x5894;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x5896 = x5818 - x5895;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x5897 = x5896 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5897);
          reg = x5897;
        }
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5898 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5898 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5899 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5899 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5900 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5900 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5901 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5901 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
        auto x5902 = x5900 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
        auto x5903 = x5901 + x5902;
        // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
        auto x5904 = x5898 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
        auto x5905 = x5899 + x5904;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5906 = Fp(x5903.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5906);
            reg = x5906;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5907 = Fp(x5903.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5908 = x5907 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5908);
            reg = x5908;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5909 = Fp(x5903.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5910 = x5909 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5910);
            reg = x5910;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5911 = Fp(x5903.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5912 = x5911 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5912);
            reg = x5912;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5913 = Fp(x5903.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5914 = x5913 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5914);
            reg = x5914;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5915 = Fp(x5903.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5916 = x5915 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5916);
            reg = x5916;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5917 = Fp(x5903.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5918 = x5917 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5918);
            reg = x5918;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5919 = Fp(x5903.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5920 = x5919 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5920);
            reg = x5920;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5921 = Fp(x5903.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5922 = x5921 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5922);
            reg = x5922;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5923 = Fp(x5903.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5924 = x5923 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5924);
            reg = x5924;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5925 = Fp(x5903.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5926 = x5925 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5926);
            reg = x5926;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5927 = Fp(x5903.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5928 = x5927 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5928);
            reg = x5928;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5929 = Fp(x5903.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5930 = x5929 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5930);
            reg = x5930;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5931 = Fp(x5903.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5932 = x5931 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5932);
            reg = x5932;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5933 = Fp(x5903.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5934 = x5933 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5934);
            reg = x5934;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5935 = Fp(x5903.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5936 = x5935 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5936);
            reg = x5936;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5937 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x5937 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5938 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x5938 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5939 = x5938 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5940 = x5937 + x5939;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5941 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x5941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5942 = x5941 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5943 = x5940 + x5942;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5944 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x5944 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5945 = x5944 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5946 = x5943 + x5945;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5947 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x5947 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5948 = x5947 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5949 = x5946 + x5948;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5950 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x5950 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5951 = x5950 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5952 = x5949 + x5951;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5953 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x5953 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5954 = x5953 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5955 = x5952 + x5954;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5956 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x5956 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5957 = x5956 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5958 = x5955 + x5957;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5959 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x5959 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5960 = x5959 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5961 = x5958 + x5960;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5962 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x5962 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5963 = x5962 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5964 = x5961 + x5963;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5965 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x5965 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5966 = x5965 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5967 = x5964 + x5966;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5968 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x5968 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5969 = x5968 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5970 = x5967 + x5969;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5971 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x5971 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5972 = x5971 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5973 = x5970 + x5972;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5974 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x5974 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5975 = x5974 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5976 = x5973 + x5975;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5977 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x5977 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5978 = x5977 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5979 = x5976 + x5978;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5980 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x5980 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x5981 = x5980 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x5982 = x5979 + x5981;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x5983 = x5903 - x5982;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x5984 = x5983 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5984);
          reg = x5984;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x5985 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x5985 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":113:30)
        auto x5986 = x5905 + x5985;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5987 = Fp(x5986.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5987);
            reg = x5987;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5988 = Fp(x5986.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5989 = x5988 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5989);
            reg = x5989;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5990 = Fp(x5986.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5991 = x5990 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5991);
            reg = x5991;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5992 = Fp(x5986.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5993 = x5992 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5993);
            reg = x5993;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5994 = Fp(x5986.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5995 = x5994 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5995);
            reg = x5995;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5996 = Fp(x5986.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5997 = x5996 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5997);
            reg = x5997;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x5998 = Fp(x5986.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x5999 = x5998 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5999);
            reg = x5999;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6000 = Fp(x5986.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6001 = x6000 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6001);
            reg = x6001;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6002 = Fp(x5986.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6003 = x6002 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6003);
            reg = x6003;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6004 = Fp(x5986.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6005 = x6004 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6005);
            reg = x6005;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6006 = Fp(x5986.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6007 = x6006 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6007);
            reg = x6007;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6008 = Fp(x5986.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6009 = x6008 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6009);
            reg = x6009;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6010 = Fp(x5986.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6011 = x6010 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6011);
            reg = x6011;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6012 = Fp(x5986.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6013 = x6012 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6013);
            reg = x6013;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6014 = Fp(x5986.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6015 = x6014 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6015);
            reg = x6015;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6016 = Fp(x5986.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6017 = x6016 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6017);
            reg = x6017;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6018 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x6018 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6019 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x6019 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6020 = x6019 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6021 = x6018 + x6020;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6022 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x6022 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6023 = x6022 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6024 = x6021 + x6023;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6025 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x6025 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6026 = x6025 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6027 = x6024 + x6026;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6028 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x6028 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6029 = x6028 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6030 = x6027 + x6029;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6031 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x6031 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6032 = x6031 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6033 = x6030 + x6032;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6034 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x6034 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6035 = x6034 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6036 = x6033 + x6035;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6037 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x6037 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6038 = x6037 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6039 = x6036 + x6038;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6040 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x6040 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6041 = x6040 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6042 = x6039 + x6041;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6043 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x6043 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6044 = x6043 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6045 = x6042 + x6044;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6046 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x6046 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6047 = x6046 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6048 = x6045 + x6047;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6049 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x6049 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6050 = x6049 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6051 = x6048 + x6050;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6052 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x6052 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6053 = x6052 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6054 = x6051 + x6053;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6055 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x6055 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6056 = x6055 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6057 = x6054 + x6056;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6058 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x6058 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6059 = x6058 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6060 = x6057 + x6059;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6061 = args[2][41 * steps + ((cycle - 0) & mask)];
        assert(x6061 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6062 = x6061 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6063 = x6060 + x6062;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x6064 = x5986 - x6063;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x6065 = x6064 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6065);
          reg = x6065;
        }
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":136:11))
        auto x6066 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x6066 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg10"("cirgen/circuit/rv32im/sha.cpp":136:26))
        auto x6067 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x6067 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6068 = Fp(x6066.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6068);
            reg = x6068;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6069 = Fp(x6066.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6070 = x6069 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6070);
            reg = x6070;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6071 = Fp(x6066.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6072 = x6071 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6072);
            reg = x6072;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6073 = Fp(x6066.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6074 = x6073 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6074);
            reg = x6074;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6075 = Fp(x6066.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6076 = x6075 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6076);
            reg = x6076;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6077 = Fp(x6066.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6078 = x6077 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6078);
            reg = x6078;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6079 = Fp(x6066.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6080 = x6079 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6080);
            reg = x6080;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6081 = Fp(x6066.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6082 = x6081 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6082);
            reg = x6082;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6083 = Fp(x6066.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6084 = x6083 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6084);
            reg = x6084;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6085 = Fp(x6066.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6086 = x6085 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6086);
            reg = x6086;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6087 = Fp(x6066.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6088 = x6087 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6088);
            reg = x6088;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6089 = Fp(x6066.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6090 = x6089 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6090);
            reg = x6090;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6091 = Fp(x6066.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6092 = x6091 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6092);
            reg = x6092;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6093 = Fp(x6066.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6094 = x6093 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6094);
            reg = x6094;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6095 = Fp(x6066.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6096 = x6095 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6096);
            reg = x6096;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6097 = Fp(x6066.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6098 = x6097 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6098);
            reg = x6098;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6099 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x6099 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6100 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x6100 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6101 = x6100 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6102 = x6099 + x6101;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6103 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x6103 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6104 = x6103 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6105 = x6102 + x6104;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6106 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x6106 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6107 = x6106 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6108 = x6105 + x6107;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6109 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x6109 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6110 = x6109 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6111 = x6108 + x6110;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6112 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x6112 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6113 = x6112 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6114 = x6111 + x6113;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6115 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x6115 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6116 = x6115 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6117 = x6114 + x6116;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6118 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x6118 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6119 = x6118 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6120 = x6117 + x6119;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6121 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x6121 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6122 = x6121 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6123 = x6120 + x6122;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6124 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x6124 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6125 = x6124 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6126 = x6123 + x6125;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6127 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x6127 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6128 = x6127 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6129 = x6126 + x6128;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6130 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x6130 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6131 = x6130 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6132 = x6129 + x6131;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6133 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x6133 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6134 = x6133 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6135 = x6132 + x6134;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6136 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x6136 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6137 = x6136 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6138 = x6135 + x6137;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6139 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x6139 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6140 = x6139 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6141 = x6138 + x6140;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6142 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x6142 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6143 = x6142 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6144 = x6141 + x6143;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x6145 = x6066 - x6144;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x6146 = x6145 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6146);
          reg = x6146;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6147 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x6147 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":113:30)
        auto x6148 = x6067 + x6147;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6149 = Fp(x6148.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6149);
            reg = x6149;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6150 = Fp(x6148.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6151 = x6150 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6151);
            reg = x6151;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6152 = Fp(x6148.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6153 = x6152 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6153);
            reg = x6153;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6154 = Fp(x6148.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6155 = x6154 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6155);
            reg = x6155;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6156 = Fp(x6148.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6157 = x6156 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6157);
            reg = x6157;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6158 = Fp(x6148.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6159 = x6158 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6159);
            reg = x6159;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6160 = Fp(x6148.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6161 = x6160 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6161);
            reg = x6161;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6162 = Fp(x6148.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6163 = x6162 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6163);
            reg = x6163;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6164 = Fp(x6148.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6165 = x6164 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6165);
            reg = x6165;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6166 = Fp(x6148.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6167 = x6166 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6167);
            reg = x6167;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6168 = Fp(x6148.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6169 = x6168 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6169);
            reg = x6169;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6170 = Fp(x6148.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6171 = x6170 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6171);
            reg = x6171;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6172 = Fp(x6148.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6173 = x6172 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6173);
            reg = x6173;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6174 = Fp(x6148.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6175 = x6174 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6175);
            reg = x6175;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6176 = Fp(x6148.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6177 = x6176 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6177);
            reg = x6177;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6178 = Fp(x6148.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6179 = x6178 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6179);
            reg = x6179;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6180 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x6180 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6181 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x6181 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6182 = x6181 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6183 = x6180 + x6182;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6184 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x6184 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6185 = x6184 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6186 = x6183 + x6185;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6187 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x6187 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6188 = x6187 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6189 = x6186 + x6188;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6190 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x6190 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6191 = x6190 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6192 = x6189 + x6191;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6193 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x6193 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6194 = x6193 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6195 = x6192 + x6194;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6196 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x6196 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6197 = x6196 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6198 = x6195 + x6197;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6199 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x6199 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6200 = x6199 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6201 = x6198 + x6200;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6202 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x6202 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6203 = x6202 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6204 = x6201 + x6203;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6205 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x6205 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6206 = x6205 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6207 = x6204 + x6206;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6208 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x6208 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6209 = x6208 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6210 = x6207 + x6209;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6211 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x6211 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6212 = x6211 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6213 = x6210 + x6212;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6214 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x6214 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6215 = x6214 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6216 = x6213 + x6215;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6217 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x6217 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6218 = x6217 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6219 = x6216 + x6218;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6220 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x6220 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6221 = x6220 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6222 = x6219 + x6221;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6223 = args[2][41 * steps + ((cycle - 0) & mask)];
        assert(x6223 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6224 = x6223 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6225 = x6222 + x6224;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x6226 = x6148 - x6225;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x6227 = x6226 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6227);
          reg = x6227;
        }
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6228 = args[2][144 * steps + ((cycle - 4) & mask)];
        assert(x6228 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6229 = args[2][145 * steps + ((cycle - 4) & mask)];
        assert(x6229 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6230 = args[2][146 * steps + ((cycle - 4) & mask)];
        assert(x6230 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6231 = args[2][147 * steps + ((cycle - 4) & mask)];
        assert(x6231 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6232 = args[2][148 * steps + ((cycle - 4) & mask)];
        assert(x6232 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6233 = args[2][149 * steps + ((cycle - 4) & mask)];
        assert(x6233 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6234 = args[2][150 * steps + ((cycle - 4) & mask)];
        assert(x6234 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6235 = args[2][151 * steps + ((cycle - 4) & mask)];
        assert(x6235 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6236 = args[2][152 * steps + ((cycle - 4) & mask)];
        assert(x6236 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6237 = args[2][153 * steps + ((cycle - 4) & mask)];
        assert(x6237 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6238 = args[2][154 * steps + ((cycle - 4) & mask)];
        assert(x6238 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6239 = args[2][155 * steps + ((cycle - 4) & mask)];
        assert(x6239 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6240 = args[2][156 * steps + ((cycle - 4) & mask)];
        assert(x6240 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6241 = args[2][157 * steps + ((cycle - 4) & mask)];
        assert(x6241 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6242 = args[2][158 * steps + ((cycle - 4) & mask)];
        assert(x6242 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6243 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x6243 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6244 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x6244 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6245 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x6245 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6246 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x6246 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6247 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x6247 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6248 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x6248 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6249 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x6249 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6250 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x6250 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6251 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x6251 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6252 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x6252 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6253 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x6253 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6254 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x6254 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6255 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x6255 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6256 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x6256 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6257 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x6257 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6258 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x6258 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6259 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x6259 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6260 = x6229 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6261 = x6228 + x6260;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6262 = x6230 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6263 = x6261 + x6262;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6264 = x6231 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6265 = x6263 + x6264;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6266 = x6232 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6267 = x6265 + x6266;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6268 = x6233 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6269 = x6267 + x6268;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6270 = x6234 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6271 = x6269 + x6270;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6272 = x6235 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6273 = x6271 + x6272;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6274 = x6236 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6275 = x6273 + x6274;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6276 = x6237 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6277 = x6275 + x6276;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6278 = x6238 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6279 = x6277 + x6278;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6280 = x6239 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6281 = x6279 + x6280;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6282 = x6240 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6283 = x6281 + x6282;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6284 = x6241 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6285 = x6283 + x6284;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6286 = x6242 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6287 = x6285 + x6286;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6288 = x6243 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6289 = x6287 + x6288;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6290 = x6245 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6291 = x6244 + x6290;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6292 = x6246 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6293 = x6291 + x6292;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6294 = x6247 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6295 = x6293 + x6294;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6296 = x6248 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6297 = x6295 + x6296;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6298 = x6249 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6299 = x6297 + x6298;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6300 = x6250 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6301 = x6299 + x6300;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6302 = x6251 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6303 = x6301 + x6302;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6304 = x6252 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6305 = x6303 + x6304;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6306 = x6253 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6307 = x6305 + x6306;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6308 = x6254 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6309 = x6307 + x6308;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6310 = x6255 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6311 = x6309 + x6310;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6312 = x6256 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6313 = x6311 + x6312;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6314 = x6257 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6315 = x6313 + x6314;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6316 = x6258 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6317 = x6315 + x6316;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6318 = x6259 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6319 = x6317 + x6318;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6320 = args[2][144 * steps + ((cycle - 68) & mask)];
        assert(x6320 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6321 = args[2][145 * steps + ((cycle - 68) & mask)];
        assert(x6321 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6322 = args[2][146 * steps + ((cycle - 68) & mask)];
        assert(x6322 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6323 = args[2][147 * steps + ((cycle - 68) & mask)];
        assert(x6323 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6324 = args[2][148 * steps + ((cycle - 68) & mask)];
        assert(x6324 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6325 = args[2][149 * steps + ((cycle - 68) & mask)];
        assert(x6325 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6326 = args[2][150 * steps + ((cycle - 68) & mask)];
        assert(x6326 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6327 = args[2][151 * steps + ((cycle - 68) & mask)];
        assert(x6327 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6328 = args[2][152 * steps + ((cycle - 68) & mask)];
        assert(x6328 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6329 = args[2][153 * steps + ((cycle - 68) & mask)];
        assert(x6329 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6330 = args[2][154 * steps + ((cycle - 68) & mask)];
        assert(x6330 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6331 = args[2][155 * steps + ((cycle - 68) & mask)];
        assert(x6331 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6332 = args[2][156 * steps + ((cycle - 68) & mask)];
        assert(x6332 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6333 = args[2][157 * steps + ((cycle - 68) & mask)];
        assert(x6333 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6334 = args[2][158 * steps + ((cycle - 68) & mask)];
        assert(x6334 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6335 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x6335 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6336 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x6336 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6337 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x6337 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6338 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x6338 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6339 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x6339 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6340 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x6340 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6341 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x6341 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6342 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x6342 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6343 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x6343 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6344 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x6344 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6345 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x6345 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6346 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x6346 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6347 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x6347 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6348 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x6348 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6349 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x6349 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6350 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x6350 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6351 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x6351 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6352 = x6321 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6353 = x6320 + x6352;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6354 = x6322 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6355 = x6353 + x6354;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6356 = x6323 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6357 = x6355 + x6356;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6358 = x6324 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6359 = x6357 + x6358;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6360 = x6325 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6361 = x6359 + x6360;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6362 = x6326 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6363 = x6361 + x6362;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6364 = x6327 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6365 = x6363 + x6364;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6366 = x6328 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6367 = x6365 + x6366;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6368 = x6329 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6369 = x6367 + x6368;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6370 = x6330 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6371 = x6369 + x6370;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6372 = x6331 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6373 = x6371 + x6372;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6374 = x6332 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6375 = x6373 + x6374;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6376 = x6333 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6377 = x6375 + x6376;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6378 = x6334 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6379 = x6377 + x6378;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6380 = x6335 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6381 = x6379 + x6380;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6382 = x6337 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6383 = x6336 + x6382;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6384 = x6338 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6385 = x6383 + x6384;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6386 = x6339 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6387 = x6385 + x6386;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6388 = x6340 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6389 = x6387 + x6388;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6390 = x6341 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6391 = x6389 + x6390;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6392 = x6342 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6393 = x6391 + x6392;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6394 = x6343 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6395 = x6393 + x6394;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6396 = x6344 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6397 = x6395 + x6396;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6398 = x6345 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6399 = x6397 + x6398;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6400 = x6346 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6401 = x6399 + x6400;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6402 = x6347 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6403 = x6401 + x6402;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6404 = x6348 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6405 = x6403 + x6404;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6406 = x6349 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6407 = x6405 + x6406;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6408 = x6350 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6409 = x6407 + x6408;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6410 = x6351 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6411 = x6409 + x6410;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x6412 = x6289 + x6381;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x6413 = x6319 + x6411;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6414 = Fp(x6412.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6414);
            reg = x6414;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6415 = Fp(x6412.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6416 = x6415 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6416);
            reg = x6416;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6417 = Fp(x6412.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6418 = x6417 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6418);
            reg = x6418;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6419 = Fp(x6412.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6420 = x6419 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6420);
            reg = x6420;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6421 = Fp(x6412.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6422 = x6421 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6422);
            reg = x6422;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6423 = Fp(x6412.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6424 = x6423 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6424);
            reg = x6424;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6425 = Fp(x6412.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6426 = x6425 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6426);
            reg = x6426;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6427 = Fp(x6412.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6428 = x6427 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6428);
            reg = x6428;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6429 = Fp(x6412.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6430 = x6429 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6430);
            reg = x6430;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6431 = Fp(x6412.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6432 = x6431 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6432);
            reg = x6432;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6433 = Fp(x6412.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6434 = x6433 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6434);
            reg = x6434;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6435 = Fp(x6412.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6436 = x6435 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6436);
            reg = x6436;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6437 = Fp(x6412.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6438 = x6437 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6438);
            reg = x6438;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6439 = Fp(x6412.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6440 = x6439 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6440);
            reg = x6440;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6441 = Fp(x6412.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6442 = x6441 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6442);
            reg = x6442;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6443 = Fp(x6412.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6444 = x6443 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6444);
            reg = x6444;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6445 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x6445 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6446 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x6446 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6447 = x6446 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6448 = x6445 + x6447;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6449 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x6449 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6450 = x6449 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6451 = x6448 + x6450;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6452 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x6452 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6453 = x6452 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6454 = x6451 + x6453;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6455 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x6455 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6456 = x6455 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6457 = x6454 + x6456;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6458 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x6458 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6459 = x6458 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6460 = x6457 + x6459;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6461 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x6461 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6462 = x6461 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6463 = x6460 + x6462;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6464 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x6464 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6465 = x6464 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6466 = x6463 + x6465;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6467 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x6467 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6468 = x6467 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6469 = x6466 + x6468;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6470 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x6470 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6471 = x6470 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6472 = x6469 + x6471;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6473 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x6473 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6474 = x6473 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6475 = x6472 + x6474;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6476 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x6476 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6477 = x6476 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6478 = x6475 + x6477;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6479 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x6479 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6480 = x6479 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6481 = x6478 + x6480;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6482 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x6482 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6483 = x6482 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6484 = x6481 + x6483;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6485 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x6485 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6486 = x6485 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6487 = x6484 + x6486;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6488 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x6488 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6489 = x6488 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6490 = x6487 + x6489;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x6491 = x6412 - x6490;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x6492 = x6491 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x6493 = Fp(x6492.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6493);
            reg = x6493;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6494 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x6494 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x6495 = x6492 - x6494;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x6496 = x6495 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x6497 = x87 - x6496;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x6498 = x6496 * x6497;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x6498 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x6499 = x6413 + x6492;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6500 = Fp(x6499.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6500);
            reg = x6500;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6501 = Fp(x6499.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6502 = x6501 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6502);
            reg = x6502;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6503 = Fp(x6499.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6504 = x6503 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6504);
            reg = x6504;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6505 = Fp(x6499.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6506 = x6505 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6506);
            reg = x6506;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6507 = Fp(x6499.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6508 = x6507 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6508);
            reg = x6508;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6509 = Fp(x6499.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6510 = x6509 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6510);
            reg = x6510;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6511 = Fp(x6499.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6512 = x6511 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6512);
            reg = x6512;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6513 = Fp(x6499.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6514 = x6513 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6514);
            reg = x6514;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6515 = Fp(x6499.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6516 = x6515 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6516);
            reg = x6516;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6517 = Fp(x6499.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6518 = x6517 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6518);
            reg = x6518;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6519 = Fp(x6499.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6520 = x6519 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6520);
            reg = x6520;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6521 = Fp(x6499.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6522 = x6521 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6522);
            reg = x6522;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6523 = Fp(x6499.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6524 = x6523 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6524);
            reg = x6524;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6525 = Fp(x6499.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6526 = x6525 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6526);
            reg = x6526;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6527 = Fp(x6499.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6528 = x6527 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6528);
            reg = x6528;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6529 = Fp(x6499.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6530 = x6529 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6530);
            reg = x6530;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6531 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x6531 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6532 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x6532 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6533 = x6532 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6534 = x6531 + x6533;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6535 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x6535 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6536 = x6535 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6537 = x6534 + x6536;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6538 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x6538 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6539 = x6538 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6540 = x6537 + x6539;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6541 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x6541 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6542 = x6541 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6543 = x6540 + x6542;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6544 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x6544 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6545 = x6544 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6546 = x6543 + x6545;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6547 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x6547 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6548 = x6547 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6549 = x6546 + x6548;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6550 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x6550 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6551 = x6550 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6552 = x6549 + x6551;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6553 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x6553 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6554 = x6553 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6555 = x6552 + x6554;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6556 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x6556 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6557 = x6556 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6558 = x6555 + x6557;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6559 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x6559 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6560 = x6559 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6561 = x6558 + x6560;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6562 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x6562 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6563 = x6562 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6564 = x6561 + x6563;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6565 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x6565 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6566 = x6565 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6567 = x6564 + x6566;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6568 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x6568 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6569 = x6568 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6570 = x6567 + x6569;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6571 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x6571 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6572 = x6571 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6573 = x6570 + x6572;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6574 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x6574 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6575 = x6574 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6576 = x6573 + x6575;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x6577 = x6499 - x6576;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x6578 = x6577 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x6579 = Fp(x6578.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6579);
            reg = x6579;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6580 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x6580 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x6581 = x6578 - x6580;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x6582 = x6581 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x6583 = x87 - x6582;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x6584 = x6582 * x6583;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x6584 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6585 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x6585 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6586 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x6586 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6587 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x6587 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6588 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x6588 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6589 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x6589 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6590 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x6590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6591 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x6591 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6592 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x6592 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6593 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x6593 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6594 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x6594 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6595 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x6595 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6596 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x6596 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6597 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x6597 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6598 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x6598 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6599 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x6599 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6600 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x6600 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6601 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x6601 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6602 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x6602 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6603 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x6603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6604 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x6604 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6605 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x6605 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6606 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x6606 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6607 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x6607 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6608 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x6608 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6609 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x6609 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6610 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x6610 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6611 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x6611 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6612 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x6612 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6613 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x6613 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6614 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x6614 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6615 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x6615 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6616 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x6616 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6617 = x6586 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6618 = x6585 + x6617;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6619 = x6587 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6620 = x6618 + x6619;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6621 = x6588 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6622 = x6620 + x6621;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6623 = x6589 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6624 = x6622 + x6623;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6625 = x6590 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6626 = x6624 + x6625;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6627 = x6591 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6628 = x6626 + x6627;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6629 = x6592 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6630 = x6628 + x6629;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6631 = x6593 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6632 = x6630 + x6631;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6633 = x6594 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6634 = x6632 + x6633;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6635 = x6595 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6636 = x6634 + x6635;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6637 = x6596 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6638 = x6636 + x6637;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6639 = x6597 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6640 = x6638 + x6639;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6641 = x6598 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6642 = x6640 + x6641;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6643 = x6599 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6644 = x6642 + x6643;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6645 = x6600 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6646 = x6644 + x6645;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6647 = x6602 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6648 = x6601 + x6647;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6649 = x6603 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6650 = x6648 + x6649;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6651 = x6604 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6652 = x6650 + x6651;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6653 = x6605 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6654 = x6652 + x6653;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6655 = x6606 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6656 = x6654 + x6655;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6657 = x6607 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6658 = x6656 + x6657;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6659 = x6608 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6660 = x6658 + x6659;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6661 = x6609 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6662 = x6660 + x6661;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6663 = x6610 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6664 = x6662 + x6663;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6665 = x6611 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6666 = x6664 + x6665;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6667 = x6612 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6668 = x6666 + x6667;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6669 = x6613 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6670 = x6668 + x6669;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6671 = x6614 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6672 = x6670 + x6671;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6673 = x6615 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6674 = x6672 + x6673;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6675 = x6616 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6676 = x6674 + x6675;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6677 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x6677 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6678 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x6678 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6679 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x6679 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6680 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x6680 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6681 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x6681 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6682 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x6682 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6683 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x6683 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6684 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x6684 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6685 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x6685 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6686 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x6686 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6687 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x6687 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6688 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x6688 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6689 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x6689 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6690 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x6690 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6691 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x6691 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6692 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x6692 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6693 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x6693 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6694 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x6694 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6695 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x6695 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6696 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x6696 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6697 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x6697 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6698 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x6698 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6699 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x6699 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6700 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x6700 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6701 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x6701 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6702 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x6702 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6703 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x6703 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6704 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x6704 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6705 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x6705 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6706 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x6706 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6707 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x6707 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6708 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x6708 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6709 = x6678 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6710 = x6677 + x6709;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6711 = x6679 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6712 = x6710 + x6711;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6713 = x6680 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6714 = x6712 + x6713;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6715 = x6681 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6716 = x6714 + x6715;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6717 = x6682 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6718 = x6716 + x6717;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6719 = x6683 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6720 = x6718 + x6719;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6721 = x6684 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6722 = x6720 + x6721;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6723 = x6685 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6724 = x6722 + x6723;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6725 = x6686 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6726 = x6724 + x6725;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6727 = x6687 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6728 = x6726 + x6727;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6729 = x6688 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6730 = x6728 + x6729;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6731 = x6689 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6732 = x6730 + x6731;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6733 = x6690 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6734 = x6732 + x6733;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6735 = x6691 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6736 = x6734 + x6735;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6737 = x6692 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6738 = x6736 + x6737;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6739 = x6694 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6740 = x6693 + x6739;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6741 = x6695 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6742 = x6740 + x6741;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6743 = x6696 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6744 = x6742 + x6743;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6745 = x6697 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6746 = x6744 + x6745;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6747 = x6698 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6748 = x6746 + x6747;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6749 = x6699 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6750 = x6748 + x6749;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6751 = x6700 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6752 = x6750 + x6751;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6753 = x6701 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6754 = x6752 + x6753;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6755 = x6702 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6756 = x6754 + x6755;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6757 = x6703 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6758 = x6756 + x6757;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6759 = x6704 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6760 = x6758 + x6759;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6761 = x6705 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6762 = x6760 + x6761;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6763 = x6706 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6764 = x6762 + x6763;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6765 = x6707 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6766 = x6764 + x6765;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x6767 = x6708 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x6768 = x6766 + x6767;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x6769 = x6646 + x6738;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x6770 = x6676 + x6768;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6771 = Fp(x6769.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6771);
            reg = x6771;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6772 = Fp(x6769.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6773 = x6772 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6773);
            reg = x6773;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6774 = Fp(x6769.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6775 = x6774 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6775);
            reg = x6775;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6776 = Fp(x6769.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6777 = x6776 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6777);
            reg = x6777;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6778 = Fp(x6769.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6779 = x6778 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6779);
            reg = x6779;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6780 = Fp(x6769.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6781 = x6780 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6781);
            reg = x6781;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6782 = Fp(x6769.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6783 = x6782 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6783);
            reg = x6783;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6784 = Fp(x6769.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6785 = x6784 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6785);
            reg = x6785;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6786 = Fp(x6769.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6787 = x6786 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6787);
            reg = x6787;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6788 = Fp(x6769.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6789 = x6788 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6789);
            reg = x6789;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6790 = Fp(x6769.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6791 = x6790 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6791);
            reg = x6791;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6792 = Fp(x6769.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6793 = x6792 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6793);
            reg = x6793;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6794 = Fp(x6769.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6795 = x6794 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6795);
            reg = x6795;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6796 = Fp(x6769.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6797 = x6796 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6797);
            reg = x6797;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6798 = Fp(x6769.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6799 = x6798 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6799);
            reg = x6799;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6800 = Fp(x6769.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6801 = x6800 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6801);
            reg = x6801;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6802 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x6802 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6803 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x6803 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6804 = x6803 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6805 = x6802 + x6804;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6806 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x6806 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6807 = x6806 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6808 = x6805 + x6807;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6809 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x6809 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6810 = x6809 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6811 = x6808 + x6810;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6812 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x6812 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6813 = x6812 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6814 = x6811 + x6813;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6815 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x6815 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6816 = x6815 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6817 = x6814 + x6816;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6818 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x6818 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6819 = x6818 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6820 = x6817 + x6819;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6821 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x6821 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6822 = x6821 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6823 = x6820 + x6822;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6824 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x6824 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6825 = x6824 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6826 = x6823 + x6825;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6827 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x6827 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6828 = x6827 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6829 = x6826 + x6828;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6830 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x6830 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6831 = x6830 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6832 = x6829 + x6831;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6833 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x6833 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6834 = x6833 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6835 = x6832 + x6834;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6836 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x6836 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6837 = x6836 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6838 = x6835 + x6837;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6839 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x6839 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6840 = x6839 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6841 = x6838 + x6840;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6842 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x6842 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6843 = x6842 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6844 = x6841 + x6843;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6845 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x6845 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6846 = x6845 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6847 = x6844 + x6846;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x6848 = x6769 - x6847;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x6849 = x6848 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x6850 = Fp(x6849.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6850);
            reg = x6850;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6851 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x6851 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x6852 = x6849 - x6851;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x6853 = x6852 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x6854 = x87 - x6853;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x6855 = x6853 * x6854;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x6855 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x6856 = x6770 + x6849;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6857 = Fp(x6856.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6857);
            reg = x6857;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6858 = Fp(x6856.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6859 = x6858 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6859);
            reg = x6859;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6860 = Fp(x6856.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6861 = x6860 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6861);
            reg = x6861;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6862 = Fp(x6856.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6863 = x6862 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6863);
            reg = x6863;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6864 = Fp(x6856.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6865 = x6864 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6865);
            reg = x6865;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6866 = Fp(x6856.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6867 = x6866 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6867);
            reg = x6867;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6868 = Fp(x6856.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6869 = x6868 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6869);
            reg = x6869;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6870 = Fp(x6856.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6871 = x6870 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6871);
            reg = x6871;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6872 = Fp(x6856.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6873 = x6872 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6873);
            reg = x6873;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6874 = Fp(x6856.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6875 = x6874 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6875);
            reg = x6875;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6876 = Fp(x6856.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6877 = x6876 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6877);
            reg = x6877;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6878 = Fp(x6856.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6879 = x6878 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6879);
            reg = x6879;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6880 = Fp(x6856.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6881 = x6880 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6881);
            reg = x6881;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6882 = Fp(x6856.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6883 = x6882 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6883);
            reg = x6883;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6884 = Fp(x6856.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6885 = x6884 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6885);
            reg = x6885;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x6886 = Fp(x6856.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x6887 = x6886 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6887);
            reg = x6887;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6888 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x6888 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6889 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x6889 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6890 = x6889 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6891 = x6888 + x6890;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6892 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x6892 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6893 = x6892 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6894 = x6891 + x6893;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6895 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x6895 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6896 = x6895 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6897 = x6894 + x6896;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6898 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x6898 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6899 = x6898 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6900 = x6897 + x6899;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6901 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x6901 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6902 = x6901 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6903 = x6900 + x6902;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6904 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x6904 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6905 = x6904 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6906 = x6903 + x6905;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6907 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x6907 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6908 = x6907 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6909 = x6906 + x6908;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6910 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x6910 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6911 = x6910 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6912 = x6909 + x6911;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6913 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x6913 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6914 = x6913 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6915 = x6912 + x6914;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6916 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x6916 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6917 = x6916 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6918 = x6915 + x6917;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6919 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x6919 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6920 = x6919 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6921 = x6918 + x6920;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6922 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x6922 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6923 = x6922 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6924 = x6921 + x6923;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6925 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x6925 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6926 = x6925 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6927 = x6924 + x6926;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6928 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x6928 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6929 = x6928 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6930 = x6927 + x6929;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6931 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x6931 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x6932 = x6931 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x6933 = x6930 + x6932;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x6934 = x6856 - x6933;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x6935 = x6934 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x6936 = Fp(x6935.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6936);
            reg = x6936;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6937 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x6937 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x6938 = x6935 - x6937;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x6939 = x6938 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x6940 = x87 - x6939;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x6941 = x6939 * x6940;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x6941 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x6942 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x6942 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":278:25)
        auto x6943 = x6942 + x5573;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6944 = x6470 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6945 = x6467 + x6944;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6946 = x6556 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6947 = x6553 + x6946;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6948 = x6473 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6949 = x6945 + x6948;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6950 = x6559 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6951 = x6947 + x6950;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6952 = x6476 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6953 = x6949 + x6952;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6954 = x6562 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6955 = x6951 + x6954;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6956 = x6479 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6957 = x6953 + x6956;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6958 = x6565 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6959 = x6955 + x6958;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6960 = x6482 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6961 = x6957 + x6960;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6962 = x6568 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6963 = x6959 + x6962;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6964 = x6485 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6965 = x6961 + x6964;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6966 = x6571 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6967 = x6963 + x6966;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6968 = x6488 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6969 = x6965 + x6968;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6970 = x6574 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6971 = x6967 + x6970;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6466);
          reg = x6466;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6969);
          reg = x6969;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6552);
          reg = x6552;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6971);
          reg = x6971;
        }
        {
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x6972 = args[2][110 * steps + ((cycle - 0) & mask)];
          assert(x6972 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x6973 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6973 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x6974 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6974 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x6975 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6975 != Fp::invalid());
          host_args.at(0) = x6943;
          host_args.at(1) = x6972;
          host_args.at(2) = x6973;
          host_args.at(3) = x6974;
          host_args.at(4) = x6975;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6976 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x6976 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6977 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x6977 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6978 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x6978 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x6979 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x6979 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6943);
          reg = x6943;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6976);
          reg = x6976;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6977);
          reg = x6977;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6978);
          reg = x6978;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6979);
          reg = x6979;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":279:25)
        auto x6980 = x6942 + x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":279:25)
        auto x6981 = x6980 + x5573;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6982 = x6827 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6983 = x6824 + x6982;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6984 = x6913 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6985 = x6910 + x6984;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6986 = x6830 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6987 = x6983 + x6986;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6988 = x6916 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6989 = x6985 + x6988;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6990 = x6833 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6991 = x6987 + x6990;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6992 = x6919 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6993 = x6989 + x6992;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6994 = x6836 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6995 = x6991 + x6994;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6996 = x6922 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6997 = x6993 + x6996;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x6998 = x6839 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x6999 = x6995 + x6998;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x7000 = x6925 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x7001 = x6997 + x7000;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x7002 = x6842 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x7003 = x6999 + x7002;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x7004 = x6928 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x7005 = x7001 + x7004;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x7006 = x6845 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x7007 = x7003 + x7006;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x7008 = x6931 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x7009 = x7005 + x7008;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6823);
          reg = x6823;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7007);
          reg = x7007;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6909);
          reg = x6909;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7009);
          reg = x7009;
        }
        {
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7010 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x7010 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7011 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x7011 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7012 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x7012 != Fp::invalid());
          // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7013 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x7013 != Fp::invalid());
          host_args.at(0) = x6981;
          host_args.at(1) = x7010;
          host_args.at(2) = x7011;
          host_args.at(3) = x7012;
          host_args.at(4) = x7013;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7014 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x7014 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7015 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x7015 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7016 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x7016 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7017 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x7017 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6981);
          reg = x6981;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7014);
          reg = x7014;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7015);
          reg = x7015;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7016);
          reg = x7016;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7017);
          reg = x7017;
        }
      }
      if (x87 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7018 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x7018 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7019 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x7019 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7020 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x7020 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7021 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x7021 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":128:26)
        auto x7022 = x7019 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:11)
        auto x7023 = x7018 + x7022;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:61)
        auto x7024 = x7021 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:46)
        auto x7025 = x7020 + x7024;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7026 = Fp(x7023.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7026);
            reg = x7026;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7027 = Fp(x7023.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7028 = x7027 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7028);
            reg = x7028;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7029 = Fp(x7023.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7030 = x7029 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7030);
            reg = x7030;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7031 = Fp(x7023.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7032 = x7031 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7032);
            reg = x7032;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7033 = Fp(x7023.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7034 = x7033 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7034);
            reg = x7034;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7035 = Fp(x7023.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7036 = x7035 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7036);
            reg = x7036;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7037 = Fp(x7023.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7038 = x7037 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7038);
            reg = x7038;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7039 = Fp(x7023.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7040 = x7039 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7040);
            reg = x7040;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7041 = Fp(x7023.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7042 = x7041 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7042);
            reg = x7042;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7043 = Fp(x7023.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7044 = x7043 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7044);
            reg = x7044;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7045 = Fp(x7023.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7046 = x7045 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7046);
            reg = x7046;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7047 = Fp(x7023.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7048 = x7047 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7048);
            reg = x7048;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7049 = Fp(x7023.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7050 = x7049 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7050);
            reg = x7050;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7051 = Fp(x7023.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7052 = x7051 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7052);
            reg = x7052;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7053 = Fp(x7023.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7054 = x7053 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7054);
            reg = x7054;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7055 = Fp(x7023.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7056 = x7055 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7056);
            reg = x7056;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7057 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x7057 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7058 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x7058 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7059 = x7058 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7060 = x7057 + x7059;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7061 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x7061 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7062 = x7061 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7063 = x7060 + x7062;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7064 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x7064 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7065 = x7064 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7066 = x7063 + x7065;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7067 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x7067 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7068 = x7067 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7069 = x7066 + x7068;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7070 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x7070 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7071 = x7070 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7072 = x7069 + x7071;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7073 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x7073 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7074 = x7073 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7075 = x7072 + x7074;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7076 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x7076 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7077 = x7076 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7078 = x7075 + x7077;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7079 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x7079 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7080 = x7079 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7081 = x7078 + x7080;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7082 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x7082 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7083 = x7082 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7084 = x7081 + x7083;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7085 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x7085 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7086 = x7085 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7087 = x7084 + x7086;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7088 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x7088 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7089 = x7088 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7090 = x7087 + x7089;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7091 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x7091 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7092 = x7091 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7093 = x7090 + x7092;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7094 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x7094 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7095 = x7094 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7096 = x7093 + x7095;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7097 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x7097 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7098 = x7097 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7099 = x7096 + x7098;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7100 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x7100 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7101 = x7100 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7102 = x7099 + x7101;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x7103 = x7023 - x7102;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x7104 = x7103 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x7105 = Fp(x7104.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7105);
            reg = x7105;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7106 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x7106 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x7107 = x7104 - x7106;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x7108 = x7107 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x7109 = x87 - x7108;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x7110 = x7108 * x7109;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x7110 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x7111 = x7025 + x7104;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7112 = Fp(x7111.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7112);
            reg = x7112;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7113 = Fp(x7111.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7114 = x7113 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7114);
            reg = x7114;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7115 = Fp(x7111.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7116 = x7115 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7116);
            reg = x7116;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7117 = Fp(x7111.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7118 = x7117 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7118);
            reg = x7118;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7119 = Fp(x7111.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7120 = x7119 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7120);
            reg = x7120;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7121 = Fp(x7111.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7122 = x7121 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7122);
            reg = x7122;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7123 = Fp(x7111.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7124 = x7123 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7124);
            reg = x7124;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7125 = Fp(x7111.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7126 = x7125 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7126);
            reg = x7126;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7127 = Fp(x7111.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7128 = x7127 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7128);
            reg = x7128;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7129 = Fp(x7111.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7130 = x7129 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7130);
            reg = x7130;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7131 = Fp(x7111.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7132 = x7131 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7132);
            reg = x7132;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7133 = Fp(x7111.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7134 = x7133 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7134);
            reg = x7134;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7135 = Fp(x7111.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7136 = x7135 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7136);
            reg = x7136;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7137 = Fp(x7111.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7138 = x7137 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7138);
            reg = x7138;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7139 = Fp(x7111.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7140 = x7139 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7140);
            reg = x7140;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7141 = Fp(x7111.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7142 = x7141 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7142);
            reg = x7142;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7143 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x7143 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7144 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x7144 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7145 = x7144 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7146 = x7143 + x7145;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7147 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x7147 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7148 = x7147 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7149 = x7146 + x7148;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7150 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x7150 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7151 = x7150 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7152 = x7149 + x7151;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7153 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x7153 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7154 = x7153 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7155 = x7152 + x7154;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7156 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x7156 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7157 = x7156 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7158 = x7155 + x7157;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7159 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x7159 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7160 = x7159 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7161 = x7158 + x7160;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7162 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x7162 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7163 = x7162 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7164 = x7161 + x7163;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7165 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x7165 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7166 = x7165 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7167 = x7164 + x7166;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7168 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x7168 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7169 = x7168 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7170 = x7167 + x7169;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7171 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x7171 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7172 = x7171 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7173 = x7170 + x7172;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7174 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x7174 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7175 = x7174 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7176 = x7173 + x7175;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7177 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x7177 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7178 = x7177 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7179 = x7176 + x7178;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7180 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x7180 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7181 = x7180 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7182 = x7179 + x7181;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7183 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x7183 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7184 = x7183 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7185 = x7182 + x7184;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7186 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x7186 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7187 = x7186 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7188 = x7185 + x7187;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x7189 = x7111 - x7188;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x7190 = x7189 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x7191 = Fp(x7190.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7191);
            reg = x7191;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7192 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x7192 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x7193 = x7190 - x7192;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x7194 = x7193 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x7195 = x87 - x7194;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x7196 = x7194 * x7195;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x7196 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7197 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x7197 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7198 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x7198 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7199 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x7199 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7200 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x7200 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":128:26)
        auto x7201 = x7198 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:11)
        auto x7202 = x7197 + x7201;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:61)
        auto x7203 = x7200 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:46)
        auto x7204 = x7199 + x7203;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7205 = Fp(x7202.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7205);
            reg = x7205;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7206 = Fp(x7202.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7207 = x7206 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7207);
            reg = x7207;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7208 = Fp(x7202.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7209 = x7208 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7209);
            reg = x7209;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7210 = Fp(x7202.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7211 = x7210 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7211);
            reg = x7211;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7212 = Fp(x7202.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7213 = x7212 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7213);
            reg = x7213;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7214 = Fp(x7202.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7215 = x7214 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7215);
            reg = x7215;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7216 = Fp(x7202.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7217 = x7216 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7217);
            reg = x7217;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7218 = Fp(x7202.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7219 = x7218 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7219);
            reg = x7219;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7220 = Fp(x7202.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7221 = x7220 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7221);
            reg = x7221;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7222 = Fp(x7202.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7223 = x7222 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7223);
            reg = x7223;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7224 = Fp(x7202.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7225 = x7224 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7225);
            reg = x7225;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7226 = Fp(x7202.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7227 = x7226 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7227);
            reg = x7227;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7228 = Fp(x7202.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7229 = x7228 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7229);
            reg = x7229;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7230 = Fp(x7202.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7231 = x7230 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7231);
            reg = x7231;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7232 = Fp(x7202.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7233 = x7232 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7233);
            reg = x7233;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7234 = Fp(x7202.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7235 = x7234 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7235);
            reg = x7235;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7236 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x7236 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7237 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x7237 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7238 = x7237 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7239 = x7236 + x7238;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7240 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x7240 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7241 = x7240 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7242 = x7239 + x7241;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7243 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x7243 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7244 = x7243 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7245 = x7242 + x7244;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7246 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x7246 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7247 = x7246 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7248 = x7245 + x7247;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7249 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x7249 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7250 = x7249 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7251 = x7248 + x7250;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7252 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x7252 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7253 = x7252 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7254 = x7251 + x7253;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7255 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x7255 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7256 = x7255 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7257 = x7254 + x7256;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7258 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x7258 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7259 = x7258 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7260 = x7257 + x7259;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7261 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x7261 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7262 = x7261 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7263 = x7260 + x7262;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7264 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x7264 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7265 = x7264 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7266 = x7263 + x7265;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7267 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x7267 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7268 = x7267 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7269 = x7266 + x7268;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7270 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x7270 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7271 = x7270 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7272 = x7269 + x7271;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7273 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x7273 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7274 = x7273 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7275 = x7272 + x7274;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7276 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x7276 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7277 = x7276 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7278 = x7275 + x7277;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7279 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x7279 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7280 = x7279 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7281 = x7278 + x7280;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x7282 = x7202 - x7281;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x7283 = x7282 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x7284 = Fp(x7283.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7284);
            reg = x7284;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7285 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x7285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x7286 = x7283 - x7285;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x7287 = x7286 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x7288 = x87 - x7287;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x7289 = x7287 * x7288;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x7289 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x7290 = x7204 + x7283;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7291 = Fp(x7290.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7291);
            reg = x7291;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7292 = Fp(x7290.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7293 = x7292 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7293);
            reg = x7293;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7294 = Fp(x7290.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7295 = x7294 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7295);
            reg = x7295;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7296 = Fp(x7290.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7297 = x7296 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7297);
            reg = x7297;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7298 = Fp(x7290.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7299 = x7298 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7299);
            reg = x7299;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7300 = Fp(x7290.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7301 = x7300 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7301);
            reg = x7301;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7302 = Fp(x7290.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7303 = x7302 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7303);
            reg = x7303;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7304 = Fp(x7290.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7305 = x7304 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7305);
            reg = x7305;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7306 = Fp(x7290.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7307 = x7306 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7307);
            reg = x7307;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7308 = Fp(x7290.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7309 = x7308 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7309);
            reg = x7309;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7310 = Fp(x7290.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7311 = x7310 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7311);
            reg = x7311;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7312 = Fp(x7290.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7313 = x7312 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7313);
            reg = x7313;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7314 = Fp(x7290.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7315 = x7314 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7315);
            reg = x7315;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7316 = Fp(x7290.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7317 = x7316 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7317);
            reg = x7317;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7318 = Fp(x7290.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7319 = x7318 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7319);
            reg = x7319;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7320 = Fp(x7290.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7321 = x7320 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7321);
            reg = x7321;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7322 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x7322 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7323 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x7323 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7324 = x7323 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7325 = x7322 + x7324;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7326 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x7326 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7327 = x7326 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7328 = x7325 + x7327;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7329 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x7329 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7330 = x7329 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7331 = x7328 + x7330;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7332 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x7332 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7333 = x7332 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7334 = x7331 + x7333;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7335 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x7335 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7336 = x7335 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7337 = x7334 + x7336;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7338 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x7338 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7339 = x7338 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7340 = x7337 + x7339;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7341 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x7341 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7342 = x7341 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7343 = x7340 + x7342;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7344 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x7344 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7345 = x7344 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7346 = x7343 + x7345;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7347 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x7347 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7348 = x7347 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7349 = x7346 + x7348;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7350 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x7350 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7351 = x7350 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7352 = x7349 + x7351;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7353 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x7353 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7354 = x7353 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7355 = x7352 + x7354;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7356 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x7356 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7357 = x7356 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7358 = x7355 + x7357;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7359 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x7359 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7360 = x7359 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7361 = x7358 + x7360;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7362 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x7362 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7363 = x7362 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7364 = x7361 + x7363;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7365 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x7365 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7366 = x7365 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7367 = x7364 + x7366;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x7368 = x7290 - x7367;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x7369 = x7368 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x7370 = Fp(x7369.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7370);
            reg = x7370;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7371 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x7371 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x7372 = x7369 - x7371;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x7373 = x7372 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x7374 = x87 - x7373;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x7375 = x7373 * x7374;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x7375 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":136:11))
        auto x7376 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x7376 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":136:26))
        auto x7377 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x7377 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7378 = Fp(x7376.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7378);
            reg = x7378;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7379 = Fp(x7376.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7380 = x7379 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7380);
            reg = x7380;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7381 = Fp(x7376.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7382 = x7381 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7382);
            reg = x7382;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7383 = Fp(x7376.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7384 = x7383 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7384);
            reg = x7384;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7385 = Fp(x7376.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7386 = x7385 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7386);
            reg = x7386;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7387 = Fp(x7376.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7388 = x7387 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7388);
            reg = x7388;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7389 = Fp(x7376.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7390 = x7389 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7390);
            reg = x7390;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7391 = Fp(x7376.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7392 = x7391 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7392);
            reg = x7392;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7393 = Fp(x7376.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7394 = x7393 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7394);
            reg = x7394;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7395 = Fp(x7376.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7396 = x7395 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7396);
            reg = x7396;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7397 = Fp(x7376.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7398 = x7397 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7398);
            reg = x7398;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7399 = Fp(x7376.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7400 = x7399 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7400);
            reg = x7400;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7401 = Fp(x7376.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7402 = x7401 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7402);
            reg = x7402;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7403 = Fp(x7376.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7404 = x7403 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7404);
            reg = x7404;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7405 = Fp(x7376.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7406 = x7405 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7406);
            reg = x7406;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7407 = Fp(x7376.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7408 = x7407 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7408);
            reg = x7408;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7409 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x7409 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7410 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x7410 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7411 = x7410 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7412 = x7409 + x7411;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7413 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x7413 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7414 = x7413 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7415 = x7412 + x7414;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7416 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x7416 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7417 = x7416 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7418 = x7415 + x7417;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7419 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x7419 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7420 = x7419 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7421 = x7418 + x7420;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7422 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x7422 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7423 = x7422 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7424 = x7421 + x7423;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7425 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x7425 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7426 = x7425 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7427 = x7424 + x7426;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7428 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x7428 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7429 = x7428 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7430 = x7427 + x7429;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7431 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x7431 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7432 = x7431 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7433 = x7430 + x7432;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7434 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x7434 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7435 = x7434 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7436 = x7433 + x7435;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7437 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x7437 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7438 = x7437 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7439 = x7436 + x7438;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7440 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x7440 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7441 = x7440 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7442 = x7439 + x7441;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7443 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x7443 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7444 = x7443 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7445 = x7442 + x7444;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7446 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x7446 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7447 = x7446 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7448 = x7445 + x7447;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7449 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x7449 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7450 = x7449 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7451 = x7448 + x7450;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7452 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x7452 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7453 = x7452 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7454 = x7451 + x7453;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x7455 = x7376 - x7454;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x7456 = x7455 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x7457 = Fp(x7456.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7457);
            reg = x7457;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7458 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x7458 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x7459 = x7456 - x7458;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x7460 = x7459 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x7461 = x87 - x7460;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x7462 = x7460 * x7461;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x7462 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x7463 = x7377 + x7456;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7464 = Fp(x7463.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7464);
            reg = x7464;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7465 = Fp(x7463.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7466 = x7465 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7466);
            reg = x7466;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7467 = Fp(x7463.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7468 = x7467 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7468);
            reg = x7468;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7469 = Fp(x7463.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7470 = x7469 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7470);
            reg = x7470;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7471 = Fp(x7463.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7472 = x7471 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7472);
            reg = x7472;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7473 = Fp(x7463.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7474 = x7473 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7474);
            reg = x7474;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7475 = Fp(x7463.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7476 = x7475 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7476);
            reg = x7476;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7477 = Fp(x7463.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7478 = x7477 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7478);
            reg = x7478;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7479 = Fp(x7463.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7480 = x7479 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7480);
            reg = x7480;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7481 = Fp(x7463.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7482 = x7481 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7482);
            reg = x7482;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7483 = Fp(x7463.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7484 = x7483 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7484);
            reg = x7484;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7485 = Fp(x7463.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7486 = x7485 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7486);
            reg = x7486;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7487 = Fp(x7463.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7488 = x7487 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7488);
            reg = x7488;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7489 = Fp(x7463.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7490 = x7489 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7490);
            reg = x7490;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7491 = Fp(x7463.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7492 = x7491 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7492);
            reg = x7492;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7493 = Fp(x7463.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7494 = x7493 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7494);
            reg = x7494;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7495 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x7495 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7496 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x7496 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7497 = x7496 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7498 = x7495 + x7497;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7499 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x7499 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7500 = x7499 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7501 = x7498 + x7500;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7502 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x7502 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7503 = x7502 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7504 = x7501 + x7503;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7505 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x7505 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7506 = x7505 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7507 = x7504 + x7506;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7508 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x7508 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7509 = x7508 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7510 = x7507 + x7509;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7511 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x7511 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7512 = x7511 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7513 = x7510 + x7512;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7514 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x7514 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7515 = x7514 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7516 = x7513 + x7515;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7517 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x7517 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7518 = x7517 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7519 = x7516 + x7518;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7520 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x7520 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7521 = x7520 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7522 = x7519 + x7521;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7523 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x7523 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7524 = x7523 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7525 = x7522 + x7524;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7526 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x7526 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7527 = x7526 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7528 = x7525 + x7527;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7529 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x7529 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7530 = x7529 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7531 = x7528 + x7530;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7532 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x7532 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7533 = x7532 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7534 = x7531 + x7533;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7535 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x7535 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7536 = x7535 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7537 = x7534 + x7536;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7538 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x7538 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7539 = x7538 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7540 = x7537 + x7539;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x7541 = x7463 - x7540;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x7542 = x7541 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x7543 = Fp(x7542.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7543);
            reg = x7543;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7544 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x7544 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x7545 = x7542 - x7544;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x7546 = x7545 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x7547 = x87 - x7546;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x7548 = x7546 * x7547;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x7548 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":136:11))
        auto x7549 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x7549 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":136:26))
        auto x7550 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x7550 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7551 = Fp(x7549.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7551);
            reg = x7551;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7552 = Fp(x7549.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7553 = x7552 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7553);
            reg = x7553;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7554 = Fp(x7549.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7555 = x7554 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7555);
            reg = x7555;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7556 = Fp(x7549.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7557 = x7556 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7557);
            reg = x7557;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7558 = Fp(x7549.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7559 = x7558 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7559);
            reg = x7559;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7560 = Fp(x7549.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7561 = x7560 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7561);
            reg = x7561;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7562 = Fp(x7549.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7563 = x7562 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7563);
            reg = x7563;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7564 = Fp(x7549.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7565 = x7564 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7565);
            reg = x7565;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7566 = Fp(x7549.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7567 = x7566 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7567);
            reg = x7567;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7568 = Fp(x7549.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7569 = x7568 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7569);
            reg = x7569;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7570 = Fp(x7549.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7571 = x7570 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7571);
            reg = x7571;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7572 = Fp(x7549.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7573 = x7572 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7573);
            reg = x7573;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7574 = Fp(x7549.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7575 = x7574 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7575);
            reg = x7575;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7576 = Fp(x7549.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7577 = x7576 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7577);
            reg = x7577;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7578 = Fp(x7549.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7579 = x7578 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7579);
            reg = x7579;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7580 = Fp(x7549.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7581 = x7580 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7581);
            reg = x7581;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7582 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x7582 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7583 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x7583 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7584 = x7583 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7585 = x7582 + x7584;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7586 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x7586 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7587 = x7586 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7588 = x7585 + x7587;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7589 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x7589 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7590 = x7589 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7591 = x7588 + x7590;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7592 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x7592 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7593 = x7592 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7594 = x7591 + x7593;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7595 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x7595 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7596 = x7595 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7597 = x7594 + x7596;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7598 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x7598 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7599 = x7598 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7600 = x7597 + x7599;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7601 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x7601 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7602 = x7601 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7603 = x7600 + x7602;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7604 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x7604 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7605 = x7604 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7606 = x7603 + x7605;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7607 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x7607 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7608 = x7607 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7609 = x7606 + x7608;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7610 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x7610 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7611 = x7610 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7612 = x7609 + x7611;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7613 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x7613 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7614 = x7613 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7615 = x7612 + x7614;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7616 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x7616 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7617 = x7616 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7618 = x7615 + x7617;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7619 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x7619 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7620 = x7619 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7621 = x7618 + x7620;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7622 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x7622 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7623 = x7622 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7624 = x7621 + x7623;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7625 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x7625 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7626 = x7625 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7627 = x7624 + x7626;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x7628 = x7549 - x7627;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x7629 = x7628 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x7630 = Fp(x7629.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7630);
            reg = x7630;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7631 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x7631 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x7632 = x7629 - x7631;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x7633 = x7632 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x7634 = x87 - x7633;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x7635 = x7633 * x7634;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x7635 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x7636 = x7550 + x7629;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7637 = Fp(x7636.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7637);
            reg = x7637;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7638 = Fp(x7636.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7639 = x7638 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7639);
            reg = x7639;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7640 = Fp(x7636.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7641 = x7640 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7641);
            reg = x7641;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7642 = Fp(x7636.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7643 = x7642 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7643);
            reg = x7643;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7644 = Fp(x7636.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7645 = x7644 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7645);
            reg = x7645;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7646 = Fp(x7636.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7647 = x7646 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7647);
            reg = x7647;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7648 = Fp(x7636.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7649 = x7648 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7649);
            reg = x7649;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7650 = Fp(x7636.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7651 = x7650 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7651);
            reg = x7651;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7652 = Fp(x7636.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7653 = x7652 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7653);
            reg = x7653;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7654 = Fp(x7636.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7655 = x7654 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7655);
            reg = x7655;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7656 = Fp(x7636.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7657 = x7656 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7657);
            reg = x7657;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7658 = Fp(x7636.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7659 = x7658 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7659);
            reg = x7659;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7660 = Fp(x7636.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7661 = x7660 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7661);
            reg = x7661;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7662 = Fp(x7636.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7663 = x7662 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7663);
            reg = x7663;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7664 = Fp(x7636.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7665 = x7664 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7665);
            reg = x7665;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7666 = Fp(x7636.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7667 = x7666 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7667);
            reg = x7667;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7668 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x7668 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7669 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x7669 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7670 = x7669 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7671 = x7668 + x7670;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7672 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x7672 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7673 = x7672 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7674 = x7671 + x7673;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7675 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x7675 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7676 = x7675 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7677 = x7674 + x7676;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7678 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x7678 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7679 = x7678 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7680 = x7677 + x7679;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7681 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x7681 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7682 = x7681 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7683 = x7680 + x7682;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7684 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x7684 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7685 = x7684 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7686 = x7683 + x7685;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7687 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x7687 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7688 = x7687 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7689 = x7686 + x7688;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7690 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x7690 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7691 = x7690 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7692 = x7689 + x7691;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7693 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x7693 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7694 = x7693 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7695 = x7692 + x7694;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7696 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x7696 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7697 = x7696 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7698 = x7695 + x7697;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7699 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x7699 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7700 = x7699 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7701 = x7698 + x7700;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7702 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x7702 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7703 = x7702 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7704 = x7701 + x7703;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7705 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x7705 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7706 = x7705 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7707 = x7704 + x7706;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7708 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x7708 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7709 = x7708 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7710 = x7707 + x7709;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7711 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x7711 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7712 = x7711 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7713 = x7710 + x7712;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x7714 = x7636 - x7713;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x7715 = x7714 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x7716 = Fp(x7715.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7716);
            reg = x7716;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7717 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x7717 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x7718 = x7715 - x7717;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x7719 = x7718 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x7720 = x87 - x7719;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x7721 = x7719 * x7720;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x7721 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/components/mux.h":33:25))
    auto x7722 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x7722 != Fp::invalid());
    if (x7722 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x7723 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x7723 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/sha.cpp":157:69))
      auto x7724 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x7724 != Fp::invalid());
      if (x7724 != 0) {
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":160:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        {
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":163:22)
      auto x7725 = x87 - x7724;
      if (x7725 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7726 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x7726 != Fp::invalid());
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x7727 = Fp(x7726.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7727);
            reg = x7727;
          }
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x7728 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x7728 != Fp::invalid());
      if (x7728 != 0) {
        // loc("Top/Mux/4/OneHot/Reg9"("cirgen/circuit/rv32im/sha.cpp":166:74))
        auto x7729 = args[2][103 * steps + ((cycle - 1) & mask)];
        assert(x7729 != Fp::invalid());
        if (x7729 != 0) {
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":169:9)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":171:24)
        auto x7730 = x87 - x7729;
        if (x7730 != 0) {
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":173:9)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":188:18)
      auto x7731 = x87 - x7728;
      if (x7731 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7732 = args[2][137 * steps + ((cycle - 1) & mask)];
        assert(x7732 != Fp::invalid());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7732);
          reg = x7732;
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":191:40))
        auto x7733 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x7733 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":191:40)
        auto x7734 = x7733 - x87;
        // loc("cirgen/circuit/rv32im/sha.cpp":191:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7734);
          reg = x7734;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":81:27))
      auto x7735 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x7735 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x7736 = (x7735 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7736);
          reg = x7736;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x7737 = inv(x7735);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7737);
          reg = x7737;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x7738 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x7738 != Fp::invalid());
      if (x7738 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x7735 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x7739 = x87 - x7738;
      if (x7739 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x7740 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x7740 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x7741 = x7735 * x7740;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x7742 = x7741 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x7742 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      if (x7738 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7743 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x7743 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":200:19)
        auto x7744 = x87 - x7743;
        if (x7744 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":200:23)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x68);
            reg = x68;
          }
        }
        if (x7743 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":201:19)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x67);
            reg = x67;
          }
        }
      }
      if (x7739 != 0) {
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7745 = x2114 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7746 = x1297 + x7745;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7747 = x2846 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7748 = x7746 + x7747;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7749 = x3633 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7750 = x7748 + x7749;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7751 = x4083 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7752 = x7750 + x7751;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7753 = x4456 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7754 = x7752 + x7753;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7755 = x4888 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7756 = x7754 + x7755;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7757 = x5233 * x70;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7758 = x7756 + x7757;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7759 = x5562 * x69;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7760 = x7758 + x7759;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7761 = x7722 * x68;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7762 = x7760 + x7761;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x7763 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x7763 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7764 = x7763 * x67;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7765 = x7762 + x7764;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x7766 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x7766 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x7767 = x7766 * x66;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x7768 = x7765 + x7767;
        // loc("cirgen/circuit/rv32im/sha.cpp":208:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7768);
          reg = x7768;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":10:23)
      auto x7769 = x526 + x80;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x7770 = Fp(x7769.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7770);
          reg = x7770;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x7771 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x7771 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x7772 = x7769 - x7771;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x7773 = x7772 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x7774 = Fp(x7773.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7774);
          reg = x7774;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x7775 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x7775 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x7776 = x7773 - x7775;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x7777 = x7776 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x7778 = Fp(x7777.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7778);
          reg = x7778;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x7779 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x7779 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x7780 = x7777 - x7779;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x7781 = x7780 * x81;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":13:26)
        auto x7782 = Fp(x7781.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7782);
          reg = x7782;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x7783 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x7783 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:18)
      auto x7784 = x7781 - x7783;
      // loc("cirgen/circuit/rv32im/body.cpp":14:17)
      auto x7785 = x7784 * x78;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x7785);
        reg = x7785;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x7786 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x7786 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:23)
      auto x7787 = x87 - x7786;
      // loc("cirgen/circuit/rv32im/body.cpp":18:15)
      auto x7788 = x7786 * x7787;
      // loc("cirgen/circuit/rv32im/body.cpp":18:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x7788);
        reg = x7788;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x7789 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x7789 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":19:17)
      auto x7790 = x84 - x7786;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      auto x7791 = x7789 * x7790;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      if (x7791 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x7792 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x7792 != Fp::invalid());
      host_args.at(0) = x68;
      host_args.at(1) = x7792;
      host_args.at(2) = x7735;
      host(ctx, "log", "IN SHA: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x7724 != 0) {
        {
          host_args.at(0) = x26;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x7793 = host_outs.at(0);
          auto x7794 = host_outs.at(1);
          auto x7795 = host_outs.at(2);
          auto x7796 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7793);
            reg = x7793;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7794);
            reg = x7794;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7795);
            reg = x7795;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7796);
            reg = x7796;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7797 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x7797 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7798 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x7798 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7799 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x7799 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7800 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x7800 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7723);
          reg = x7723;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7797);
          reg = x7797;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7798);
          reg = x7798;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7799);
          reg = x7799;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7800);
          reg = x7800;
        }
        {
          host_args.at(0) = x25;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x7801 = host_outs.at(0);
          auto x7802 = host_outs.at(1);
          auto x7803 = host_outs.at(2);
          auto x7804 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7801);
            reg = x7801;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7802);
            reg = x7802;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7803);
            reg = x7803;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7804);
            reg = x7804;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7805 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x7805 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7806 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x7806 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7807 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x7807 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7808 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x7808 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7723);
          reg = x7723;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7805);
          reg = x7805;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7806);
          reg = x7806;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7807);
          reg = x7807;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7808);
          reg = x7808;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7809 = args[2][124 * steps + ((cycle - 1) & mask)];
        assert(x7809 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7810 = args[2][125 * steps + ((cycle - 1) & mask)];
        assert(x7810 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7811 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x7811 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7812 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x7812 != Fp::invalid());
        // loc("./cirgen/components/u32.h":16:34)
        auto x7813 = x7810 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7814 = x7809 + x7813;
        // loc("./cirgen/components/u32.h":16:51)
        auto x7815 = x7811 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7816 = x7814 + x7815;
        // loc("./cirgen/components/u32.h":16:74)
        auto x7817 = x7812 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7818 = x7816 + x7817;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:58)
        auto x7819 = x7818 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7819);
          reg = x7819;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7820 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x7820 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7821 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x7821 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7822 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x7822 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7823 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x7823 != Fp::invalid());
        // loc("./cirgen/components/u32.h":16:34)
        auto x7824 = x7821 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7825 = x7820 + x7824;
        // loc("./cirgen/components/u32.h":16:51)
        auto x7826 = x7822 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7827 = x7825 + x7826;
        // loc("./cirgen/components/u32.h":16:74)
        auto x7828 = x7823 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7829 = x7827 + x7828;
        // loc("cirgen/circuit/rv32im/sha.cpp":218:57)
        auto x7830 = x7829 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7830);
          reg = x7830;
        }
        // loc("./cirgen/components/u32.h":16:34)
        auto x7831 = x7798 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7832 = x7797 + x7831;
        // loc("./cirgen/components/u32.h":16:51)
        auto x7833 = x7799 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7834 = x7832 + x7833;
        // loc("./cirgen/components/u32.h":16:74)
        auto x7835 = x7800 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7836 = x7834 + x7835;
        // loc("cirgen/circuit/rv32im/sha.cpp":219:16)
        auto x7837 = x7836 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":219:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7837);
          reg = x7837;
        }
        // loc("./cirgen/components/u32.h":16:34)
        auto x7838 = x7806 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7839 = x7805 + x7838;
        // loc("./cirgen/components/u32.h":16:51)
        auto x7840 = x7807 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7841 = x7839 + x7840;
        // loc("./cirgen/components/u32.h":16:74)
        auto x7842 = x7808 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x7843 = x7841 + x7842;
        // loc("cirgen/circuit/rv32im/sha.cpp":220:16)
        auto x7844 = x7843 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":220:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7844);
          reg = x7844;
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x7845 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x7845 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":222:10)
        auto x7846 = x7845 * x80;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x7847 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x7847 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        auto x7848 = x7847 * x80;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x7849 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x7849 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        auto x7850 = x7849 * x80;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x7851 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x7851 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":225:10)
        auto x7852 = x7851 * x80;
        host_args.at(0) = x7846;
        host_args.at(1) = x7848;
        host_args.at(2) = x7850;
        host_args.at(3) = x7852;
        host(ctx, "log", "  FIRST_CYCLE: stateOut = %x, stateIn = %x, data0 = %x, data1 = %x", host_args.data(), 4, host_outs.data(), 0);
      }
      if (x7725 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":228:42))
        auto x7853 = args[2][130 * steps + ((cycle - 1) & mask)];
        assert(x7853 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":228:5)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7853);
          reg = x7853;
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":229:40))
        auto x7854 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x7854 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":229:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7854);
          reg = x7854;
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":230:36))
        auto x7855 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x7855 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7855);
          reg = x7855;
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":231:36))
        auto x7856 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x7856 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7856);
          reg = x7856;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":235:54)
      auto x7857 = x87 - x7792;
      if (x86 != 0) {
        if (x7725 != 0) {
          // loc("Top/Mux/4/Mux/10/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
          auto x7858 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x7858 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":243:26)
          auto x7859 = x7858 + x7735;
          {
            host_args.at(0) = x7859;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x7860 = host_outs.at(0);
            auto x7861 = host_outs.at(1);
            auto x7862 = host_outs.at(2);
            auto x7863 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][110 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x7860);
              reg = x7860;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x7861);
              reg = x7861;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x7862);
              reg = x7862;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x7863);
              reg = x7863;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7864 = args[2][110 * steps + ((cycle - 0) & mask)];
          assert(x7864 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7865 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x7865 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7866 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x7866 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7867 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x7867 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7859);
            reg = x7859;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7723);
            reg = x7723;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7864);
            reg = x7864;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7865);
            reg = x7865;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7866);
            reg = x7866;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7867);
            reg = x7867;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":244:26)
          auto x7868 = x7859 + x80;
          {
            host_args.at(0) = x7868;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x7869 = host_outs.at(0);
            auto x7870 = host_outs.at(1);
            auto x7871 = host_outs.at(2);
            auto x7872 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x7869);
              reg = x7869;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x7870);
              reg = x7870;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x7871);
              reg = x7871;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x7872);
              reg = x7872;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7873 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x7873 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7874 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x7874 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7875 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x7875 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x7876 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x7876 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7868);
            reg = x7868;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7723);
            reg = x7723;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7873);
            reg = x7873;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7874);
            reg = x7874;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7875);
            reg = x7875;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7876);
            reg = x7876;
          }
        }
      }
      if (x7857 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x7877 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x7877 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":249:24)
        auto x7878 = x7877 + x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":249:24)
        auto x7879 = x7878 - x7735;
        {
          host_args.at(0) = x7879;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x7880 = host_outs.at(0);
          auto x7881 = host_outs.at(1);
          auto x7882 = host_outs.at(2);
          auto x7883 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7880);
            reg = x7880;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7881);
            reg = x7881;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7882);
            reg = x7882;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7883);
            reg = x7883;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7884 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x7884 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7885 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x7885 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7886 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x7886 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7887 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x7887 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7879);
          reg = x7879;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7723);
          reg = x7723;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7884);
          reg = x7884;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7885);
          reg = x7885;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7886);
          reg = x7886;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7887);
          reg = x7887;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":250:24)
        auto x7888 = x24 - x7735;
        {
          host_args.at(0) = x7888;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x7889 = host_outs.at(0);
          auto x7890 = host_outs.at(1);
          auto x7891 = host_outs.at(2);
          auto x7892 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7889);
            reg = x7889;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7890);
            reg = x7890;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7891);
            reg = x7891;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7892);
            reg = x7892;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7893 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x7893 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7894 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x7894 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7895 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x7895 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7896 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x7896 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7888);
          reg = x7888;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7723);
          reg = x7723;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7893);
          reg = x7893;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7894);
          reg = x7894;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7895);
          reg = x7895;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7896);
          reg = x7896;
        }
      }
      if (x7792 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x7897 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x7897 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":254:24)
        auto x7898 = x7897 + x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":254:24)
        auto x7899 = x7898 - x7735;
        {
          host_args.at(0) = x7899;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x7900 = host_outs.at(0);
          auto x7901 = host_outs.at(1);
          auto x7902 = host_outs.at(2);
          auto x7903 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7900);
            reg = x7900;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7901);
            reg = x7901;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7902);
            reg = x7902;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7903);
            reg = x7903;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7904 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x7904 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7905 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x7905 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7906 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x7906 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7907 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x7907 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7899);
          reg = x7899;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7723);
          reg = x7723;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7904);
          reg = x7904;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7905);
          reg = x7905;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7906);
          reg = x7906;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7907);
          reg = x7907;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":255:24)
        auto x7908 = x23 - x7735;
        {
          host_args.at(0) = x7908;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x7909 = host_outs.at(0);
          auto x7910 = host_outs.at(1);
          auto x7911 = host_outs.at(2);
          auto x7912 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7909);
            reg = x7909;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7910);
            reg = x7910;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7911);
            reg = x7911;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7912);
            reg = x7912;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7913 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x7913 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7914 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x7914 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7915 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x7915 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7916 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x7916 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7908);
          reg = x7908;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7723);
          reg = x7723;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7913);
          reg = x7913;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7914);
          reg = x7914;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7915);
          reg = x7915;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7916);
          reg = x7916;
        }
      }
      if (x86 != 0) {
        {
          host_args.at(0) = x86;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x7917 = host_outs.at(0);
          auto x7918 = host_outs.at(1);
          auto x7919 = host_outs.at(2);
          auto x7920 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7917);
            reg = x7917;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7918);
            reg = x7918;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7919);
            reg = x7919;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7920);
            reg = x7920;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7921 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x7921 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7922 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x7922 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7923 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x7923 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7924 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x7924 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7723);
          reg = x7723;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7921);
          reg = x7921;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7922);
          reg = x7922;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7923);
          reg = x7923;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7924);
          reg = x7924;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":260:24)
        auto x7925 = x22 - x7735;
        {
          host_args.at(0) = x7925;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x7926 = host_outs.at(0);
          auto x7927 = host_outs.at(1);
          auto x7928 = host_outs.at(2);
          auto x7929 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7926);
            reg = x7926;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7927);
            reg = x7927;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7928);
            reg = x7928;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7929);
            reg = x7929;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7930 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x7930 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7931 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x7931 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7932 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x7932 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7933 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x7933 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7925);
          reg = x7925;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7723);
          reg = x7723;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7930);
          reg = x7930;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7931);
          reg = x7931;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7932);
          reg = x7932;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7933);
          reg = x7933;
        }
      }
      if (x86 != 0) {
        {
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7934 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x7934 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7935 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x7935 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7936 = x7935 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7937 = x7934 + x7936;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7938 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x7938 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7939 = x7938 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7940 = x7937 + x7939;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7941 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x7941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7942 = x7941 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7943 = x7940 + x7942;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7944 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x7944 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7945 = x7944 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7946 = x7943 + x7945;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7947 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x7947 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7948 = x7947 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7949 = x7946 + x7948;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7950 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x7950 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7951 = x7950 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7952 = x7949 + x7951;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7953 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x7953 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7954 = x7953 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7955 = x7952 + x7954;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7956 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x7956 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7957 = x7956 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7958 = x7955 + x7957;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7959 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x7959 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7960 = x7959 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7961 = x7958 + x7960;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7962 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x7962 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7963 = x7962 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7964 = x7961 + x7963;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7965 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x7965 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7966 = x7965 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7967 = x7964 + x7966;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7968 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x7968 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7969 = x7968 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7970 = x7967 + x7969;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7971 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x7971 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7972 = x7971 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7973 = x7970 + x7972;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7974 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x7974 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7975 = x7974 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7976 = x7973 + x7975;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7977 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x7977 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x7978 = x7977 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x7979 = x7976 + x7978;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x7980 = x86 - x7979;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x7981 = x7980 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7981);
          reg = x7981;
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x7982 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x7982 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7983 = Fp(x7982.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7983);
            reg = x7983;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7984 = Fp(x7982.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7985 = x7984 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7985);
            reg = x7985;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7986 = Fp(x7982.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7987 = x7986 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7987);
            reg = x7987;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7988 = Fp(x7982.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7989 = x7988 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7989);
            reg = x7989;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7990 = Fp(x7982.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7991 = x7990 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7991);
            reg = x7991;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7992 = Fp(x7982.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7993 = x7992 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7993);
            reg = x7993;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7994 = Fp(x7982.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7995 = x7994 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7995);
            reg = x7995;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7996 = Fp(x7982.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7997 = x7996 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7997);
            reg = x7997;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x7998 = Fp(x7982.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x7999 = x7998 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7999);
            reg = x7999;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8000 = Fp(x7982.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8001 = x8000 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8001);
            reg = x8001;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8002 = Fp(x7982.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8003 = x8002 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8003);
            reg = x8003;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8004 = Fp(x7982.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8005 = x8004 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8005);
            reg = x8005;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8006 = Fp(x7982.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8007 = x8006 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8007);
            reg = x8007;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8008 = Fp(x7982.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8009 = x8008 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8009);
            reg = x8009;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8010 = Fp(x7982.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8011 = x8010 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8011);
            reg = x8011;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8012 = Fp(x7982.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8013 = x8012 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8013);
            reg = x8013;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8014 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8014 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8015 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8015 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8016 = x8015 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8017 = x8014 + x8016;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8018 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x8018 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8019 = x8018 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8020 = x8017 + x8019;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8021 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x8021 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8022 = x8021 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8023 = x8020 + x8022;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8024 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x8024 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8025 = x8024 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8026 = x8023 + x8025;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8027 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8027 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8028 = x8027 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8029 = x8026 + x8028;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8030 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8030 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8031 = x8030 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8032 = x8029 + x8031;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8033 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x8033 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8034 = x8033 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8035 = x8032 + x8034;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8036 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x8036 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8037 = x8036 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8038 = x8035 + x8037;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8039 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x8039 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8040 = x8039 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8041 = x8038 + x8040;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8042 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x8042 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8043 = x8042 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8044 = x8041 + x8043;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8045 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x8045 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8046 = x8045 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8047 = x8044 + x8046;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8048 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x8048 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8049 = x8048 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8050 = x8047 + x8049;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8051 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x8051 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8052 = x8051 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8053 = x8050 + x8052;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8054 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x8054 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8055 = x8054 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8056 = x8053 + x8055;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8057 = args[2][41 * steps + ((cycle - 0) & mask)];
        assert(x8057 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8058 = x8057 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8059 = x8056 + x8058;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x8060 = x7982 - x8059;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x8061 = x8060 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8061);
          reg = x8061;
        }
      }
      if (x87 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8062 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x8062 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8063 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x8063 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8064 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x8064 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8065 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x8065 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
        auto x8066 = x8064 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
        auto x8067 = x8065 + x8066;
        // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
        auto x8068 = x8062 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
        auto x8069 = x8063 + x8068;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8070 = Fp(x8067.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8070);
            reg = x8070;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8071 = Fp(x8067.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8072 = x8071 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8072);
            reg = x8072;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8073 = Fp(x8067.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8074 = x8073 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8074);
            reg = x8074;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8075 = Fp(x8067.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8076 = x8075 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8076);
            reg = x8076;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8077 = Fp(x8067.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8078 = x8077 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8078);
            reg = x8078;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8079 = Fp(x8067.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8080 = x8079 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8080);
            reg = x8080;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8081 = Fp(x8067.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8082 = x8081 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8082);
            reg = x8082;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8083 = Fp(x8067.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8084 = x8083 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8084);
            reg = x8084;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8085 = Fp(x8067.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8086 = x8085 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8086);
            reg = x8086;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8087 = Fp(x8067.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8088 = x8087 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8088);
            reg = x8088;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8089 = Fp(x8067.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8090 = x8089 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8090);
            reg = x8090;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8091 = Fp(x8067.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8092 = x8091 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8092);
            reg = x8092;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8093 = Fp(x8067.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8094 = x8093 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8094);
            reg = x8094;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8095 = Fp(x8067.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8096 = x8095 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8096);
            reg = x8096;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8097 = Fp(x8067.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8098 = x8097 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8098);
            reg = x8098;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8099 = Fp(x8067.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8100 = x8099 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8100);
            reg = x8100;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8101 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x8101 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8102 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x8102 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8103 = x8102 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8104 = x8101 + x8103;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8105 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x8105 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8106 = x8105 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8107 = x8104 + x8106;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8108 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x8108 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8109 = x8108 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8110 = x8107 + x8109;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8111 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x8111 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8112 = x8111 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8113 = x8110 + x8112;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8114 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x8114 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8115 = x8114 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8116 = x8113 + x8115;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8117 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x8117 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8118 = x8117 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8119 = x8116 + x8118;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8120 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x8120 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8121 = x8120 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8122 = x8119 + x8121;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8123 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x8123 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8124 = x8123 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8125 = x8122 + x8124;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8126 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x8126 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8127 = x8126 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8128 = x8125 + x8127;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8129 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x8129 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8130 = x8129 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8131 = x8128 + x8130;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8132 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x8132 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8133 = x8132 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8134 = x8131 + x8133;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8135 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x8135 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8136 = x8135 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8137 = x8134 + x8136;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8138 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x8138 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8139 = x8138 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8140 = x8137 + x8139;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8141 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x8141 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8142 = x8141 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8143 = x8140 + x8142;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8144 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x8144 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8145 = x8144 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8146 = x8143 + x8145;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x8147 = x8067 - x8146;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x8148 = x8147 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8148);
          reg = x8148;
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8149 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x8149 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":113:30)
        auto x8150 = x8069 + x8149;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8151 = Fp(x8150.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8151);
            reg = x8151;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8152 = Fp(x8150.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8153 = x8152 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8153);
            reg = x8153;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8154 = Fp(x8150.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8155 = x8154 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8155);
            reg = x8155;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8156 = Fp(x8150.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8157 = x8156 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8157);
            reg = x8157;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8158 = Fp(x8150.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8159 = x8158 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8159);
            reg = x8159;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8160 = Fp(x8150.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8161 = x8160 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8161);
            reg = x8161;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8162 = Fp(x8150.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8163 = x8162 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8163);
            reg = x8163;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8164 = Fp(x8150.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8165 = x8164 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8165);
            reg = x8165;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8166 = Fp(x8150.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8167 = x8166 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8167);
            reg = x8167;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8168 = Fp(x8150.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8169 = x8168 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8169);
            reg = x8169;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8170 = Fp(x8150.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8171 = x8170 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8171);
            reg = x8171;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8172 = Fp(x8150.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8173 = x8172 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8173);
            reg = x8173;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8174 = Fp(x8150.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8175 = x8174 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8175);
            reg = x8175;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8176 = Fp(x8150.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8177 = x8176 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8177);
            reg = x8177;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8178 = Fp(x8150.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8179 = x8178 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8179);
            reg = x8179;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8180 = Fp(x8150.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8181 = x8180 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8181);
            reg = x8181;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8182 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8182 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8183 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8183 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8184 = x8183 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8185 = x8182 + x8184;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8186 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x8186 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8187 = x8186 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8188 = x8185 + x8187;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8189 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x8189 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8190 = x8189 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8191 = x8188 + x8190;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8192 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x8192 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8193 = x8192 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8194 = x8191 + x8193;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8195 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8195 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8196 = x8195 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8197 = x8194 + x8196;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8198 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8198 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8199 = x8198 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8200 = x8197 + x8199;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8201 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x8201 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8202 = x8201 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8203 = x8200 + x8202;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8204 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x8204 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8205 = x8204 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8206 = x8203 + x8205;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8207 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x8207 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8208 = x8207 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8209 = x8206 + x8208;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8210 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x8210 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8211 = x8210 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8212 = x8209 + x8211;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8213 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x8213 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8214 = x8213 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8215 = x8212 + x8214;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8216 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x8216 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8217 = x8216 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8218 = x8215 + x8217;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8219 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x8219 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8220 = x8219 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8221 = x8218 + x8220;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8222 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x8222 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8223 = x8222 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8224 = x8221 + x8223;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8225 = args[2][41 * steps + ((cycle - 0) & mask)];
        assert(x8225 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8226 = x8225 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8227 = x8224 + x8226;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x8228 = x8150 - x8227;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x8229 = x8228 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8229);
          reg = x8229;
        }
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":136:11))
        auto x8230 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x8230 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg10"("cirgen/circuit/rv32im/sha.cpp":136:26))
        auto x8231 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x8231 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8232 = Fp(x8230.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8232);
            reg = x8232;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8233 = Fp(x8230.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8234 = x8233 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8234);
            reg = x8234;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8235 = Fp(x8230.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8236 = x8235 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8236);
            reg = x8236;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8237 = Fp(x8230.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8238 = x8237 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8238);
            reg = x8238;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8239 = Fp(x8230.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8240 = x8239 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8240);
            reg = x8240;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8241 = Fp(x8230.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8242 = x8241 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8242);
            reg = x8242;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8243 = Fp(x8230.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8244 = x8243 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8244);
            reg = x8244;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8245 = Fp(x8230.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8246 = x8245 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8246);
            reg = x8246;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8247 = Fp(x8230.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8248 = x8247 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8248);
            reg = x8248;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8249 = Fp(x8230.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8250 = x8249 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8250);
            reg = x8250;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8251 = Fp(x8230.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8252 = x8251 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8252);
            reg = x8252;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8253 = Fp(x8230.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8254 = x8253 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8254);
            reg = x8254;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8255 = Fp(x8230.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8256 = x8255 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8256);
            reg = x8256;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8257 = Fp(x8230.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8258 = x8257 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8258);
            reg = x8258;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8259 = Fp(x8230.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8260 = x8259 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8260);
            reg = x8260;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8261 = Fp(x8230.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8262 = x8261 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8262);
            reg = x8262;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8263 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x8263 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8264 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x8264 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8265 = x8264 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8266 = x8263 + x8265;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8267 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x8267 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8268 = x8267 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8269 = x8266 + x8268;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8270 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x8270 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8271 = x8270 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8272 = x8269 + x8271;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8273 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x8273 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8274 = x8273 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8275 = x8272 + x8274;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8276 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x8276 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8277 = x8276 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8278 = x8275 + x8277;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8279 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x8279 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8280 = x8279 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8281 = x8278 + x8280;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8282 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x8282 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8283 = x8282 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8284 = x8281 + x8283;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8285 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x8285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8286 = x8285 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8287 = x8284 + x8286;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8288 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x8288 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8289 = x8288 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8290 = x8287 + x8289;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8291 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x8291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8292 = x8291 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8293 = x8290 + x8292;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8294 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x8294 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8295 = x8294 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8296 = x8293 + x8295;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8297 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x8297 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8298 = x8297 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8299 = x8296 + x8298;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8300 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x8300 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8301 = x8300 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8302 = x8299 + x8301;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8303 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x8303 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8304 = x8303 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8305 = x8302 + x8304;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8306 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x8306 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8307 = x8306 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8308 = x8305 + x8307;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x8309 = x8230 - x8308;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x8310 = x8309 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8310);
          reg = x8310;
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8311 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x8311 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":113:30)
        auto x8312 = x8231 + x8311;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8313 = Fp(x8312.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8313);
            reg = x8313;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8314 = Fp(x8312.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8315 = x8314 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8315);
            reg = x8315;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8316 = Fp(x8312.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8317 = x8316 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8317);
            reg = x8317;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8318 = Fp(x8312.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8319 = x8318 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8319);
            reg = x8319;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8320 = Fp(x8312.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8321 = x8320 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8321);
            reg = x8321;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8322 = Fp(x8312.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8323 = x8322 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8323);
            reg = x8323;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8324 = Fp(x8312.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8325 = x8324 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8325);
            reg = x8325;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8326 = Fp(x8312.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8327 = x8326 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8327);
            reg = x8327;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8328 = Fp(x8312.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8329 = x8328 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8329);
            reg = x8329;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8330 = Fp(x8312.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8331 = x8330 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8331);
            reg = x8331;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8332 = Fp(x8312.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8333 = x8332 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8333);
            reg = x8333;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8334 = Fp(x8312.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8335 = x8334 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8335);
            reg = x8335;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8336 = Fp(x8312.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8337 = x8336 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8337);
            reg = x8337;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8338 = Fp(x8312.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8339 = x8338 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8339);
            reg = x8339;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8340 = Fp(x8312.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8341 = x8340 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8341);
            reg = x8341;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8342 = Fp(x8312.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8343 = x8342 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8343);
            reg = x8343;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8344 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8344 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8345 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8345 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8346 = x8345 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8347 = x8344 + x8346;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8348 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x8348 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8349 = x8348 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8350 = x8347 + x8349;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8351 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x8351 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8352 = x8351 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8353 = x8350 + x8352;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8354 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x8354 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8355 = x8354 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8356 = x8353 + x8355;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8357 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8357 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8358 = x8357 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8359 = x8356 + x8358;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8360 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8360 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8361 = x8360 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8362 = x8359 + x8361;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8363 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x8363 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8364 = x8363 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8365 = x8362 + x8364;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8366 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x8366 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8367 = x8366 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8368 = x8365 + x8367;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8369 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x8369 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8370 = x8369 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8371 = x8368 + x8370;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8372 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x8372 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8373 = x8372 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8374 = x8371 + x8373;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8375 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x8375 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8376 = x8375 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8377 = x8374 + x8376;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8378 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x8378 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8379 = x8378 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8380 = x8377 + x8379;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8381 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x8381 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8382 = x8381 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8383 = x8380 + x8382;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8384 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x8384 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8385 = x8384 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8386 = x8383 + x8385;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8387 = args[2][41 * steps + ((cycle - 0) & mask)];
        assert(x8387 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8388 = x8387 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8389 = x8386 + x8388;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x8390 = x8312 - x8389;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x8391 = x8390 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8391);
          reg = x8391;
        }
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8392 = args[2][144 * steps + ((cycle - 4) & mask)];
        assert(x8392 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8393 = args[2][145 * steps + ((cycle - 4) & mask)];
        assert(x8393 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8394 = args[2][146 * steps + ((cycle - 4) & mask)];
        assert(x8394 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8395 = args[2][147 * steps + ((cycle - 4) & mask)];
        assert(x8395 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8396 = args[2][148 * steps + ((cycle - 4) & mask)];
        assert(x8396 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8397 = args[2][149 * steps + ((cycle - 4) & mask)];
        assert(x8397 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8398 = args[2][150 * steps + ((cycle - 4) & mask)];
        assert(x8398 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8399 = args[2][151 * steps + ((cycle - 4) & mask)];
        assert(x8399 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8400 = args[2][152 * steps + ((cycle - 4) & mask)];
        assert(x8400 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8401 = args[2][153 * steps + ((cycle - 4) & mask)];
        assert(x8401 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8402 = args[2][154 * steps + ((cycle - 4) & mask)];
        assert(x8402 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8403 = args[2][155 * steps + ((cycle - 4) & mask)];
        assert(x8403 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8404 = args[2][156 * steps + ((cycle - 4) & mask)];
        assert(x8404 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8405 = args[2][157 * steps + ((cycle - 4) & mask)];
        assert(x8405 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8406 = args[2][158 * steps + ((cycle - 4) & mask)];
        assert(x8406 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8407 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x8407 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8408 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x8408 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8409 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x8409 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8410 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x8410 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8411 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x8411 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8412 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x8412 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8413 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x8413 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8414 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x8414 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8415 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x8415 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8416 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x8416 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8417 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x8417 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8418 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x8418 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8419 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x8419 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8420 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x8420 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8421 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x8421 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8422 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x8422 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8423 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x8423 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8424 = x8393 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8425 = x8392 + x8424;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8426 = x8394 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8427 = x8425 + x8426;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8428 = x8395 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8429 = x8427 + x8428;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8430 = x8396 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8431 = x8429 + x8430;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8432 = x8397 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8433 = x8431 + x8432;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8434 = x8398 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8435 = x8433 + x8434;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8436 = x8399 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8437 = x8435 + x8436;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8438 = x8400 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8439 = x8437 + x8438;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8440 = x8401 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8441 = x8439 + x8440;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8442 = x8402 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8443 = x8441 + x8442;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8444 = x8403 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8445 = x8443 + x8444;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8446 = x8404 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8447 = x8445 + x8446;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8448 = x8405 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8449 = x8447 + x8448;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8450 = x8406 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8451 = x8449 + x8450;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8452 = x8407 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8453 = x8451 + x8452;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8454 = x8409 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8455 = x8408 + x8454;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8456 = x8410 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8457 = x8455 + x8456;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8458 = x8411 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8459 = x8457 + x8458;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8460 = x8412 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8461 = x8459 + x8460;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8462 = x8413 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8463 = x8461 + x8462;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8464 = x8414 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8465 = x8463 + x8464;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8466 = x8415 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8467 = x8465 + x8466;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8468 = x8416 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8469 = x8467 + x8468;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8470 = x8417 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8471 = x8469 + x8470;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8472 = x8418 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8473 = x8471 + x8472;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8474 = x8419 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8475 = x8473 + x8474;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8476 = x8420 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8477 = x8475 + x8476;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8478 = x8421 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8479 = x8477 + x8478;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8480 = x8422 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8481 = x8479 + x8480;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8482 = x8423 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8483 = x8481 + x8482;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8484 = args[2][144 * steps + ((cycle - 68) & mask)];
        assert(x8484 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8485 = args[2][145 * steps + ((cycle - 68) & mask)];
        assert(x8485 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8486 = args[2][146 * steps + ((cycle - 68) & mask)];
        assert(x8486 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8487 = args[2][147 * steps + ((cycle - 68) & mask)];
        assert(x8487 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8488 = args[2][148 * steps + ((cycle - 68) & mask)];
        assert(x8488 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8489 = args[2][149 * steps + ((cycle - 68) & mask)];
        assert(x8489 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8490 = args[2][150 * steps + ((cycle - 68) & mask)];
        assert(x8490 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8491 = args[2][151 * steps + ((cycle - 68) & mask)];
        assert(x8491 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8492 = args[2][152 * steps + ((cycle - 68) & mask)];
        assert(x8492 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8493 = args[2][153 * steps + ((cycle - 68) & mask)];
        assert(x8493 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8494 = args[2][154 * steps + ((cycle - 68) & mask)];
        assert(x8494 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8495 = args[2][155 * steps + ((cycle - 68) & mask)];
        assert(x8495 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8496 = args[2][156 * steps + ((cycle - 68) & mask)];
        assert(x8496 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8497 = args[2][157 * steps + ((cycle - 68) & mask)];
        assert(x8497 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8498 = args[2][158 * steps + ((cycle - 68) & mask)];
        assert(x8498 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8499 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x8499 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8500 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x8500 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8501 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x8501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8502 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x8502 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8503 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x8503 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8504 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x8504 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8505 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x8505 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8506 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x8506 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8507 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x8507 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8508 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x8508 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8509 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x8509 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8510 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x8510 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8511 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x8511 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8512 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x8512 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8513 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x8513 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8514 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x8514 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8515 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x8515 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8516 = x8485 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8517 = x8484 + x8516;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8518 = x8486 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8519 = x8517 + x8518;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8520 = x8487 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8521 = x8519 + x8520;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8522 = x8488 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8523 = x8521 + x8522;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8524 = x8489 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8525 = x8523 + x8524;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8526 = x8490 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8527 = x8525 + x8526;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8528 = x8491 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8529 = x8527 + x8528;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8530 = x8492 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8531 = x8529 + x8530;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8532 = x8493 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8533 = x8531 + x8532;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8534 = x8494 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8535 = x8533 + x8534;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8536 = x8495 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8537 = x8535 + x8536;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8538 = x8496 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8539 = x8537 + x8538;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8540 = x8497 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8541 = x8539 + x8540;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8542 = x8498 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8543 = x8541 + x8542;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8544 = x8499 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8545 = x8543 + x8544;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8546 = x8501 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8547 = x8500 + x8546;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8548 = x8502 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8549 = x8547 + x8548;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8550 = x8503 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8551 = x8549 + x8550;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8552 = x8504 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8553 = x8551 + x8552;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8554 = x8505 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8555 = x8553 + x8554;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8556 = x8506 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8557 = x8555 + x8556;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8558 = x8507 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8559 = x8557 + x8558;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8560 = x8508 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8561 = x8559 + x8560;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8562 = x8509 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8563 = x8561 + x8562;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8564 = x8510 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8565 = x8563 + x8564;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8566 = x8511 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8567 = x8565 + x8566;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8568 = x8512 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8569 = x8567 + x8568;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8570 = x8513 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8571 = x8569 + x8570;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8572 = x8514 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8573 = x8571 + x8572;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8574 = x8515 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8575 = x8573 + x8574;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x8576 = x8453 + x8545;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x8577 = x8483 + x8575;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8578 = Fp(x8576.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8578);
            reg = x8578;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8579 = Fp(x8576.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8580 = x8579 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8580);
            reg = x8580;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8581 = Fp(x8576.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8582 = x8581 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8582);
            reg = x8582;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8583 = Fp(x8576.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8584 = x8583 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8584);
            reg = x8584;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8585 = Fp(x8576.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8586 = x8585 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8586);
            reg = x8586;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8587 = Fp(x8576.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8588 = x8587 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8588);
            reg = x8588;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8589 = Fp(x8576.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8590 = x8589 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8590);
            reg = x8590;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8591 = Fp(x8576.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8592 = x8591 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8592);
            reg = x8592;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8593 = Fp(x8576.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8594 = x8593 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8594);
            reg = x8594;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8595 = Fp(x8576.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8596 = x8595 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8596);
            reg = x8596;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8597 = Fp(x8576.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8598 = x8597 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8598);
            reg = x8598;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8599 = Fp(x8576.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8600 = x8599 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8600);
            reg = x8600;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8601 = Fp(x8576.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8602 = x8601 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8602);
            reg = x8602;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8603 = Fp(x8576.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8604 = x8603 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8604);
            reg = x8604;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8605 = Fp(x8576.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8606 = x8605 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8606);
            reg = x8606;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8607 = Fp(x8576.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8608 = x8607 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8608);
            reg = x8608;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8609 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x8609 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8610 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x8610 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8611 = x8610 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8612 = x8609 + x8611;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8613 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x8613 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8614 = x8613 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8615 = x8612 + x8614;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8616 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x8616 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8617 = x8616 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8618 = x8615 + x8617;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8619 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x8619 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8620 = x8619 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8621 = x8618 + x8620;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8622 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x8622 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8623 = x8622 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8624 = x8621 + x8623;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8625 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x8625 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8626 = x8625 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8627 = x8624 + x8626;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8628 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x8628 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8629 = x8628 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8630 = x8627 + x8629;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8631 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x8631 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8632 = x8631 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8633 = x8630 + x8632;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8634 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x8634 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8635 = x8634 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8636 = x8633 + x8635;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8637 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x8637 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8638 = x8637 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8639 = x8636 + x8638;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8640 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x8640 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8641 = x8640 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8642 = x8639 + x8641;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8643 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x8643 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8644 = x8643 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8645 = x8642 + x8644;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8646 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x8646 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8647 = x8646 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8648 = x8645 + x8647;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8649 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x8649 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8650 = x8649 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8651 = x8648 + x8650;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8652 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x8652 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8653 = x8652 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8654 = x8651 + x8653;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x8655 = x8576 - x8654;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x8656 = x8655 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x8657 = Fp(x8656.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8657);
            reg = x8657;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8658 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x8658 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x8659 = x8656 - x8658;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x8660 = x8659 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x8661 = x87 - x8660;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x8662 = x8660 * x8661;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x8662 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x8663 = x8577 + x8656;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8664 = Fp(x8663.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8664);
            reg = x8664;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8665 = Fp(x8663.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8666 = x8665 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8666);
            reg = x8666;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8667 = Fp(x8663.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8668 = x8667 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8668);
            reg = x8668;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8669 = Fp(x8663.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8670 = x8669 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8670);
            reg = x8670;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8671 = Fp(x8663.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8672 = x8671 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8672);
            reg = x8672;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8673 = Fp(x8663.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8674 = x8673 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8674);
            reg = x8674;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8675 = Fp(x8663.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8676 = x8675 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8676);
            reg = x8676;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8677 = Fp(x8663.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8678 = x8677 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8678);
            reg = x8678;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8679 = Fp(x8663.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8680 = x8679 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8680);
            reg = x8680;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8681 = Fp(x8663.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8682 = x8681 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8682);
            reg = x8682;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8683 = Fp(x8663.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8684 = x8683 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8684);
            reg = x8684;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8685 = Fp(x8663.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8686 = x8685 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8686);
            reg = x8686;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8687 = Fp(x8663.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8688 = x8687 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8688);
            reg = x8688;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8689 = Fp(x8663.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8690 = x8689 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8690);
            reg = x8690;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8691 = Fp(x8663.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8692 = x8691 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8692);
            reg = x8692;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8693 = Fp(x8663.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8694 = x8693 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8694);
            reg = x8694;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8695 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x8695 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8696 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x8696 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8697 = x8696 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8698 = x8695 + x8697;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8699 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x8699 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8700 = x8699 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8701 = x8698 + x8700;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8702 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x8702 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8703 = x8702 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8704 = x8701 + x8703;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8705 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x8705 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8706 = x8705 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8707 = x8704 + x8706;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8708 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x8708 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8709 = x8708 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8710 = x8707 + x8709;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8711 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x8711 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8712 = x8711 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8713 = x8710 + x8712;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8714 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x8714 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8715 = x8714 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8716 = x8713 + x8715;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8717 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x8717 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8718 = x8717 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8719 = x8716 + x8718;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8720 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x8720 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8721 = x8720 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8722 = x8719 + x8721;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8723 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x8723 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8724 = x8723 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8725 = x8722 + x8724;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8726 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x8726 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8727 = x8726 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8728 = x8725 + x8727;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8729 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x8729 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8730 = x8729 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8731 = x8728 + x8730;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8732 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x8732 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8733 = x8732 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8734 = x8731 + x8733;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8735 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x8735 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8736 = x8735 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8737 = x8734 + x8736;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8738 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x8738 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8739 = x8738 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8740 = x8737 + x8739;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x8741 = x8663 - x8740;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x8742 = x8741 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x8743 = Fp(x8742.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8743);
            reg = x8743;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8744 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x8744 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x8745 = x8742 - x8744;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x8746 = x8745 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x8747 = x87 - x8746;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x8748 = x8746 * x8747;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x8748 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8749 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x8749 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8750 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x8750 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8751 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x8751 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8752 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x8752 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8753 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x8753 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8754 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x8754 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8755 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x8755 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8756 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x8756 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8757 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x8757 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8758 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x8758 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8759 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x8759 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8760 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x8760 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8761 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x8761 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8762 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x8762 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8763 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x8763 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8764 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x8764 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8765 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x8765 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8766 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x8766 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8767 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x8767 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8768 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x8768 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8769 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x8769 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8770 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x8770 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8771 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x8771 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8772 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x8772 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8773 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x8773 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8774 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x8774 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8775 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x8775 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8776 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x8776 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8777 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x8777 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8778 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x8778 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8779 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x8779 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8780 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x8780 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8781 = x8750 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8782 = x8749 + x8781;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8783 = x8751 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8784 = x8782 + x8783;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8785 = x8752 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8786 = x8784 + x8785;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8787 = x8753 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8788 = x8786 + x8787;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8789 = x8754 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8790 = x8788 + x8789;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8791 = x8755 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8792 = x8790 + x8791;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8793 = x8756 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8794 = x8792 + x8793;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8795 = x8757 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8796 = x8794 + x8795;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8797 = x8758 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8798 = x8796 + x8797;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8799 = x8759 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8800 = x8798 + x8799;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8801 = x8760 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8802 = x8800 + x8801;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8803 = x8761 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8804 = x8802 + x8803;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8805 = x8762 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8806 = x8804 + x8805;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8807 = x8763 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8808 = x8806 + x8807;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8809 = x8764 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8810 = x8808 + x8809;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8811 = x8766 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8812 = x8765 + x8811;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8813 = x8767 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8814 = x8812 + x8813;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8815 = x8768 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8816 = x8814 + x8815;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8817 = x8769 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8818 = x8816 + x8817;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8819 = x8770 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8820 = x8818 + x8819;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8821 = x8771 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8822 = x8820 + x8821;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8823 = x8772 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8824 = x8822 + x8823;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8825 = x8773 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8826 = x8824 + x8825;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8827 = x8774 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8828 = x8826 + x8827;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8829 = x8775 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8830 = x8828 + x8829;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8831 = x8776 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8832 = x8830 + x8831;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8833 = x8777 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8834 = x8832 + x8833;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8835 = x8778 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8836 = x8834 + x8835;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8837 = x8779 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8838 = x8836 + x8837;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8839 = x8780 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8840 = x8838 + x8839;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8841 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x8841 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8842 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x8842 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8843 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x8843 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8844 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x8844 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8845 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x8845 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8846 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x8846 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8847 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x8847 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8848 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x8848 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8849 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x8849 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8850 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x8850 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8851 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x8851 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8852 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x8852 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8853 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x8853 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8854 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x8854 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8855 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x8855 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8856 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x8856 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8857 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x8857 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8858 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x8858 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8859 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x8859 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8860 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x8860 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8861 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x8861 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8862 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x8862 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8863 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x8863 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8864 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x8864 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8865 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x8865 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8866 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x8866 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8867 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x8867 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8868 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x8868 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8869 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x8869 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8870 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x8870 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8871 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x8871 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8872 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x8872 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8873 = x8842 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8874 = x8841 + x8873;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8875 = x8843 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8876 = x8874 + x8875;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8877 = x8844 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8878 = x8876 + x8877;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8879 = x8845 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8880 = x8878 + x8879;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8881 = x8846 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8882 = x8880 + x8881;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8883 = x8847 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8884 = x8882 + x8883;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8885 = x8848 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8886 = x8884 + x8885;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8887 = x8849 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8888 = x8886 + x8887;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8889 = x8850 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8890 = x8888 + x8889;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8891 = x8851 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8892 = x8890 + x8891;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8893 = x8852 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8894 = x8892 + x8893;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8895 = x8853 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8896 = x8894 + x8895;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8897 = x8854 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8898 = x8896 + x8897;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8899 = x8855 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8900 = x8898 + x8899;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8901 = x8856 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8902 = x8900 + x8901;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8903 = x8858 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8904 = x8857 + x8903;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8905 = x8859 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8906 = x8904 + x8905;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8907 = x8860 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8908 = x8906 + x8907;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8909 = x8861 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8910 = x8908 + x8909;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8911 = x8862 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8912 = x8910 + x8911;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8913 = x8863 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8914 = x8912 + x8913;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8915 = x8864 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8916 = x8914 + x8915;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8917 = x8865 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8918 = x8916 + x8917;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8919 = x8866 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8920 = x8918 + x8919;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8921 = x8867 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8922 = x8920 + x8921;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8923 = x8868 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8924 = x8922 + x8923;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8925 = x8869 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8926 = x8924 + x8925;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8927 = x8870 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8928 = x8926 + x8927;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8929 = x8871 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8930 = x8928 + x8929;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x8931 = x8872 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x8932 = x8930 + x8931;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x8933 = x8810 + x8902;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x8934 = x8840 + x8932;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8935 = Fp(x8933.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8935);
            reg = x8935;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8936 = Fp(x8933.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8937 = x8936 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8937);
            reg = x8937;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8938 = Fp(x8933.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8939 = x8938 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8939);
            reg = x8939;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8940 = Fp(x8933.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8941 = x8940 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8941);
            reg = x8941;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8942 = Fp(x8933.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8943 = x8942 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8943);
            reg = x8943;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8944 = Fp(x8933.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8945 = x8944 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8945);
            reg = x8945;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8946 = Fp(x8933.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8947 = x8946 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8947);
            reg = x8947;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8948 = Fp(x8933.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8949 = x8948 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8949);
            reg = x8949;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8950 = Fp(x8933.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8951 = x8950 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8951);
            reg = x8951;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8952 = Fp(x8933.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8953 = x8952 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8953);
            reg = x8953;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8954 = Fp(x8933.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8955 = x8954 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8955);
            reg = x8955;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8956 = Fp(x8933.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8957 = x8956 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8957);
            reg = x8957;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8958 = Fp(x8933.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8959 = x8958 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8959);
            reg = x8959;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8960 = Fp(x8933.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8961 = x8960 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8961);
            reg = x8961;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8962 = Fp(x8933.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8963 = x8962 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8963);
            reg = x8963;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x8964 = Fp(x8933.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x8965 = x8964 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8965);
            reg = x8965;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8966 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x8966 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8967 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x8967 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8968 = x8967 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8969 = x8966 + x8968;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8970 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x8970 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8971 = x8970 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8972 = x8969 + x8971;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8973 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x8973 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8974 = x8973 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8975 = x8972 + x8974;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8976 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x8976 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8977 = x8976 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8978 = x8975 + x8977;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8979 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x8979 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8980 = x8979 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8981 = x8978 + x8980;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8982 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x8982 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8983 = x8982 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8984 = x8981 + x8983;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8985 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x8985 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8986 = x8985 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8987 = x8984 + x8986;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8988 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x8988 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8989 = x8988 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8990 = x8987 + x8989;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8991 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x8991 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8992 = x8991 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8993 = x8990 + x8992;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8994 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x8994 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8995 = x8994 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8996 = x8993 + x8995;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x8997 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x8997 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x8998 = x8997 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x8999 = x8996 + x8998;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9000 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x9000 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9001 = x9000 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9002 = x8999 + x9001;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9003 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x9003 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9004 = x9003 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9005 = x9002 + x9004;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9006 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x9006 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9007 = x9006 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9008 = x9005 + x9007;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9009 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x9009 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9010 = x9009 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9011 = x9008 + x9010;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x9012 = x8933 - x9011;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x9013 = x9012 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x9014 = Fp(x9013.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9014);
            reg = x9014;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9015 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x9015 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x9016 = x9013 - x9015;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x9017 = x9016 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x9018 = x87 - x9017;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x9019 = x9017 * x9018;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x9019 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x9020 = x8934 + x9013;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9021 = Fp(x9020.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9021);
            reg = x9021;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9022 = Fp(x9020.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9023 = x9022 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9023);
            reg = x9023;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9024 = Fp(x9020.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9025 = x9024 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9025);
            reg = x9025;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9026 = Fp(x9020.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9027 = x9026 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9027);
            reg = x9027;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9028 = Fp(x9020.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9029 = x9028 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9029);
            reg = x9029;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9030 = Fp(x9020.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9031 = x9030 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9031);
            reg = x9031;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9032 = Fp(x9020.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9033 = x9032 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9033);
            reg = x9033;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9034 = Fp(x9020.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9035 = x9034 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9035);
            reg = x9035;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9036 = Fp(x9020.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9037 = x9036 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9037);
            reg = x9037;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9038 = Fp(x9020.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9039 = x9038 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9039);
            reg = x9039;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9040 = Fp(x9020.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9041 = x9040 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9041);
            reg = x9041;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9042 = Fp(x9020.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9043 = x9042 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9043);
            reg = x9043;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9044 = Fp(x9020.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9045 = x9044 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9045);
            reg = x9045;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9046 = Fp(x9020.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9047 = x9046 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9047);
            reg = x9047;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9048 = Fp(x9020.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9049 = x9048 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9049);
            reg = x9049;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x9050 = Fp(x9020.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x9051 = x9050 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9051);
            reg = x9051;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9052 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x9052 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9053 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x9053 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9054 = x9053 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9055 = x9052 + x9054;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9056 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x9056 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9057 = x9056 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9058 = x9055 + x9057;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9059 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x9059 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9060 = x9059 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9061 = x9058 + x9060;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9062 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x9062 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9063 = x9062 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9064 = x9061 + x9063;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9065 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x9065 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9066 = x9065 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9067 = x9064 + x9066;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9068 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x9068 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9069 = x9068 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9070 = x9067 + x9069;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9071 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x9071 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9072 = x9071 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9073 = x9070 + x9072;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9074 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x9074 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9075 = x9074 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9076 = x9073 + x9075;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9077 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x9077 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9078 = x9077 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9079 = x9076 + x9078;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9080 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x9080 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9081 = x9080 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9082 = x9079 + x9081;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9083 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x9083 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9084 = x9083 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9085 = x9082 + x9084;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9086 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x9086 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9087 = x9086 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9088 = x9085 + x9087;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9089 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x9089 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9090 = x9089 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9091 = x9088 + x9090;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9092 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x9092 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9093 = x9092 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9094 = x9091 + x9093;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9095 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x9095 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x9096 = x9095 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x9097 = x9094 + x9096;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x9098 = x9020 - x9097;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x9099 = x9098 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x9100 = Fp(x9099.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9100);
            reg = x9100;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9101 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x9101 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x9102 = x9099 - x9101;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x9103 = x9102 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x9104 = x87 - x9103;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x9105 = x9103 * x9104;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x9105 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x9106 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x9106 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":278:25)
        auto x9107 = x9106 + x7735;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9108 = x8634 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9109 = x8631 + x9108;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9110 = x8720 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9111 = x8717 + x9110;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9112 = x8637 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9113 = x9109 + x9112;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9114 = x8723 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9115 = x9111 + x9114;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9116 = x8640 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9117 = x9113 + x9116;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9118 = x8726 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9119 = x9115 + x9118;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9120 = x8643 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9121 = x9117 + x9120;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9122 = x8729 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9123 = x9119 + x9122;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9124 = x8646 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9125 = x9121 + x9124;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9126 = x8732 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9127 = x9123 + x9126;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9128 = x8649 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9129 = x9125 + x9128;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9130 = x8735 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9131 = x9127 + x9130;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9132 = x8652 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9133 = x9129 + x9132;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9134 = x8738 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9135 = x9131 + x9134;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8630);
          reg = x8630;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9133);
          reg = x9133;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8716);
          reg = x8716;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9135);
          reg = x9135;
        }
        {
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x9136 = args[2][110 * steps + ((cycle - 0) & mask)];
          assert(x9136 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x9137 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x9137 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x9138 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x9138 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x9139 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x9139 != Fp::invalid());
          host_args.at(0) = x9107;
          host_args.at(1) = x9136;
          host_args.at(2) = x9137;
          host_args.at(3) = x9138;
          host_args.at(4) = x9139;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9140 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x9140 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9141 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x9141 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9142 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x9142 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9143 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x9143 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9107);
          reg = x9107;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7723);
          reg = x7723;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9140);
          reg = x9140;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9141);
          reg = x9141;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9142);
          reg = x9142;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9143);
          reg = x9143;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":279:25)
        auto x9144 = x9106 + x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":279:25)
        auto x9145 = x9144 + x7735;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9146 = x8991 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9147 = x8988 + x9146;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9148 = x9077 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9149 = x9074 + x9148;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9150 = x8994 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9151 = x9147 + x9150;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9152 = x9080 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9153 = x9149 + x9152;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9154 = x8997 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9155 = x9151 + x9154;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9156 = x9083 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9157 = x9153 + x9156;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9158 = x9000 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9159 = x9155 + x9158;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9160 = x9086 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9161 = x9157 + x9160;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9162 = x9003 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9163 = x9159 + x9162;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9164 = x9089 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9165 = x9161 + x9164;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9166 = x9006 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9167 = x9163 + x9166;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9168 = x9092 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9169 = x9165 + x9168;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9170 = x9009 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9171 = x9167 + x9170;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x9172 = x9095 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x9173 = x9169 + x9172;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8987);
          reg = x8987;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9171);
          reg = x9171;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9073);
          reg = x9073;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9173);
          reg = x9173;
        }
        {
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x9174 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x9174 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x9175 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x9175 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x9176 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x9176 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x9177 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x9177 != Fp::invalid());
          host_args.at(0) = x9145;
          host_args.at(1) = x9174;
          host_args.at(2) = x9175;
          host_args.at(3) = x9176;
          host_args.at(4) = x9177;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9178 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x9178 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9179 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x9179 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9180 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x9180 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x9181 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x9181 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9145);
          reg = x9145;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7723);
          reg = x7723;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9178);
          reg = x9178;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9179);
          reg = x9179;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9180);
          reg = x9180;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9181);
          reg = x9181;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9182 = args[2][144 * steps + ((cycle - 1) & mask)];
      assert(x9182 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9183 = args[2][145 * steps + ((cycle - 1) & mask)];
      assert(x9183 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9184 = args[2][146 * steps + ((cycle - 1) & mask)];
      assert(x9184 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9185 = args[2][147 * steps + ((cycle - 1) & mask)];
      assert(x9185 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9186 = args[2][148 * steps + ((cycle - 1) & mask)];
      assert(x9186 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9187 = args[2][149 * steps + ((cycle - 1) & mask)];
      assert(x9187 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9188 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x9188 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9189 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x9189 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9190 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x9190 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9191 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x9191 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9192 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x9192 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9193 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x9193 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9194 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x9194 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9195 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x9195 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9196 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x9196 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9197 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x9197 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9198 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x9198 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9199 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x9199 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9200 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x9200 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9201 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x9201 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9202 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x9202 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9203 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x9203 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9204 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x9204 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9205 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x9205 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9206 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x9206 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9207 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x9207 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9208 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x9208 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9209 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x9209 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9210 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x9210 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9211 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x9211 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9212 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x9212 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9213 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x9213 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9214 = args[2][144 * steps + ((cycle - 2) & mask)];
      assert(x9214 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9215 = args[2][145 * steps + ((cycle - 2) & mask)];
      assert(x9215 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9216 = args[2][146 * steps + ((cycle - 2) & mask)];
      assert(x9216 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9217 = args[2][147 * steps + ((cycle - 2) & mask)];
      assert(x9217 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9218 = args[2][148 * steps + ((cycle - 2) & mask)];
      assert(x9218 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9219 = args[2][149 * steps + ((cycle - 2) & mask)];
      assert(x9219 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9220 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x9220 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9221 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x9221 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9222 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x9222 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9223 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x9223 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9224 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x9224 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9225 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x9225 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9226 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x9226 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9227 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x9227 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9228 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x9228 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9229 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x9229 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9230 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x9230 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9231 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x9231 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9232 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x9232 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9233 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x9233 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9234 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x9234 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9235 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x9235 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9236 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x9236 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9237 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x9237 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9238 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x9238 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9239 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x9239 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9240 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x9240 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9241 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x9241 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9242 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x9242 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9243 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x9243 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9244 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x9244 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9245 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x9245 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9246 = args[2][144 * steps + ((cycle - 3) & mask)];
      assert(x9246 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9247 = args[2][145 * steps + ((cycle - 3) & mask)];
      assert(x9247 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9248 = args[2][146 * steps + ((cycle - 3) & mask)];
      assert(x9248 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9249 = args[2][147 * steps + ((cycle - 3) & mask)];
      assert(x9249 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9250 = args[2][148 * steps + ((cycle - 3) & mask)];
      assert(x9250 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9251 = args[2][149 * steps + ((cycle - 3) & mask)];
      assert(x9251 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9252 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x9252 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9253 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x9253 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9254 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x9254 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9255 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x9255 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9256 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x9256 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9257 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x9257 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9258 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x9258 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9259 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x9259 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9260 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x9260 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9261 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x9261 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9262 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x9262 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9263 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x9263 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9264 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x9264 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9265 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x9265 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9266 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x9266 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9267 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x9267 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9268 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x9268 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9269 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x9269 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9270 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x9270 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9271 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x9271 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9272 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x9272 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9273 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x9273 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9274 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x9274 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9275 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x9275 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9276 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x9276 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9277 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x9277 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9278 = args[2][144 * steps + ((cycle - 4) & mask)];
      assert(x9278 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9279 = args[2][145 * steps + ((cycle - 4) & mask)];
      assert(x9279 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9280 = args[2][146 * steps + ((cycle - 4) & mask)];
      assert(x9280 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9281 = args[2][147 * steps + ((cycle - 4) & mask)];
      assert(x9281 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9282 = args[2][148 * steps + ((cycle - 4) & mask)];
      assert(x9282 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9283 = args[2][149 * steps + ((cycle - 4) & mask)];
      assert(x9283 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9284 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x9284 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9285 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x9285 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9286 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x9286 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9287 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x9287 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9288 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x9288 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9289 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x9289 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9290 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x9290 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9291 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x9291 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9292 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x9292 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9293 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x9293 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9294 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x9294 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9295 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x9295 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9296 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x9296 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9297 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x9297 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9298 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x9298 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9299 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x9299 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9300 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x9300 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9301 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x9301 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9302 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x9302 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9303 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x9303 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9304 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x9304 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9305 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x9305 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9306 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x9306 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9307 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x9307 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9308 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x9308 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9309 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x9309 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9310 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x9310 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9311 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x9311 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9312 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x9312 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9313 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x9313 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9314 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x9314 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9315 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x9315 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9316 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x9316 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9317 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x9317 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9318 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x9318 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9319 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x9319 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9320 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x9320 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9321 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x9321 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9322 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x9322 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9323 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x9323 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9324 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x9324 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9325 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x9325 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9326 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x9326 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9327 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x9327 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9328 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x9328 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9329 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x9329 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9330 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x9330 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9331 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x9331 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9332 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x9332 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9333 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x9333 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9334 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x9334 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9335 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x9335 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9336 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x9336 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9337 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x9337 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9338 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x9338 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9339 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x9339 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9340 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x9340 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9341 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x9341 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9342 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x9342 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9343 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x9343 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9344 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x9344 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9345 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x9345 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9346 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x9346 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9347 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x9347 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9348 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x9348 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9349 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x9349 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9350 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x9350 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9351 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x9351 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9352 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x9352 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9353 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x9353 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9354 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x9354 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9355 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x9355 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9356 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x9356 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9357 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x9357 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9358 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x9358 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9359 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x9359 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9360 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x9360 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9361 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x9361 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9362 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x9362 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9363 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x9363 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9364 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x9364 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9365 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x9365 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9366 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x9366 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9367 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x9367 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9368 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x9368 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9369 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x9369 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9370 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x9370 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9371 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x9371 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9372 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x9372 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9373 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x9373 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9374 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x9374 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9375 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x9375 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9376 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x9376 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9377 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x9377 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9378 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x9378 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9379 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x9379 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9380 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x9380 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9381 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x9381 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9382 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x9382 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9383 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x9383 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9384 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x9384 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9385 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x9385 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9386 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x9386 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9387 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x9387 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9388 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x9388 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9389 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x9389 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9390 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x9390 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9391 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x9391 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9392 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x9392 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9393 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x9393 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9394 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x9394 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9395 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x9395 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9396 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x9396 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9397 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x9397 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9398 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x9398 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9399 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x9399 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9400 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x9400 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9401 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x9401 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9402 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x9402 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9403 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x9403 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9404 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x9404 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9405 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x9405 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9406 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x9406 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9407 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x9407 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9408 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x9408 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9409 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x9409 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9410 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x9410 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9411 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x9411 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9412 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x9412 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9413 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x9413 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9414 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x9414 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9415 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x9415 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9416 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x9416 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9417 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x9417 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9418 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x9418 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9419 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x9419 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9420 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x9420 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9421 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x9421 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9422 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x9422 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9423 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x9423 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9424 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x9424 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9425 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x9425 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9426 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x9426 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9427 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x9427 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9428 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x9428 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9429 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x9429 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9430 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x9430 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9431 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x9431 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9432 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x9432 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9433 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x9433 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9434 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x9434 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9435 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x9435 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9436 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x9436 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9437 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x9437 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9438 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x9438 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9439 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x9439 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9440 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x9440 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9441 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x9441 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9442 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x9442 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9443 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x9443 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9444 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x9444 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9445 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x9445 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9446 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x9446 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9447 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x9447 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9448 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x9448 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9449 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x9449 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9450 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x9450 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9451 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x9451 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9452 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x9452 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9453 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x9453 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9454 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x9454 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9455 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x9455 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9456 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x9456 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9457 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x9457 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9458 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x9458 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9459 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x9459 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9460 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x9460 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9461 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x9461 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9462 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x9462 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9463 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x9463 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9464 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x9464 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9465 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x9465 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9466 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x9466 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9467 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x9467 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9468 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x9468 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9469 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x9469 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9470 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x9470 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9471 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x9471 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9472 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x9472 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x9473 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x9473 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":128:26)
      auto x9474 = x9471 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:11)
      auto x9475 = x9470 + x9474;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:61)
      auto x9476 = x9473 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:46)
      auto x9477 = x9472 + x9476;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9478 = x9195 + x9204;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9479 = x9195 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9480 = x9479 * x9204;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9481 = x9478 - x9480;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9482 = x9196 + x9205;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9483 = x9196 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9484 = x9483 * x9205;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9485 = x9482 - x9484;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9486 = x9197 + x9206;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9487 = x9197 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9488 = x9487 * x9206;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9489 = x9486 - x9488;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9490 = x9198 + x9207;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9491 = x9198 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9492 = x9491 * x9207;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9493 = x9490 - x9492;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9494 = x9199 + x9208;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9495 = x9199 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9496 = x9495 * x9208;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9497 = x9494 - x9496;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9498 = x9200 + x9209;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9499 = x9200 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9500 = x9499 * x9209;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9501 = x9498 - x9500;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9502 = x9201 + x9210;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9503 = x9201 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9504 = x9503 * x9210;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9505 = x9502 - x9504;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9506 = x9202 + x9211;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9507 = x9202 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9508 = x9507 * x9211;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9509 = x9506 - x9508;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9510 = x9203 + x9212;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9511 = x9203 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9512 = x9511 * x9212;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9513 = x9510 - x9512;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9514 = x9204 + x9213;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9515 = x9204 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9516 = x9515 * x9213;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9517 = x9514 - x9516;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9518 = x9205 + x9182;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9519 = x9205 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9520 = x9519 * x9182;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9521 = x9518 - x9520;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9522 = x9206 + x9183;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9523 = x9206 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9524 = x9523 * x9183;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9525 = x9522 - x9524;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9526 = x9207 + x9184;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9527 = x9207 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9528 = x9527 * x9184;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9529 = x9526 - x9528;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9530 = x9208 + x9185;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9531 = x9208 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9532 = x9531 * x9185;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9533 = x9530 - x9532;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9534 = x9209 + x9186;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9535 = x9209 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9536 = x9535 * x9186;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9537 = x9534 - x9536;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9538 = x9210 + x9187;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9539 = x9210 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9540 = x9539 * x9187;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9541 = x9538 - x9540;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9542 = x9211 + x9188;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9543 = x9211 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9544 = x9543 * x9188;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9545 = x9542 - x9544;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9546 = x9212 + x9189;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9547 = x9212 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9548 = x9547 * x9189;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9549 = x9546 - x9548;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9550 = x9213 + x9190;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9551 = x9213 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9552 = x9551 * x9190;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9553 = x9550 - x9552;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9554 = x9182 + x9191;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9555 = x9182 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9556 = x9555 * x9191;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9557 = x9554 - x9556;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9558 = x9183 + x9192;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9559 = x9183 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9560 = x9559 * x9192;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9561 = x9558 - x9560;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9562 = x9184 + x9193;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9563 = x9184 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9564 = x9563 * x9193;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9565 = x9562 - x9564;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9566 = x9185 + x9194;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9567 = x9185 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9568 = x9567 * x9194;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9569 = x9566 - x9568;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9570 = x9186 + x9195;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9571 = x9186 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9572 = x9571 * x9195;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9573 = x9570 - x9572;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9574 = x9187 + x9196;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9575 = x9187 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9576 = x9575 * x9196;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9577 = x9574 - x9576;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9578 = x9188 + x9197;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9579 = x9188 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9580 = x9579 * x9197;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9581 = x9578 - x9580;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9582 = x9189 + x9198;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9583 = x9189 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9584 = x9583 * x9198;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9585 = x9582 - x9584;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9586 = x9190 + x9199;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9587 = x9190 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9588 = x9587 * x9199;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9589 = x9586 - x9588;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9590 = x9191 + x9200;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9591 = x9191 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9592 = x9591 * x9200;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9593 = x9590 - x9592;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9594 = x9192 + x9201;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9595 = x9192 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9596 = x9595 * x9201;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9597 = x9594 - x9596;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9598 = x9193 + x9202;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9599 = x9193 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9600 = x9599 * x9202;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9601 = x9598 - x9600;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9602 = x9194 + x9203;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9603 = x9194 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9604 = x9603 * x9203;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9605 = x9602 - x9604;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9606 = x9184 + x9481;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9607 = x9563 * x9481;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9608 = x9606 - x9607;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9609 = x9185 + x9485;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9610 = x9567 * x9485;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9611 = x9609 - x9610;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9612 = x9186 + x9489;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9613 = x9571 * x9489;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9614 = x9612 - x9613;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9615 = x9187 + x9493;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9616 = x9575 * x9493;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9617 = x9615 - x9616;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9618 = x9188 + x9497;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9619 = x9579 * x9497;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9620 = x9618 - x9619;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9621 = x9189 + x9501;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9622 = x9583 * x9501;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9623 = x9621 - x9622;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9624 = x9190 + x9505;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9625 = x9587 * x9505;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9626 = x9624 - x9625;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9627 = x9191 + x9509;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9628 = x9591 * x9509;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9629 = x9627 - x9628;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9630 = x9192 + x9513;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9631 = x9595 * x9513;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9632 = x9630 - x9631;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9633 = x9193 + x9517;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9634 = x9599 * x9517;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9635 = x9633 - x9634;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9636 = x9194 + x9521;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9637 = x9603 * x9521;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9638 = x9636 - x9637;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9639 = x9195 + x9525;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9640 = x9479 * x9525;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9641 = x9639 - x9640;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9642 = x9196 + x9529;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9643 = x9483 * x9529;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9644 = x9642 - x9643;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9645 = x9197 + x9533;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9646 = x9487 * x9533;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9647 = x9645 - x9646;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9648 = x9198 + x9537;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9649 = x9491 * x9537;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9650 = x9648 - x9649;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9651 = x9199 + x9541;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9652 = x9495 * x9541;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9653 = x9651 - x9652;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9654 = x9200 + x9545;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9655 = x9499 * x9545;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9656 = x9654 - x9655;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9657 = x9201 + x9549;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9658 = x9503 * x9549;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9659 = x9657 - x9658;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9660 = x9202 + x9553;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9661 = x9507 * x9553;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9662 = x9660 - x9661;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9663 = x9203 + x9557;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9664 = x9511 * x9557;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9665 = x9663 - x9664;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9666 = x9204 + x9561;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9667 = x9515 * x9561;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9668 = x9666 - x9667;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9669 = x9205 + x9565;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9670 = x9519 * x9565;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9671 = x9669 - x9670;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9672 = x9206 + x9569;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9673 = x9523 * x9569;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9674 = x9672 - x9673;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9675 = x9207 + x9573;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9676 = x9527 * x9573;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9677 = x9675 - x9676;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9678 = x9208 + x9577;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9679 = x9531 * x9577;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9680 = x9678 - x9679;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9681 = x9209 + x9581;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9682 = x9535 * x9581;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9683 = x9681 - x9682;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9684 = x9210 + x9585;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9685 = x9539 * x9585;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9686 = x9684 - x9685;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9687 = x9211 + x9589;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9688 = x9543 * x9589;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9689 = x9687 - x9688;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9690 = x9212 + x9593;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9691 = x9547 * x9593;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9692 = x9690 - x9691;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9693 = x9213 + x9597;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9694 = x9551 * x9597;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9695 = x9693 - x9694;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9696 = x9182 + x9601;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9697 = x9555 * x9601;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9698 = x9696 - x9697;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9699 = x9183 + x9605;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9700 = x9559 * x9605;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9701 = x9699 - x9700;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9702 = x9321 + x9335;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9703 = x9321 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9704 = x9703 * x9335;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9705 = x9702 - x9704;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9706 = x9322 + x9336;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9707 = x9322 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9708 = x9707 * x9336;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9709 = x9706 - x9708;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9710 = x9323 + x9337;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9711 = x9323 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9712 = x9711 * x9337;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9713 = x9710 - x9712;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9714 = x9324 + x9338;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9715 = x9324 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9716 = x9715 * x9338;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9717 = x9714 - x9716;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9718 = x9325 + x9339;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9719 = x9325 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9720 = x9719 * x9339;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9721 = x9718 - x9720;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9722 = x9326 + x9340;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9723 = x9326 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9724 = x9723 * x9340;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9725 = x9722 - x9724;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9726 = x9327 + x9341;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9727 = x9327 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9728 = x9727 * x9341;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9729 = x9726 - x9728;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9730 = x9328 + x9310;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9731 = x9328 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9732 = x9731 * x9310;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9733 = x9730 - x9732;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9734 = x9329 + x9311;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9735 = x9329 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9736 = x9735 * x9311;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9737 = x9734 - x9736;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9738 = x9330 + x9312;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9739 = x9330 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9740 = x9739 * x9312;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9741 = x9738 - x9740;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9742 = x9331 + x9313;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9743 = x9331 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9744 = x9743 * x9313;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9745 = x9742 - x9744;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9746 = x9332 + x9314;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9747 = x9332 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9748 = x9747 * x9314;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9749 = x9746 - x9748;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9750 = x9333 + x9315;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9751 = x9333 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9752 = x9751 * x9315;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9753 = x9750 - x9752;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9754 = x9334 + x9316;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9755 = x9334 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9756 = x9755 * x9316;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9757 = x9754 - x9756;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9758 = x9335 + x9317;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9759 = x9335 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9760 = x9759 * x9317;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9761 = x9758 - x9760;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9762 = x9336 + x9318;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9763 = x9336 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9764 = x9763 * x9318;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9765 = x9762 - x9764;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9766 = x9337 + x9319;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9767 = x9337 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9768 = x9767 * x9319;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9769 = x9766 - x9768;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9770 = x9338 + x9320;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9771 = x9338 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9772 = x9771 * x9320;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9773 = x9770 - x9772;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9774 = x9339 + x9321;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9775 = x9339 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9776 = x9775 * x9321;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9777 = x9774 - x9776;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9778 = x9340 + x9322;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9779 = x9340 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9780 = x9779 * x9322;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9781 = x9778 - x9780;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9782 = x9341 + x9323;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9783 = x9341 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9784 = x9783 * x9323;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9785 = x9782 - x9784;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9786 = x9310 + x9324;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9787 = x9310 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9788 = x9787 * x9324;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9789 = x9786 - x9788;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9790 = x9311 + x9325;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9791 = x9311 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9792 = x9791 * x9325;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9793 = x9790 - x9792;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9794 = x9312 + x9326;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9795 = x9312 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9796 = x9795 * x9326;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9797 = x9794 - x9796;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9798 = x9313 + x9327;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9799 = x9313 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9800 = x9799 * x9327;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9801 = x9798 - x9800;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9802 = x9314 + x9328;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9803 = x9314 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9804 = x9803 * x9328;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9805 = x9802 - x9804;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9806 = x9315 + x9329;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9807 = x9315 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9808 = x9807 * x9329;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9809 = x9806 - x9808;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9810 = x9316 + x9330;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9811 = x9316 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9812 = x9811 * x9330;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9813 = x9810 - x9812;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9814 = x9317 + x9331;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9815 = x9317 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9816 = x9815 * x9331;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9817 = x9814 - x9816;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9818 = x9318 + x9332;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9819 = x9318 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9820 = x9819 * x9332;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9821 = x9818 - x9820;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9822 = x9319 + x9333;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9823 = x9319 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9824 = x9823 * x9333;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9825 = x9822 - x9824;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9826 = x9320 + x9334;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9827 = x9320 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9828 = x9827 * x9334;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9829 = x9826 - x9828;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9830 = x9316 + x9705;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9831 = x9811 * x9705;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9832 = x9830 - x9831;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9833 = x9317 + x9709;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9834 = x9815 * x9709;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9835 = x9833 - x9834;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9836 = x9318 + x9713;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9837 = x9819 * x9713;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9838 = x9836 - x9837;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9839 = x9319 + x9717;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9840 = x9823 * x9717;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9841 = x9839 - x9840;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9842 = x9320 + x9721;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9843 = x9827 * x9721;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9844 = x9842 - x9843;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9845 = x9321 + x9725;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9846 = x9703 * x9725;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9847 = x9845 - x9846;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9848 = x9322 + x9729;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9849 = x9707 * x9729;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9850 = x9848 - x9849;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9851 = x9323 + x9733;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9852 = x9711 * x9733;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9853 = x9851 - x9852;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9854 = x9324 + x9737;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9855 = x9715 * x9737;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9856 = x9854 - x9855;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9857 = x9325 + x9741;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9858 = x9719 * x9741;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9859 = x9857 - x9858;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9860 = x9326 + x9745;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9861 = x9723 * x9745;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9862 = x9860 - x9861;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9863 = x9327 + x9749;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9864 = x9727 * x9749;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9865 = x9863 - x9864;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9866 = x9328 + x9753;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9867 = x9731 * x9753;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9868 = x9866 - x9867;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9869 = x9329 + x9757;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9870 = x9735 * x9757;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9871 = x9869 - x9870;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9872 = x9330 + x9761;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9873 = x9739 * x9761;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9874 = x9872 - x9873;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9875 = x9331 + x9765;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9876 = x9743 * x9765;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9877 = x9875 - x9876;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9878 = x9332 + x9769;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9879 = x9747 * x9769;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9880 = x9878 - x9879;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9881 = x9333 + x9773;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9882 = x9751 * x9773;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9883 = x9881 - x9882;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9884 = x9334 + x9777;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9885 = x9755 * x9777;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9886 = x9884 - x9885;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9887 = x9335 + x9781;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9888 = x9759 * x9781;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9889 = x9887 - x9888;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9890 = x9336 + x9785;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9891 = x9763 * x9785;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9892 = x9890 - x9891;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9893 = x9337 + x9789;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9894 = x9767 * x9789;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9895 = x9893 - x9894;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9896 = x9338 + x9793;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9897 = x9771 * x9793;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9898 = x9896 - x9897;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9899 = x9339 + x9797;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9900 = x9775 * x9797;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9901 = x9899 - x9900;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9902 = x9340 + x9801;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9903 = x9779 * x9801;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9904 = x9902 - x9903;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9905 = x9341 + x9805;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9906 = x9783 * x9805;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9907 = x9905 - x9906;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9908 = x9310 + x9809;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9909 = x9787 * x9809;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9910 = x9908 - x9909;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9911 = x9311 + x9813;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9912 = x9791 * x9813;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9913 = x9911 - x9912;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9914 = x9312 + x9817;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9915 = x9795 * x9817;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9916 = x9914 - x9915;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9917 = x9313 + x9821;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9918 = x9799 * x9821;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9919 = x9917 - x9918;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9920 = x9314 + x9825;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9921 = x9803 * x9825;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9922 = x9920 - x9921;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9923 = x9315 + x9829;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x9924 = x9807 * x9829;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x9925 = x9923 - x9924;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9926 = x9439 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9927 = x9438 + x9926;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9928 = x9440 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9929 = x9927 + x9928;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9930 = x9441 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9931 = x9929 + x9930;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9932 = x9442 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9933 = x9931 + x9932;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9934 = x9443 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9935 = x9933 + x9934;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9936 = x9444 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9937 = x9935 + x9936;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9938 = x9445 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9939 = x9937 + x9938;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9940 = x9446 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9941 = x9939 + x9940;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9942 = x9447 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9943 = x9941 + x9942;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9944 = x9448 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9945 = x9943 + x9944;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9946 = x9449 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9947 = x9945 + x9946;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9948 = x9450 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9949 = x9947 + x9948;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9950 = x9451 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9951 = x9949 + x9950;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9952 = x9452 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9953 = x9951 + x9952;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9954 = x9453 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9955 = x9953 + x9954;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9956 = x9455 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9957 = x9454 + x9956;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9958 = x9456 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9959 = x9957 + x9958;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9960 = x9457 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9961 = x9959 + x9960;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9962 = x9458 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9963 = x9961 + x9962;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9964 = x9459 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9965 = x9963 + x9964;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9966 = x9460 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9967 = x9965 + x9966;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9968 = x9461 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9969 = x9967 + x9968;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9970 = x9462 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9971 = x9969 + x9970;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9972 = x9463 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9973 = x9971 + x9972;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9974 = x9464 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9975 = x9973 + x9974;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9976 = x9465 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9977 = x9975 + x9976;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9978 = x9466 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9979 = x9977 + x9978;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9980 = x9467 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9981 = x9979 + x9980;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9982 = x9468 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9983 = x9981 + x9982;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9984 = x9469 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9985 = x9983 + x9984;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9986 = x9407 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9987 = x9406 + x9986;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9988 = x9408 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9989 = x9987 + x9988;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9990 = x9409 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9991 = x9989 + x9990;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9992 = x9410 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9993 = x9991 + x9992;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9994 = x9411 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9995 = x9993 + x9994;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9996 = x9412 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9997 = x9995 + x9996;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x9998 = x9413 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x9999 = x9997 + x9998;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10000 = x9414 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10001 = x9999 + x10000;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10002 = x9415 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10003 = x10001 + x10002;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10004 = x9416 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10005 = x10003 + x10004;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10006 = x9417 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10007 = x10005 + x10006;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10008 = x9418 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10009 = x10007 + x10008;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10010 = x9419 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10011 = x10009 + x10010;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10012 = x9420 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10013 = x10011 + x10012;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10014 = x9421 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10015 = x10013 + x10014;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10016 = x9423 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10017 = x9422 + x10016;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10018 = x9424 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10019 = x10017 + x10018;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10020 = x9425 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10021 = x10019 + x10020;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10022 = x9426 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10023 = x10021 + x10022;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10024 = x9427 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10025 = x10023 + x10024;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10026 = x9428 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10027 = x10025 + x10026;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10028 = x9429 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10029 = x10027 + x10028;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10030 = x9430 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10031 = x10029 + x10030;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10032 = x9431 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10033 = x10031 + x10032;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10034 = x9432 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10035 = x10033 + x10034;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10036 = x9433 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10037 = x10035 + x10036;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10038 = x9434 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10039 = x10037 + x10038;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10040 = x9435 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10041 = x10039 + x10040;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10042 = x9436 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10043 = x10041 + x10042;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10044 = x9437 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10045 = x10043 + x10044;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10046 = x9310 * x9342;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10047 = x87 - x9310;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10048 = x10047 * x9374;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10049 = x10046 + x10048;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10050 = x9311 * x9343;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10051 = x87 - x9311;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10052 = x10051 * x9375;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10053 = x10050 + x10052;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10054 = x9312 * x9344;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10055 = x87 - x9312;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10056 = x10055 * x9376;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10057 = x10054 + x10056;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10058 = x9313 * x9345;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10059 = x87 - x9313;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10060 = x10059 * x9377;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10061 = x10058 + x10060;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10062 = x9314 * x9346;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10063 = x87 - x9314;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10064 = x10063 * x9378;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10065 = x10062 + x10064;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10066 = x9315 * x9347;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10067 = x87 - x9315;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10068 = x10067 * x9379;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10069 = x10066 + x10068;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10070 = x9316 * x9348;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10071 = x87 - x9316;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10072 = x10071 * x9380;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10073 = x10070 + x10072;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10074 = x9317 * x9349;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10075 = x87 - x9317;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10076 = x10075 * x9381;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10077 = x10074 + x10076;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10078 = x9318 * x9350;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10079 = x87 - x9318;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10080 = x10079 * x9382;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10081 = x10078 + x10080;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10082 = x9319 * x9351;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10083 = x87 - x9319;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10084 = x10083 * x9383;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10085 = x10082 + x10084;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10086 = x9320 * x9352;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10087 = x87 - x9320;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10088 = x10087 * x9384;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10089 = x10086 + x10088;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10090 = x9321 * x9353;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10091 = x87 - x9321;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10092 = x10091 * x9385;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10093 = x10090 + x10092;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10094 = x9322 * x9354;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10095 = x87 - x9322;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10096 = x10095 * x9386;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10097 = x10094 + x10096;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10098 = x9323 * x9355;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10099 = x87 - x9323;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10100 = x10099 * x9387;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10101 = x10098 + x10100;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10102 = x9324 * x9356;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10103 = x87 - x9324;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10104 = x10103 * x9388;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10105 = x10102 + x10104;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10106 = x9325 * x9357;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10107 = x87 - x9325;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10108 = x10107 * x9389;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10109 = x10106 + x10108;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10110 = x9326 * x9358;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10111 = x87 - x9326;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10112 = x10111 * x9390;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10113 = x10110 + x10112;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10114 = x9327 * x9359;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10115 = x87 - x9327;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10116 = x10115 * x9391;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10117 = x10114 + x10116;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10118 = x9328 * x9360;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10119 = x87 - x9328;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10120 = x10119 * x9392;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10121 = x10118 + x10120;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10122 = x9329 * x9361;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10123 = x87 - x9329;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10124 = x10123 * x9393;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10125 = x10122 + x10124;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10126 = x9330 * x9362;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10127 = x87 - x9330;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10128 = x10127 * x9394;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10129 = x10126 + x10128;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10130 = x9331 * x9363;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10131 = x87 - x9331;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10132 = x10131 * x9395;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10133 = x10130 + x10132;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10134 = x9332 * x9364;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10135 = x87 - x9332;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10136 = x10135 * x9396;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10137 = x10134 + x10136;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10138 = x9333 * x9365;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10139 = x87 - x9333;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10140 = x10139 * x9397;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10141 = x10138 + x10140;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10142 = x9334 * x9366;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10143 = x87 - x9334;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10144 = x10143 * x9398;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10145 = x10142 + x10144;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10146 = x9335 * x9367;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10147 = x87 - x9335;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10148 = x10147 * x9399;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10149 = x10146 + x10148;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10150 = x9336 * x9368;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10151 = x87 - x9336;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10152 = x10151 * x9400;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10153 = x10150 + x10152;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10154 = x9337 * x9369;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10155 = x87 - x9337;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10156 = x10155 * x9401;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10157 = x10154 + x10156;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10158 = x9338 * x9370;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10159 = x87 - x9338;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10160 = x10159 * x9402;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10161 = x10158 + x10160;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10162 = x9339 * x9371;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10163 = x87 - x9339;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10164 = x10163 * x9403;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10165 = x10162 + x10164;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10166 = x9340 * x9372;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10167 = x87 - x9340;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10168 = x10167 * x9404;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10169 = x10166 + x10168;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10170 = x9341 * x9373;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x10171 = x87 - x9341;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x10172 = x10171 * x9405;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x10173 = x10170 + x10172;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10174 = x10053 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10175 = x10049 + x10174;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10176 = x10057 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10177 = x10175 + x10176;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10178 = x10061 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10179 = x10177 + x10178;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10180 = x10065 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10181 = x10179 + x10180;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10182 = x10069 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10183 = x10181 + x10182;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10184 = x10073 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10185 = x10183 + x10184;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10186 = x10077 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10187 = x10185 + x10186;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10188 = x10081 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10189 = x10187 + x10188;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10190 = x10085 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10191 = x10189 + x10190;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10192 = x10089 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10193 = x10191 + x10192;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10194 = x10093 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10195 = x10193 + x10194;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10196 = x10097 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10197 = x10195 + x10196;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10198 = x10101 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10199 = x10197 + x10198;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10200 = x10105 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10201 = x10199 + x10200;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10202 = x10109 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10203 = x10201 + x10202;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10204 = x10117 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10205 = x10113 + x10204;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10206 = x10121 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10207 = x10205 + x10206;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10208 = x10125 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10209 = x10207 + x10208;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10210 = x10129 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10211 = x10209 + x10210;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10212 = x10133 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10213 = x10211 + x10212;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10214 = x10137 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10215 = x10213 + x10214;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10216 = x10141 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10217 = x10215 + x10216;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10218 = x10145 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10219 = x10217 + x10218;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10220 = x10149 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10221 = x10219 + x10220;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10222 = x10153 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10223 = x10221 + x10222;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10224 = x10157 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10225 = x10223 + x10224;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10226 = x10161 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10227 = x10225 + x10226;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10228 = x10165 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10229 = x10227 + x10228;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10230 = x10169 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10231 = x10229 + x10230;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10232 = x10173 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10233 = x10231 + x10232;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10234 = x9835 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10235 = x9832 + x10234;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10236 = x9838 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10237 = x10235 + x10236;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10238 = x9841 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10239 = x10237 + x10238;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10240 = x9844 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10241 = x10239 + x10240;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10242 = x9847 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10243 = x10241 + x10242;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10244 = x9850 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10245 = x10243 + x10244;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10246 = x9853 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10247 = x10245 + x10246;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10248 = x9856 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10249 = x10247 + x10248;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10250 = x9859 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10251 = x10249 + x10250;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10252 = x9862 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10253 = x10251 + x10252;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10254 = x9865 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10255 = x10253 + x10254;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10256 = x9868 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10257 = x10255 + x10256;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10258 = x9871 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10259 = x10257 + x10258;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10260 = x9874 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10261 = x10259 + x10260;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10262 = x9877 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10263 = x10261 + x10262;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10264 = x9883 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10265 = x9880 + x10264;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10266 = x9886 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10267 = x10265 + x10266;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10268 = x9889 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10269 = x10267 + x10268;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10270 = x9892 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10271 = x10269 + x10270;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10272 = x9895 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10273 = x10271 + x10272;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10274 = x9898 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10275 = x10273 + x10274;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10276 = x9901 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10277 = x10275 + x10276;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10278 = x9904 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10279 = x10277 + x10278;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10280 = x9907 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10281 = x10279 + x10280;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10282 = x9910 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10283 = x10281 + x10282;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10284 = x9913 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10285 = x10283 + x10284;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10286 = x9916 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10287 = x10285 + x10286;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10288 = x9919 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10289 = x10287 + x10288;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10290 = x9922 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10291 = x10289 + x10290;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10292 = x9925 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10293 = x10291 + x10292;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10294 = x10203 + x10263;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10295 = x10233 + x10293;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10296 = x10015 + x10294;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10297 = x10045 + x10295;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10298 = x9475 + x10296;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10299 = x9477 + x10297;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10300 = x9955 + x10298;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10301 = x9985 + x10299;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10302 = x9182 * x9214;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10303 = x87 - x9246;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10304 = x10302 * x10303;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10305 = x87 - x9214;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10306 = x9182 * x10305;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10307 = x10306 * x9246;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10308 = x10304 + x10307;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10309 = x87 - x9182;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10310 = x10309 * x9214;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10311 = x10310 * x9246;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10312 = x10308 + x10311;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10313 = x10302 * x9246;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10314 = x10312 + x10313;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10315 = x9183 * x9215;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10316 = x87 - x9247;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10317 = x10315 * x10316;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10318 = x87 - x9215;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10319 = x9183 * x10318;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10320 = x10319 * x9247;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10321 = x10317 + x10320;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10322 = x87 - x9183;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10323 = x10322 * x9215;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10324 = x10323 * x9247;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10325 = x10321 + x10324;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10326 = x10315 * x9247;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10327 = x10325 + x10326;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10328 = x9184 * x9216;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10329 = x87 - x9248;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10330 = x10328 * x10329;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10331 = x87 - x9216;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10332 = x9184 * x10331;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10333 = x10332 * x9248;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10334 = x10330 + x10333;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10335 = x87 - x9184;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10336 = x10335 * x9216;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10337 = x10336 * x9248;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10338 = x10334 + x10337;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10339 = x10328 * x9248;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10340 = x10338 + x10339;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10341 = x9185 * x9217;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10342 = x87 - x9249;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10343 = x10341 * x10342;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10344 = x87 - x9217;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10345 = x9185 * x10344;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10346 = x10345 * x9249;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10347 = x10343 + x10346;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10348 = x87 - x9185;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10349 = x10348 * x9217;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10350 = x10349 * x9249;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10351 = x10347 + x10350;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10352 = x10341 * x9249;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10353 = x10351 + x10352;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10354 = x9186 * x9218;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10355 = x87 - x9250;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10356 = x10354 * x10355;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10357 = x87 - x9218;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10358 = x9186 * x10357;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10359 = x10358 * x9250;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10360 = x10356 + x10359;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10361 = x87 - x9186;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10362 = x10361 * x9218;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10363 = x10362 * x9250;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10364 = x10360 + x10363;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10365 = x10354 * x9250;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10366 = x10364 + x10365;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10367 = x9187 * x9219;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10368 = x87 - x9251;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10369 = x10367 * x10368;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10370 = x87 - x9219;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10371 = x9187 * x10370;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10372 = x10371 * x9251;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10373 = x10369 + x10372;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10374 = x87 - x9187;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10375 = x10374 * x9219;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10376 = x10375 * x9251;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10377 = x10373 + x10376;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10378 = x10367 * x9251;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10379 = x10377 + x10378;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10380 = x9188 * x9220;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10381 = x87 - x9252;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10382 = x10380 * x10381;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10383 = x87 - x9220;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10384 = x9188 * x10383;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10385 = x10384 * x9252;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10386 = x10382 + x10385;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10387 = x87 - x9188;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10388 = x10387 * x9220;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10389 = x10388 * x9252;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10390 = x10386 + x10389;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10391 = x10380 * x9252;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10392 = x10390 + x10391;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10393 = x9189 * x9221;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10394 = x87 - x9253;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10395 = x10393 * x10394;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10396 = x87 - x9221;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10397 = x9189 * x10396;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10398 = x10397 * x9253;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10399 = x10395 + x10398;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10400 = x87 - x9189;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10401 = x10400 * x9221;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10402 = x10401 * x9253;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10403 = x10399 + x10402;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10404 = x10393 * x9253;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10405 = x10403 + x10404;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10406 = x9190 * x9222;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10407 = x87 - x9254;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10408 = x10406 * x10407;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10409 = x87 - x9222;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10410 = x9190 * x10409;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10411 = x10410 * x9254;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10412 = x10408 + x10411;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10413 = x87 - x9190;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10414 = x10413 * x9222;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10415 = x10414 * x9254;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10416 = x10412 + x10415;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10417 = x10406 * x9254;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10418 = x10416 + x10417;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10419 = x9191 * x9223;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10420 = x87 - x9255;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10421 = x10419 * x10420;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10422 = x87 - x9223;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10423 = x9191 * x10422;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10424 = x10423 * x9255;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10425 = x10421 + x10424;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10426 = x87 - x9191;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10427 = x10426 * x9223;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10428 = x10427 * x9255;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10429 = x10425 + x10428;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10430 = x10419 * x9255;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10431 = x10429 + x10430;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10432 = x9192 * x9224;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10433 = x87 - x9256;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10434 = x10432 * x10433;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10435 = x87 - x9224;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10436 = x9192 * x10435;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10437 = x10436 * x9256;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10438 = x10434 + x10437;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10439 = x87 - x9192;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10440 = x10439 * x9224;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10441 = x10440 * x9256;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10442 = x10438 + x10441;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10443 = x10432 * x9256;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10444 = x10442 + x10443;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10445 = x9193 * x9225;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10446 = x87 - x9257;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10447 = x10445 * x10446;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10448 = x87 - x9225;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10449 = x9193 * x10448;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10450 = x10449 * x9257;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10451 = x10447 + x10450;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10452 = x87 - x9193;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10453 = x10452 * x9225;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10454 = x10453 * x9257;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10455 = x10451 + x10454;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10456 = x10445 * x9257;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10457 = x10455 + x10456;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10458 = x9194 * x9226;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10459 = x87 - x9258;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10460 = x10458 * x10459;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10461 = x87 - x9226;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10462 = x9194 * x10461;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10463 = x10462 * x9258;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10464 = x10460 + x10463;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10465 = x87 - x9194;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10466 = x10465 * x9226;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10467 = x10466 * x9258;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10468 = x10464 + x10467;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10469 = x10458 * x9258;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10470 = x10468 + x10469;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10471 = x9195 * x9227;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10472 = x87 - x9259;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10473 = x10471 * x10472;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10474 = x87 - x9227;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10475 = x9195 * x10474;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10476 = x10475 * x9259;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10477 = x10473 + x10476;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10478 = x87 - x9195;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10479 = x10478 * x9227;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10480 = x10479 * x9259;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10481 = x10477 + x10480;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10482 = x10471 * x9259;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10483 = x10481 + x10482;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10484 = x9196 * x9228;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10485 = x87 - x9260;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10486 = x10484 * x10485;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10487 = x87 - x9228;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10488 = x9196 * x10487;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10489 = x10488 * x9260;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10490 = x10486 + x10489;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10491 = x87 - x9196;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10492 = x10491 * x9228;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10493 = x10492 * x9260;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10494 = x10490 + x10493;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10495 = x10484 * x9260;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10496 = x10494 + x10495;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10497 = x9197 * x9229;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10498 = x87 - x9261;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10499 = x10497 * x10498;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10500 = x87 - x9229;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10501 = x9197 * x10500;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10502 = x10501 * x9261;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10503 = x10499 + x10502;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10504 = x87 - x9197;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10505 = x10504 * x9229;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10506 = x10505 * x9261;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10507 = x10503 + x10506;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10508 = x10497 * x9261;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10509 = x10507 + x10508;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10510 = x9198 * x9230;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10511 = x87 - x9262;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10512 = x10510 * x10511;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10513 = x87 - x9230;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10514 = x9198 * x10513;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10515 = x10514 * x9262;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10516 = x10512 + x10515;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10517 = x87 - x9198;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10518 = x10517 * x9230;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10519 = x10518 * x9262;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10520 = x10516 + x10519;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10521 = x10510 * x9262;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10522 = x10520 + x10521;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10523 = x9199 * x9231;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10524 = x87 - x9263;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10525 = x10523 * x10524;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10526 = x87 - x9231;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10527 = x9199 * x10526;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10528 = x10527 * x9263;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10529 = x10525 + x10528;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10530 = x87 - x9199;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10531 = x10530 * x9231;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10532 = x10531 * x9263;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10533 = x10529 + x10532;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10534 = x10523 * x9263;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10535 = x10533 + x10534;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10536 = x9200 * x9232;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10537 = x87 - x9264;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10538 = x10536 * x10537;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10539 = x87 - x9232;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10540 = x9200 * x10539;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10541 = x10540 * x9264;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10542 = x10538 + x10541;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10543 = x87 - x9200;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10544 = x10543 * x9232;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10545 = x10544 * x9264;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10546 = x10542 + x10545;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10547 = x10536 * x9264;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10548 = x10546 + x10547;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10549 = x9201 * x9233;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10550 = x87 - x9265;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10551 = x10549 * x10550;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10552 = x87 - x9233;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10553 = x9201 * x10552;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10554 = x10553 * x9265;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10555 = x10551 + x10554;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10556 = x87 - x9201;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10557 = x10556 * x9233;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10558 = x10557 * x9265;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10559 = x10555 + x10558;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10560 = x10549 * x9265;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10561 = x10559 + x10560;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10562 = x9202 * x9234;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10563 = x87 - x9266;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10564 = x10562 * x10563;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10565 = x87 - x9234;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10566 = x9202 * x10565;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10567 = x10566 * x9266;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10568 = x10564 + x10567;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10569 = x87 - x9202;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10570 = x10569 * x9234;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10571 = x10570 * x9266;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10572 = x10568 + x10571;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10573 = x10562 * x9266;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10574 = x10572 + x10573;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10575 = x9203 * x9235;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10576 = x87 - x9267;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10577 = x10575 * x10576;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10578 = x87 - x9235;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10579 = x9203 * x10578;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10580 = x10579 * x9267;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10581 = x10577 + x10580;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10582 = x87 - x9203;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10583 = x10582 * x9235;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10584 = x10583 * x9267;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10585 = x10581 + x10584;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10586 = x10575 * x9267;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10587 = x10585 + x10586;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10588 = x9204 * x9236;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10589 = x87 - x9268;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10590 = x10588 * x10589;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10591 = x87 - x9236;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10592 = x9204 * x10591;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10593 = x10592 * x9268;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10594 = x10590 + x10593;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10595 = x87 - x9204;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10596 = x10595 * x9236;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10597 = x10596 * x9268;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10598 = x10594 + x10597;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10599 = x10588 * x9268;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10600 = x10598 + x10599;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10601 = x9205 * x9237;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10602 = x87 - x9269;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10603 = x10601 * x10602;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10604 = x87 - x9237;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10605 = x9205 * x10604;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10606 = x10605 * x9269;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10607 = x10603 + x10606;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10608 = x87 - x9205;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10609 = x10608 * x9237;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10610 = x10609 * x9269;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10611 = x10607 + x10610;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10612 = x10601 * x9269;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10613 = x10611 + x10612;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10614 = x9206 * x9238;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10615 = x87 - x9270;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10616 = x10614 * x10615;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10617 = x87 - x9238;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10618 = x9206 * x10617;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10619 = x10618 * x9270;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10620 = x10616 + x10619;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10621 = x87 - x9206;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10622 = x10621 * x9238;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10623 = x10622 * x9270;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10624 = x10620 + x10623;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10625 = x10614 * x9270;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10626 = x10624 + x10625;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10627 = x9207 * x9239;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10628 = x87 - x9271;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10629 = x10627 * x10628;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10630 = x87 - x9239;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10631 = x9207 * x10630;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10632 = x10631 * x9271;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10633 = x10629 + x10632;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10634 = x87 - x9207;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10635 = x10634 * x9239;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10636 = x10635 * x9271;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10637 = x10633 + x10636;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10638 = x10627 * x9271;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10639 = x10637 + x10638;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10640 = x9208 * x9240;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10641 = x87 - x9272;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10642 = x10640 * x10641;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10643 = x87 - x9240;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10644 = x9208 * x10643;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10645 = x10644 * x9272;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10646 = x10642 + x10645;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10647 = x87 - x9208;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10648 = x10647 * x9240;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10649 = x10648 * x9272;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10650 = x10646 + x10649;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10651 = x10640 * x9272;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10652 = x10650 + x10651;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10653 = x9209 * x9241;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10654 = x87 - x9273;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10655 = x10653 * x10654;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10656 = x87 - x9241;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10657 = x9209 * x10656;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10658 = x10657 * x9273;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10659 = x10655 + x10658;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10660 = x87 - x9209;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10661 = x10660 * x9241;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10662 = x10661 * x9273;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10663 = x10659 + x10662;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10664 = x10653 * x9273;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10665 = x10663 + x10664;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10666 = x9210 * x9242;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10667 = x87 - x9274;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10668 = x10666 * x10667;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10669 = x87 - x9242;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10670 = x9210 * x10669;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10671 = x10670 * x9274;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10672 = x10668 + x10671;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10673 = x87 - x9210;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10674 = x10673 * x9242;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10675 = x10674 * x9274;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10676 = x10672 + x10675;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10677 = x10666 * x9274;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10678 = x10676 + x10677;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10679 = x9211 * x9243;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10680 = x87 - x9275;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10681 = x10679 * x10680;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10682 = x87 - x9243;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10683 = x9211 * x10682;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10684 = x10683 * x9275;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10685 = x10681 + x10684;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10686 = x87 - x9211;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10687 = x10686 * x9243;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10688 = x10687 * x9275;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10689 = x10685 + x10688;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10690 = x10679 * x9275;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10691 = x10689 + x10690;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10692 = x9212 * x9244;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10693 = x87 - x9276;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10694 = x10692 * x10693;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10695 = x87 - x9244;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10696 = x9212 * x10695;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10697 = x10696 * x9276;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10698 = x10694 + x10697;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10699 = x87 - x9212;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10700 = x10699 * x9244;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10701 = x10700 * x9276;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10702 = x10698 + x10701;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10703 = x10692 * x9276;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10704 = x10702 + x10703;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10705 = x9213 * x9245;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x10706 = x87 - x9277;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10707 = x10705 * x10706;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x10708 = x87 - x9245;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10709 = x9213 * x10708;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x10710 = x10709 * x9277;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10711 = x10707 + x10710;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x10712 = x87 - x9213;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10713 = x10712 * x9245;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x10714 = x10713 * x9277;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10715 = x10711 + x10714;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x10716 = x10705 * x9277;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x10717 = x10715 + x10716;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10718 = x10327 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10719 = x10314 + x10718;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10720 = x10340 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10721 = x10719 + x10720;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10722 = x10353 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10723 = x10721 + x10722;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10724 = x10366 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10725 = x10723 + x10724;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10726 = x10379 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10727 = x10725 + x10726;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10728 = x10392 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10729 = x10727 + x10728;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10730 = x10405 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10731 = x10729 + x10730;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10732 = x10418 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10733 = x10731 + x10732;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10734 = x10431 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10735 = x10733 + x10734;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10736 = x10444 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10737 = x10735 + x10736;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10738 = x10457 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10739 = x10737 + x10738;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10740 = x10470 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10741 = x10739 + x10740;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10742 = x10483 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10743 = x10741 + x10742;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10744 = x10496 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10745 = x10743 + x10744;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10746 = x10509 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10747 = x10745 + x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10748 = x10535 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10749 = x10522 + x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10750 = x10548 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10751 = x10749 + x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10752 = x10561 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10753 = x10751 + x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10754 = x10574 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10755 = x10753 + x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10756 = x10587 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10757 = x10755 + x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10758 = x10600 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10759 = x10757 + x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10760 = x10613 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10761 = x10759 + x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10762 = x10626 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10763 = x10761 + x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10764 = x10639 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10765 = x10763 + x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10766 = x10652 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10767 = x10765 + x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10768 = x10665 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10769 = x10767 + x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10770 = x10678 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10771 = x10769 + x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10772 = x10691 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10773 = x10771 + x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10774 = x10704 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10775 = x10773 + x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10776 = x10717 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10777 = x10775 + x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10778 = x9611 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10779 = x9608 + x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10780 = x9614 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10781 = x10779 + x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10782 = x9617 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10783 = x10781 + x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10784 = x9620 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10785 = x10783 + x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10786 = x9623 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10787 = x10785 + x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10788 = x9626 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10789 = x10787 + x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10790 = x9629 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10791 = x10789 + x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10792 = x9632 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10793 = x10791 + x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10794 = x9635 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10795 = x10793 + x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10796 = x9638 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10797 = x10795 + x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10798 = x9641 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10799 = x10797 + x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10800 = x9644 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10801 = x10799 + x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10802 = x9647 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10803 = x10801 + x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10804 = x9650 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10805 = x10803 + x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10806 = x9653 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10807 = x10805 + x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10808 = x9659 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10809 = x9656 + x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10810 = x9662 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10811 = x10809 + x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10812 = x9665 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10813 = x10811 + x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10814 = x9668 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10815 = x10813 + x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10816 = x9671 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10817 = x10815 + x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10818 = x9674 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10819 = x10817 + x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10820 = x9677 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10821 = x10819 + x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10822 = x9680 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10823 = x10821 + x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10824 = x9683 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10825 = x10823 + x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10826 = x9686 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10827 = x10825 + x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10828 = x9689 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10829 = x10827 + x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10830 = x9692 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10831 = x10829 + x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10832 = x9695 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10833 = x10831 + x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10834 = x9698 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10835 = x10833 + x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10836 = x9701 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10837 = x10835 + x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10838 = x10747 + x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10839 = x10777 + x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10840 = x10300 + x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10841 = x10301 + x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10842 = x9279 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10843 = x9278 + x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10844 = x9280 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10845 = x10843 + x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10846 = x9281 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10847 = x10845 + x10846;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10848 = x9282 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10849 = x10847 + x10848;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10850 = x9283 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10851 = x10849 + x10850;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10852 = x9284 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10853 = x10851 + x10852;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10854 = x9285 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10855 = x10853 + x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10856 = x9286 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10857 = x10855 + x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10858 = x9287 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10859 = x10857 + x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10860 = x9288 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10861 = x10859 + x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10862 = x9289 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10863 = x10861 + x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10864 = x9290 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10865 = x10863 + x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10866 = x9291 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10867 = x10865 + x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10868 = x9292 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10869 = x10867 + x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10870 = x9293 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10871 = x10869 + x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10872 = x9295 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10873 = x9294 + x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10874 = x9296 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10875 = x10873 + x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10876 = x9297 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10877 = x10875 + x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10878 = x9298 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10879 = x10877 + x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10880 = x9299 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10881 = x10879 + x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10882 = x9300 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10883 = x10881 + x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10884 = x9301 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10885 = x10883 + x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10886 = x9302 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10887 = x10885 + x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10888 = x9303 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10889 = x10887 + x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10890 = x9304 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10891 = x10889 + x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10892 = x9305 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10893 = x10891 + x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10894 = x9306 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10895 = x10893 + x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10896 = x9307 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10897 = x10895 + x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10898 = x9308 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10899 = x10897 + x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x10900 = x9309 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x10901 = x10899 + x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10902 = x10300 + x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x10903 = x10301 + x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":336:5)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x10840);
        reg = x10840;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":337:5)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x10902);
        reg = x10902;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":336:5)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x10841);
        reg = x10841;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":337:5)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x10903);
        reg = x10903;
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10904 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x10904 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10905 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x10905 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10906 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x10906 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10907 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x10907 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":128:26)
        auto x10908 = x10905 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:11)
        auto x10909 = x10904 + x10908;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:61)
        auto x10910 = x10907 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:46)
        auto x10911 = x10906 + x10910;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10912 = Fp(x10909.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10912);
            reg = x10912;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10913 = Fp(x10909.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10914 = x10913 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10914);
            reg = x10914;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10915 = Fp(x10909.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10916 = x10915 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10916);
            reg = x10916;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10917 = Fp(x10909.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10918 = x10917 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10918);
            reg = x10918;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10919 = Fp(x10909.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10920 = x10919 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10920);
            reg = x10920;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10921 = Fp(x10909.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10922 = x10921 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10922);
            reg = x10922;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10923 = Fp(x10909.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10924 = x10923 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10924);
            reg = x10924;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10925 = Fp(x10909.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10926 = x10925 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10926);
            reg = x10926;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10927 = Fp(x10909.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10928 = x10927 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10928);
            reg = x10928;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10929 = Fp(x10909.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10930 = x10929 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10930);
            reg = x10930;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10931 = Fp(x10909.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10932 = x10931 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10932);
            reg = x10932;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10933 = Fp(x10909.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10934 = x10933 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10934);
            reg = x10934;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10935 = Fp(x10909.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10936 = x10935 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10936);
            reg = x10936;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10937 = Fp(x10909.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10938 = x10937 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10938);
            reg = x10938;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10939 = Fp(x10909.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10940 = x10939 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10940);
            reg = x10940;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10941 = Fp(x10909.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x10942 = x10941 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10942);
            reg = x10942;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10943 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x10943 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10944 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x10944 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10945 = x10944 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10946 = x10943 + x10945;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10947 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x10947 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10948 = x10947 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10949 = x10946 + x10948;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10950 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x10950 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10951 = x10950 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10952 = x10949 + x10951;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10953 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x10953 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10954 = x10953 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10955 = x10952 + x10954;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10956 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x10956 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10957 = x10956 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10958 = x10955 + x10957;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10959 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x10959 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10960 = x10959 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10961 = x10958 + x10960;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10962 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x10962 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10963 = x10962 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10964 = x10961 + x10963;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10965 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x10965 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10966 = x10965 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10967 = x10964 + x10966;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10968 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x10968 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10969 = x10968 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10970 = x10967 + x10969;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10971 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x10971 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10972 = x10971 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10973 = x10970 + x10972;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10974 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x10974 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10975 = x10974 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10976 = x10973 + x10975;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10977 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x10977 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10978 = x10977 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10979 = x10976 + x10978;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10980 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x10980 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10981 = x10980 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10982 = x10979 + x10981;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10983 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x10983 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10984 = x10983 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10985 = x10982 + x10984;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10986 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x10986 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x10987 = x10986 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x10988 = x10985 + x10987;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x10989 = x10909 - x10988;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x10990 = x10989 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x10991 = Fp(x10990.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10991);
            reg = x10991;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x10992 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x10992 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x10993 = x10990 - x10992;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x10994 = x10993 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x10995 = x87 - x10994;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x10996 = x10994 * x10995;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x10996 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x10997 = x10911 + x10990;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10998 = Fp(x10997.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10998);
            reg = x10998;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x10999 = Fp(x10997.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11000 = x10999 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11000);
            reg = x11000;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11001 = Fp(x10997.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11002 = x11001 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11002);
            reg = x11002;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11003 = Fp(x10997.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11004 = x11003 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11004);
            reg = x11004;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11005 = Fp(x10997.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11006 = x11005 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11006);
            reg = x11006;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11007 = Fp(x10997.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11008 = x11007 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11008);
            reg = x11008;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11009 = Fp(x10997.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11010 = x11009 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11010);
            reg = x11010;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11011 = Fp(x10997.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11012 = x11011 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11012);
            reg = x11012;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11013 = Fp(x10997.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11014 = x11013 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11014);
            reg = x11014;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11015 = Fp(x10997.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11016 = x11015 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11016);
            reg = x11016;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11017 = Fp(x10997.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11018 = x11017 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11018);
            reg = x11018;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11019 = Fp(x10997.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11020 = x11019 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11020);
            reg = x11020;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11021 = Fp(x10997.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11022 = x11021 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11022);
            reg = x11022;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11023 = Fp(x10997.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11024 = x11023 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11024);
            reg = x11024;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11025 = Fp(x10997.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11026 = x11025 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11026);
            reg = x11026;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11027 = Fp(x10997.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11028 = x11027 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11028);
            reg = x11028;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11029 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x11029 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11030 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x11030 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11031 = x11030 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11032 = x11029 + x11031;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11033 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x11033 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11034 = x11033 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11035 = x11032 + x11034;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11036 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x11036 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11037 = x11036 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11038 = x11035 + x11037;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11039 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x11039 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11040 = x11039 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11041 = x11038 + x11040;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11042 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x11042 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11043 = x11042 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11044 = x11041 + x11043;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11045 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x11045 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11046 = x11045 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11047 = x11044 + x11046;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11048 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x11048 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11049 = x11048 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11050 = x11047 + x11049;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11051 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x11051 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11052 = x11051 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11053 = x11050 + x11052;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11054 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x11054 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11055 = x11054 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11056 = x11053 + x11055;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11057 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x11057 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11058 = x11057 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11059 = x11056 + x11058;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11060 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x11060 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11061 = x11060 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11062 = x11059 + x11061;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11063 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x11063 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11064 = x11063 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11065 = x11062 + x11064;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11066 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x11066 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11067 = x11066 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11068 = x11065 + x11067;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11069 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x11069 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11070 = x11069 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11071 = x11068 + x11070;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11072 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x11072 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11073 = x11072 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11074 = x11071 + x11073;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x11075 = x10997 - x11074;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x11076 = x11075 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x11077 = Fp(x11076.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11077);
            reg = x11077;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11078 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x11078 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x11079 = x11076 - x11078;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x11080 = x11079 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x11081 = x87 - x11080;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x11082 = x11080 * x11081;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x11082 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11083 = Fp(x9475.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11083);
            reg = x11083;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11084 = Fp(x9475.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11085 = x11084 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11085);
            reg = x11085;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11086 = Fp(x9475.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11087 = x11086 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11087);
            reg = x11087;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11088 = Fp(x9475.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11089 = x11088 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11089);
            reg = x11089;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11090 = Fp(x9475.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11091 = x11090 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11091);
            reg = x11091;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11092 = Fp(x9475.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11093 = x11092 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11093);
            reg = x11093;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11094 = Fp(x9475.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11095 = x11094 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11095);
            reg = x11095;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11096 = Fp(x9475.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11097 = x11096 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11097);
            reg = x11097;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11098 = Fp(x9475.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11099 = x11098 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11099);
            reg = x11099;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11100 = Fp(x9475.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11101 = x11100 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11101);
            reg = x11101;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11102 = Fp(x9475.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11103 = x11102 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11103);
            reg = x11103;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11104 = Fp(x9475.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11105 = x11104 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11105);
            reg = x11105;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11106 = Fp(x9475.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11107 = x11106 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11107);
            reg = x11107;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11108 = Fp(x9475.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11109 = x11108 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11109);
            reg = x11109;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11110 = Fp(x9475.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11111 = x11110 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11111);
            reg = x11111;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11112 = Fp(x9475.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11113 = x11112 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11113);
            reg = x11113;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11114 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x11114 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11115 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x11115 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11116 = x11115 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11117 = x11114 + x11116;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11118 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x11118 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11119 = x11118 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11120 = x11117 + x11119;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11121 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x11121 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11122 = x11121 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11123 = x11120 + x11122;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11124 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x11124 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11125 = x11124 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11126 = x11123 + x11125;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11127 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x11127 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11128 = x11127 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11129 = x11126 + x11128;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11130 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x11130 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11131 = x11130 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11132 = x11129 + x11131;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11133 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x11133 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11134 = x11133 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11135 = x11132 + x11134;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11136 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x11136 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11137 = x11136 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11138 = x11135 + x11137;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11139 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x11139 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11140 = x11139 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11141 = x11138 + x11140;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11142 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x11142 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11143 = x11142 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11144 = x11141 + x11143;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11145 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x11145 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11146 = x11145 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11147 = x11144 + x11146;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11148 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x11148 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11149 = x11148 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11150 = x11147 + x11149;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11151 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x11151 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11152 = x11151 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11153 = x11150 + x11152;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11154 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x11154 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11155 = x11154 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11156 = x11153 + x11155;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11157 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x11157 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11158 = x11157 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11159 = x11156 + x11158;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x11160 = x9475 - x11159;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x11161 = x11160 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x11162 = Fp(x11161.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11162);
            reg = x11162;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11163 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x11163 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x11164 = x11161 - x11163;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x11165 = x11164 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x11166 = x87 - x11165;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x11167 = x11165 * x11166;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x11167 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x11168 = x9477 + x11161;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11169 = Fp(x11168.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11169);
            reg = x11169;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11170 = Fp(x11168.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11171 = x11170 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11171);
            reg = x11171;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11172 = Fp(x11168.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11173 = x11172 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11173);
            reg = x11173;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11174 = Fp(x11168.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11175 = x11174 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11175);
            reg = x11175;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11176 = Fp(x11168.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11177 = x11176 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11177);
            reg = x11177;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11178 = Fp(x11168.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11179 = x11178 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11179);
            reg = x11179;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11180 = Fp(x11168.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11181 = x11180 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11181);
            reg = x11181;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11182 = Fp(x11168.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11183 = x11182 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11183);
            reg = x11183;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11184 = Fp(x11168.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11185 = x11184 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11185);
            reg = x11185;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11186 = Fp(x11168.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11187 = x11186 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11187);
            reg = x11187;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11188 = Fp(x11168.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11189 = x11188 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11189);
            reg = x11189;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11190 = Fp(x11168.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11191 = x11190 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11191);
            reg = x11191;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11192 = Fp(x11168.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11193 = x11192 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11193);
            reg = x11193;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11194 = Fp(x11168.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11195 = x11194 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11195);
            reg = x11195;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11196 = Fp(x11168.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11197 = x11196 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11197);
            reg = x11197;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11198 = Fp(x11168.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11199 = x11198 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11199);
            reg = x11199;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11200 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x11200 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11201 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x11201 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11202 = x11201 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11203 = x11200 + x11202;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11204 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x11204 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11205 = x11204 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11206 = x11203 + x11205;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11207 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x11207 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11208 = x11207 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11209 = x11206 + x11208;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11210 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x11210 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11211 = x11210 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11212 = x11209 + x11211;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11213 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x11213 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11214 = x11213 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11215 = x11212 + x11214;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11216 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x11216 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11217 = x11216 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11218 = x11215 + x11217;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11219 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x11219 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11220 = x11219 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11221 = x11218 + x11220;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11222 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x11222 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11223 = x11222 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11224 = x11221 + x11223;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11225 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x11225 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11226 = x11225 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11227 = x11224 + x11226;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11228 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x11228 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11229 = x11228 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11230 = x11227 + x11229;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11231 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x11231 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11232 = x11231 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11233 = x11230 + x11232;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11234 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x11234 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11235 = x11234 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11236 = x11233 + x11235;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11237 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x11237 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11238 = x11237 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11239 = x11236 + x11238;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11240 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x11240 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11241 = x11240 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11242 = x11239 + x11241;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11243 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x11243 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11244 = x11243 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11245 = x11242 + x11244;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x11246 = x11168 - x11245;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x11247 = x11246 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x11248 = Fp(x11247.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11248);
            reg = x11248;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11249 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x11249 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x11250 = x11247 - x11249;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x11251 = x11250 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x11252 = x87 - x11251;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x11253 = x11251 * x11252;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x11253 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      }
      if (x87 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":136:11))
        auto x11254 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x11254 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":136:26))
        auto x11255 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x11255 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11256 = Fp(x11254.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11256);
            reg = x11256;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11257 = Fp(x11254.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11258 = x11257 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11258);
            reg = x11258;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11259 = Fp(x11254.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11260 = x11259 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11260);
            reg = x11260;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11261 = Fp(x11254.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11262 = x11261 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11262);
            reg = x11262;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11263 = Fp(x11254.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11264 = x11263 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11264);
            reg = x11264;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11265 = Fp(x11254.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11266 = x11265 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11266);
            reg = x11266;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11267 = Fp(x11254.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11268 = x11267 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11268);
            reg = x11268;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11269 = Fp(x11254.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11270 = x11269 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11270);
            reg = x11270;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11271 = Fp(x11254.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11272 = x11271 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11272);
            reg = x11272;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11273 = Fp(x11254.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11274 = x11273 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11274);
            reg = x11274;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11275 = Fp(x11254.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11276 = x11275 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11276);
            reg = x11276;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11277 = Fp(x11254.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11278 = x11277 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11278);
            reg = x11278;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11279 = Fp(x11254.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11280 = x11279 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11280);
            reg = x11280;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11281 = Fp(x11254.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11282 = x11281 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11282);
            reg = x11282;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11283 = Fp(x11254.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11284 = x11283 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11284);
            reg = x11284;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11285 = Fp(x11254.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11286 = x11285 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11286);
            reg = x11286;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11287 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x11287 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11288 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x11288 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11289 = x11288 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11290 = x11287 + x11289;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11291 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x11291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11292 = x11291 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11293 = x11290 + x11292;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11294 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x11294 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11295 = x11294 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11296 = x11293 + x11295;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11297 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x11297 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11298 = x11297 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11299 = x11296 + x11298;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11300 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x11300 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11301 = x11300 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11302 = x11299 + x11301;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11303 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x11303 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11304 = x11303 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11305 = x11302 + x11304;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11306 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x11306 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11307 = x11306 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11308 = x11305 + x11307;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11309 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x11309 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11310 = x11309 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11311 = x11308 + x11310;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11312 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x11312 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11313 = x11312 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11314 = x11311 + x11313;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11315 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x11315 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11316 = x11315 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11317 = x11314 + x11316;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11318 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x11318 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11319 = x11318 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11320 = x11317 + x11319;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11321 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x11321 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11322 = x11321 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11323 = x11320 + x11322;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11324 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x11324 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11325 = x11324 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11326 = x11323 + x11325;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11327 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x11327 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11328 = x11327 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11329 = x11326 + x11328;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11330 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x11330 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11331 = x11330 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11332 = x11329 + x11331;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x11333 = x11254 - x11332;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x11334 = x11333 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x11335 = Fp(x11334.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11335);
            reg = x11335;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11336 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x11336 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x11337 = x11334 - x11336;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x11338 = x11337 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x11339 = x87 - x11338;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x11340 = x11338 * x11339;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x11340 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x11341 = x11255 + x11334;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11342 = Fp(x11341.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11342);
            reg = x11342;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11343 = Fp(x11341.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11344 = x11343 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11344);
            reg = x11344;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11345 = Fp(x11341.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11346 = x11345 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11346);
            reg = x11346;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11347 = Fp(x11341.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11348 = x11347 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11348);
            reg = x11348;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11349 = Fp(x11341.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11350 = x11349 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11350);
            reg = x11350;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11351 = Fp(x11341.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11352 = x11351 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11352);
            reg = x11352;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11353 = Fp(x11341.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11354 = x11353 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11354);
            reg = x11354;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11355 = Fp(x11341.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11356 = x11355 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11356);
            reg = x11356;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11357 = Fp(x11341.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11358 = x11357 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11358);
            reg = x11358;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11359 = Fp(x11341.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11360 = x11359 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11360);
            reg = x11360;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11361 = Fp(x11341.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11362 = x11361 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11362);
            reg = x11362;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11363 = Fp(x11341.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11364 = x11363 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11364);
            reg = x11364;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11365 = Fp(x11341.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11366 = x11365 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11366);
            reg = x11366;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11367 = Fp(x11341.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11368 = x11367 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11368);
            reg = x11368;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11369 = Fp(x11341.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11370 = x11369 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11370);
            reg = x11370;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11371 = Fp(x11341.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11372 = x11371 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11372);
            reg = x11372;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11373 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x11373 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11374 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x11374 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11375 = x11374 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11376 = x11373 + x11375;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11377 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x11377 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11378 = x11377 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11379 = x11376 + x11378;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11380 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x11380 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11381 = x11380 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11382 = x11379 + x11381;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11383 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x11383 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11384 = x11383 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11385 = x11382 + x11384;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11386 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x11386 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11387 = x11386 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11388 = x11385 + x11387;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11389 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x11389 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11390 = x11389 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11391 = x11388 + x11390;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11392 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x11392 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11393 = x11392 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11394 = x11391 + x11393;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11395 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x11395 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11396 = x11395 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11397 = x11394 + x11396;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11398 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x11398 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11399 = x11398 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11400 = x11397 + x11399;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11401 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x11401 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11402 = x11401 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11403 = x11400 + x11402;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11404 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x11404 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11405 = x11404 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11406 = x11403 + x11405;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11407 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x11407 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11408 = x11407 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11409 = x11406 + x11408;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11410 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x11410 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11411 = x11410 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11412 = x11409 + x11411;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11413 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x11413 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11414 = x11413 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11415 = x11412 + x11414;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11416 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x11416 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11417 = x11416 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11418 = x11415 + x11417;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x11419 = x11341 - x11418;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x11420 = x11419 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x11421 = Fp(x11420.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11421);
            reg = x11421;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11422 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x11422 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x11423 = x11420 - x11422;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x11424 = x11423 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x11425 = x87 - x11424;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x11426 = x11424 * x11425;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x11426 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":136:11))
        auto x11427 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x11427 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":136:26))
        auto x11428 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x11428 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11429 = Fp(x11427.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11429);
            reg = x11429;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11430 = Fp(x11427.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11431 = x11430 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11431);
            reg = x11431;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11432 = Fp(x11427.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11433 = x11432 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11433);
            reg = x11433;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11434 = Fp(x11427.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11435 = x11434 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11435);
            reg = x11435;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11436 = Fp(x11427.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11437 = x11436 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11437);
            reg = x11437;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11438 = Fp(x11427.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11439 = x11438 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11439);
            reg = x11439;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11440 = Fp(x11427.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11441 = x11440 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11441);
            reg = x11441;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11442 = Fp(x11427.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11443 = x11442 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11443);
            reg = x11443;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11444 = Fp(x11427.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11445 = x11444 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11445);
            reg = x11445;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11446 = Fp(x11427.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11447 = x11446 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11447);
            reg = x11447;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11448 = Fp(x11427.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11449 = x11448 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11449);
            reg = x11449;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11450 = Fp(x11427.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11451 = x11450 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11451);
            reg = x11451;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11452 = Fp(x11427.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11453 = x11452 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11453);
            reg = x11453;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11454 = Fp(x11427.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11455 = x11454 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11455);
            reg = x11455;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11456 = Fp(x11427.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11457 = x11456 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11457);
            reg = x11457;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11458 = Fp(x11427.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11459 = x11458 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11459);
            reg = x11459;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11460 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x11460 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11461 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x11461 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11462 = x11461 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11463 = x11460 + x11462;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11464 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x11464 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11465 = x11464 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11466 = x11463 + x11465;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11467 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x11467 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11468 = x11467 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11469 = x11466 + x11468;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11470 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x11470 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11471 = x11470 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11472 = x11469 + x11471;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11473 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x11473 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11474 = x11473 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11475 = x11472 + x11474;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11476 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x11476 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11477 = x11476 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11478 = x11475 + x11477;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11479 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x11479 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11480 = x11479 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11481 = x11478 + x11480;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11482 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x11482 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11483 = x11482 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11484 = x11481 + x11483;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11485 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x11485 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11486 = x11485 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11487 = x11484 + x11486;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11488 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x11488 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11489 = x11488 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11490 = x11487 + x11489;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11491 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x11491 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11492 = x11491 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11493 = x11490 + x11492;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11494 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x11494 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11495 = x11494 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11496 = x11493 + x11495;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11497 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x11497 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11498 = x11497 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11499 = x11496 + x11498;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11500 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x11500 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11501 = x11500 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11502 = x11499 + x11501;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11503 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x11503 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11504 = x11503 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11505 = x11502 + x11504;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x11506 = x11427 - x11505;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x11507 = x11506 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x11508 = Fp(x11507.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11508);
            reg = x11508;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11509 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x11509 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x11510 = x11507 - x11509;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x11511 = x11510 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x11512 = x87 - x11511;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x11513 = x11511 * x11512;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x11513 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x11514 = x11428 + x11507;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11515 = Fp(x11514.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11515);
            reg = x11515;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11516 = Fp(x11514.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11517 = x11516 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11517);
            reg = x11517;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11518 = Fp(x11514.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11519 = x11518 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11519);
            reg = x11519;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11520 = Fp(x11514.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11521 = x11520 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11521);
            reg = x11521;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11522 = Fp(x11514.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11523 = x11522 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11523);
            reg = x11523;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11524 = Fp(x11514.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11525 = x11524 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11525);
            reg = x11525;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11526 = Fp(x11514.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11527 = x11526 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11527);
            reg = x11527;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11528 = Fp(x11514.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11529 = x11528 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11529);
            reg = x11529;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11530 = Fp(x11514.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11531 = x11530 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11531);
            reg = x11531;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11532 = Fp(x11514.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11533 = x11532 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11533);
            reg = x11533;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11534 = Fp(x11514.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11535 = x11534 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11535);
            reg = x11535;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11536 = Fp(x11514.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11537 = x11536 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11537);
            reg = x11537;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11538 = Fp(x11514.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11539 = x11538 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11539);
            reg = x11539;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11540 = Fp(x11514.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11541 = x11540 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11541);
            reg = x11541;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11542 = Fp(x11514.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11543 = x11542 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11543);
            reg = x11543;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x11544 = Fp(x11514.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x11545 = x11544 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11545);
            reg = x11545;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11546 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x11546 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11547 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x11547 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11548 = x11547 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11549 = x11546 + x11548;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11550 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x11550 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11551 = x11550 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11552 = x11549 + x11551;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11553 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x11553 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11554 = x11553 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11555 = x11552 + x11554;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11556 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x11556 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11557 = x11556 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11558 = x11555 + x11557;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11559 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x11559 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11560 = x11559 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11561 = x11558 + x11560;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11562 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x11562 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11563 = x11562 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11564 = x11561 + x11563;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11565 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x11565 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11566 = x11565 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11567 = x11564 + x11566;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11568 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x11568 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11569 = x11568 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11570 = x11567 + x11569;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11571 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x11571 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11572 = x11571 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11573 = x11570 + x11572;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11574 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x11574 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11575 = x11574 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11576 = x11573 + x11575;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11577 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x11577 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11578 = x11577 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11579 = x11576 + x11578;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11580 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x11580 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11581 = x11580 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11582 = x11579 + x11581;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11583 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x11583 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11584 = x11583 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11585 = x11582 + x11584;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11586 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x11586 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11587 = x11586 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11588 = x11585 + x11587;
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11589 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x11589 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x11590 = x11589 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x11591 = x11588 + x11590;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x11592 = x11514 - x11591;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x11593 = x11592 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x11594 = Fp(x11593.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11594);
            reg = x11594;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11595 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x11595 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x11596 = x11593 - x11595;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x11597 = x11596 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x11598 = x87 - x11597;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x11599 = x11597 * x11598;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x11599 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/components/mux.h":33:25))
    auto x11600 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x11600 != Fp::invalid());
    if (x11600 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11601 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x11601 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/sha.cpp":157:69))
      auto x11602 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x11602 != Fp::invalid());
      if (x11602 != 0) {
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":160:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        {
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":163:22)
      auto x11603 = x87 - x11602;
      if (x11603 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11604 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x11604 != Fp::invalid());
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x11605 = Fp(x11604.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11605);
            reg = x11605;
          }
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x11606 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11606 != Fp::invalid());
      if (x11606 != 0) {
        // loc("Top/Mux/4/OneHot/Reg10"("cirgen/circuit/rv32im/sha.cpp":177:74))
        auto x11607 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x11607 != Fp::invalid());
        if (x11607 != 0) {
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":180:9)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7);
            reg = x7;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":182:24)
        auto x11608 = x87 - x11607;
        if (x11608 != 0) {
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":184:9)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":188:18)
      auto x11609 = x87 - x11606;
      if (x11609 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11610 = args[2][137 * steps + ((cycle - 1) & mask)];
        assert(x11610 != Fp::invalid());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11610);
          reg = x11610;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":191:40))
        auto x11611 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x11611 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":191:40)
        auto x11612 = x11611 - x87;
        // loc("cirgen/circuit/rv32im/sha.cpp":191:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11612);
          reg = x11612;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11613 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x11613 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x11614 = (x11613 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11614);
          reg = x11614;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x11615 = inv(x11613);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11615);
          reg = x11615;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11616 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x11616 != Fp::invalid());
      if (x11616 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x11613 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x11617 = x87 - x11616;
      if (x11617 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x11618 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x11618 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x11619 = x11613 * x11618;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x11620 = x11619 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x11620 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      if (x11616 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11621 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x11621 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":204:19)
        auto x11622 = x87 - x11621;
        if (x11622 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":204:23)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x67);
            reg = x67;
          }
        }
        if (x11621 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":205:19)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
      }
      if (x11617 != 0) {
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11623 = x2114 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11624 = x1297 + x11623;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11625 = x2846 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11626 = x11624 + x11625;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11627 = x3633 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11628 = x11626 + x11627;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11629 = x4083 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11630 = x11628 + x11629;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11631 = x4456 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11632 = x11630 + x11631;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11633 = x4888 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11634 = x11632 + x11633;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11635 = x5233 * x70;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11636 = x11634 + x11635;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11637 = x5562 * x69;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11638 = x11636 + x11637;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11639 = x7722 * x68;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11640 = x11638 + x11639;
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11641 = x11600 * x67;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11642 = x11640 + x11641;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x11643 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x11643 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x11644 = x11643 * x66;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x11645 = x11642 + x11644;
        // loc("cirgen/circuit/rv32im/sha.cpp":208:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11645);
          reg = x11645;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":10:23)
      auto x11646 = x526 + x80;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x11647 = Fp(x11646.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11647);
          reg = x11647;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x11648 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x11648 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x11649 = x11646 - x11648;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x11650 = x11649 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x11651 = Fp(x11650.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11651);
          reg = x11651;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
      auto x11652 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x11652 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x11653 = x11650 - x11652;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x11654 = x11653 * x81;
      {
        // loc("cirgen/components/bytes.cpp":78:21)
        auto x11655 = Fp(x11654.asUInt32() & x83.asUInt32());
        // loc("cirgen/components/bytes.cpp":78:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11655);
          reg = x11655;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
      auto x11656 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x11656 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":79:11)
      auto x11657 = x11654 - x11656;
      // loc("cirgen/components/bytes.cpp":79:10)
      auto x11658 = x11657 * x81;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":13:26)
        auto x11659 = Fp(x11658.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11659);
          reg = x11659;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11660 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x11660 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:18)
      auto x11661 = x11658 - x11660;
      // loc("cirgen/circuit/rv32im/body.cpp":14:17)
      auto x11662 = x11661 * x78;
      // loc("./cirgen/components/bits.h":53:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x11662);
        reg = x11662;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11663 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x11663 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:23)
      auto x11664 = x87 - x11663;
      // loc("cirgen/circuit/rv32im/body.cpp":18:15)
      auto x11665 = x11663 * x11664;
      // loc("cirgen/circuit/rv32im/body.cpp":18:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x11665);
        reg = x11665;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x11666 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x11666 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":19:17)
      auto x11667 = x84 - x11663;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      auto x11668 = x11666 * x11667;
      // loc("cirgen/circuit/rv32im/body.cpp":19:7)
      if (x11668 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11669 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x11669 != Fp::invalid());
      host_args.at(0) = x67;
      host_args.at(1) = x11669;
      host_args.at(2) = x11613;
      host(ctx, "log", "IN SHA: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x11602 != 0) {
        {
          host_args.at(0) = x26;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x11670 = host_outs.at(0);
          auto x11671 = host_outs.at(1);
          auto x11672 = host_outs.at(2);
          auto x11673 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11670);
            reg = x11670;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11671);
            reg = x11671;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11672);
            reg = x11672;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11673);
            reg = x11673;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11674 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x11674 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11675 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x11675 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11676 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x11676 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11677 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x11677 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11601);
          reg = x11601;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11674);
          reg = x11674;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11675);
          reg = x11675;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11676);
          reg = x11676;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11677);
          reg = x11677;
        }
        {
          host_args.at(0) = x25;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x11678 = host_outs.at(0);
          auto x11679 = host_outs.at(1);
          auto x11680 = host_outs.at(2);
          auto x11681 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11678);
            reg = x11678;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11679);
            reg = x11679;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11680);
            reg = x11680;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11681);
            reg = x11681;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11682 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x11682 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11683 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x11683 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11684 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x11684 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11685 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x11685 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11601);
          reg = x11601;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11682);
          reg = x11682;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11683);
          reg = x11683;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11684);
          reg = x11684;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11685);
          reg = x11685;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11686 = args[2][124 * steps + ((cycle - 1) & mask)];
        assert(x11686 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11687 = args[2][125 * steps + ((cycle - 1) & mask)];
        assert(x11687 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11688 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x11688 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11689 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x11689 != Fp::invalid());
        // loc("./cirgen/components/u32.h":16:34)
        auto x11690 = x11687 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11691 = x11686 + x11690;
        // loc("./cirgen/components/u32.h":16:51)
        auto x11692 = x11688 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11693 = x11691 + x11692;
        // loc("./cirgen/components/u32.h":16:74)
        auto x11694 = x11689 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11695 = x11693 + x11694;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:58)
        auto x11696 = x11695 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11696);
          reg = x11696;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11697 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x11697 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11698 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x11698 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11699 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x11699 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11700 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x11700 != Fp::invalid());
        // loc("./cirgen/components/u32.h":16:34)
        auto x11701 = x11698 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11702 = x11697 + x11701;
        // loc("./cirgen/components/u32.h":16:51)
        auto x11703 = x11699 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11704 = x11702 + x11703;
        // loc("./cirgen/components/u32.h":16:74)
        auto x11705 = x11700 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11706 = x11704 + x11705;
        // loc("cirgen/circuit/rv32im/sha.cpp":218:57)
        auto x11707 = x11706 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11707);
          reg = x11707;
        }
        // loc("./cirgen/components/u32.h":16:34)
        auto x11708 = x11675 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11709 = x11674 + x11708;
        // loc("./cirgen/components/u32.h":16:51)
        auto x11710 = x11676 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11711 = x11709 + x11710;
        // loc("./cirgen/components/u32.h":16:74)
        auto x11712 = x11677 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11713 = x11711 + x11712;
        // loc("cirgen/circuit/rv32im/sha.cpp":219:16)
        auto x11714 = x11713 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":219:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11714);
          reg = x11714;
        }
        // loc("./cirgen/components/u32.h":16:34)
        auto x11715 = x11683 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11716 = x11682 + x11715;
        // loc("./cirgen/components/u32.h":16:51)
        auto x11717 = x11684 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11718 = x11716 + x11717;
        // loc("./cirgen/components/u32.h":16:74)
        auto x11719 = x11685 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x11720 = x11718 + x11719;
        // loc("cirgen/circuit/rv32im/sha.cpp":220:16)
        auto x11721 = x11720 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":220:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11721);
          reg = x11721;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x11722 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x11722 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":222:10)
        auto x11723 = x11722 * x80;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x11724 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x11724 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        auto x11725 = x11724 * x80;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x11726 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x11726 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        auto x11727 = x11726 * x80;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x11728 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x11728 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":225:10)
        auto x11729 = x11728 * x80;
        host_args.at(0) = x11723;
        host_args.at(1) = x11725;
        host_args.at(2) = x11727;
        host_args.at(3) = x11729;
        host(ctx, "log", "  FIRST_CYCLE: stateOut = %x, stateIn = %x, data0 = %x, data1 = %x", host_args.data(), 4, host_outs.data(), 0);
      }
      if (x11603 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":228:42))
        auto x11730 = args[2][130 * steps + ((cycle - 1) & mask)];
        assert(x11730 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":228:5)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11730);
          reg = x11730;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":229:40))
        auto x11731 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x11731 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":229:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11731);
          reg = x11731;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":230:36))
        auto x11732 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x11732 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11732);
          reg = x11732;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":231:36))
        auto x11733 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x11733 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11733);
          reg = x11733;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":237:52)
      auto x11734 = x87 - x11669;
      if (x86 != 0) {
        if (x11603 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
          auto x11735 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x11735 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":243:26)
          auto x11736 = x11735 + x11613;
          {
            host_args.at(0) = x11736;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x11737 = host_outs.at(0);
            auto x11738 = host_outs.at(1);
            auto x11739 = host_outs.at(2);
            auto x11740 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][110 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11737);
              reg = x11737;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11738);
              reg = x11738;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11739);
              reg = x11739;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11740);
              reg = x11740;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x11741 = args[2][110 * steps + ((cycle - 0) & mask)];
          assert(x11741 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x11742 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x11742 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x11743 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x11743 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x11744 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x11744 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11736);
            reg = x11736;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11601);
            reg = x11601;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11741);
            reg = x11741;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11742);
            reg = x11742;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11743);
            reg = x11743;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11744);
            reg = x11744;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":244:26)
          auto x11745 = x11736 + x80;
          {
            host_args.at(0) = x11745;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x11746 = host_outs.at(0);
            auto x11747 = host_outs.at(1);
            auto x11748 = host_outs.at(2);
            auto x11749 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11746);
              reg = x11746;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11747);
              reg = x11747;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11748);
              reg = x11748;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11749);
              reg = x11749;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x11750 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x11750 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x11751 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x11751 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x11752 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x11752 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x11753 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x11753 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11745);
            reg = x11745;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11601);
            reg = x11601;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11750);
            reg = x11750;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11751);
            reg = x11751;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11752);
            reg = x11752;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11753);
            reg = x11753;
          }
        }
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x11754 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x11754 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":249:24)
        auto x11755 = x11754 + x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":249:24)
        auto x11756 = x11755 - x11613;
        {
          host_args.at(0) = x11756;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x11757 = host_outs.at(0);
          auto x11758 = host_outs.at(1);
          auto x11759 = host_outs.at(2);
          auto x11760 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11757);
            reg = x11757;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11758);
            reg = x11758;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11759);
            reg = x11759;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11760);
            reg = x11760;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11761 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x11761 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11762 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x11762 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11763 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x11763 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11764 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x11764 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11756);
          reg = x11756;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11601);
          reg = x11601;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11761);
          reg = x11761;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11762);
          reg = x11762;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11763);
          reg = x11763;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11764);
          reg = x11764;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":250:24)
        auto x11765 = x24 - x11613;
        {
          host_args.at(0) = x11765;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x11766 = host_outs.at(0);
          auto x11767 = host_outs.at(1);
          auto x11768 = host_outs.at(2);
          auto x11769 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11766);
            reg = x11766;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11767);
            reg = x11767;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11768);
            reg = x11768;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11769);
            reg = x11769;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11770 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x11770 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11771 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x11771 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11772 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x11772 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11773 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x11773 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11765);
          reg = x11765;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11601);
          reg = x11601;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11770);
          reg = x11770;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11771);
          reg = x11771;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11772);
          reg = x11772;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11773);
          reg = x11773;
        }
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x11774 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x11774 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":254:24)
        auto x11775 = x11774 + x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":254:24)
        auto x11776 = x11775 - x11613;
        {
          host_args.at(0) = x11776;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x11777 = host_outs.at(0);
          auto x11778 = host_outs.at(1);
          auto x11779 = host_outs.at(2);
          auto x11780 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11777);
            reg = x11777;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11778);
            reg = x11778;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11779);
            reg = x11779;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11780);
            reg = x11780;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11781 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x11781 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11782 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x11782 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11783 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x11783 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11784 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x11784 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11776);
          reg = x11776;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11601);
          reg = x11601;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11781);
          reg = x11781;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11782);
          reg = x11782;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11783);
          reg = x11783;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11784);
          reg = x11784;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":255:24)
        auto x11785 = x23 - x11613;
        {
          host_args.at(0) = x11785;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x11786 = host_outs.at(0);
          auto x11787 = host_outs.at(1);
          auto x11788 = host_outs.at(2);
          auto x11789 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11786);
            reg = x11786;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11787);
            reg = x11787;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11788);
            reg = x11788;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11789);
            reg = x11789;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11790 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x11790 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11791 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x11791 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11792 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x11792 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11793 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x11793 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11785);
          reg = x11785;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11601);
          reg = x11601;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11790);
          reg = x11790;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11791);
          reg = x11791;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11792);
          reg = x11792;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11793);
          reg = x11793;
        }
      }
      if (x11734 != 0) {
        {
          host_args.at(0) = x86;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x11794 = host_outs.at(0);
          auto x11795 = host_outs.at(1);
          auto x11796 = host_outs.at(2);
          auto x11797 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11794);
            reg = x11794;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11795);
            reg = x11795;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11796);
            reg = x11796;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11797);
            reg = x11797;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11798 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x11798 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11799 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x11799 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11800 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x11800 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11801 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x11801 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11601);
          reg = x11601;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11798);
          reg = x11798;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11799);
          reg = x11799;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11800);
          reg = x11800;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11801);
          reg = x11801;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":260:24)
        auto x11802 = x22 - x11613;
        {
          host_args.at(0) = x11802;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x11803 = host_outs.at(0);
          auto x11804 = host_outs.at(1);
          auto x11805 = host_outs.at(2);
          auto x11806 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11803);
            reg = x11803;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11804);
            reg = x11804;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11805);
            reg = x11805;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11806);
            reg = x11806;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11807 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x11807 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11808 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x11808 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11809 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x11809 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x11810 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x11810 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11802);
          reg = x11802;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11601);
          reg = x11601;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11807);
          reg = x11807;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11808);
          reg = x11808;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11809);
          reg = x11809;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11810);
          reg = x11810;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11811 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x11811 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11812 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x11812 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11813 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x11813 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11814 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x11814 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11815 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x11815 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11816 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x11816 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11817 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x11817 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11818 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x11818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11819 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x11819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11820 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x11820 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11821 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x11821 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11822 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x11822 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11823 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x11823 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11824 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x11824 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11825 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x11825 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11826 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x11826 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11827 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x11827 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11828 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x11828 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11829 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x11829 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11830 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x11830 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11831 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x11831 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11832 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x11832 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11833 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x11833 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11834 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x11834 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11835 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x11835 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11836 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x11836 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11837 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x11837 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11838 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x11838 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11839 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x11839 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11840 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x11840 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11841 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x11841 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11842 = args[2][41 * steps + ((cycle - 2) & mask)];
      assert(x11842 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11843 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x11843 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11844 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x11844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11845 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x11845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11846 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x11846 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11847 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x11847 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11848 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x11848 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11849 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x11849 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11850 = args[2][89 * steps + ((cycle - 7) & mask)];
      assert(x11850 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11851 = args[2][90 * steps + ((cycle - 7) & mask)];
      assert(x11851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11852 = args[2][91 * steps + ((cycle - 7) & mask)];
      assert(x11852 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11853 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x11853 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11854 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x11854 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11855 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x11855 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11856 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x11856 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11857 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x11857 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11858 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x11858 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11859 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x11859 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11860 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x11860 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11861 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x11861 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11862 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x11862 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11863 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x11863 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11864 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x11864 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11865 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x11865 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11866 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x11866 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11867 = args[2][34 * steps + ((cycle - 7) & mask)];
      assert(x11867 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11868 = args[2][35 * steps + ((cycle - 7) & mask)];
      assert(x11868 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11869 = args[2][36 * steps + ((cycle - 7) & mask)];
      assert(x11869 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11870 = args[2][37 * steps + ((cycle - 7) & mask)];
      assert(x11870 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11871 = args[2][38 * steps + ((cycle - 7) & mask)];
      assert(x11871 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11872 = args[2][39 * steps + ((cycle - 7) & mask)];
      assert(x11872 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11873 = args[2][40 * steps + ((cycle - 7) & mask)];
      assert(x11873 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11874 = args[2][41 * steps + ((cycle - 7) & mask)];
      assert(x11874 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11875 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x11875 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11876 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x11876 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11877 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x11877 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11878 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x11878 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11879 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x11879 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11880 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x11880 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11881 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x11881 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11882 = args[2][89 * steps + ((cycle - 15) & mask)];
      assert(x11882 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11883 = args[2][90 * steps + ((cycle - 15) & mask)];
      assert(x11883 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11884 = args[2][91 * steps + ((cycle - 15) & mask)];
      assert(x11884 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11885 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x11885 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11886 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x11886 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11887 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x11887 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11888 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x11888 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11889 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x11889 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11890 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x11890 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11891 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x11891 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11892 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x11892 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11893 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x11893 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11894 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x11894 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11895 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x11895 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11896 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x11896 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11897 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x11897 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11898 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x11898 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11899 = args[2][34 * steps + ((cycle - 15) & mask)];
      assert(x11899 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11900 = args[2][35 * steps + ((cycle - 15) & mask)];
      assert(x11900 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11901 = args[2][36 * steps + ((cycle - 15) & mask)];
      assert(x11901 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11902 = args[2][37 * steps + ((cycle - 15) & mask)];
      assert(x11902 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11903 = args[2][38 * steps + ((cycle - 15) & mask)];
      assert(x11903 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11904 = args[2][39 * steps + ((cycle - 15) & mask)];
      assert(x11904 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11905 = args[2][40 * steps + ((cycle - 15) & mask)];
      assert(x11905 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11906 = args[2][41 * steps + ((cycle - 15) & mask)];
      assert(x11906 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11907 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x11907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11908 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x11908 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11909 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x11909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11910 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x11910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11911 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x11911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11912 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x11912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11913 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x11913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11914 = args[2][89 * steps + ((cycle - 16) & mask)];
      assert(x11914 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11915 = args[2][90 * steps + ((cycle - 16) & mask)];
      assert(x11915 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11916 = args[2][91 * steps + ((cycle - 16) & mask)];
      assert(x11916 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11917 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x11917 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11918 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x11918 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11919 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x11919 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11920 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x11920 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11921 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x11921 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11922 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x11922 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11923 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x11923 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11924 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x11924 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11925 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x11925 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11926 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x11926 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11927 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x11927 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11928 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x11928 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11929 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x11929 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11930 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x11930 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11931 = args[2][34 * steps + ((cycle - 16) & mask)];
      assert(x11931 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11932 = args[2][35 * steps + ((cycle - 16) & mask)];
      assert(x11932 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11933 = args[2][36 * steps + ((cycle - 16) & mask)];
      assert(x11933 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11934 = args[2][37 * steps + ((cycle - 16) & mask)];
      assert(x11934 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11935 = args[2][38 * steps + ((cycle - 16) & mask)];
      assert(x11935 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11936 = args[2][39 * steps + ((cycle - 16) & mask)];
      assert(x11936 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11937 = args[2][40 * steps + ((cycle - 16) & mask)];
      assert(x11937 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x11938 = args[2][41 * steps + ((cycle - 16) & mask)];
      assert(x11938 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11939 = x11893 + x11878;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11940 = x11893 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11941 = x11940 * x11878;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11942 = x11939 - x11941;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11943 = x11894 + x11879;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11944 = x11894 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11945 = x11944 * x11879;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11946 = x11943 - x11945;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11947 = x11895 + x11880;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11948 = x11895 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11949 = x11948 * x11880;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11950 = x11947 - x11949;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11951 = x11896 + x11881;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11952 = x11896 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11953 = x11952 * x11881;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11954 = x11951 - x11953;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11955 = x11897 + x11882;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11956 = x11897 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11957 = x11956 * x11882;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11958 = x11955 - x11957;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11959 = x11898 + x11883;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11960 = x11898 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11961 = x11960 * x11883;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11962 = x11959 - x11961;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11963 = x11899 + x11884;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11964 = x11899 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11965 = x11964 * x11884;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11966 = x11963 - x11965;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11967 = x11900 + x11885;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11968 = x11900 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11969 = x11968 * x11885;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11970 = x11967 - x11969;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11971 = x11901 + x11886;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11972 = x11901 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11973 = x11972 * x11886;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11974 = x11971 - x11973;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11975 = x11902 + x11887;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11976 = x11902 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11977 = x11976 * x11887;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11978 = x11975 - x11977;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11979 = x11903 + x11888;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11980 = x11903 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11981 = x11980 * x11888;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11982 = x11979 - x11981;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11983 = x11904 + x11889;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11984 = x11904 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11985 = x11984 * x11889;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11986 = x11983 - x11985;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11987 = x11905 + x11890;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11988 = x11905 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11989 = x11988 * x11890;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11990 = x11987 - x11989;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11991 = x11906 + x11891;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11992 = x11906 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11993 = x11992 * x11891;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11994 = x11991 - x11993;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11995 = x11875 + x11892;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11996 = x11875 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x11997 = x11996 * x11892;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11998 = x11995 - x11997;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x11999 = x11876 + x11893;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12000 = x11876 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12001 = x12000 * x11893;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12002 = x11999 - x12001;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12003 = x11877 + x11894;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12004 = x11877 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12005 = x12004 * x11894;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12006 = x12003 - x12005;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12007 = x11878 + x11895;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12008 = x11878 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12009 = x12008 * x11895;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12010 = x12007 - x12009;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12011 = x11879 + x11896;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12012 = x11879 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12013 = x12012 * x11896;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12014 = x12011 - x12013;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12015 = x11880 + x11897;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12016 = x11880 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12017 = x12016 * x11897;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12018 = x12015 - x12017;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12019 = x11881 + x11898;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12020 = x11881 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12021 = x12020 * x11898;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12022 = x12019 - x12021;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12023 = x11882 + x11899;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12024 = x11882 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12025 = x12024 * x11899;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12026 = x12023 - x12025;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12027 = x11883 + x11900;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12028 = x11883 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12029 = x12028 * x11900;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12030 = x12027 - x12029;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12031 = x11884 + x11901;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12032 = x11884 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12033 = x12032 * x11901;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12034 = x12031 - x12033;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12035 = x11885 + x11902;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12036 = x11885 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12037 = x12036 * x11902;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12038 = x12035 - x12037;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12039 = x11886 + x11903;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12040 = x11886 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12041 = x12040 * x11903;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12042 = x12039 - x12041;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12043 = x11887 + x11904;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12044 = x11887 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12045 = x12044 * x11904;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12046 = x12043 - x12045;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12047 = x11888 + x11905;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12048 = x11888 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12049 = x12048 * x11905;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12050 = x12047 - x12049;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12051 = x11889 + x11906;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12052 = x11889 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12053 = x12052 * x11906;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12054 = x12051 - x12053;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12055 = x11882 + x11942;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12056 = x12024 * x11942;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12057 = x12055 - x12056;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12058 = x11883 + x11946;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12059 = x12028 * x11946;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12060 = x12058 - x12059;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12061 = x11884 + x11950;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12062 = x12032 * x11950;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12063 = x12061 - x12062;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12064 = x11885 + x11954;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12065 = x12036 * x11954;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12066 = x12064 - x12065;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12067 = x11886 + x11958;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12068 = x12040 * x11958;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12069 = x12067 - x12068;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12070 = x11887 + x11962;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12071 = x12044 * x11962;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12072 = x12070 - x12071;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12073 = x11888 + x11966;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12074 = x12048 * x11966;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12075 = x12073 - x12074;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12076 = x11889 + x11970;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12077 = x12052 * x11970;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12078 = x12076 - x12077;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12079 = x11890 + x11974;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12080 = x11890 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12081 = x12080 * x11974;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12082 = x12079 - x12081;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12083 = x11891 + x11978;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12084 = x11891 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12085 = x12084 * x11978;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12086 = x12083 - x12085;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12087 = x11892 + x11982;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12088 = x11892 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12089 = x12088 * x11982;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12090 = x12087 - x12089;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12091 = x11893 + x11986;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12092 = x11940 * x11986;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12093 = x12091 - x12092;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12094 = x11894 + x11990;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12095 = x11944 * x11990;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12096 = x12094 - x12095;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12097 = x11895 + x11994;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12098 = x11948 * x11994;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12099 = x12097 - x12098;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12100 = x11896 + x11998;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12101 = x11952 * x11998;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12102 = x12100 - x12101;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12103 = x11897 + x12002;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12104 = x11956 * x12002;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12105 = x12103 - x12104;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12106 = x11898 + x12006;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12107 = x11960 * x12006;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12108 = x12106 - x12107;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12109 = x11899 + x12010;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12110 = x11964 * x12010;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12111 = x12109 - x12110;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12112 = x11900 + x12014;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12113 = x11968 * x12014;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12114 = x12112 - x12113;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12115 = x11901 + x12018;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12116 = x11972 * x12018;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12117 = x12115 - x12116;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12118 = x11902 + x12022;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12119 = x11976 * x12022;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12120 = x12118 - x12119;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12121 = x11903 + x12026;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12122 = x11980 * x12026;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12123 = x12121 - x12122;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12124 = x11904 + x12030;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12125 = x11984 * x12030;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12126 = x12124 - x12125;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12127 = x11905 + x12034;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12128 = x11988 * x12034;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12129 = x12127 - x12128;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12130 = x11906 + x12038;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12131 = x11992 * x12038;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12132 = x12130 - x12131;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12133 = x11875 + x12042;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12134 = x11996 * x12042;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12135 = x12133 - x12134;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12136 = x11876 + x12046;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12137 = x12000 * x12046;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12138 = x12136 - x12137;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12139 = x11877 + x12050;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12140 = x12004 * x12050;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12141 = x12139 - x12140;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12142 = x11878 + x12054;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12143 = x12008 * x12054;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12144 = x12142 - x12143;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12145 = x11879 + x11890;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12146 = x12012 * x11890;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12147 = x12145 - x12146;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12148 = x11880 + x11891;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12149 = x12016 * x11891;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12150 = x12148 - x12149;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12151 = x11881 + x11892;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12152 = x12020 * x11892;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12153 = x12151 - x12152;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12154 = x11830 + x11821;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12155 = x11830 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12156 = x12155 * x11821;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12157 = x12154 - x12156;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12158 = x11831 + x11822;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12159 = x11831 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12160 = x12159 * x11822;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12161 = x12158 - x12160;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12162 = x11832 + x11823;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12163 = x11832 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12164 = x12163 * x11823;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12165 = x12162 - x12164;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12166 = x11833 + x11824;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12167 = x11833 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12168 = x12167 * x11824;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12169 = x12166 - x12168;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12170 = x11834 + x11825;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12171 = x11834 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12172 = x12171 * x11825;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12173 = x12170 - x12172;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12174 = x11835 + x11826;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12175 = x11835 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12176 = x12175 * x11826;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12177 = x12174 - x12176;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12178 = x11836 + x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12179 = x11836 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12180 = x12179 * x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12181 = x12178 - x12180;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12182 = x11837 + x11828;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12183 = x11837 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12184 = x12183 * x11828;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12185 = x12182 - x12184;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12186 = x11838 + x11829;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12187 = x11838 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12188 = x12187 * x11829;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12189 = x12186 - x12188;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12190 = x11839 + x11830;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12191 = x11839 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12192 = x12191 * x11830;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12193 = x12190 - x12192;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12194 = x11840 + x11831;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12195 = x11840 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12196 = x12195 * x11831;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12197 = x12194 - x12196;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12198 = x11841 + x11832;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12199 = x11841 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12200 = x12199 * x11832;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12201 = x12198 - x12200;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12202 = x11842 + x11833;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12203 = x11842 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12204 = x12203 * x11833;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12205 = x12202 - x12204;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12206 = x11811 + x11834;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12207 = x11811 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12208 = x12207 * x11834;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12209 = x12206 - x12208;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12210 = x11812 + x11835;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12211 = x11812 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12212 = x12211 * x11835;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12213 = x12210 - x12212;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12214 = x11813 + x11836;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12215 = x11813 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12216 = x12215 * x11836;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12217 = x12214 - x12216;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12218 = x11814 + x11837;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12219 = x11814 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12220 = x12219 * x11837;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12221 = x12218 - x12220;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12222 = x11815 + x11838;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12223 = x11815 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12224 = x12223 * x11838;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12225 = x12222 - x12224;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12226 = x11816 + x11839;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12227 = x11816 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12228 = x12227 * x11839;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12229 = x12226 - x12228;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12230 = x11817 + x11840;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12231 = x11817 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12232 = x12231 * x11840;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12233 = x12230 - x12232;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12234 = x11818 + x11841;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12235 = x11818 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12236 = x12235 * x11841;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12237 = x12234 - x12236;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12238 = x11819 + x11842;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12239 = x11819 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12240 = x12239 * x11842;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12241 = x12238 - x12240;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12242 = x11828 + x12157;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12243 = x11828 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12244 = x12243 * x12157;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12245 = x12242 - x12244;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12246 = x11829 + x12161;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12247 = x11829 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12248 = x12247 * x12161;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12249 = x12246 - x12248;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12250 = x11830 + x12165;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12251 = x12155 * x12165;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12252 = x12250 - x12251;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12253 = x11831 + x12169;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12254 = x12159 * x12169;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12255 = x12253 - x12254;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12256 = x11832 + x12173;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12257 = x12163 * x12173;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12258 = x12256 - x12257;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12259 = x11833 + x12177;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12260 = x12167 * x12177;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12261 = x12259 - x12260;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12262 = x11834 + x12181;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12263 = x12171 * x12181;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12264 = x12262 - x12263;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12265 = x11835 + x12185;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12266 = x12175 * x12185;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12267 = x12265 - x12266;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12268 = x11836 + x12189;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12269 = x12179 * x12189;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12270 = x12268 - x12269;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12271 = x11837 + x12193;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12272 = x12183 * x12193;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12273 = x12271 - x12272;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12274 = x11838 + x12197;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12275 = x12187 * x12197;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12276 = x12274 - x12275;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12277 = x11839 + x12201;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12278 = x12191 * x12201;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12279 = x12277 - x12278;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12280 = x11840 + x12205;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12281 = x12195 * x12205;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12282 = x12280 - x12281;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12283 = x11841 + x12209;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12284 = x12199 * x12209;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12285 = x12283 - x12284;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12286 = x11842 + x12213;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12287 = x12203 * x12213;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12288 = x12286 - x12287;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12289 = x11811 + x12217;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12290 = x12207 * x12217;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12291 = x12289 - x12290;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12292 = x11812 + x12221;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12293 = x12211 * x12221;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12294 = x12292 - x12293;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12295 = x11813 + x12225;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12296 = x12215 * x12225;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12297 = x12295 - x12296;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12298 = x11814 + x12229;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12299 = x12219 * x12229;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12300 = x12298 - x12299;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12301 = x11815 + x12233;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12302 = x12223 * x12233;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12303 = x12301 - x12302;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12304 = x11816 + x12237;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12305 = x12227 * x12237;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12306 = x12304 - x12305;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12307 = x11817 + x12241;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12308 = x12231 * x12241;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12309 = x12307 - x12308;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12310 = x11818 + x11820;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12311 = x12235 * x11820;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12312 = x12310 - x12311;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12313 = x11819 + x11821;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12314 = x12239 * x11821;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12315 = x12313 - x12314;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12316 = x11820 + x11822;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12317 = x11820 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12318 = x12317 * x11822;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12319 = x12316 - x12318;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12320 = x11821 + x11823;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12321 = x11821 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12322 = x12321 * x11823;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12323 = x12320 - x12322;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12324 = x11822 + x11824;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12325 = x11822 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12326 = x12325 * x11824;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12327 = x12324 - x12326;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12328 = x11823 + x11825;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12329 = x11823 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12330 = x12329 * x11825;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12331 = x12328 - x12330;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12332 = x11824 + x11826;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12333 = x11824 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12334 = x12333 * x11826;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12335 = x12332 - x12334;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12336 = x11825 + x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12337 = x11825 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12338 = x12337 * x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12339 = x12336 - x12338;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12340 = x11826 + x11828;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12341 = x11826 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12342 = x12341 * x11828;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12343 = x12340 - x12342;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12344 = x11827 + x11829;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12345 = x11827 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x12346 = x12345 * x11829;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x12347 = x12344 - x12346;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12348 = x11908 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12349 = x11907 + x12348;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12350 = x11909 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12351 = x12349 + x12350;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12352 = x11910 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12353 = x12351 + x12352;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12354 = x11911 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12355 = x12353 + x12354;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12356 = x11912 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12357 = x12355 + x12356;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12358 = x11913 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12359 = x12357 + x12358;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12360 = x11914 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12361 = x12359 + x12360;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12362 = x11915 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12363 = x12361 + x12362;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12364 = x11916 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12365 = x12363 + x12364;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12366 = x11917 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12367 = x12365 + x12366;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12368 = x11918 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12369 = x12367 + x12368;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12370 = x11919 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12371 = x12369 + x12370;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12372 = x11920 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12373 = x12371 + x12372;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12374 = x11921 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12375 = x12373 + x12374;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12376 = x11922 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12377 = x12375 + x12376;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12378 = x11924 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12379 = x11923 + x12378;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12380 = x11925 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12381 = x12379 + x12380;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12382 = x11926 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12383 = x12381 + x12382;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12384 = x11927 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12385 = x12383 + x12384;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12386 = x11928 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12387 = x12385 + x12386;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12388 = x11929 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12389 = x12387 + x12388;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12390 = x11930 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12391 = x12389 + x12390;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12392 = x11931 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12393 = x12391 + x12392;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12394 = x11932 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12395 = x12393 + x12394;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12396 = x11933 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12397 = x12395 + x12396;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12398 = x11934 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12399 = x12397 + x12398;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12400 = x11935 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12401 = x12399 + x12400;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12402 = x11936 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12403 = x12401 + x12402;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12404 = x11937 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12405 = x12403 + x12404;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12406 = x11938 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12407 = x12405 + x12406;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12408 = x12060 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12409 = x12057 + x12408;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12410 = x12063 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12411 = x12409 + x12410;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12412 = x12066 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12413 = x12411 + x12412;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12414 = x12069 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12415 = x12413 + x12414;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12416 = x12072 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12417 = x12415 + x12416;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12418 = x12075 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12419 = x12417 + x12418;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12420 = x12078 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12421 = x12419 + x12420;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12422 = x12082 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12423 = x12421 + x12422;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12424 = x12086 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12425 = x12423 + x12424;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12426 = x12090 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12427 = x12425 + x12426;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12428 = x12093 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12429 = x12427 + x12428;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12430 = x12096 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12431 = x12429 + x12430;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12432 = x12099 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12433 = x12431 + x12432;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12434 = x12102 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12435 = x12433 + x12434;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12436 = x12105 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12437 = x12435 + x12436;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12438 = x12111 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12439 = x12108 + x12438;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12440 = x12114 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12441 = x12439 + x12440;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12442 = x12117 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12443 = x12441 + x12442;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12444 = x12120 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12445 = x12443 + x12444;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12446 = x12123 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12447 = x12445 + x12446;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12448 = x12126 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12449 = x12447 + x12448;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12450 = x12129 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12451 = x12449 + x12450;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12452 = x12132 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12453 = x12451 + x12452;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12454 = x12135 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12455 = x12453 + x12454;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12456 = x12138 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12457 = x12455 + x12456;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12458 = x12141 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12459 = x12457 + x12458;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12460 = x12144 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12461 = x12459 + x12460;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12462 = x12147 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12463 = x12461 + x12462;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12464 = x12150 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12465 = x12463 + x12464;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12466 = x12153 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12467 = x12465 + x12466;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12468 = x11844 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12469 = x11843 + x12468;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12470 = x11845 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12471 = x12469 + x12470;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12472 = x11846 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12473 = x12471 + x12472;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12474 = x11847 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12475 = x12473 + x12474;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12476 = x11848 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12477 = x12475 + x12476;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12478 = x11849 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12479 = x12477 + x12478;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12480 = x11850 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12481 = x12479 + x12480;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12482 = x11851 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12483 = x12481 + x12482;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12484 = x11852 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12485 = x12483 + x12484;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12486 = x11853 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12487 = x12485 + x12486;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12488 = x11854 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12489 = x12487 + x12488;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12490 = x11855 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12491 = x12489 + x12490;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12492 = x11856 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12493 = x12491 + x12492;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12494 = x11857 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12495 = x12493 + x12494;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12496 = x11858 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12497 = x12495 + x12496;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12498 = x11860 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12499 = x11859 + x12498;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12500 = x11861 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12501 = x12499 + x12500;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12502 = x11862 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12503 = x12501 + x12502;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12504 = x11863 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12505 = x12503 + x12504;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12506 = x11864 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12507 = x12505 + x12506;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12508 = x11865 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12509 = x12507 + x12508;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12510 = x11866 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12511 = x12509 + x12510;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12512 = x11867 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12513 = x12511 + x12512;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12514 = x11868 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12515 = x12513 + x12514;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12516 = x11869 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12517 = x12515 + x12516;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12518 = x11870 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12519 = x12517 + x12518;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12520 = x11871 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12521 = x12519 + x12520;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12522 = x11872 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12523 = x12521 + x12522;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12524 = x11873 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12525 = x12523 + x12524;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12526 = x11874 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12527 = x12525 + x12526;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12528 = x12249 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12529 = x12245 + x12528;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12530 = x12252 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12531 = x12529 + x12530;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12532 = x12255 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12533 = x12531 + x12532;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12534 = x12258 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12535 = x12533 + x12534;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12536 = x12261 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12537 = x12535 + x12536;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12538 = x12264 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12539 = x12537 + x12538;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12540 = x12267 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12541 = x12539 + x12540;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12542 = x12270 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12543 = x12541 + x12542;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12544 = x12273 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12545 = x12543 + x12544;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12546 = x12276 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12547 = x12545 + x12546;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12548 = x12279 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12549 = x12547 + x12548;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12550 = x12282 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12551 = x12549 + x12550;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12552 = x12285 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12553 = x12551 + x12552;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12554 = x12288 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12555 = x12553 + x12554;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12556 = x12291 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12557 = x12555 + x12556;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12558 = x12297 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12559 = x12294 + x12558;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12560 = x12300 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12561 = x12559 + x12560;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12562 = x12303 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12563 = x12561 + x12562;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12564 = x12306 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12565 = x12563 + x12564;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12566 = x12309 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12567 = x12565 + x12566;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12568 = x12312 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12569 = x12567 + x12568;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12570 = x12315 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12571 = x12569 + x12570;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12572 = x12319 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12573 = x12571 + x12572;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12574 = x12323 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12575 = x12573 + x12574;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12576 = x12327 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12577 = x12575 + x12576;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12578 = x12331 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12579 = x12577 + x12578;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12580 = x12335 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12581 = x12579 + x12580;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12582 = x12339 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12583 = x12581 + x12582;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12584 = x12343 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12585 = x12583 + x12584;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x12586 = x12347 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x12587 = x12585 + x12586;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x12588 = x12497 + x12557;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x12589 = x12527 + x12587;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x12590 = x12437 + x12588;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x12591 = x12467 + x12589;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x12592 = x12377 + x12590;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x12593 = x12407 + x12591;
      // loc("cirgen/circuit/rv32im/sha.cpp":305:5)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12592);
        reg = x12592;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":305:5)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12593);
        reg = x12593;
      }
      if (x11669 != 0) {
        {
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12594 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x12594 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12595 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x12595 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12596 = x12595 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12597 = x12594 + x12596;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12598 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x12598 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12599 = x12598 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12600 = x12597 + x12599;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12601 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x12601 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12602 = x12601 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12603 = x12600 + x12602;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12604 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x12604 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12605 = x12604 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12606 = x12603 + x12605;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12607 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x12607 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12608 = x12607 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12609 = x12606 + x12608;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12610 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x12610 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12611 = x12610 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12612 = x12609 + x12611;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12613 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x12613 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12614 = x12613 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12615 = x12612 + x12614;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12616 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x12616 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12617 = x12616 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12618 = x12615 + x12617;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12619 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x12619 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12620 = x12619 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12621 = x12618 + x12620;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12622 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x12622 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12623 = x12622 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12624 = x12621 + x12623;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12625 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x12625 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12626 = x12625 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12627 = x12624 + x12626;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12628 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x12628 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12629 = x12628 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12630 = x12627 + x12629;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12631 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x12631 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12632 = x12631 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12633 = x12630 + x12632;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12634 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x12634 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12635 = x12634 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12636 = x12633 + x12635;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12637 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x12637 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12638 = x12637 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12639 = x12636 + x12638;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x12640 = x86 - x12639;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x12641 = x12640 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12641);
          reg = x12641;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12642 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x12642 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12643 = Fp(x12642.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12643);
            reg = x12643;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12644 = Fp(x12642.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12645 = x12644 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12645);
            reg = x12645;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12646 = Fp(x12642.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12647 = x12646 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12647);
            reg = x12647;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12648 = Fp(x12642.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12649 = x12648 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12649);
            reg = x12649;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12650 = Fp(x12642.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12651 = x12650 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12651);
            reg = x12651;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12652 = Fp(x12642.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12653 = x12652 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12653);
            reg = x12653;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12654 = Fp(x12642.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12655 = x12654 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12655);
            reg = x12655;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12656 = Fp(x12642.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12657 = x12656 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12657);
            reg = x12657;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12658 = Fp(x12642.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12659 = x12658 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12659);
            reg = x12659;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12660 = Fp(x12642.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12661 = x12660 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12661);
            reg = x12661;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12662 = Fp(x12642.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12663 = x12662 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12663);
            reg = x12663;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12664 = Fp(x12642.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12665 = x12664 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12665);
            reg = x12665;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12666 = Fp(x12642.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12667 = x12666 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12667);
            reg = x12667;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12668 = Fp(x12642.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12669 = x12668 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12669);
            reg = x12669;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12670 = Fp(x12642.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12671 = x12670 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12671);
            reg = x12671;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12672 = Fp(x12642.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12673 = x12672 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12673);
            reg = x12673;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12674 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x12674 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12675 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x12675 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12676 = x12675 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12677 = x12674 + x12676;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12678 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x12678 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12679 = x12678 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12680 = x12677 + x12679;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12681 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x12681 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12682 = x12681 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12683 = x12680 + x12682;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12684 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x12684 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12685 = x12684 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12686 = x12683 + x12685;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12687 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x12687 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12688 = x12687 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12689 = x12686 + x12688;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12690 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x12690 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12691 = x12690 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12692 = x12689 + x12691;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12693 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x12693 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12694 = x12693 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12695 = x12692 + x12694;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12696 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x12696 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12697 = x12696 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12698 = x12695 + x12697;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12699 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x12699 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12700 = x12699 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12701 = x12698 + x12700;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12702 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x12702 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12703 = x12702 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12704 = x12701 + x12703;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12705 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x12705 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12706 = x12705 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12707 = x12704 + x12706;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12708 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x12708 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12709 = x12708 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12710 = x12707 + x12709;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12711 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x12711 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12712 = x12711 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12713 = x12710 + x12712;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12714 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x12714 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12715 = x12714 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12716 = x12713 + x12715;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12717 = args[2][41 * steps + ((cycle - 0) & mask)];
        assert(x12717 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12718 = x12717 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12719 = x12716 + x12718;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x12720 = x12642 - x12719;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x12721 = x12720 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12721);
          reg = x12721;
        }
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12722 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x12722 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12723 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x12723 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12724 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x12724 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12725 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x12725 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
        auto x12726 = x12724 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
        auto x12727 = x12725 + x12726;
        // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
        auto x12728 = x12722 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
        auto x12729 = x12723 + x12728;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12730 = Fp(x12727.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12730);
            reg = x12730;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12731 = Fp(x12727.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12732 = x12731 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12732);
            reg = x12732;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12733 = Fp(x12727.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12734 = x12733 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12734);
            reg = x12734;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12735 = Fp(x12727.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12736 = x12735 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12736);
            reg = x12736;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12737 = Fp(x12727.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12738 = x12737 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12738);
            reg = x12738;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12739 = Fp(x12727.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12740 = x12739 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12740);
            reg = x12740;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12741 = Fp(x12727.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12742 = x12741 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12742);
            reg = x12742;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12743 = Fp(x12727.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12744 = x12743 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12744);
            reg = x12744;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12745 = Fp(x12727.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12746 = x12745 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12746);
            reg = x12746;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12747 = Fp(x12727.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12748 = x12747 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12748);
            reg = x12748;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12749 = Fp(x12727.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12750 = x12749 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12750);
            reg = x12750;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12751 = Fp(x12727.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12752 = x12751 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12752);
            reg = x12752;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12753 = Fp(x12727.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12754 = x12753 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12754);
            reg = x12754;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12755 = Fp(x12727.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12756 = x12755 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12756);
            reg = x12756;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12757 = Fp(x12727.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12758 = x12757 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12758);
            reg = x12758;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12759 = Fp(x12727.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12760 = x12759 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12760);
            reg = x12760;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12761 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x12761 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12762 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x12762 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12763 = x12762 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12764 = x12761 + x12763;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12765 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x12765 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12766 = x12765 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12767 = x12764 + x12766;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12768 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x12768 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12769 = x12768 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12770 = x12767 + x12769;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12771 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x12771 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12772 = x12771 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12773 = x12770 + x12772;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12774 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x12774 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12775 = x12774 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12776 = x12773 + x12775;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12777 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x12777 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12778 = x12777 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12779 = x12776 + x12778;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12780 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x12780 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12781 = x12780 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12782 = x12779 + x12781;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12783 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x12783 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12784 = x12783 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12785 = x12782 + x12784;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12786 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x12786 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12787 = x12786 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12788 = x12785 + x12787;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12789 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x12789 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12790 = x12789 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12791 = x12788 + x12790;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12792 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x12792 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12793 = x12792 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12794 = x12791 + x12793;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12795 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x12795 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12796 = x12795 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12797 = x12794 + x12796;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12798 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x12798 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12799 = x12798 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12800 = x12797 + x12799;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12801 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x12801 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12802 = x12801 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12803 = x12800 + x12802;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12804 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x12804 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12805 = x12804 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12806 = x12803 + x12805;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x12807 = x12727 - x12806;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x12808 = x12807 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12808);
          reg = x12808;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12809 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x12809 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":113:30)
        auto x12810 = x12729 + x12809;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12811 = Fp(x12810.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12811);
            reg = x12811;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12812 = Fp(x12810.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12813 = x12812 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12813);
            reg = x12813;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12814 = Fp(x12810.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12815 = x12814 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12815);
            reg = x12815;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12816 = Fp(x12810.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12817 = x12816 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12817);
            reg = x12817;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12818 = Fp(x12810.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12819 = x12818 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12819);
            reg = x12819;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12820 = Fp(x12810.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12821 = x12820 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12821);
            reg = x12821;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12822 = Fp(x12810.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12823 = x12822 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12823);
            reg = x12823;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12824 = Fp(x12810.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12825 = x12824 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12825);
            reg = x12825;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12826 = Fp(x12810.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12827 = x12826 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12827);
            reg = x12827;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12828 = Fp(x12810.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12829 = x12828 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12829);
            reg = x12829;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12830 = Fp(x12810.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12831 = x12830 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12831);
            reg = x12831;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12832 = Fp(x12810.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12833 = x12832 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12833);
            reg = x12833;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12834 = Fp(x12810.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12835 = x12834 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12835);
            reg = x12835;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12836 = Fp(x12810.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12837 = x12836 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12837);
            reg = x12837;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12838 = Fp(x12810.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12839 = x12838 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12839);
            reg = x12839;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12840 = Fp(x12810.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12841 = x12840 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12841);
            reg = x12841;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12842 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x12842 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12843 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x12843 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12844 = x12843 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12845 = x12842 + x12844;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12846 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x12846 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12847 = x12846 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12848 = x12845 + x12847;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12849 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x12849 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12850 = x12849 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12851 = x12848 + x12850;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12852 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x12852 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12853 = x12852 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12854 = x12851 + x12853;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12855 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x12855 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12856 = x12855 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12857 = x12854 + x12856;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12858 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x12858 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12859 = x12858 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12860 = x12857 + x12859;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12861 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x12861 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12862 = x12861 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12863 = x12860 + x12862;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12864 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x12864 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12865 = x12864 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12866 = x12863 + x12865;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12867 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x12867 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12868 = x12867 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12869 = x12866 + x12868;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12870 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x12870 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12871 = x12870 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12872 = x12869 + x12871;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12873 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x12873 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12874 = x12873 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12875 = x12872 + x12874;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12876 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x12876 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12877 = x12876 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12878 = x12875 + x12877;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12879 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x12879 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12880 = x12879 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12881 = x12878 + x12880;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12882 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x12882 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12883 = x12882 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12884 = x12881 + x12883;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12885 = args[2][41 * steps + ((cycle - 0) & mask)];
        assert(x12885 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12886 = x12885 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12887 = x12884 + x12886;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x12888 = x12810 - x12887;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x12889 = x12888 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12889);
          reg = x12889;
        }
      }
      if (x11734 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":136:11))
        auto x12890 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x12890 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg10"("cirgen/circuit/rv32im/sha.cpp":136:26))
        auto x12891 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x12891 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12892 = Fp(x12890.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12892);
            reg = x12892;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12893 = Fp(x12890.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12894 = x12893 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12894);
            reg = x12894;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12895 = Fp(x12890.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12896 = x12895 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12896);
            reg = x12896;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12897 = Fp(x12890.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12898 = x12897 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12898);
            reg = x12898;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12899 = Fp(x12890.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12900 = x12899 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12900);
            reg = x12900;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12901 = Fp(x12890.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12902 = x12901 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12902);
            reg = x12902;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12903 = Fp(x12890.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12904 = x12903 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12904);
            reg = x12904;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12905 = Fp(x12890.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12906 = x12905 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12906);
            reg = x12906;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12907 = Fp(x12890.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12908 = x12907 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12908);
            reg = x12908;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12909 = Fp(x12890.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12910 = x12909 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12910);
            reg = x12910;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12911 = Fp(x12890.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12912 = x12911 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12912);
            reg = x12912;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12913 = Fp(x12890.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12914 = x12913 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12914);
            reg = x12914;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12915 = Fp(x12890.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12916 = x12915 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12916);
            reg = x12916;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12917 = Fp(x12890.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12918 = x12917 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12918);
            reg = x12918;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12919 = Fp(x12890.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12920 = x12919 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12920);
            reg = x12920;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12921 = Fp(x12890.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12922 = x12921 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12922);
            reg = x12922;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12923 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x12923 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12924 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x12924 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12925 = x12924 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12926 = x12923 + x12925;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12927 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x12927 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12928 = x12927 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12929 = x12926 + x12928;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12930 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x12930 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12931 = x12930 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12932 = x12929 + x12931;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12933 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x12933 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12934 = x12933 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12935 = x12932 + x12934;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12936 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x12936 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12937 = x12936 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12938 = x12935 + x12937;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12939 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x12939 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12940 = x12939 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12941 = x12938 + x12940;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12942 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x12942 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12943 = x12942 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12944 = x12941 + x12943;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12945 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x12945 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12946 = x12945 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12947 = x12944 + x12946;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12948 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x12948 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12949 = x12948 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12950 = x12947 + x12949;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12951 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x12951 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12952 = x12951 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12953 = x12950 + x12952;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12954 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x12954 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12955 = x12954 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12956 = x12953 + x12955;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12957 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x12957 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12958 = x12957 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12959 = x12956 + x12958;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12960 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x12960 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12961 = x12960 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12962 = x12959 + x12961;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12963 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x12963 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12964 = x12963 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12965 = x12962 + x12964;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12966 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x12966 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x12967 = x12966 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x12968 = x12965 + x12967;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x12969 = x12890 - x12968;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x12970 = x12969 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12970);
          reg = x12970;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x12971 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x12971 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":113:30)
        auto x12972 = x12891 + x12971;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12973 = Fp(x12972.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12973);
            reg = x12973;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12974 = Fp(x12972.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12975 = x12974 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12975);
            reg = x12975;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12976 = Fp(x12972.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12977 = x12976 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12977);
            reg = x12977;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12978 = Fp(x12972.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12979 = x12978 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12979);
            reg = x12979;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12980 = Fp(x12972.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12981 = x12980 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12981);
            reg = x12981;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12982 = Fp(x12972.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12983 = x12982 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12983);
            reg = x12983;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12984 = Fp(x12972.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12985 = x12984 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12985);
            reg = x12985;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12986 = Fp(x12972.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12987 = x12986 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12987);
            reg = x12987;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12988 = Fp(x12972.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12989 = x12988 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12989);
            reg = x12989;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12990 = Fp(x12972.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12991 = x12990 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12991);
            reg = x12991;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12992 = Fp(x12972.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12993 = x12992 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12993);
            reg = x12993;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12994 = Fp(x12972.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12995 = x12994 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12995);
            reg = x12995;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12996 = Fp(x12972.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12997 = x12996 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12997);
            reg = x12997;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x12998 = Fp(x12972.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x12999 = x12998 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12999);
            reg = x12999;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13000 = Fp(x12972.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13001 = x13000 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13001);
            reg = x13001;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13002 = Fp(x12972.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13003 = x13002 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13003);
            reg = x13003;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13004 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x13004 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13005 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x13005 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13006 = x13005 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13007 = x13004 + x13006;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13008 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x13008 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13009 = x13008 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13010 = x13007 + x13009;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13011 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x13011 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13012 = x13011 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13013 = x13010 + x13012;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13014 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x13014 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13015 = x13014 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13016 = x13013 + x13015;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13017 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x13017 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13018 = x13017 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13019 = x13016 + x13018;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13020 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x13020 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13021 = x13020 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13022 = x13019 + x13021;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13023 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x13023 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13024 = x13023 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13025 = x13022 + x13024;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13026 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x13026 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13027 = x13026 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13028 = x13025 + x13027;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13029 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x13029 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13030 = x13029 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13031 = x13028 + x13030;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13032 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x13032 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13033 = x13032 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13034 = x13031 + x13033;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13035 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x13035 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13036 = x13035 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13037 = x13034 + x13036;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13038 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x13038 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13039 = x13038 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13040 = x13037 + x13039;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13041 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x13041 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13042 = x13041 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13043 = x13040 + x13042;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13044 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x13044 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13045 = x13044 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13046 = x13043 + x13045;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13047 = args[2][41 * steps + ((cycle - 0) & mask)];
        assert(x13047 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13048 = x13047 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13049 = x13046 + x13048;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x13050 = x12972 - x13049;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x13051 = x13050 * x8;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13051);
          reg = x13051;
        }
      }
      if (x11669 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13052 = args[2][144 * steps + ((cycle - 4) & mask)];
        assert(x13052 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13053 = args[2][145 * steps + ((cycle - 4) & mask)];
        assert(x13053 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13054 = args[2][146 * steps + ((cycle - 4) & mask)];
        assert(x13054 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13055 = args[2][147 * steps + ((cycle - 4) & mask)];
        assert(x13055 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13056 = args[2][148 * steps + ((cycle - 4) & mask)];
        assert(x13056 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13057 = args[2][149 * steps + ((cycle - 4) & mask)];
        assert(x13057 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13058 = args[2][150 * steps + ((cycle - 4) & mask)];
        assert(x13058 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13059 = args[2][151 * steps + ((cycle - 4) & mask)];
        assert(x13059 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13060 = args[2][152 * steps + ((cycle - 4) & mask)];
        assert(x13060 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13061 = args[2][153 * steps + ((cycle - 4) & mask)];
        assert(x13061 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13062 = args[2][154 * steps + ((cycle - 4) & mask)];
        assert(x13062 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13063 = args[2][155 * steps + ((cycle - 4) & mask)];
        assert(x13063 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13064 = args[2][156 * steps + ((cycle - 4) & mask)];
        assert(x13064 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13065 = args[2][157 * steps + ((cycle - 4) & mask)];
        assert(x13065 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13066 = args[2][158 * steps + ((cycle - 4) & mask)];
        assert(x13066 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13067 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x13067 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13068 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x13068 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13069 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x13069 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13070 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x13070 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13071 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x13071 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13072 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x13072 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13073 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x13073 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13074 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x13074 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13075 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x13075 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13076 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x13076 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13077 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x13077 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13078 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x13078 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13079 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x13079 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13080 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x13080 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13081 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x13081 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13082 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x13082 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13083 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x13083 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13084 = x13053 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13085 = x13052 + x13084;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13086 = x13054 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13087 = x13085 + x13086;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13088 = x13055 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13089 = x13087 + x13088;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13090 = x13056 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13091 = x13089 + x13090;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13092 = x13057 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13093 = x13091 + x13092;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13094 = x13058 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13095 = x13093 + x13094;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13096 = x13059 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13097 = x13095 + x13096;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13098 = x13060 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13099 = x13097 + x13098;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13100 = x13061 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13101 = x13099 + x13100;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13102 = x13062 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13103 = x13101 + x13102;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13104 = x13063 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13105 = x13103 + x13104;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13106 = x13064 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13107 = x13105 + x13106;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13108 = x13065 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13109 = x13107 + x13108;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13110 = x13066 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13111 = x13109 + x13110;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13112 = x13067 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13113 = x13111 + x13112;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13114 = x13069 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13115 = x13068 + x13114;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13116 = x13070 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13117 = x13115 + x13116;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13118 = x13071 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13119 = x13117 + x13118;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13120 = x13072 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13121 = x13119 + x13120;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13122 = x13073 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13123 = x13121 + x13122;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13124 = x13074 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13125 = x13123 + x13124;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13126 = x13075 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13127 = x13125 + x13126;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13128 = x13076 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13129 = x13127 + x13128;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13130 = x13077 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13131 = x13129 + x13130;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13132 = x13078 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13133 = x13131 + x13132;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13134 = x13079 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13135 = x13133 + x13134;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13136 = x13080 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13137 = x13135 + x13136;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13138 = x13081 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13139 = x13137 + x13138;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13140 = x13082 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13141 = x13139 + x13140;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13142 = x13083 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13143 = x13141 + x13142;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13144 = args[2][144 * steps + ((cycle - 68) & mask)];
        assert(x13144 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13145 = args[2][145 * steps + ((cycle - 68) & mask)];
        assert(x13145 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13146 = args[2][146 * steps + ((cycle - 68) & mask)];
        assert(x13146 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13147 = args[2][147 * steps + ((cycle - 68) & mask)];
        assert(x13147 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13148 = args[2][148 * steps + ((cycle - 68) & mask)];
        assert(x13148 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13149 = args[2][149 * steps + ((cycle - 68) & mask)];
        assert(x13149 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13150 = args[2][150 * steps + ((cycle - 68) & mask)];
        assert(x13150 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13151 = args[2][151 * steps + ((cycle - 68) & mask)];
        assert(x13151 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13152 = args[2][152 * steps + ((cycle - 68) & mask)];
        assert(x13152 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13153 = args[2][153 * steps + ((cycle - 68) & mask)];
        assert(x13153 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13154 = args[2][154 * steps + ((cycle - 68) & mask)];
        assert(x13154 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13155 = args[2][155 * steps + ((cycle - 68) & mask)];
        assert(x13155 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13156 = args[2][156 * steps + ((cycle - 68) & mask)];
        assert(x13156 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13157 = args[2][157 * steps + ((cycle - 68) & mask)];
        assert(x13157 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13158 = args[2][158 * steps + ((cycle - 68) & mask)];
        assert(x13158 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13159 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x13159 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13160 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x13160 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13161 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x13161 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13162 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x13162 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13163 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x13163 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13164 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x13164 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13165 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x13165 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13166 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x13166 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13167 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x13167 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13168 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x13168 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13169 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x13169 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13170 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x13170 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13171 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x13171 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13172 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x13172 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13173 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x13173 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13174 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x13174 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13175 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x13175 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13176 = x13145 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13177 = x13144 + x13176;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13178 = x13146 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13179 = x13177 + x13178;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13180 = x13147 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13181 = x13179 + x13180;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13182 = x13148 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13183 = x13181 + x13182;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13184 = x13149 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13185 = x13183 + x13184;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13186 = x13150 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13187 = x13185 + x13186;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13188 = x13151 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13189 = x13187 + x13188;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13190 = x13152 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13191 = x13189 + x13190;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13192 = x13153 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13193 = x13191 + x13192;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13194 = x13154 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13195 = x13193 + x13194;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13196 = x13155 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13197 = x13195 + x13196;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13198 = x13156 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13199 = x13197 + x13198;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13200 = x13157 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13201 = x13199 + x13200;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13202 = x13158 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13203 = x13201 + x13202;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13204 = x13159 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13205 = x13203 + x13204;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13206 = x13161 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13207 = x13160 + x13206;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13208 = x13162 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13209 = x13207 + x13208;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13210 = x13163 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13211 = x13209 + x13210;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13212 = x13164 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13213 = x13211 + x13212;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13214 = x13165 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13215 = x13213 + x13214;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13216 = x13166 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13217 = x13215 + x13216;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13218 = x13167 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13219 = x13217 + x13218;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13220 = x13168 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13221 = x13219 + x13220;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13222 = x13169 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13223 = x13221 + x13222;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13224 = x13170 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13225 = x13223 + x13224;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13226 = x13171 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13227 = x13225 + x13226;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13228 = x13172 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13229 = x13227 + x13228;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13230 = x13173 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13231 = x13229 + x13230;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13232 = x13174 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13233 = x13231 + x13232;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13234 = x13175 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13235 = x13233 + x13234;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x13236 = x13113 + x13205;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x13237 = x13143 + x13235;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13238 = Fp(x13236.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13238);
            reg = x13238;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13239 = Fp(x13236.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13240 = x13239 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13240);
            reg = x13240;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13241 = Fp(x13236.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13242 = x13241 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13242);
            reg = x13242;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13243 = Fp(x13236.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13244 = x13243 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13244);
            reg = x13244;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13245 = Fp(x13236.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13246 = x13245 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13246);
            reg = x13246;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13247 = Fp(x13236.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13248 = x13247 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13248);
            reg = x13248;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13249 = Fp(x13236.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13250 = x13249 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13250);
            reg = x13250;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13251 = Fp(x13236.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13252 = x13251 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13252);
            reg = x13252;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13253 = Fp(x13236.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13254 = x13253 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13254);
            reg = x13254;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13255 = Fp(x13236.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13256 = x13255 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13256);
            reg = x13256;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13257 = Fp(x13236.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13258 = x13257 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13258);
            reg = x13258;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13259 = Fp(x13236.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13260 = x13259 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13260);
            reg = x13260;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13261 = Fp(x13236.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13262 = x13261 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13262);
            reg = x13262;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13263 = Fp(x13236.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13264 = x13263 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13264);
            reg = x13264;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13265 = Fp(x13236.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13266 = x13265 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13266);
            reg = x13266;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13267 = Fp(x13236.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13268 = x13267 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13268);
            reg = x13268;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13269 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x13269 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13270 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x13270 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13271 = x13270 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13272 = x13269 + x13271;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13273 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x13273 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13274 = x13273 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13275 = x13272 + x13274;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13276 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x13276 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13277 = x13276 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13278 = x13275 + x13277;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13279 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x13279 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13280 = x13279 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13281 = x13278 + x13280;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13282 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x13282 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13283 = x13282 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13284 = x13281 + x13283;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13285 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x13285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13286 = x13285 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13287 = x13284 + x13286;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13288 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x13288 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13289 = x13288 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13290 = x13287 + x13289;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13291 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x13291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13292 = x13291 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13293 = x13290 + x13292;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13294 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x13294 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13295 = x13294 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13296 = x13293 + x13295;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13297 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x13297 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13298 = x13297 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13299 = x13296 + x13298;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13300 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x13300 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13301 = x13300 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13302 = x13299 + x13301;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13303 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x13303 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13304 = x13303 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13305 = x13302 + x13304;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13306 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x13306 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13307 = x13306 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13308 = x13305 + x13307;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13309 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x13309 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13310 = x13309 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13311 = x13308 + x13310;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13312 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x13312 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13313 = x13312 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13314 = x13311 + x13313;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x13315 = x13236 - x13314;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x13316 = x13315 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x13317 = Fp(x13316.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13317);
            reg = x13317;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13318 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x13318 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x13319 = x13316 - x13318;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x13320 = x13319 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x13321 = x87 - x13320;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x13322 = x13320 * x13321;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x13322 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x13323 = x13237 + x13316;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13324 = Fp(x13323.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13324);
            reg = x13324;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13325 = Fp(x13323.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13326 = x13325 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13326);
            reg = x13326;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13327 = Fp(x13323.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13328 = x13327 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13328);
            reg = x13328;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13329 = Fp(x13323.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13330 = x13329 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13330);
            reg = x13330;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13331 = Fp(x13323.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13332 = x13331 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13332);
            reg = x13332;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13333 = Fp(x13323.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13334 = x13333 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13334);
            reg = x13334;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13335 = Fp(x13323.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13336 = x13335 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13336);
            reg = x13336;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13337 = Fp(x13323.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13338 = x13337 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13338);
            reg = x13338;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13339 = Fp(x13323.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13340 = x13339 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13340);
            reg = x13340;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13341 = Fp(x13323.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13342 = x13341 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13342);
            reg = x13342;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13343 = Fp(x13323.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13344 = x13343 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13344);
            reg = x13344;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13345 = Fp(x13323.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13346 = x13345 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13346);
            reg = x13346;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13347 = Fp(x13323.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13348 = x13347 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13348);
            reg = x13348;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13349 = Fp(x13323.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13350 = x13349 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13350);
            reg = x13350;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13351 = Fp(x13323.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13352 = x13351 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13352);
            reg = x13352;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13353 = Fp(x13323.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13354 = x13353 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13354);
            reg = x13354;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13355 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x13355 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13356 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x13356 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13357 = x13356 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13358 = x13355 + x13357;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13359 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13359 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13360 = x13359 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13361 = x13358 + x13360;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13362 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x13362 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13363 = x13362 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13364 = x13361 + x13363;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13365 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x13365 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13366 = x13365 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13367 = x13364 + x13366;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13368 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x13368 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13369 = x13368 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13370 = x13367 + x13369;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13371 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x13371 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13372 = x13371 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13373 = x13370 + x13372;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13374 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x13374 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13375 = x13374 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13376 = x13373 + x13375;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13377 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x13377 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13378 = x13377 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13379 = x13376 + x13378;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13380 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x13380 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13381 = x13380 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13382 = x13379 + x13381;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13383 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x13383 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13384 = x13383 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13385 = x13382 + x13384;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13386 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13386 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13387 = x13386 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13388 = x13385 + x13387;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13389 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13389 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13390 = x13389 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13391 = x13388 + x13390;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13392 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13392 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13393 = x13392 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13394 = x13391 + x13393;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13395 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13395 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13396 = x13395 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13397 = x13394 + x13396;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13398 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13398 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13399 = x13398 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13400 = x13397 + x13399;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x13401 = x13323 - x13400;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x13402 = x13401 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x13403 = Fp(x13402.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13403);
            reg = x13403;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13404 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x13404 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x13405 = x13402 - x13404;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x13406 = x13405 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x13407 = x87 - x13406;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x13408 = x13406 * x13407;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x13408 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13409 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x13409 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13410 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x13410 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13411 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x13411 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13412 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x13412 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13413 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x13413 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13414 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x13414 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13415 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x13415 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13416 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x13416 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13417 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x13417 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13418 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x13418 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13419 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x13419 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13420 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x13420 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13421 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x13421 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13422 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x13422 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13423 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x13423 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13424 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x13424 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13425 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x13425 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13426 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x13426 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13427 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x13427 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13428 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x13428 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13429 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x13429 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13430 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x13430 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13431 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x13431 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13432 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x13432 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13433 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x13433 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13434 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x13434 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13435 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x13435 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13436 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x13436 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13437 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x13437 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13438 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x13438 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13439 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x13439 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13440 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x13440 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13441 = x13410 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13442 = x13409 + x13441;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13443 = x13411 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13444 = x13442 + x13443;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13445 = x13412 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13446 = x13444 + x13445;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13447 = x13413 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13448 = x13446 + x13447;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13449 = x13414 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13450 = x13448 + x13449;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13451 = x13415 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13452 = x13450 + x13451;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13453 = x13416 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13454 = x13452 + x13453;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13455 = x13417 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13456 = x13454 + x13455;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13457 = x13418 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13458 = x13456 + x13457;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13459 = x13419 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13460 = x13458 + x13459;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13461 = x13420 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13462 = x13460 + x13461;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13463 = x13421 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13464 = x13462 + x13463;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13465 = x13422 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13466 = x13464 + x13465;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13467 = x13423 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13468 = x13466 + x13467;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13469 = x13424 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13470 = x13468 + x13469;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13471 = x13426 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13472 = x13425 + x13471;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13473 = x13427 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13474 = x13472 + x13473;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13475 = x13428 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13476 = x13474 + x13475;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13477 = x13429 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13478 = x13476 + x13477;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13479 = x13430 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13480 = x13478 + x13479;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13481 = x13431 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13482 = x13480 + x13481;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13483 = x13432 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13484 = x13482 + x13483;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13485 = x13433 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13486 = x13484 + x13485;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13487 = x13434 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13488 = x13486 + x13487;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13489 = x13435 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13490 = x13488 + x13489;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13491 = x13436 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13492 = x13490 + x13491;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13493 = x13437 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13494 = x13492 + x13493;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13495 = x13438 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13496 = x13494 + x13495;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13497 = x13439 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13498 = x13496 + x13497;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13499 = x13440 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13500 = x13498 + x13499;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13501 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x13501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13502 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x13502 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13503 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x13503 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13504 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x13504 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13505 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x13505 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13506 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x13506 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13507 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x13507 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13508 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x13508 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13509 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x13509 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13510 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x13510 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13511 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x13511 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13512 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x13512 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13513 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x13513 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13514 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x13514 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13515 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x13515 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13516 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x13516 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13517 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x13517 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13518 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x13518 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13519 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x13519 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13520 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x13520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13521 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x13521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13522 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x13522 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13523 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x13523 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13524 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x13524 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13525 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x13525 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13526 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x13526 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13527 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x13527 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13528 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x13528 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13529 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x13529 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13530 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x13530 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13531 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x13531 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13532 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x13532 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13533 = x13502 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13534 = x13501 + x13533;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13535 = x13503 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13536 = x13534 + x13535;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13537 = x13504 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13538 = x13536 + x13537;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13539 = x13505 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13540 = x13538 + x13539;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13541 = x13506 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13542 = x13540 + x13541;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13543 = x13507 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13544 = x13542 + x13543;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13545 = x13508 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13546 = x13544 + x13545;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13547 = x13509 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13548 = x13546 + x13547;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13549 = x13510 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13550 = x13548 + x13549;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13551 = x13511 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13552 = x13550 + x13551;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13553 = x13512 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13554 = x13552 + x13553;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13555 = x13513 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13556 = x13554 + x13555;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13557 = x13514 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13558 = x13556 + x13557;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13559 = x13515 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13560 = x13558 + x13559;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13561 = x13516 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13562 = x13560 + x13561;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13563 = x13518 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13564 = x13517 + x13563;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13565 = x13519 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13566 = x13564 + x13565;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13567 = x13520 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13568 = x13566 + x13567;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13569 = x13521 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13570 = x13568 + x13569;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13571 = x13522 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13572 = x13570 + x13571;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13573 = x13523 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13574 = x13572 + x13573;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13575 = x13524 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13576 = x13574 + x13575;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13577 = x13525 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13578 = x13576 + x13577;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13579 = x13526 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13580 = x13578 + x13579;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13581 = x13527 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13582 = x13580 + x13581;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13583 = x13528 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13584 = x13582 + x13583;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13585 = x13529 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13586 = x13584 + x13585;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13587 = x13530 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13588 = x13586 + x13587;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13589 = x13531 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13590 = x13588 + x13589;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
        auto x13591 = x13532 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
        auto x13592 = x13590 + x13591;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x13593 = x13470 + x13562;
        // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
        auto x13594 = x13500 + x13592;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13595 = Fp(x13593.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13595);
            reg = x13595;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13596 = Fp(x13593.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13597 = x13596 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13597);
            reg = x13597;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13598 = Fp(x13593.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13599 = x13598 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13599);
            reg = x13599;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13600 = Fp(x13593.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13601 = x13600 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13601);
            reg = x13601;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13602 = Fp(x13593.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13603 = x13602 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13603);
            reg = x13603;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13604 = Fp(x13593.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13605 = x13604 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13605);
            reg = x13605;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13606 = Fp(x13593.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13607 = x13606 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13607);
            reg = x13607;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13608 = Fp(x13593.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13609 = x13608 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13609);
            reg = x13609;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13610 = Fp(x13593.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13611 = x13610 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13611);
            reg = x13611;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13612 = Fp(x13593.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13613 = x13612 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13613);
            reg = x13613;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13614 = Fp(x13593.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13615 = x13614 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13615);
            reg = x13615;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13616 = Fp(x13593.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13617 = x13616 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13617);
            reg = x13617;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13618 = Fp(x13593.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13619 = x13618 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13619);
            reg = x13619;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13620 = Fp(x13593.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13621 = x13620 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13621);
            reg = x13621;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13622 = Fp(x13593.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13623 = x13622 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13623);
            reg = x13623;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13624 = Fp(x13593.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13625 = x13624 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13625);
            reg = x13625;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13626 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13627 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13627 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13628 = x13627 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13629 = x13626 + x13628;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13630 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x13630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13631 = x13630 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13632 = x13629 + x13631;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13633 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x13633 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13634 = x13633 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13635 = x13632 + x13634;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13636 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x13636 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13637 = x13636 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13638 = x13635 + x13637;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13639 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x13639 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13640 = x13639 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13641 = x13638 + x13640;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13642 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x13642 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13643 = x13642 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13644 = x13641 + x13643;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13645 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x13645 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13646 = x13645 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13647 = x13644 + x13646;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13648 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x13648 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13649 = x13648 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13650 = x13647 + x13649;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13651 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x13651 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13652 = x13651 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13653 = x13650 + x13652;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13654 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x13654 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13655 = x13654 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13656 = x13653 + x13655;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13657 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x13657 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13658 = x13657 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13659 = x13656 + x13658;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13660 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x13660 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13661 = x13660 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13662 = x13659 + x13661;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13663 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x13663 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13664 = x13663 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13665 = x13662 + x13664;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13666 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x13666 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13667 = x13666 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13668 = x13665 + x13667;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13669 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x13669 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13670 = x13669 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13671 = x13668 + x13670;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x13672 = x13593 - x13671;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x13673 = x13672 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x13674 = Fp(x13673.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13674);
            reg = x13674;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13675 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x13675 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x13676 = x13673 - x13675;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x13677 = x13676 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x13678 = x87 - x13677;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x13679 = x13677 * x13678;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x13679 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x13680 = x13594 + x13673;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13681 = Fp(x13680.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13681);
            reg = x13681;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13682 = Fp(x13680.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13683 = x13682 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13683);
            reg = x13683;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13684 = Fp(x13680.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13685 = x13684 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13685);
            reg = x13685;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13686 = Fp(x13680.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13687 = x13686 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13687);
            reg = x13687;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13688 = Fp(x13680.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13689 = x13688 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13689);
            reg = x13689;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13690 = Fp(x13680.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13691 = x13690 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13691);
            reg = x13691;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13692 = Fp(x13680.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13693 = x13692 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13693);
            reg = x13693;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13694 = Fp(x13680.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13695 = x13694 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13695);
            reg = x13695;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13696 = Fp(x13680.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13697 = x13696 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13697);
            reg = x13697;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13698 = Fp(x13680.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13699 = x13698 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13699);
            reg = x13699;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13700 = Fp(x13680.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13701 = x13700 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13701);
            reg = x13701;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13702 = Fp(x13680.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13703 = x13702 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13703);
            reg = x13703;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13704 = Fp(x13680.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13705 = x13704 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13705);
            reg = x13705;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13706 = Fp(x13680.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13707 = x13706 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13707);
            reg = x13707;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13708 = Fp(x13680.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13709 = x13708 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13709);
            reg = x13709;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x13710 = Fp(x13680.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x13711 = x13710 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13711);
            reg = x13711;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13712 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x13712 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13713 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x13713 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13714 = x13713 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13715 = x13712 + x13714;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13716 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x13716 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13717 = x13716 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13718 = x13715 + x13717;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13719 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x13719 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13720 = x13719 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13721 = x13718 + x13720;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13722 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x13722 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13723 = x13722 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13724 = x13721 + x13723;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13725 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x13725 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13726 = x13725 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13727 = x13724 + x13726;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13728 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x13728 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13729 = x13728 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13730 = x13727 + x13729;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13731 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x13731 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13732 = x13731 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13733 = x13730 + x13732;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13734 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x13734 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13735 = x13734 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13736 = x13733 + x13735;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13737 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x13737 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13738 = x13737 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13739 = x13736 + x13738;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13740 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x13740 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13741 = x13740 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13742 = x13739 + x13741;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13743 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x13743 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13744 = x13743 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13745 = x13742 + x13744;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13746 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x13746 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13747 = x13746 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13748 = x13745 + x13747;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13749 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x13749 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13750 = x13749 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13751 = x13748 + x13750;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13752 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x13752 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13753 = x13752 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13754 = x13751 + x13753;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13755 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x13755 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x13756 = x13755 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x13757 = x13754 + x13756;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x13758 = x13680 - x13757;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x13759 = x13758 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x13760 = Fp(x13759.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13760);
            reg = x13760;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13761 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x13761 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x13762 = x13759 - x13761;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x13763 = x13762 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x13764 = x87 - x13763;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x13765 = x13763 * x13764;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x13765 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x13766 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13766 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":278:25)
        auto x13767 = x13766 + x11613;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13768 = x13294 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13769 = x13291 + x13768;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13770 = x13380 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13771 = x13377 + x13770;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13772 = x13297 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13773 = x13769 + x13772;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13774 = x13383 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13775 = x13771 + x13774;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13776 = x13300 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13777 = x13773 + x13776;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13778 = x13386 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13779 = x13775 + x13778;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13780 = x13303 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13781 = x13777 + x13780;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13782 = x13389 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13783 = x13779 + x13782;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13784 = x13306 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13785 = x13781 + x13784;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13786 = x13392 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13787 = x13783 + x13786;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13788 = x13309 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13789 = x13785 + x13788;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13790 = x13395 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13791 = x13787 + x13790;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13792 = x13312 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13793 = x13789 + x13792;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13794 = x13398 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13795 = x13791 + x13794;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13290);
          reg = x13290;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13793);
          reg = x13793;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13376);
          reg = x13376;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13795);
          reg = x13795;
        }
        {
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x13796 = args[2][110 * steps + ((cycle - 0) & mask)];
          assert(x13796 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x13797 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x13797 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x13798 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x13798 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x13799 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x13799 != Fp::invalid());
          host_args.at(0) = x13767;
          host_args.at(1) = x13796;
          host_args.at(2) = x13797;
          host_args.at(3) = x13798;
          host_args.at(4) = x13799;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13800 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13800 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13801 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13801 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13802 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13802 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13803 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13803 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13767);
          reg = x13767;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11601);
          reg = x11601;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13800);
          reg = x13800;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13801);
          reg = x13801;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13802);
          reg = x13802;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13803);
          reg = x13803;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":279:25)
        auto x13804 = x13766 + x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":279:25)
        auto x13805 = x13804 + x11613;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13806 = x13651 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13807 = x13648 + x13806;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13808 = x13737 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13809 = x13734 + x13808;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13810 = x13654 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13811 = x13807 + x13810;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13812 = x13740 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13813 = x13809 + x13812;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13814 = x13657 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13815 = x13811 + x13814;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13816 = x13743 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13817 = x13813 + x13816;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13818 = x13660 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13819 = x13815 + x13818;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13820 = x13746 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13821 = x13817 + x13820;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13822 = x13663 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13823 = x13819 + x13822;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13824 = x13749 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13825 = x13821 + x13824;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13826 = x13666 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13827 = x13823 + x13826;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13828 = x13752 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13829 = x13825 + x13828;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13830 = x13669 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13831 = x13827 + x13830;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:37)
        auto x13832 = x13755 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":143:22)
        auto x13833 = x13829 + x13832;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13647);
          reg = x13647;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13831);
          reg = x13831;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13733);
          reg = x13733;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13833);
          reg = x13833;
        }
        {
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x13834 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x13834 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x13835 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13835 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x13836 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13836 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x13837 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13837 != Fp::invalid());
          host_args.at(0) = x13805;
          host_args.at(1) = x13834;
          host_args.at(2) = x13835;
          host_args.at(3) = x13836;
          host_args.at(4) = x13837;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13838 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13838 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13839 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13839 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13840 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13840 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x13841 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13841 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13805);
          reg = x13805;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x11601);
          reg = x11601;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13838);
          reg = x13838;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13839);
          reg = x13839;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13840);
          reg = x13840;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13841);
          reg = x13841;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13842 = args[2][144 * steps + ((cycle - 1) & mask)];
      assert(x13842 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13843 = args[2][145 * steps + ((cycle - 1) & mask)];
      assert(x13843 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13844 = args[2][146 * steps + ((cycle - 1) & mask)];
      assert(x13844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13845 = args[2][147 * steps + ((cycle - 1) & mask)];
      assert(x13845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13846 = args[2][148 * steps + ((cycle - 1) & mask)];
      assert(x13846 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13847 = args[2][149 * steps + ((cycle - 1) & mask)];
      assert(x13847 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13848 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x13848 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13849 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x13849 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13850 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x13850 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13851 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x13851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13852 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x13852 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13853 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x13853 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13854 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x13854 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13855 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x13855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13856 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x13856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13857 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x13857 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13858 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x13858 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13859 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x13859 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13860 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x13860 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13861 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x13861 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13862 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x13862 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13863 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x13863 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13864 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x13864 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13865 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x13865 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13866 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x13866 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13867 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x13867 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13868 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x13868 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13869 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x13869 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13870 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x13870 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13871 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x13871 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13872 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x13872 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13873 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x13873 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13874 = args[2][144 * steps + ((cycle - 2) & mask)];
      assert(x13874 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13875 = args[2][145 * steps + ((cycle - 2) & mask)];
      assert(x13875 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13876 = args[2][146 * steps + ((cycle - 2) & mask)];
      assert(x13876 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13877 = args[2][147 * steps + ((cycle - 2) & mask)];
      assert(x13877 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13878 = args[2][148 * steps + ((cycle - 2) & mask)];
      assert(x13878 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13879 = args[2][149 * steps + ((cycle - 2) & mask)];
      assert(x13879 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13880 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x13880 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13881 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x13881 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13882 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x13882 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13883 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x13883 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13884 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x13884 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13885 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x13885 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13886 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x13886 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13887 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x13887 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13888 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x13888 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13889 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x13889 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13890 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x13890 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13891 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x13891 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13892 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x13892 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13893 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x13893 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13894 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x13894 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13895 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x13895 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13896 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x13896 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13897 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x13897 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13898 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x13898 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13899 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x13899 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13900 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x13900 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13901 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x13901 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13902 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x13902 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13903 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x13903 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13904 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x13904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13905 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x13905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13906 = args[2][144 * steps + ((cycle - 3) & mask)];
      assert(x13906 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13907 = args[2][145 * steps + ((cycle - 3) & mask)];
      assert(x13907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13908 = args[2][146 * steps + ((cycle - 3) & mask)];
      assert(x13908 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13909 = args[2][147 * steps + ((cycle - 3) & mask)];
      assert(x13909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13910 = args[2][148 * steps + ((cycle - 3) & mask)];
      assert(x13910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13911 = args[2][149 * steps + ((cycle - 3) & mask)];
      assert(x13911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13912 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x13912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13913 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x13913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13914 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x13914 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13915 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x13915 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13916 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x13916 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13917 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x13917 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13918 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x13918 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13919 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x13919 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13920 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x13920 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13921 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x13921 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13922 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x13922 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13923 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x13923 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13924 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x13924 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13925 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x13925 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13926 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x13926 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13927 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x13927 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13928 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x13928 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13929 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x13929 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13930 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x13930 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13931 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x13931 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13932 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x13932 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13933 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x13933 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13934 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x13934 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13935 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x13935 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13936 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x13936 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13937 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x13937 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13938 = args[2][144 * steps + ((cycle - 4) & mask)];
      assert(x13938 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13939 = args[2][145 * steps + ((cycle - 4) & mask)];
      assert(x13939 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13940 = args[2][146 * steps + ((cycle - 4) & mask)];
      assert(x13940 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13941 = args[2][147 * steps + ((cycle - 4) & mask)];
      assert(x13941 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13942 = args[2][148 * steps + ((cycle - 4) & mask)];
      assert(x13942 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13943 = args[2][149 * steps + ((cycle - 4) & mask)];
      assert(x13943 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13944 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x13944 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13945 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x13945 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13946 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x13946 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13947 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x13947 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13948 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x13948 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13949 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x13949 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13950 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x13950 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13951 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x13951 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13952 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x13952 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13953 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x13953 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13954 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x13954 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13955 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x13955 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13956 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x13956 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13957 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x13957 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13958 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x13958 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13959 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x13959 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13960 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x13960 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13961 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x13961 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13962 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x13962 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13963 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x13963 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13964 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x13964 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13965 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x13965 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13966 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x13966 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13967 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x13967 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13968 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x13968 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13969 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x13969 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13970 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x13970 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13971 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x13971 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13972 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x13972 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13973 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x13973 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13974 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x13974 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13975 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x13975 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13976 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x13976 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13977 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x13977 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13978 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x13978 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13979 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x13979 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13980 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x13980 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13981 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x13981 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13982 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x13982 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13983 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x13983 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13984 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x13984 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13985 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x13985 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13986 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x13986 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13987 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x13987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13988 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x13988 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13989 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x13989 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13990 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x13990 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13991 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x13991 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13992 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x13992 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13993 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x13993 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13994 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x13994 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13995 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x13995 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13996 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x13996 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13997 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x13997 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13998 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x13998 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x13999 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x13999 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14000 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x14000 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14001 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x14001 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14002 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x14002 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14003 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x14003 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14004 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x14004 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14005 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x14005 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14006 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x14006 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14007 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x14007 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14008 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x14008 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14009 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x14009 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14010 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x14010 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14011 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x14011 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14012 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x14012 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14013 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x14013 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14014 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x14014 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14015 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x14015 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14016 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x14016 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14017 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x14017 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14018 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x14018 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14019 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x14019 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14020 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x14020 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14021 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x14021 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14022 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x14022 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14023 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x14023 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14024 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x14024 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14025 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x14025 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14026 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x14026 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14027 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x14027 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14028 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x14028 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14029 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x14029 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14030 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x14030 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14031 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x14031 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14032 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x14032 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14033 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x14033 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14034 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x14034 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14035 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x14035 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14036 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x14036 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14037 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x14037 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14038 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x14038 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14039 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x14039 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14040 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x14040 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14041 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x14041 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14042 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x14042 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14043 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x14043 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14044 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x14044 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14045 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x14045 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14046 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x14046 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14047 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x14047 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14048 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x14048 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14049 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x14049 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14050 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x14050 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14051 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x14051 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14052 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x14052 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14053 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x14053 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14054 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x14054 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14055 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x14055 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14056 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x14056 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14057 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x14057 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14058 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x14058 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14059 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x14059 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14060 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x14060 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14061 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x14061 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14062 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x14062 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14063 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x14063 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14064 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x14064 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14065 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x14065 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14066 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x14066 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14067 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x14067 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14068 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x14068 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14069 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x14069 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14070 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x14070 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14071 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x14071 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14072 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x14072 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14073 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x14073 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14074 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x14074 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14075 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x14075 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14076 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x14076 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14077 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x14077 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14078 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x14078 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14079 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x14079 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14080 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x14080 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14081 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x14081 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14082 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x14082 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14083 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x14083 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14084 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x14084 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14085 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x14085 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14086 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x14086 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14087 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x14087 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14088 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x14088 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14089 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x14089 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14090 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x14090 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14091 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x14091 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14092 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x14092 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14093 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x14093 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14094 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x14094 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14095 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x14095 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14096 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x14096 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14097 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x14097 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14098 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x14098 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14099 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x14099 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14100 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x14100 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14101 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x14101 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14102 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x14102 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14103 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x14103 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14104 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x14104 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14105 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x14105 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14106 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x14106 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14107 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x14107 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14108 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x14108 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14109 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x14109 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14110 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x14110 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14111 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x14111 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14112 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x14112 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14113 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x14113 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14114 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x14114 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14115 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x14115 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14116 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x14116 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14117 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x14117 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14118 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x14118 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14119 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x14119 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14120 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x14120 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14121 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x14121 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14122 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x14122 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14123 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x14123 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14124 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x14124 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14125 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x14125 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14126 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x14126 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14127 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x14127 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14128 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x14128 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14129 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x14129 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14130 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x14130 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14131 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x14131 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14132 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x14132 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x14133 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x14133 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":128:26)
      auto x14134 = x14131 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:11)
      auto x14135 = x14130 + x14134;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:61)
      auto x14136 = x14133 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:46)
      auto x14137 = x14132 + x14136;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14138 = x13855 + x13864;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14139 = x13855 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14140 = x14139 * x13864;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14141 = x14138 - x14140;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14142 = x13856 + x13865;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14143 = x13856 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14144 = x14143 * x13865;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14145 = x14142 - x14144;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14146 = x13857 + x13866;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14147 = x13857 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14148 = x14147 * x13866;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14149 = x14146 - x14148;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14150 = x13858 + x13867;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14151 = x13858 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14152 = x14151 * x13867;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14153 = x14150 - x14152;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14154 = x13859 + x13868;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14155 = x13859 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14156 = x14155 * x13868;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14157 = x14154 - x14156;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14158 = x13860 + x13869;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14159 = x13860 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14160 = x14159 * x13869;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14161 = x14158 - x14160;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14162 = x13861 + x13870;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14163 = x13861 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14164 = x14163 * x13870;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14165 = x14162 - x14164;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14166 = x13862 + x13871;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14167 = x13862 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14168 = x14167 * x13871;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14169 = x14166 - x14168;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14170 = x13863 + x13872;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14171 = x13863 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14172 = x14171 * x13872;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14173 = x14170 - x14172;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14174 = x13864 + x13873;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14175 = x13864 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14176 = x14175 * x13873;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14177 = x14174 - x14176;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14178 = x13865 + x13842;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14179 = x13865 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14180 = x14179 * x13842;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14181 = x14178 - x14180;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14182 = x13866 + x13843;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14183 = x13866 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14184 = x14183 * x13843;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14185 = x14182 - x14184;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14186 = x13867 + x13844;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14187 = x13867 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14188 = x14187 * x13844;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14189 = x14186 - x14188;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14190 = x13868 + x13845;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14191 = x13868 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14192 = x14191 * x13845;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14193 = x14190 - x14192;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14194 = x13869 + x13846;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14195 = x13869 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14196 = x14195 * x13846;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14197 = x14194 - x14196;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14198 = x13870 + x13847;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14199 = x13870 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14200 = x14199 * x13847;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14201 = x14198 - x14200;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14202 = x13871 + x13848;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14203 = x13871 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14204 = x14203 * x13848;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14205 = x14202 - x14204;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14206 = x13872 + x13849;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14207 = x13872 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14208 = x14207 * x13849;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14209 = x14206 - x14208;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14210 = x13873 + x13850;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14211 = x13873 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14212 = x14211 * x13850;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14213 = x14210 - x14212;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14214 = x13842 + x13851;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14215 = x13842 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14216 = x14215 * x13851;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14217 = x14214 - x14216;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14218 = x13843 + x13852;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14219 = x13843 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14220 = x14219 * x13852;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14221 = x14218 - x14220;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14222 = x13844 + x13853;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14223 = x13844 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14224 = x14223 * x13853;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14225 = x14222 - x14224;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14226 = x13845 + x13854;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14227 = x13845 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14228 = x14227 * x13854;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14229 = x14226 - x14228;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14230 = x13846 + x13855;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14231 = x13846 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14232 = x14231 * x13855;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14233 = x14230 - x14232;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14234 = x13847 + x13856;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14235 = x13847 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14236 = x14235 * x13856;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14237 = x14234 - x14236;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14238 = x13848 + x13857;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14239 = x13848 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14240 = x14239 * x13857;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14241 = x14238 - x14240;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14242 = x13849 + x13858;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14243 = x13849 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14244 = x14243 * x13858;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14245 = x14242 - x14244;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14246 = x13850 + x13859;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14247 = x13850 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14248 = x14247 * x13859;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14249 = x14246 - x14248;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14250 = x13851 + x13860;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14251 = x13851 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14252 = x14251 * x13860;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14253 = x14250 - x14252;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14254 = x13852 + x13861;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14255 = x13852 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14256 = x14255 * x13861;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14257 = x14254 - x14256;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14258 = x13853 + x13862;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14259 = x13853 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14260 = x14259 * x13862;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14261 = x14258 - x14260;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14262 = x13854 + x13863;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14263 = x13854 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14264 = x14263 * x13863;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14265 = x14262 - x14264;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14266 = x13844 + x14141;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14267 = x14223 * x14141;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14268 = x14266 - x14267;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14269 = x13845 + x14145;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14270 = x14227 * x14145;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14271 = x14269 - x14270;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14272 = x13846 + x14149;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14273 = x14231 * x14149;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14274 = x14272 - x14273;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14275 = x13847 + x14153;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14276 = x14235 * x14153;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14277 = x14275 - x14276;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14278 = x13848 + x14157;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14279 = x14239 * x14157;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14280 = x14278 - x14279;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14281 = x13849 + x14161;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14282 = x14243 * x14161;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14283 = x14281 - x14282;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14284 = x13850 + x14165;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14285 = x14247 * x14165;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14286 = x14284 - x14285;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14287 = x13851 + x14169;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14288 = x14251 * x14169;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14289 = x14287 - x14288;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14290 = x13852 + x14173;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14291 = x14255 * x14173;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14292 = x14290 - x14291;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14293 = x13853 + x14177;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14294 = x14259 * x14177;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14295 = x14293 - x14294;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14296 = x13854 + x14181;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14297 = x14263 * x14181;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14298 = x14296 - x14297;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14299 = x13855 + x14185;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14300 = x14139 * x14185;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14301 = x14299 - x14300;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14302 = x13856 + x14189;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14303 = x14143 * x14189;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14304 = x14302 - x14303;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14305 = x13857 + x14193;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14306 = x14147 * x14193;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14307 = x14305 - x14306;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14308 = x13858 + x14197;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14309 = x14151 * x14197;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14310 = x14308 - x14309;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14311 = x13859 + x14201;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14312 = x14155 * x14201;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14313 = x14311 - x14312;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14314 = x13860 + x14205;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14315 = x14159 * x14205;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14316 = x14314 - x14315;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14317 = x13861 + x14209;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14318 = x14163 * x14209;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14319 = x14317 - x14318;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14320 = x13862 + x14213;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14321 = x14167 * x14213;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14322 = x14320 - x14321;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14323 = x13863 + x14217;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14324 = x14171 * x14217;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14325 = x14323 - x14324;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14326 = x13864 + x14221;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14327 = x14175 * x14221;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14328 = x14326 - x14327;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14329 = x13865 + x14225;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14330 = x14179 * x14225;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14331 = x14329 - x14330;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14332 = x13866 + x14229;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14333 = x14183 * x14229;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14334 = x14332 - x14333;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14335 = x13867 + x14233;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14336 = x14187 * x14233;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14337 = x14335 - x14336;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14338 = x13868 + x14237;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14339 = x14191 * x14237;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14340 = x14338 - x14339;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14341 = x13869 + x14241;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14342 = x14195 * x14241;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14343 = x14341 - x14342;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14344 = x13870 + x14245;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14345 = x14199 * x14245;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14346 = x14344 - x14345;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14347 = x13871 + x14249;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14348 = x14203 * x14249;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14349 = x14347 - x14348;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14350 = x13872 + x14253;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14351 = x14207 * x14253;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14352 = x14350 - x14351;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14353 = x13873 + x14257;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14354 = x14211 * x14257;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14355 = x14353 - x14354;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14356 = x13842 + x14261;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14357 = x14215 * x14261;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14358 = x14356 - x14357;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14359 = x13843 + x14265;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14360 = x14219 * x14265;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14361 = x14359 - x14360;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14362 = x13981 + x13995;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14363 = x13981 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14364 = x14363 * x13995;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14365 = x14362 - x14364;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14366 = x13982 + x13996;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14367 = x13982 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14368 = x14367 * x13996;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14369 = x14366 - x14368;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14370 = x13983 + x13997;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14371 = x13983 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14372 = x14371 * x13997;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14373 = x14370 - x14372;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14374 = x13984 + x13998;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14375 = x13984 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14376 = x14375 * x13998;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14377 = x14374 - x14376;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14378 = x13985 + x13999;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14379 = x13985 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14380 = x14379 * x13999;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14381 = x14378 - x14380;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14382 = x13986 + x14000;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14383 = x13986 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14384 = x14383 * x14000;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14385 = x14382 - x14384;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14386 = x13987 + x14001;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14387 = x13987 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14388 = x14387 * x14001;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14389 = x14386 - x14388;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14390 = x13988 + x13970;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14391 = x13988 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14392 = x14391 * x13970;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14393 = x14390 - x14392;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14394 = x13989 + x13971;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14395 = x13989 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14396 = x14395 * x13971;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14397 = x14394 - x14396;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14398 = x13990 + x13972;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14399 = x13990 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14400 = x14399 * x13972;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14401 = x14398 - x14400;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14402 = x13991 + x13973;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14403 = x13991 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14404 = x14403 * x13973;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14405 = x14402 - x14404;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14406 = x13992 + x13974;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14407 = x13992 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14408 = x14407 * x13974;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14409 = x14406 - x14408;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14410 = x13993 + x13975;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14411 = x13993 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14412 = x14411 * x13975;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14413 = x14410 - x14412;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14414 = x13994 + x13976;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14415 = x13994 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14416 = x14415 * x13976;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14417 = x14414 - x14416;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14418 = x13995 + x13977;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14419 = x13995 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14420 = x14419 * x13977;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14421 = x14418 - x14420;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14422 = x13996 + x13978;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14423 = x13996 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14424 = x14423 * x13978;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14425 = x14422 - x14424;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14426 = x13997 + x13979;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14427 = x13997 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14428 = x14427 * x13979;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14429 = x14426 - x14428;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14430 = x13998 + x13980;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14431 = x13998 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14432 = x14431 * x13980;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14433 = x14430 - x14432;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14434 = x13999 + x13981;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14435 = x13999 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14436 = x14435 * x13981;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14437 = x14434 - x14436;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14438 = x14000 + x13982;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14439 = x14000 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14440 = x14439 * x13982;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14441 = x14438 - x14440;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14442 = x14001 + x13983;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14443 = x14001 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14444 = x14443 * x13983;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14445 = x14442 - x14444;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14446 = x13970 + x13984;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14447 = x13970 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14448 = x14447 * x13984;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14449 = x14446 - x14448;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14450 = x13971 + x13985;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14451 = x13971 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14452 = x14451 * x13985;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14453 = x14450 - x14452;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14454 = x13972 + x13986;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14455 = x13972 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14456 = x14455 * x13986;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14457 = x14454 - x14456;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14458 = x13973 + x13987;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14459 = x13973 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14460 = x14459 * x13987;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14461 = x14458 - x14460;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14462 = x13974 + x13988;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14463 = x13974 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14464 = x14463 * x13988;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14465 = x14462 - x14464;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14466 = x13975 + x13989;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14467 = x13975 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14468 = x14467 * x13989;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14469 = x14466 - x14468;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14470 = x13976 + x13990;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14471 = x13976 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14472 = x14471 * x13990;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14473 = x14470 - x14472;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14474 = x13977 + x13991;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14475 = x13977 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14476 = x14475 * x13991;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14477 = x14474 - x14476;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14478 = x13978 + x13992;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14479 = x13978 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14480 = x14479 * x13992;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14481 = x14478 - x14480;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14482 = x13979 + x13993;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14483 = x13979 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14484 = x14483 * x13993;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14485 = x14482 - x14484;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14486 = x13980 + x13994;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14487 = x13980 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14488 = x14487 * x13994;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14489 = x14486 - x14488;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14490 = x13976 + x14365;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14491 = x14471 * x14365;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14492 = x14490 - x14491;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14493 = x13977 + x14369;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14494 = x14475 * x14369;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14495 = x14493 - x14494;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14496 = x13978 + x14373;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14497 = x14479 * x14373;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14498 = x14496 - x14497;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14499 = x13979 + x14377;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14500 = x14483 * x14377;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14501 = x14499 - x14500;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14502 = x13980 + x14381;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14503 = x14487 * x14381;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14504 = x14502 - x14503;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14505 = x13981 + x14385;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14506 = x14363 * x14385;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14507 = x14505 - x14506;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14508 = x13982 + x14389;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14509 = x14367 * x14389;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14510 = x14508 - x14509;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14511 = x13983 + x14393;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14512 = x14371 * x14393;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14513 = x14511 - x14512;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14514 = x13984 + x14397;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14515 = x14375 * x14397;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14516 = x14514 - x14515;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14517 = x13985 + x14401;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14518 = x14379 * x14401;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14519 = x14517 - x14518;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14520 = x13986 + x14405;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14521 = x14383 * x14405;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14522 = x14520 - x14521;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14523 = x13987 + x14409;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14524 = x14387 * x14409;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14525 = x14523 - x14524;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14526 = x13988 + x14413;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14527 = x14391 * x14413;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14528 = x14526 - x14527;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14529 = x13989 + x14417;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14530 = x14395 * x14417;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14531 = x14529 - x14530;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14532 = x13990 + x14421;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14533 = x14399 * x14421;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14534 = x14532 - x14533;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14535 = x13991 + x14425;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14536 = x14403 * x14425;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14537 = x14535 - x14536;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14538 = x13992 + x14429;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14539 = x14407 * x14429;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14540 = x14538 - x14539;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14541 = x13993 + x14433;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14542 = x14411 * x14433;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14543 = x14541 - x14542;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14544 = x13994 + x14437;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14545 = x14415 * x14437;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14546 = x14544 - x14545;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14547 = x13995 + x14441;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14548 = x14419 * x14441;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14549 = x14547 - x14548;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14550 = x13996 + x14445;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14551 = x14423 * x14445;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14552 = x14550 - x14551;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14553 = x13997 + x14449;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14554 = x14427 * x14449;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14555 = x14553 - x14554;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14556 = x13998 + x14453;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14557 = x14431 * x14453;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14558 = x14556 - x14557;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14559 = x13999 + x14457;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14560 = x14435 * x14457;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14561 = x14559 - x14560;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14562 = x14000 + x14461;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14563 = x14439 * x14461;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14564 = x14562 - x14563;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14565 = x14001 + x14465;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14566 = x14443 * x14465;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14567 = x14565 - x14566;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14568 = x13970 + x14469;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14569 = x14447 * x14469;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14570 = x14568 - x14569;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14571 = x13971 + x14473;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14572 = x14451 * x14473;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14573 = x14571 - x14572;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14574 = x13972 + x14477;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14575 = x14455 * x14477;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14576 = x14574 - x14575;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14577 = x13973 + x14481;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14578 = x14459 * x14481;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14579 = x14577 - x14578;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14580 = x13974 + x14485;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14581 = x14463 * x14485;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14582 = x14580 - x14581;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14583 = x13975 + x14489;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:28)
      auto x14584 = x14467 * x14489;
      // loc("cirgen/circuit/rv32im/sha.cpp":43:14)
      auto x14585 = x14583 - x14584;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14586 = x14099 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14587 = x14098 + x14586;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14588 = x14100 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14589 = x14587 + x14588;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14590 = x14101 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14591 = x14589 + x14590;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14592 = x14102 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14593 = x14591 + x14592;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14594 = x14103 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14595 = x14593 + x14594;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14596 = x14104 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14597 = x14595 + x14596;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14598 = x14105 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14599 = x14597 + x14598;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14600 = x14106 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14601 = x14599 + x14600;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14602 = x14107 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14603 = x14601 + x14602;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14604 = x14108 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14605 = x14603 + x14604;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14606 = x14109 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14607 = x14605 + x14606;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14608 = x14110 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14609 = x14607 + x14608;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14610 = x14111 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14611 = x14609 + x14610;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14612 = x14112 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14613 = x14611 + x14612;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14614 = x14113 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14615 = x14613 + x14614;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14616 = x14115 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14617 = x14114 + x14616;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14618 = x14116 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14619 = x14617 + x14618;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14620 = x14117 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14621 = x14619 + x14620;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14622 = x14118 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14623 = x14621 + x14622;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14624 = x14119 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14625 = x14623 + x14624;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14626 = x14120 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14627 = x14625 + x14626;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14628 = x14121 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14629 = x14627 + x14628;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14630 = x14122 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14631 = x14629 + x14630;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14632 = x14123 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14633 = x14631 + x14632;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14634 = x14124 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14635 = x14633 + x14634;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14636 = x14125 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14637 = x14635 + x14636;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14638 = x14126 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14639 = x14637 + x14638;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14640 = x14127 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14641 = x14639 + x14640;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14642 = x14128 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14643 = x14641 + x14642;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14644 = x14129 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14645 = x14643 + x14644;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14646 = x14067 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14647 = x14066 + x14646;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14648 = x14068 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14649 = x14647 + x14648;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14650 = x14069 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14651 = x14649 + x14650;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14652 = x14070 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14653 = x14651 + x14652;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14654 = x14071 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14655 = x14653 + x14654;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14656 = x14072 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14657 = x14655 + x14656;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14658 = x14073 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14659 = x14657 + x14658;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14660 = x14074 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14661 = x14659 + x14660;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14662 = x14075 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14663 = x14661 + x14662;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14664 = x14076 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14665 = x14663 + x14664;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14666 = x14077 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14667 = x14665 + x14666;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14668 = x14078 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14669 = x14667 + x14668;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14670 = x14079 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14671 = x14669 + x14670;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14672 = x14080 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14673 = x14671 + x14672;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14674 = x14081 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14675 = x14673 + x14674;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14676 = x14083 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14677 = x14082 + x14676;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14678 = x14084 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14679 = x14677 + x14678;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14680 = x14085 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14681 = x14679 + x14680;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14682 = x14086 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14683 = x14681 + x14682;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14684 = x14087 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14685 = x14683 + x14684;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14686 = x14088 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14687 = x14685 + x14686;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14688 = x14089 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14689 = x14687 + x14688;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14690 = x14090 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14691 = x14689 + x14690;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14692 = x14091 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14693 = x14691 + x14692;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14694 = x14092 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14695 = x14693 + x14694;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14696 = x14093 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14697 = x14695 + x14696;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14698 = x14094 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14699 = x14697 + x14698;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14700 = x14095 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14701 = x14699 + x14700;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14702 = x14096 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14703 = x14701 + x14702;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14704 = x14097 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14705 = x14703 + x14704;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14706 = x13970 * x14002;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14707 = x87 - x13970;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14708 = x14707 * x14034;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14709 = x14706 + x14708;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14710 = x13971 * x14003;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14711 = x87 - x13971;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14712 = x14711 * x14035;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14713 = x14710 + x14712;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14714 = x13972 * x14004;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14715 = x87 - x13972;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14716 = x14715 * x14036;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14717 = x14714 + x14716;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14718 = x13973 * x14005;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14719 = x87 - x13973;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14720 = x14719 * x14037;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14721 = x14718 + x14720;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14722 = x13974 * x14006;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14723 = x87 - x13974;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14724 = x14723 * x14038;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14725 = x14722 + x14724;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14726 = x13975 * x14007;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14727 = x87 - x13975;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14728 = x14727 * x14039;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14729 = x14726 + x14728;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14730 = x13976 * x14008;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14731 = x87 - x13976;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14732 = x14731 * x14040;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14733 = x14730 + x14732;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14734 = x13977 * x14009;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14735 = x87 - x13977;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14736 = x14735 * x14041;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14737 = x14734 + x14736;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14738 = x13978 * x14010;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14739 = x87 - x13978;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14740 = x14739 * x14042;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14741 = x14738 + x14740;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14742 = x13979 * x14011;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14743 = x87 - x13979;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14744 = x14743 * x14043;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14745 = x14742 + x14744;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14746 = x13980 * x14012;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14747 = x87 - x13980;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14748 = x14747 * x14044;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14749 = x14746 + x14748;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14750 = x13981 * x14013;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14751 = x87 - x13981;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14752 = x14751 * x14045;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14753 = x14750 + x14752;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14754 = x13982 * x14014;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14755 = x87 - x13982;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14756 = x14755 * x14046;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14757 = x14754 + x14756;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14758 = x13983 * x14015;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14759 = x87 - x13983;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14760 = x14759 * x14047;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14761 = x14758 + x14760;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14762 = x13984 * x14016;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14763 = x87 - x13984;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14764 = x14763 * x14048;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14765 = x14762 + x14764;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14766 = x13985 * x14017;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14767 = x87 - x13985;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14768 = x14767 * x14049;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14769 = x14766 + x14768;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14770 = x13986 * x14018;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14771 = x87 - x13986;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14772 = x14771 * x14050;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14773 = x14770 + x14772;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14774 = x13987 * x14019;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14775 = x87 - x13987;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14776 = x14775 * x14051;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14777 = x14774 + x14776;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14778 = x13988 * x14020;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14779 = x87 - x13988;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14780 = x14779 * x14052;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14781 = x14778 + x14780;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14782 = x13989 * x14021;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14783 = x87 - x13989;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14784 = x14783 * x14053;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14785 = x14782 + x14784;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14786 = x13990 * x14022;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14787 = x87 - x13990;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14788 = x14787 * x14054;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14789 = x14786 + x14788;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14790 = x13991 * x14023;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14791 = x87 - x13991;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14792 = x14791 * x14055;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14793 = x14790 + x14792;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14794 = x13992 * x14024;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14795 = x87 - x13992;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14796 = x14795 * x14056;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14797 = x14794 + x14796;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14798 = x13993 * x14025;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14799 = x87 - x13993;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14800 = x14799 * x14057;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14801 = x14798 + x14800;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14802 = x13994 * x14026;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14803 = x87 - x13994;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14804 = x14803 * x14058;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14805 = x14802 + x14804;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14806 = x13995 * x14027;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14807 = x87 - x13995;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14808 = x14807 * x14059;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14809 = x14806 + x14808;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14810 = x13996 * x14028;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14811 = x87 - x13996;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14812 = x14811 * x14060;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14813 = x14810 + x14812;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14814 = x13997 * x14029;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14815 = x87 - x13997;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14816 = x14815 * x14061;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14817 = x14814 + x14816;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14818 = x13998 * x14030;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14819 = x87 - x13998;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14820 = x14819 * x14062;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14821 = x14818 + x14820;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14822 = x13999 * x14031;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14823 = x87 - x13999;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14824 = x14823 * x14063;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14825 = x14822 + x14824;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14826 = x14000 * x14032;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14827 = x87 - x14000;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14828 = x14827 * x14064;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14829 = x14826 + x14828;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14830 = x14001 * x14033;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:29)
      auto x14831 = x87 - x14001;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:28)
      auto x14832 = x14831 * x14065;
      // loc("cirgen/circuit/rv32im/sha.cpp":60:14)
      auto x14833 = x14830 + x14832;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14834 = x14713 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14835 = x14709 + x14834;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14836 = x14717 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14837 = x14835 + x14836;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14838 = x14721 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14839 = x14837 + x14838;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14840 = x14725 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14841 = x14839 + x14840;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14842 = x14729 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14843 = x14841 + x14842;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14844 = x14733 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14845 = x14843 + x14844;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14846 = x14737 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14847 = x14845 + x14846;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14848 = x14741 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14849 = x14847 + x14848;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14850 = x14745 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14851 = x14849 + x14850;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14852 = x14749 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14853 = x14851 + x14852;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14854 = x14753 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14855 = x14853 + x14854;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14856 = x14757 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14857 = x14855 + x14856;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14858 = x14761 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14859 = x14857 + x14858;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14860 = x14765 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14861 = x14859 + x14860;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14862 = x14769 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14863 = x14861 + x14862;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14864 = x14777 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14865 = x14773 + x14864;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14866 = x14781 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14867 = x14865 + x14866;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14868 = x14785 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14869 = x14867 + x14868;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14870 = x14789 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14871 = x14869 + x14870;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14872 = x14793 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14873 = x14871 + x14872;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14874 = x14797 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14875 = x14873 + x14874;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14876 = x14801 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14877 = x14875 + x14876;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14878 = x14805 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14879 = x14877 + x14878;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14880 = x14809 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14881 = x14879 + x14880;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14882 = x14813 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14883 = x14881 + x14882;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14884 = x14817 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14885 = x14883 + x14884;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14886 = x14821 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14887 = x14885 + x14886;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14888 = x14825 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14889 = x14887 + x14888;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14890 = x14829 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14891 = x14889 + x14890;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14892 = x14833 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14893 = x14891 + x14892;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14894 = x14495 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14895 = x14492 + x14894;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14896 = x14498 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14897 = x14895 + x14896;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14898 = x14501 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14899 = x14897 + x14898;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14900 = x14504 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14901 = x14899 + x14900;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14902 = x14507 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14903 = x14901 + x14902;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14904 = x14510 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14905 = x14903 + x14904;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14906 = x14513 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14907 = x14905 + x14906;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14908 = x14516 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14909 = x14907 + x14908;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14910 = x14519 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14911 = x14909 + x14910;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14912 = x14522 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14913 = x14911 + x14912;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14914 = x14525 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14915 = x14913 + x14914;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14916 = x14528 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14917 = x14915 + x14916;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14918 = x14531 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14919 = x14917 + x14918;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14920 = x14534 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14921 = x14919 + x14920;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14922 = x14537 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14923 = x14921 + x14922;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14924 = x14543 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14925 = x14540 + x14924;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14926 = x14546 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14927 = x14925 + x14926;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14928 = x14549 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14929 = x14927 + x14928;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14930 = x14552 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14931 = x14929 + x14930;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14932 = x14555 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14933 = x14931 + x14932;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14934 = x14558 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14935 = x14933 + x14934;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14936 = x14561 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14937 = x14935 + x14936;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14938 = x14564 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14939 = x14937 + x14938;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14940 = x14567 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14941 = x14939 + x14940;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14942 = x14570 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14943 = x14941 + x14942;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14944 = x14573 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14945 = x14943 + x14944;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14946 = x14576 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14947 = x14945 + x14946;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14948 = x14579 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14949 = x14947 + x14948;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14950 = x14582 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14951 = x14949 + x14950;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x14952 = x14585 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x14953 = x14951 + x14952;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x14954 = x14863 + x14923;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x14955 = x14893 + x14953;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x14956 = x14675 + x14954;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x14957 = x14705 + x14955;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x14958 = x14135 + x14956;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x14959 = x14137 + x14957;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x14960 = x14615 + x14958;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x14961 = x14645 + x14959;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14962 = x13842 * x13874;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x14963 = x87 - x13906;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14964 = x14962 * x14963;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x14965 = x87 - x13874;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x14966 = x13842 * x14965;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x14967 = x14966 * x13906;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14968 = x14964 + x14967;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x14969 = x87 - x13842;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x14970 = x14969 * x13874;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x14971 = x14970 * x13906;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14972 = x14968 + x14971;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x14973 = x14962 * x13906;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14974 = x14972 + x14973;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14975 = x13843 * x13875;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x14976 = x87 - x13907;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14977 = x14975 * x14976;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x14978 = x87 - x13875;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x14979 = x13843 * x14978;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x14980 = x14979 * x13907;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14981 = x14977 + x14980;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x14982 = x87 - x13843;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x14983 = x14982 * x13875;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x14984 = x14983 * x13907;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14985 = x14981 + x14984;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x14986 = x14975 * x13907;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14987 = x14985 + x14986;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14988 = x13844 * x13876;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x14989 = x87 - x13908;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14990 = x14988 * x14989;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x14991 = x87 - x13876;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x14992 = x13844 * x14991;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x14993 = x14992 * x13908;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14994 = x14990 + x14993;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x14995 = x87 - x13844;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x14996 = x14995 * x13876;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x14997 = x14996 * x13908;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x14998 = x14994 + x14997;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x14999 = x14988 * x13908;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15000 = x14998 + x14999;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15001 = x13845 * x13877;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15002 = x87 - x13909;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15003 = x15001 * x15002;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15004 = x87 - x13877;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15005 = x13845 * x15004;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15006 = x15005 * x13909;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15007 = x15003 + x15006;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15008 = x87 - x13845;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15009 = x15008 * x13877;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15010 = x15009 * x13909;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15011 = x15007 + x15010;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15012 = x15001 * x13909;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15013 = x15011 + x15012;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15014 = x13846 * x13878;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15015 = x87 - x13910;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15016 = x15014 * x15015;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15017 = x87 - x13878;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15018 = x13846 * x15017;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15019 = x15018 * x13910;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15020 = x15016 + x15019;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15021 = x87 - x13846;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15022 = x15021 * x13878;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15023 = x15022 * x13910;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15024 = x15020 + x15023;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15025 = x15014 * x13910;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15026 = x15024 + x15025;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15027 = x13847 * x13879;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15028 = x87 - x13911;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15029 = x15027 * x15028;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15030 = x87 - x13879;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15031 = x13847 * x15030;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15032 = x15031 * x13911;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15033 = x15029 + x15032;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15034 = x87 - x13847;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15035 = x15034 * x13879;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15036 = x15035 * x13911;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15037 = x15033 + x15036;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15038 = x15027 * x13911;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15039 = x15037 + x15038;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15040 = x13848 * x13880;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15041 = x87 - x13912;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15042 = x15040 * x15041;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15043 = x87 - x13880;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15044 = x13848 * x15043;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15045 = x15044 * x13912;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15046 = x15042 + x15045;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15047 = x87 - x13848;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15048 = x15047 * x13880;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15049 = x15048 * x13912;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15050 = x15046 + x15049;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15051 = x15040 * x13912;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15052 = x15050 + x15051;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15053 = x13849 * x13881;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15054 = x87 - x13913;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15055 = x15053 * x15054;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15056 = x87 - x13881;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15057 = x13849 * x15056;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15058 = x15057 * x13913;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15059 = x15055 + x15058;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15060 = x87 - x13849;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15061 = x15060 * x13881;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15062 = x15061 * x13913;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15063 = x15059 + x15062;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15064 = x15053 * x13913;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15065 = x15063 + x15064;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15066 = x13850 * x13882;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15067 = x87 - x13914;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15068 = x15066 * x15067;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15069 = x87 - x13882;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15070 = x13850 * x15069;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15071 = x15070 * x13914;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15072 = x15068 + x15071;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15073 = x87 - x13850;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15074 = x15073 * x13882;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15075 = x15074 * x13914;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15076 = x15072 + x15075;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15077 = x15066 * x13914;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15078 = x15076 + x15077;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15079 = x13851 * x13883;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15080 = x87 - x13915;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15081 = x15079 * x15080;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15082 = x87 - x13883;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15083 = x13851 * x15082;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15084 = x15083 * x13915;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15085 = x15081 + x15084;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15086 = x87 - x13851;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15087 = x15086 * x13883;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15088 = x15087 * x13915;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15089 = x15085 + x15088;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15090 = x15079 * x13915;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15091 = x15089 + x15090;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15092 = x13852 * x13884;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15093 = x87 - x13916;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15094 = x15092 * x15093;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15095 = x87 - x13884;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15096 = x13852 * x15095;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15097 = x15096 * x13916;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15098 = x15094 + x15097;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15099 = x87 - x13852;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15100 = x15099 * x13884;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15101 = x15100 * x13916;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15102 = x15098 + x15101;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15103 = x15092 * x13916;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15104 = x15102 + x15103;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15105 = x13853 * x13885;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15106 = x87 - x13917;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15107 = x15105 * x15106;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15108 = x87 - x13885;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15109 = x13853 * x15108;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15110 = x15109 * x13917;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15111 = x15107 + x15110;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15112 = x87 - x13853;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15113 = x15112 * x13885;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15114 = x15113 * x13917;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15115 = x15111 + x15114;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15116 = x15105 * x13917;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15117 = x15115 + x15116;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15118 = x13854 * x13886;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15119 = x87 - x13918;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15120 = x15118 * x15119;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15121 = x87 - x13886;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15122 = x13854 * x15121;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15123 = x15122 * x13918;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15124 = x15120 + x15123;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15125 = x87 - x13854;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15126 = x15125 * x13886;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15127 = x15126 * x13918;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15128 = x15124 + x15127;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15129 = x15118 * x13918;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15130 = x15128 + x15129;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15131 = x13855 * x13887;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15132 = x87 - x13919;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15133 = x15131 * x15132;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15134 = x87 - x13887;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15135 = x13855 * x15134;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15136 = x15135 * x13919;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15137 = x15133 + x15136;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15138 = x87 - x13855;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15139 = x15138 * x13887;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15140 = x15139 * x13919;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15141 = x15137 + x15140;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15142 = x15131 * x13919;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15143 = x15141 + x15142;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15144 = x13856 * x13888;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15145 = x87 - x13920;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15146 = x15144 * x15145;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15147 = x87 - x13888;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15148 = x13856 * x15147;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15149 = x15148 * x13920;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15150 = x15146 + x15149;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15151 = x87 - x13856;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15152 = x15151 * x13888;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15153 = x15152 * x13920;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15154 = x15150 + x15153;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15155 = x15144 * x13920;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15156 = x15154 + x15155;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15157 = x13857 * x13889;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15158 = x87 - x13921;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15159 = x15157 * x15158;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15160 = x87 - x13889;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15161 = x13857 * x15160;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15162 = x15161 * x13921;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15163 = x15159 + x15162;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15164 = x87 - x13857;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15165 = x15164 * x13889;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15166 = x15165 * x13921;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15167 = x15163 + x15166;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15168 = x15157 * x13921;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15169 = x15167 + x15168;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15170 = x13858 * x13890;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15171 = x87 - x13922;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15172 = x15170 * x15171;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15173 = x87 - x13890;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15174 = x13858 * x15173;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15175 = x15174 * x13922;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15176 = x15172 + x15175;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15177 = x87 - x13858;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15178 = x15177 * x13890;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15179 = x15178 * x13922;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15180 = x15176 + x15179;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15181 = x15170 * x13922;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15182 = x15180 + x15181;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15183 = x13859 * x13891;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15184 = x87 - x13923;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15185 = x15183 * x15184;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15186 = x87 - x13891;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15187 = x13859 * x15186;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15188 = x15187 * x13923;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15189 = x15185 + x15188;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15190 = x87 - x13859;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15191 = x15190 * x13891;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15192 = x15191 * x13923;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15193 = x15189 + x15192;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15194 = x15183 * x13923;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15195 = x15193 + x15194;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15196 = x13860 * x13892;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15197 = x87 - x13924;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15198 = x15196 * x15197;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15199 = x87 - x13892;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15200 = x13860 * x15199;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15201 = x15200 * x13924;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15202 = x15198 + x15201;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15203 = x87 - x13860;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15204 = x15203 * x13892;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15205 = x15204 * x13924;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15206 = x15202 + x15205;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15207 = x15196 * x13924;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15208 = x15206 + x15207;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15209 = x13861 * x13893;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15210 = x87 - x13925;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15211 = x15209 * x15210;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15212 = x87 - x13893;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15213 = x13861 * x15212;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15214 = x15213 * x13925;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15215 = x15211 + x15214;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15216 = x87 - x13861;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15217 = x15216 * x13893;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15218 = x15217 * x13925;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15219 = x15215 + x15218;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15220 = x15209 * x13925;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15221 = x15219 + x15220;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15222 = x13862 * x13894;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15223 = x87 - x13926;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15224 = x15222 * x15223;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15225 = x87 - x13894;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15226 = x13862 * x15225;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15227 = x15226 * x13926;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15228 = x15224 + x15227;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15229 = x87 - x13862;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15230 = x15229 * x13894;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15231 = x15230 * x13926;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15232 = x15228 + x15231;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15233 = x15222 * x13926;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15234 = x15232 + x15233;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15235 = x13863 * x13895;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15236 = x87 - x13927;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15237 = x15235 * x15236;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15238 = x87 - x13895;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15239 = x13863 * x15238;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15240 = x15239 * x13927;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15241 = x15237 + x15240;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15242 = x87 - x13863;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15243 = x15242 * x13895;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15244 = x15243 * x13927;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15245 = x15241 + x15244;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15246 = x15235 * x13927;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15247 = x15245 + x15246;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15248 = x13864 * x13896;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15249 = x87 - x13928;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15250 = x15248 * x15249;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15251 = x87 - x13896;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15252 = x13864 * x15251;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15253 = x15252 * x13928;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15254 = x15250 + x15253;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15255 = x87 - x13864;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15256 = x15255 * x13896;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15257 = x15256 * x13928;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15258 = x15254 + x15257;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15259 = x15248 * x13928;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15260 = x15258 + x15259;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15261 = x13865 * x13897;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15262 = x87 - x13929;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15263 = x15261 * x15262;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15264 = x87 - x13897;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15265 = x13865 * x15264;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15266 = x15265 * x13929;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15267 = x15263 + x15266;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15268 = x87 - x13865;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15269 = x15268 * x13897;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15270 = x15269 * x13929;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15271 = x15267 + x15270;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15272 = x15261 * x13929;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15273 = x15271 + x15272;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15274 = x13866 * x13898;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15275 = x87 - x13930;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15276 = x15274 * x15275;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15277 = x87 - x13898;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15278 = x13866 * x15277;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15279 = x15278 * x13930;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15280 = x15276 + x15279;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15281 = x87 - x13866;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15282 = x15281 * x13898;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15283 = x15282 * x13930;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15284 = x15280 + x15283;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15285 = x15274 * x13930;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15286 = x15284 + x15285;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15287 = x13867 * x13899;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15288 = x87 - x13931;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15289 = x15287 * x15288;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15290 = x87 - x13899;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15291 = x13867 * x15290;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15292 = x15291 * x13931;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15293 = x15289 + x15292;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15294 = x87 - x13867;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15295 = x15294 * x13899;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15296 = x15295 * x13931;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15297 = x15293 + x15296;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15298 = x15287 * x13931;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15299 = x15297 + x15298;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15300 = x13868 * x13900;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15301 = x87 - x13932;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15302 = x15300 * x15301;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15303 = x87 - x13900;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15304 = x13868 * x15303;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15305 = x15304 * x13932;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15306 = x15302 + x15305;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15307 = x87 - x13868;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15308 = x15307 * x13900;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15309 = x15308 * x13932;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15310 = x15306 + x15309;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15311 = x15300 * x13932;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15312 = x15310 + x15311;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15313 = x13869 * x13901;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15314 = x87 - x13933;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15315 = x15313 * x15314;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15316 = x87 - x13901;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15317 = x13869 * x15316;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15318 = x15317 * x13933;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15319 = x15315 + x15318;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15320 = x87 - x13869;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15321 = x15320 * x13901;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15322 = x15321 * x13933;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15323 = x15319 + x15322;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15324 = x15313 * x13933;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15325 = x15323 + x15324;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15326 = x13870 * x13902;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15327 = x87 - x13934;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15328 = x15326 * x15327;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15329 = x87 - x13902;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15330 = x13870 * x15329;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15331 = x15330 * x13934;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15332 = x15328 + x15331;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15333 = x87 - x13870;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15334 = x15333 * x13902;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15335 = x15334 * x13934;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15336 = x15332 + x15335;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15337 = x15326 * x13934;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15338 = x15336 + x15337;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15339 = x13871 * x13903;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15340 = x87 - x13935;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15341 = x15339 * x15340;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15342 = x87 - x13903;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15343 = x13871 * x15342;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15344 = x15343 * x13935;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15345 = x15341 + x15344;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15346 = x87 - x13871;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15347 = x15346 * x13903;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15348 = x15347 * x13935;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15349 = x15345 + x15348;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15350 = x15339 * x13935;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15351 = x15349 + x15350;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15352 = x13872 * x13904;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15353 = x87 - x13936;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15354 = x15352 * x15353;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15355 = x87 - x13904;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15356 = x13872 * x15355;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15357 = x15356 * x13936;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15358 = x15354 + x15357;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15359 = x87 - x13872;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15360 = x15359 * x13904;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15361 = x15360 * x13936;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15362 = x15358 + x15361;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15363 = x15352 * x13936;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15364 = x15362 + x15363;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15365 = x13873 * x13905;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:29)
      auto x15366 = x87 - x13937;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15367 = x15365 * x15366;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:49)
      auto x15368 = x87 - x13905;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15369 = x13873 * x15368;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:41)
      auto x15370 = x15369 * x13937;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15371 = x15367 + x15370;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:69)
      auto x15372 = x87 - x13873;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15373 = x15372 * x13905;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:68)
      auto x15374 = x15373 * x13937;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15375 = x15371 + x15374;
      // loc("cirgen/circuit/rv32im/sha.cpp":52:14)
      auto x15376 = x15365 * x13937;
      // loc("cirgen/circuit/rv32im/sha.cpp":51:14)
      auto x15377 = x15375 + x15376;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15378 = x14987 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15379 = x14974 + x15378;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15380 = x15000 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15381 = x15379 + x15380;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15382 = x15013 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15383 = x15381 + x15382;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15384 = x15026 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15385 = x15383 + x15384;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15386 = x15039 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15387 = x15385 + x15386;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15388 = x15052 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15389 = x15387 + x15388;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15390 = x15065 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15391 = x15389 + x15390;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15392 = x15078 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15393 = x15391 + x15392;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15394 = x15091 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15395 = x15393 + x15394;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15396 = x15104 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15397 = x15395 + x15396;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15398 = x15117 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15399 = x15397 + x15398;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15400 = x15130 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15401 = x15399 + x15400;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15402 = x15143 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15403 = x15401 + x15402;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15404 = x15156 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15405 = x15403 + x15404;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15406 = x15169 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15407 = x15405 + x15406;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15408 = x15195 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15409 = x15182 + x15408;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15410 = x15208 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15411 = x15409 + x15410;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15412 = x15221 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15413 = x15411 + x15412;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15414 = x15234 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15415 = x15413 + x15414;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15416 = x15247 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15417 = x15415 + x15416;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15418 = x15260 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15419 = x15417 + x15418;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15420 = x15273 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15421 = x15419 + x15420;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15422 = x15286 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15423 = x15421 + x15422;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15424 = x15299 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15425 = x15423 + x15424;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15426 = x15312 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15427 = x15425 + x15426;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15428 = x15325 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15429 = x15427 + x15428;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15430 = x15338 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15431 = x15429 + x15430;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15432 = x15351 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15433 = x15431 + x15432;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15434 = x15364 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15435 = x15433 + x15434;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15436 = x15377 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15437 = x15435 + x15436;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15438 = x14271 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15439 = x14268 + x15438;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15440 = x14274 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15441 = x15439 + x15440;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15442 = x14277 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15443 = x15441 + x15442;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15444 = x14280 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15445 = x15443 + x15444;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15446 = x14283 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15447 = x15445 + x15446;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15448 = x14286 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15449 = x15447 + x15448;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15450 = x14289 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15451 = x15449 + x15450;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15452 = x14292 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15453 = x15451 + x15452;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15454 = x14295 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15455 = x15453 + x15454;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15456 = x14298 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15457 = x15455 + x15456;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15458 = x14301 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15459 = x15457 + x15458;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15460 = x14304 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15461 = x15459 + x15460;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15462 = x14307 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15463 = x15461 + x15462;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15464 = x14310 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15465 = x15463 + x15464;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15466 = x14313 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15467 = x15465 + x15466;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15468 = x14319 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15469 = x14316 + x15468;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15470 = x14322 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15471 = x15469 + x15470;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15472 = x14325 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15473 = x15471 + x15472;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15474 = x14328 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15475 = x15473 + x15474;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15476 = x14331 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15477 = x15475 + x15476;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15478 = x14334 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15479 = x15477 + x15478;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15480 = x14337 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15481 = x15479 + x15480;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15482 = x14340 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15483 = x15481 + x15482;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15484 = x14343 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15485 = x15483 + x15484;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15486 = x14346 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15487 = x15485 + x15486;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15488 = x14349 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15489 = x15487 + x15488;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15490 = x14352 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15491 = x15489 + x15490;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15492 = x14355 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15493 = x15491 + x15492;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15494 = x14358 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15495 = x15493 + x15494;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15496 = x14361 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15497 = x15495 + x15496;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x15498 = x15407 + x15467;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x15499 = x15437 + x15497;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x15500 = x14960 + x15498;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x15501 = x14961 + x15499;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15502 = x13939 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15503 = x13938 + x15502;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15504 = x13940 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15505 = x15503 + x15504;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15506 = x13941 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15507 = x15505 + x15506;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15508 = x13942 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15509 = x15507 + x15508;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15510 = x13943 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15511 = x15509 + x15510;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15512 = x13944 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15513 = x15511 + x15512;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15514 = x13945 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15515 = x15513 + x15514;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15516 = x13946 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15517 = x15515 + x15516;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15518 = x13947 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15519 = x15517 + x15518;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15520 = x13948 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15521 = x15519 + x15520;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15522 = x13949 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15523 = x15521 + x15522;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15524 = x13950 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15525 = x15523 + x15524;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15526 = x13951 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15527 = x15525 + x15526;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15528 = x13952 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15529 = x15527 + x15528;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15530 = x13953 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15531 = x15529 + x15530;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15532 = x13955 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15533 = x13954 + x15532;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15534 = x13956 * x80;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15535 = x15533 + x15534;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15536 = x13957 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15537 = x15535 + x15536;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15538 = x13958 * x60;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15539 = x15537 + x15538;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15540 = x13959 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15541 = x15539 + x15540;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15542 = x13960 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15543 = x15541 + x15542;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15544 = x13961 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15545 = x15543 + x15544;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15546 = x13962 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15547 = x15545 + x15546;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15548 = x13963 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15549 = x15547 + x15548;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15550 = x13964 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15551 = x15549 + x15550;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15552 = x13965 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15553 = x15551 + x15552;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15554 = x13966 * x15;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15555 = x15553 + x15554;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15556 = x13967 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15557 = x15555 + x15556;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15558 = x13968 * x37;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15559 = x15557 + x15558;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:25)
      auto x15560 = x13969 * x10;
      // loc("cirgen/circuit/rv32im/sha.cpp":70:16)
      auto x15561 = x15559 + x15560;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x15562 = x14960 + x15531;
      // loc("cirgen/circuit/rv32im/sha.cpp":79:14)
      auto x15563 = x14961 + x15561;
      // loc("cirgen/circuit/rv32im/sha.cpp":336:5)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x15500);
        reg = x15500;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":337:5)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x15562);
        reg = x15562;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":336:5)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x15501);
        reg = x15501;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":337:5)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x15563);
        reg = x15563;
      }
      if (x86 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15564 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x15564 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15565 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x15565 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15566 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x15566 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15567 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x15567 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":128:26)
        auto x15568 = x15565 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:11)
        auto x15569 = x15564 + x15568;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:61)
        auto x15570 = x15567 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:46)
        auto x15571 = x15566 + x15570;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15572 = Fp(x15569.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15572);
            reg = x15572;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15573 = Fp(x15569.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15574 = x15573 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15574);
            reg = x15574;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15575 = Fp(x15569.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15576 = x15575 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15576);
            reg = x15576;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15577 = Fp(x15569.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15578 = x15577 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15578);
            reg = x15578;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15579 = Fp(x15569.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15580 = x15579 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15580);
            reg = x15580;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15581 = Fp(x15569.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15582 = x15581 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15582);
            reg = x15582;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15583 = Fp(x15569.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15584 = x15583 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15584);
            reg = x15584;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15585 = Fp(x15569.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15586 = x15585 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15586);
            reg = x15586;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15587 = Fp(x15569.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15588 = x15587 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15588);
            reg = x15588;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15589 = Fp(x15569.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15590 = x15589 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15590);
            reg = x15590;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15591 = Fp(x15569.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15592 = x15591 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15592);
            reg = x15592;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15593 = Fp(x15569.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15594 = x15593 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15594);
            reg = x15594;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15595 = Fp(x15569.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15596 = x15595 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15596);
            reg = x15596;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15597 = Fp(x15569.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15598 = x15597 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15598);
            reg = x15598;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15599 = Fp(x15569.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15600 = x15599 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15600);
            reg = x15600;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15601 = Fp(x15569.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15602 = x15601 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15602);
            reg = x15602;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15603 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x15603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15604 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x15604 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15605 = x15604 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15606 = x15603 + x15605;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15607 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x15607 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15608 = x15607 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15609 = x15606 + x15608;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15610 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x15610 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15611 = x15610 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15612 = x15609 + x15611;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15613 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x15613 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15614 = x15613 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15615 = x15612 + x15614;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15616 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x15616 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15617 = x15616 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15618 = x15615 + x15617;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15619 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x15619 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15620 = x15619 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15621 = x15618 + x15620;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15622 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x15622 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15623 = x15622 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15624 = x15621 + x15623;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15625 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x15625 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15626 = x15625 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15627 = x15624 + x15626;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15628 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x15628 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15629 = x15628 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15630 = x15627 + x15629;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15631 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x15631 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15632 = x15631 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15633 = x15630 + x15632;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15634 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x15634 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15635 = x15634 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15636 = x15633 + x15635;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15637 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x15637 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15638 = x15637 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15639 = x15636 + x15638;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15640 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x15640 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15641 = x15640 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15642 = x15639 + x15641;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15643 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x15643 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15644 = x15643 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15645 = x15642 + x15644;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15646 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x15646 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15647 = x15646 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15648 = x15645 + x15647;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x15649 = x15569 - x15648;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x15650 = x15649 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x15651 = Fp(x15650.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15651);
            reg = x15651;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15652 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x15652 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x15653 = x15650 - x15652;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x15654 = x15653 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x15655 = x87 - x15654;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x15656 = x15654 * x15655;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x15656 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x15657 = x15571 + x15650;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15658 = Fp(x15657.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15658);
            reg = x15658;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15659 = Fp(x15657.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15660 = x15659 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15660);
            reg = x15660;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15661 = Fp(x15657.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15662 = x15661 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15662);
            reg = x15662;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15663 = Fp(x15657.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15664 = x15663 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15664);
            reg = x15664;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15665 = Fp(x15657.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15666 = x15665 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15666);
            reg = x15666;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15667 = Fp(x15657.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15668 = x15667 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15668);
            reg = x15668;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15669 = Fp(x15657.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15670 = x15669 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15670);
            reg = x15670;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15671 = Fp(x15657.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15672 = x15671 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15672);
            reg = x15672;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15673 = Fp(x15657.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15674 = x15673 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15674);
            reg = x15674;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15675 = Fp(x15657.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15676 = x15675 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15676);
            reg = x15676;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15677 = Fp(x15657.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15678 = x15677 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15678);
            reg = x15678;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15679 = Fp(x15657.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15680 = x15679 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15680);
            reg = x15680;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15681 = Fp(x15657.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15682 = x15681 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15682);
            reg = x15682;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15683 = Fp(x15657.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15684 = x15683 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15684);
            reg = x15684;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15685 = Fp(x15657.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15686 = x15685 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15686);
            reg = x15686;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15687 = Fp(x15657.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15688 = x15687 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15688);
            reg = x15688;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15689 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x15689 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15690 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x15690 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15691 = x15690 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15692 = x15689 + x15691;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15693 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x15693 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15694 = x15693 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15695 = x15692 + x15694;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15696 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x15696 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15697 = x15696 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15698 = x15695 + x15697;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15699 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x15699 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15700 = x15699 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15701 = x15698 + x15700;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15702 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x15702 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15703 = x15702 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15704 = x15701 + x15703;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15705 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x15705 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15706 = x15705 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15707 = x15704 + x15706;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15708 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x15708 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15709 = x15708 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15710 = x15707 + x15709;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15711 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x15711 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15712 = x15711 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15713 = x15710 + x15712;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15714 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x15714 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15715 = x15714 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15716 = x15713 + x15715;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15717 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x15717 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15718 = x15717 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15719 = x15716 + x15718;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15720 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x15720 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15721 = x15720 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15722 = x15719 + x15721;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15723 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x15723 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15724 = x15723 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15725 = x15722 + x15724;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15726 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x15726 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15727 = x15726 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15728 = x15725 + x15727;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15729 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x15729 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15730 = x15729 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15731 = x15728 + x15730;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15732 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x15732 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15733 = x15732 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15734 = x15731 + x15733;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x15735 = x15657 - x15734;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x15736 = x15735 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x15737 = Fp(x15736.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15737);
            reg = x15737;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15738 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x15738 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x15739 = x15736 - x15738;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x15740 = x15739 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x15741 = x87 - x15740;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x15742 = x15740 * x15741;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x15742 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15743 = Fp(x14135.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15743);
            reg = x15743;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15744 = Fp(x14135.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15745 = x15744 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15745);
            reg = x15745;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15746 = Fp(x14135.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15747 = x15746 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15747);
            reg = x15747;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15748 = Fp(x14135.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15749 = x15748 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15749);
            reg = x15749;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15750 = Fp(x14135.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15751 = x15750 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15751);
            reg = x15751;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15752 = Fp(x14135.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15753 = x15752 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15753);
            reg = x15753;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15754 = Fp(x14135.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15755 = x15754 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15755);
            reg = x15755;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15756 = Fp(x14135.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15757 = x15756 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15757);
            reg = x15757;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15758 = Fp(x14135.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15759 = x15758 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15759);
            reg = x15759;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15760 = Fp(x14135.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15761 = x15760 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15761);
            reg = x15761;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15762 = Fp(x14135.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15763 = x15762 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15763);
            reg = x15763;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15764 = Fp(x14135.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15765 = x15764 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15765);
            reg = x15765;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15766 = Fp(x14135.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15767 = x15766 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15767);
            reg = x15767;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15768 = Fp(x14135.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15769 = x15768 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15769);
            reg = x15769;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15770 = Fp(x14135.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15771 = x15770 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15771);
            reg = x15771;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15772 = Fp(x14135.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15773 = x15772 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15773);
            reg = x15773;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15774 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x15774 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15775 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x15775 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15776 = x15775 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15777 = x15774 + x15776;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15778 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x15778 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15779 = x15778 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15780 = x15777 + x15779;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15781 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x15781 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15782 = x15781 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15783 = x15780 + x15782;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15784 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x15784 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15785 = x15784 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15786 = x15783 + x15785;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15787 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x15787 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15788 = x15787 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15789 = x15786 + x15788;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15790 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x15790 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15791 = x15790 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15792 = x15789 + x15791;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15793 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x15793 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15794 = x15793 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15795 = x15792 + x15794;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15796 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x15796 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15797 = x15796 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15798 = x15795 + x15797;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15799 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x15799 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15800 = x15799 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15801 = x15798 + x15800;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15802 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x15802 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15803 = x15802 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15804 = x15801 + x15803;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15805 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x15805 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15806 = x15805 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15807 = x15804 + x15806;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15808 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x15808 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15809 = x15808 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15810 = x15807 + x15809;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15811 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x15811 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15812 = x15811 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15813 = x15810 + x15812;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15814 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x15814 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15815 = x15814 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15816 = x15813 + x15815;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15817 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x15817 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15818 = x15817 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15819 = x15816 + x15818;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x15820 = x14135 - x15819;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x15821 = x15820 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x15822 = Fp(x15821.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15822);
            reg = x15822;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15823 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x15823 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x15824 = x15821 - x15823;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x15825 = x15824 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x15826 = x87 - x15825;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x15827 = x15825 * x15826;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x15827 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x15828 = x14137 + x15821;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15829 = Fp(x15828.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15829);
            reg = x15829;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15830 = Fp(x15828.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15831 = x15830 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15831);
            reg = x15831;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15832 = Fp(x15828.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15833 = x15832 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15833);
            reg = x15833;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15834 = Fp(x15828.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15835 = x15834 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15835);
            reg = x15835;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15836 = Fp(x15828.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15837 = x15836 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15837);
            reg = x15837;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15838 = Fp(x15828.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15839 = x15838 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15839);
            reg = x15839;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15840 = Fp(x15828.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15841 = x15840 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15841);
            reg = x15841;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15842 = Fp(x15828.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15843 = x15842 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15843);
            reg = x15843;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15844 = Fp(x15828.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15845 = x15844 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15845);
            reg = x15845;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15846 = Fp(x15828.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15847 = x15846 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15847);
            reg = x15847;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15848 = Fp(x15828.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15849 = x15848 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15849);
            reg = x15849;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15850 = Fp(x15828.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15851 = x15850 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15851);
            reg = x15851;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15852 = Fp(x15828.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15853 = x15852 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15853);
            reg = x15853;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15854 = Fp(x15828.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15855 = x15854 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15855);
            reg = x15855;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15856 = Fp(x15828.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15857 = x15856 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15857);
            reg = x15857;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15858 = Fp(x15828.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15859 = x15858 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15859);
            reg = x15859;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15860 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x15860 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15861 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x15861 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15862 = x15861 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15863 = x15860 + x15862;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15864 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x15864 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15865 = x15864 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15866 = x15863 + x15865;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15867 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x15867 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15868 = x15867 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15869 = x15866 + x15868;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15870 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x15870 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15871 = x15870 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15872 = x15869 + x15871;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15873 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x15873 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15874 = x15873 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15875 = x15872 + x15874;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15876 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x15876 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15877 = x15876 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15878 = x15875 + x15877;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15879 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x15879 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15880 = x15879 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15881 = x15878 + x15880;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15882 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x15882 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15883 = x15882 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15884 = x15881 + x15883;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15885 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x15885 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15886 = x15885 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15887 = x15884 + x15886;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15888 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x15888 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15889 = x15888 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15890 = x15887 + x15889;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15891 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x15891 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15892 = x15891 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15893 = x15890 + x15892;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15894 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x15894 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15895 = x15894 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15896 = x15893 + x15895;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15897 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x15897 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15898 = x15897 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15899 = x15896 + x15898;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15900 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x15900 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15901 = x15900 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15902 = x15899 + x15901;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15903 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x15903 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15904 = x15903 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15905 = x15902 + x15904;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x15906 = x15828 - x15905;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x15907 = x15906 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x15908 = Fp(x15907.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15908);
            reg = x15908;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15909 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x15909 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x15910 = x15907 - x15909;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x15911 = x15910 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x15912 = x87 - x15911;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x15913 = x15911 * x15912;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x15913 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      }
      if (x11734 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":136:11))
        auto x15914 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x15914 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":136:26))
        auto x15915 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x15915 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15916 = Fp(x15914.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15916);
            reg = x15916;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15917 = Fp(x15914.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15918 = x15917 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15918);
            reg = x15918;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15919 = Fp(x15914.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15920 = x15919 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15920);
            reg = x15920;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15921 = Fp(x15914.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15922 = x15921 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15922);
            reg = x15922;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15923 = Fp(x15914.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15924 = x15923 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15924);
            reg = x15924;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15925 = Fp(x15914.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15926 = x15925 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15926);
            reg = x15926;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15927 = Fp(x15914.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15928 = x15927 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15928);
            reg = x15928;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15929 = Fp(x15914.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15930 = x15929 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15930);
            reg = x15930;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15931 = Fp(x15914.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15932 = x15931 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15932);
            reg = x15932;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15933 = Fp(x15914.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15934 = x15933 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15934);
            reg = x15934;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15935 = Fp(x15914.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15936 = x15935 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15936);
            reg = x15936;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15937 = Fp(x15914.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15938 = x15937 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15938);
            reg = x15938;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15939 = Fp(x15914.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15940 = x15939 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15940);
            reg = x15940;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15941 = Fp(x15914.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15942 = x15941 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15942);
            reg = x15942;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15943 = Fp(x15914.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15944 = x15943 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15944);
            reg = x15944;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x15945 = Fp(x15914.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x15946 = x15945 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15946);
            reg = x15946;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15947 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x15947 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15948 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x15948 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15949 = x15948 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15950 = x15947 + x15949;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15951 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x15951 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15952 = x15951 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15953 = x15950 + x15952;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15954 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x15954 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15955 = x15954 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15956 = x15953 + x15955;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15957 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x15957 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15958 = x15957 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15959 = x15956 + x15958;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15960 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x15960 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15961 = x15960 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15962 = x15959 + x15961;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15963 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x15963 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15964 = x15963 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15965 = x15962 + x15964;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15966 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x15966 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15967 = x15966 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15968 = x15965 + x15967;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15969 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x15969 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15970 = x15969 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15971 = x15968 + x15970;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15972 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x15972 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15973 = x15972 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15974 = x15971 + x15973;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15975 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x15975 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15976 = x15975 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15977 = x15974 + x15976;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15978 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x15978 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15979 = x15978 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15980 = x15977 + x15979;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15981 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x15981 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15982 = x15981 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15983 = x15980 + x15982;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15984 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x15984 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15985 = x15984 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15986 = x15983 + x15985;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15987 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x15987 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15988 = x15987 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15989 = x15986 + x15988;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15990 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x15990 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x15991 = x15990 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x15992 = x15989 + x15991;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x15993 = x15914 - x15992;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x15994 = x15993 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x15995 = Fp(x15994.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x15995);
            reg = x15995;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x15996 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x15996 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x15997 = x15994 - x15996;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x15998 = x15997 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x15999 = x87 - x15998;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x16000 = x15998 * x15999;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x16000 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x16001 = x15915 + x15994;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16002 = Fp(x16001.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16002);
            reg = x16002;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16003 = Fp(x16001.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16004 = x16003 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16004);
            reg = x16004;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16005 = Fp(x16001.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16006 = x16005 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16006);
            reg = x16006;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16007 = Fp(x16001.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16008 = x16007 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16008);
            reg = x16008;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16009 = Fp(x16001.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16010 = x16009 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16010);
            reg = x16010;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16011 = Fp(x16001.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16012 = x16011 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16012);
            reg = x16012;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16013 = Fp(x16001.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16014 = x16013 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16014);
            reg = x16014;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16015 = Fp(x16001.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16016 = x16015 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16016);
            reg = x16016;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16017 = Fp(x16001.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16018 = x16017 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16018);
            reg = x16018;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16019 = Fp(x16001.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16020 = x16019 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16020);
            reg = x16020;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16021 = Fp(x16001.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16022 = x16021 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16022);
            reg = x16022;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16023 = Fp(x16001.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16024 = x16023 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16024);
            reg = x16024;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16025 = Fp(x16001.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16026 = x16025 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16026);
            reg = x16026;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16027 = Fp(x16001.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16028 = x16027 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16028);
            reg = x16028;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16029 = Fp(x16001.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16030 = x16029 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16030);
            reg = x16030;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16031 = Fp(x16001.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16032 = x16031 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16032);
            reg = x16032;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16033 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x16033 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16034 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x16034 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16035 = x16034 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16036 = x16033 + x16035;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16037 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x16037 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16038 = x16037 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16039 = x16036 + x16038;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16040 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x16040 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16041 = x16040 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16042 = x16039 + x16041;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16043 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x16043 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16044 = x16043 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16045 = x16042 + x16044;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16046 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x16046 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16047 = x16046 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16048 = x16045 + x16047;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16049 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x16049 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16050 = x16049 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16051 = x16048 + x16050;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16052 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x16052 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16053 = x16052 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16054 = x16051 + x16053;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16055 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x16055 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16056 = x16055 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16057 = x16054 + x16056;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16058 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x16058 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16059 = x16058 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16060 = x16057 + x16059;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16061 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x16061 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16062 = x16061 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16063 = x16060 + x16062;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16064 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x16064 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16065 = x16064 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16066 = x16063 + x16065;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16067 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x16067 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16068 = x16067 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16069 = x16066 + x16068;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16070 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x16070 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16071 = x16070 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16072 = x16069 + x16071;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16073 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x16073 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16074 = x16073 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16075 = x16072 + x16074;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16076 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x16076 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16077 = x16076 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16078 = x16075 + x16077;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x16079 = x16001 - x16078;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x16080 = x16079 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x16081 = Fp(x16080.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16081);
            reg = x16081;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16082 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x16082 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x16083 = x16080 - x16082;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x16084 = x16083 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x16085 = x87 - x16084;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x16086 = x16084 * x16085;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x16086 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":136:11))
        auto x16087 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x16087 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":136:26))
        auto x16088 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x16088 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16089 = Fp(x16087.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16089);
            reg = x16089;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16090 = Fp(x16087.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16091 = x16090 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16091);
            reg = x16091;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16092 = Fp(x16087.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16093 = x16092 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16093);
            reg = x16093;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16094 = Fp(x16087.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16095 = x16094 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16095);
            reg = x16095;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16096 = Fp(x16087.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16097 = x16096 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16097);
            reg = x16097;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16098 = Fp(x16087.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16099 = x16098 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16099);
            reg = x16099;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16100 = Fp(x16087.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16101 = x16100 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16101);
            reg = x16101;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16102 = Fp(x16087.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16103 = x16102 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16103);
            reg = x16103;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16104 = Fp(x16087.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16105 = x16104 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16105);
            reg = x16105;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16106 = Fp(x16087.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16107 = x16106 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16107);
            reg = x16107;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16108 = Fp(x16087.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16109 = x16108 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16109);
            reg = x16109;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16110 = Fp(x16087.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16111 = x16110 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16111);
            reg = x16111;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16112 = Fp(x16087.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16113 = x16112 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16113);
            reg = x16113;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16114 = Fp(x16087.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16115 = x16114 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16115);
            reg = x16115;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16116 = Fp(x16087.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16117 = x16116 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16117);
            reg = x16117;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16118 = Fp(x16087.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16119 = x16118 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16119);
            reg = x16119;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16120 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x16120 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16121 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x16121 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16122 = x16121 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16123 = x16120 + x16122;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16124 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x16124 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16125 = x16124 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16126 = x16123 + x16125;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16127 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x16127 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16128 = x16127 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16129 = x16126 + x16128;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16130 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x16130 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16131 = x16130 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16132 = x16129 + x16131;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16133 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x16133 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16134 = x16133 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16135 = x16132 + x16134;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16136 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x16136 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16137 = x16136 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16138 = x16135 + x16137;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16139 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x16139 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16140 = x16139 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16141 = x16138 + x16140;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16142 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x16142 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16143 = x16142 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16144 = x16141 + x16143;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16145 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x16145 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16146 = x16145 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16147 = x16144 + x16146;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16148 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x16148 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16149 = x16148 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16150 = x16147 + x16149;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16151 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x16151 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16152 = x16151 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16153 = x16150 + x16152;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16154 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x16154 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16155 = x16154 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16156 = x16153 + x16155;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16157 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x16157 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16158 = x16157 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16159 = x16156 + x16158;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16160 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x16160 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16161 = x16160 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16162 = x16159 + x16161;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16163 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x16163 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16164 = x16163 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16165 = x16162 + x16164;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x16166 = x16087 - x16165;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x16167 = x16166 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":118:26)
          auto x16168 = Fp(x16167.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16168);
            reg = x16168;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16169 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x16169 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":119:20)
        auto x16170 = x16167 - x16169;
        // loc("cirgen/circuit/rv32im/sha.cpp":119:19)
        auto x16171 = x16170 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:20)
        auto x16172 = x87 - x16171;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        auto x16173 = x16171 * x16172;
        // loc("cirgen/circuit/rv32im/sha.cpp":120:7)
        if (x16173 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:120");
        // loc("cirgen/circuit/rv32im/sha.cpp":121:32)
        auto x16174 = x16088 + x16167;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16175 = Fp(x16174.asUInt32() & x87.asUInt32());
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16175);
            reg = x16175;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16176 = Fp(x16174.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16177 = x16176 * x57;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16177);
            reg = x16177;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16178 = Fp(x16174.asUInt32() & x80.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16179 = x16178 * x78;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16179);
            reg = x16179;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16180 = Fp(x16174.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16181 = x16180 * x58;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16181);
            reg = x16181;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16182 = Fp(x16174.asUInt32() & x60.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16183 = x16182 * x59;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16183);
            reg = x16183;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16184 = Fp(x16174.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16185 = x16184 * x61;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16185);
            reg = x16185;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16186 = Fp(x16174.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16187 = x16186 * x55;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16187);
            reg = x16187;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16188 = Fp(x16174.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16189 = x16188 * x64;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16189);
            reg = x16189;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16190 = Fp(x16174.asUInt32() & x82.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16191 = x16190 * x81;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16191);
            reg = x16191;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16192 = Fp(x16174.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16193 = x16192 * x20;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16193);
            reg = x16193;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16194 = Fp(x16174.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16195 = x16194 * x18;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16195);
            reg = x16195;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16196 = Fp(x16174.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16197 = x16196 * x16;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16197);
            reg = x16197;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16198 = Fp(x16174.asUInt32() & x15.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16199 = x16198 * x14;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16199);
            reg = x16199;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16200 = Fp(x16174.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16201 = x16200 * x12;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16201);
            reg = x16201;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16202 = Fp(x16174.asUInt32() & x37.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16203 = x16202 * x11;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16203);
            reg = x16203;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":100:29)
          auto x16204 = Fp(x16174.asUInt32() & x10.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":100:28)
          auto x16205 = x16204 * x9;
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16205);
            reg = x16205;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16206 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x16206 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16207 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x16207 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16208 = x16207 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16209 = x16206 + x16208;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16210 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x16210 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16211 = x16210 * x80;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16212 = x16209 + x16211;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16213 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x16213 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16214 = x16213 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16215 = x16212 + x16214;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16216 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x16216 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16217 = x16216 * x60;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16218 = x16215 + x16217;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16219 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x16219 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16220 = x16219 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16221 = x16218 + x16220;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16222 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x16222 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16223 = x16222 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16224 = x16221 + x16223;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16225 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x16225 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16226 = x16225 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16227 = x16224 + x16226;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16228 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x16228 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16229 = x16228 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16230 = x16227 + x16229;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16231 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x16231 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16232 = x16231 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16233 = x16230 + x16232;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16234 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x16234 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16235 = x16234 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16236 = x16233 + x16235;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16237 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x16237 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16238 = x16237 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16239 = x16236 + x16238;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16240 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x16240 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16241 = x16240 * x15;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16242 = x16239 + x16241;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16243 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x16243 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16244 = x16243 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16245 = x16242 + x16244;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16246 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x16246 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16247 = x16246 * x37;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16248 = x16245 + x16247;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16249 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x16249 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":105:21)
        auto x16250 = x16249 * x10;
        // loc("cirgen/circuit/rv32im/sha.cpp":105:13)
        auto x16251 = x16248 + x16250;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:16)
        auto x16252 = x16174 - x16251;
        // loc("cirgen/circuit/rv32im/sha.cpp":107:15)
        auto x16253 = x16252 * x8;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:27)
          auto x16254 = Fp(x16253.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16254);
            reg = x16254;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16255 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x16255 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:21)
        auto x16256 = x16253 - x16255;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x16257 = x16256 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:21)
        auto x16258 = x87 - x16257;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x16259 = x16257 * x16258;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x16259 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/components/mux.h":33:25))
    auto x16260 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x16260 != Fp::invalid());
    if (x16260 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x16261 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x16261 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":247:41)
      auto x16262 = x526 * x78;
      {
        host_args.at(0) = x16262;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x16263 = host_outs.at(0);
        auto x16264 = host_outs.at(1);
        auto x16265 = host_outs.at(2);
        auto x16266 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16263);
          reg = x16263;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16264);
          reg = x16264;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16265);
          reg = x16265;
        }
        // loc("cirgen/components/u32.cpp":72:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16266);
          reg = x16266;
        }
      }
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x16267 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x16267 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x16268 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x16268 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x16269 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x16269 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x16270 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x16270 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":100:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x16262);
        reg = x16262;
      }
      // loc("cirgen/components/ram.cpp":101:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x16261);
        reg = x16261;
      }
      // loc("cirgen/components/ram.cpp":102:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x16267);
        reg = x16267;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x16268);
        reg = x16268;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x16269);
        reg = x16269;
      }
      // loc("cirgen/components/u32.cpp":24:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x16270);
        reg = x16270;
      }
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/ffpu.cpp":249:69))
      auto x16271 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x16271 != Fp::invalid());
      if (x16271 != 0) {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16272 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x16272 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16273 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x16273 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16274 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x16274 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16275 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x16275 != Fp::invalid());
        // loc("./cirgen/components/u32.h":16:34)
        auto x16276 = x16273 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x16277 = x16272 + x16276;
        // loc("./cirgen/components/u32.h":16:51)
        auto x16278 = x16274 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x16279 = x16277 + x16278;
        // loc("./cirgen/components/u32.h":16:74)
        auto x16280 = x16275 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x16281 = x16279 + x16280;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":255:27)
        auto x16282 = x16281 * x78;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":255:5)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16282);
          reg = x16282;
        }
        {
          host_args.at(0) = x26;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x16283 = host_outs.at(0);
          auto x16284 = host_outs.at(1);
          auto x16285 = host_outs.at(2);
          auto x16286 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16283);
            reg = x16283;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16284);
            reg = x16284;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16285);
            reg = x16285;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16286);
            reg = x16286;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16287 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x16287 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16288 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x16288 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16289 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x16289 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16290 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x16290 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16287);
          reg = x16287;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16288);
          reg = x16288;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16289);
          reg = x16289;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16290);
          reg = x16290;
        }
        // loc("./cirgen/components/u32.h":16:34)
        auto x16291 = x16288 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x16292 = x16287 + x16291;
        // loc("./cirgen/components/u32.h":16:51)
        auto x16293 = x16289 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x16294 = x16292 + x16293;
        // loc("./cirgen/components/u32.h":16:74)
        auto x16295 = x16290 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x16296 = x16294 + x16295;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":258:5)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16296);
          reg = x16296;
        }
        // loc("cirgen/components/ram.cpp":39:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":40:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":41:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":39:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":40:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":41:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("Top/Mux/4/Mux/8/Mux/4/Reg"("cirgen/circuit/rv32im/ffpu.cpp":262:50))
        auto x16297 = args[2][165 * steps + ((cycle - 1) & mask)];
        assert(x16297 != Fp::invalid());
        host_args.at(0) = x16297;
        host(ctx, "log", "origPc: %u", host_args.data(), 1, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":264:24)
        auto x16298 = x16297 + x80;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":264:5)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16298);
          reg = x16298;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16299 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x16299 != Fp::invalid());
        host_args.at(0) = x16281;
        host_args.at(1) = x16299;
        host_args.at(2) = x16297;
        host(ctx, "log", "FFPU INIT, baseAddr = %u, haltPos = %u, origPc = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":272:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":273:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        {
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/onehot.h":31:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x16300 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x16300 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x16301 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x16301 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x16302 = x16301 * x84;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x16303 = x16300 + x16302;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x16304 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x16304 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x16305 = x16304 * x79;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x16306 = x16303 + x16305;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x16307 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x16307 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x16308 = x16307 * x80;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x16309 = x16306 + x16308;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x16310 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x16310 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x16311 = x16310 * x73;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x16312 = x16309 + x16311;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x16313 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x16313 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x16314 = x16313 * x72;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x16315 = x16312 + x16314;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x16316 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x16316 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":40:19)
        auto x16317 = x16316 * x71;
        // loc("./cirgen/components/onehot.h":40:13)
        auto x16318 = x16315 + x16317;
        // loc("./cirgen/components/onehot.h":34:8)
        if (x16318 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
      }
      // loc("cirgen/circuit/rv32im/ffpu.cpp":278:22)
      auto x16319 = x87 - x16271;
      if (x16319 != 0) {
        // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":280:58))
        auto x16320 = args[2][174 * steps + ((cycle - 1) & mask)];
        assert(x16320 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":280:5)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16320);
          reg = x16320;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":281:40))
        auto x16321 = args[2][168 * steps + ((cycle - 1) & mask)];
        assert(x16321 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":281:5)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16321);
          reg = x16321;
        }
        // loc("Top/Mux/4/Mux/12/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":282:52))
        auto x16322 = args[2][173 * steps + ((cycle - 1) & mask)];
        assert(x16322 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":282:5)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16322);
          reg = x16322;
        }
        // loc("Top/Mux/4/Mux/12/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16323 = args[2][178 * steps + ((cycle - 1) & mask)];
        assert(x16323 != Fp::invalid());
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16323);
          reg = x16323;
        }
        // loc("Top/Mux/4/Mux/12/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":285:60))
        auto x16324 = args[2][172 * steps + ((cycle - 1) & mask)];
        assert(x16324 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":285:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16324);
          reg = x16324;
        }
      }
      {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":300:20)
        auto x16325 = Fp(x16267.asUInt32() & x79.asUInt32());
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16325);
          reg = x16325;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":301:23)
        auto x16326 = Fp(x16267.asUInt32() & x80.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":301:22)
        auto x16327 = x16326 * x78;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16327);
          reg = x16327;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":302:25)
        auto x16328 = Fp(x16267.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":302:24)
        auto x16329 = x16328 * x58;
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16329);
          reg = x16329;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":303:21)
        auto x16330 = Fp(x16267.asUInt32() & x44.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":303:20)
        auto x16331 = x16330 * x59;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x16332 = Fp(x16331.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16332);
            reg = x16332;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x16333 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x16333 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/Bit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x16334 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x16334 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":305:18)
      auto x16335 = x16334 * x80;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":305:6)
      auto x16336 = x16333 + x16335;
      // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x16337 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x16337 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":305:43)
      auto x16338 = x16337 * x70;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":305:6)
      auto x16339 = x16336 + x16338;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":74:10))
      auto x16340 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x16340 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":305:70)
      auto x16341 = x16340 * x60;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":305:6)
      auto x16342 = x16339 + x16341;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":305:6)
      auto x16343 = x16342 - x16267;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":305:6)
      if (x16343 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:305");
      // loc("cirgen/circuit/rv32im/ffpu.cpp":319:17)
      auto x16344 = x16270 * x82;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":319:17)
      auto x16345 = x16344 + x16269;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":321:7)
      auto x16346 = x16268 * x56;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":321:34)
      auto x16347 = x16340 * x80;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":321:7)
      auto x16348 = x16346 + x16347;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":321:57)
      auto x16349 = x16337 * x84;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":321:7)
      auto x16350 = x16348 + x16349;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":321:7)
      auto x16351 = x16350 + x16334;
      {
        if (x16319 != 0) {
          // loc("cirgen/circuit/rv32im/ffpu.cpp":339:31)
          auto x16352 = x16333 - x87;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":339:31)
          auto x16353 = (x16352 == 0) ? Fp(1) : Fp(0);
          if (x16353 != 0) {
            {
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][160 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16354 = args[2][161 * steps + ((cycle - 0) & mask)];
            assert(x16354 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16355 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x16355 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16356 = x16355 * x84;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16357 = x16354 + x16356;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16358 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x16358 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16359 = x16358 * x79;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16360 = x16357 + x16359;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16361 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x16361 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16362 = x16361 * x80;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16363 = x16360 + x16362;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16364 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x16364 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16365 = x16364 * x73;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16366 = x16363 + x16365;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16367 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x16367 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16368 = x16367 * x72;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16369 = x16366 + x16368;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16370 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x16370 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16371 = x16370 * x71;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16372 = x16369 + x16371;
            // loc("./cirgen/components/onehot.h":34:8)
            auto x16373 = x16372 - x87;
            // loc("./cirgen/components/onehot.h":34:8)
            if (x16373 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":340:31)
          auto x16374 = x16333 - x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":340:31)
          auto x16375 = (x16374 == 0) ? Fp(1) : Fp(0);
          if (x16375 != 0) {
            {
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][160 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16376 = args[2][161 * steps + ((cycle - 0) & mask)];
            assert(x16376 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16377 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x16377 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16378 = x16377 * x84;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16379 = x16376 + x16378;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16380 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x16380 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16381 = x16380 * x79;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16382 = x16379 + x16381;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16383 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x16383 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16384 = x16383 * x80;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16385 = x16382 + x16384;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16386 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x16386 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16387 = x16386 * x73;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16388 = x16385 + x16387;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16389 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x16389 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16390 = x16389 * x72;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16391 = x16388 + x16390;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16392 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x16392 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16393 = x16392 * x71;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16394 = x16391 + x16393;
            // loc("./cirgen/components/onehot.h":34:8)
            auto x16395 = x16394 - x84;
            // loc("./cirgen/components/onehot.h":34:8)
            if (x16395 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":341:31)
          auto x16396 = x16333 - x79;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":341:31)
          auto x16397 = (x16396 == 0) ? Fp(1) : Fp(0);
          if (x16397 != 0) {
            {
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][160 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
              // loc("./cirgen/components/onehot.h":31:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x86);
                reg = x86;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16398 = args[2][161 * steps + ((cycle - 0) & mask)];
            assert(x16398 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16399 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x16399 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16400 = x16399 * x84;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16401 = x16398 + x16400;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16402 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x16402 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16403 = x16402 * x79;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16404 = x16401 + x16403;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16405 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x16405 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16406 = x16405 * x80;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16407 = x16404 + x16406;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16408 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x16408 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16409 = x16408 * x73;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16410 = x16407 + x16409;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16411 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x16411 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16412 = x16411 * x72;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16413 = x16410 + x16412;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
            auto x16414 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x16414 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":40:19)
            auto x16415 = x16414 * x71;
            // loc("./cirgen/components/onehot.h":40:13)
            auto x16416 = x16413 + x16415;
            // loc("./cirgen/components/onehot.h":34:8)
            auto x16417 = x16416 - x79;
            // loc("./cirgen/components/onehot.h":34:8)
            if (x16417 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":342:24)
          auto x16418 = (x16333 == 0) ? Fp(1) : Fp(0);
          if (x16418 != 0) {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":343:29)
            auto x16419 = x87 - x16337;
            if (x16419 != 0) {
              if (x16334 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][160 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16420 = args[2][161 * steps + ((cycle - 0) & mask)];
                assert(x16420 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16421 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x16421 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16422 = x16421 * x84;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16423 = x16420 + x16422;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16424 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x16424 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16425 = x16424 * x79;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16426 = x16423 + x16425;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16427 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x16427 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16428 = x16427 * x80;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16429 = x16426 + x16428;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16430 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x16430 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16431 = x16430 * x73;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16432 = x16429 + x16431;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16433 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x16433 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16434 = x16433 * x72;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16435 = x16432 + x16434;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16436 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x16436 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16437 = x16436 * x71;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16438 = x16435 + x16437;
                // loc("./cirgen/components/onehot.h":34:8)
                auto x16439 = x16438 - x80;
                // loc("./cirgen/components/onehot.h":34:8)
                if (x16439 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
              }
              // loc("cirgen/circuit/rv32im/ffpu.cpp":345:29)
              auto x16440 = x87 - x16334;
              if (x16440 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][160 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16441 = args[2][161 * steps + ((cycle - 0) & mask)];
                assert(x16441 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16442 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x16442 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16443 = x16442 * x84;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16444 = x16441 + x16443;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16445 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x16445 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16446 = x16445 * x79;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16447 = x16444 + x16446;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16448 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x16448 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16449 = x16448 * x80;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16450 = x16447 + x16449;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16451 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x16451 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16452 = x16451 * x73;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16453 = x16450 + x16452;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16454 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x16454 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16455 = x16454 * x72;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16456 = x16453 + x16455;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16457 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x16457 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16458 = x16457 * x71;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16459 = x16456 + x16458;
                // loc("./cirgen/components/onehot.h":34:8)
                auto x16460 = x16459 - x73;
                // loc("./cirgen/components/onehot.h":34:8)
                if (x16460 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
              }
            }
            if (x16337 != 0) {
              // loc("cirgen/circuit/rv32im/ffpu.cpp":348:30)
              auto x16461 = (x16268 == 0) ? Fp(1) : Fp(0);
              if (x16461 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][160 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16462 = args[2][161 * steps + ((cycle - 0) & mask)];
                assert(x16462 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16463 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x16463 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16464 = x16463 * x84;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16465 = x16462 + x16464;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16466 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x16466 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16467 = x16466 * x79;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16468 = x16465 + x16467;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16469 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x16469 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16470 = x16469 * x80;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16471 = x16468 + x16470;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16472 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x16472 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16473 = x16472 * x73;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16474 = x16471 + x16473;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16475 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x16475 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16476 = x16475 * x72;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16477 = x16474 + x16476;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16478 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x16478 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16479 = x16478 * x71;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16480 = x16477 + x16479;
                // loc("./cirgen/components/onehot.h":34:8)
                auto x16481 = x16480 - x72;
                // loc("./cirgen/components/onehot.h":34:8)
                if (x16481 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
              }
              // loc("cirgen/circuit/rv32im/ffpu.cpp":349:34)
              auto x16482 = x16268 - x87;
              // loc("cirgen/circuit/rv32im/ffpu.cpp":349:34)
              auto x16483 = (x16482 == 0) ? Fp(1) : Fp(0);
              if (x16483 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][160 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x86);
                    reg = x86;
                  }
                  // loc("./cirgen/components/onehot.h":31:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16484 = args[2][161 * steps + ((cycle - 0) & mask)];
                assert(x16484 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16485 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x16485 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16486 = x16485 * x84;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16487 = x16484 + x16486;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16488 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x16488 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16489 = x16488 * x79;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16490 = x16487 + x16489;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16491 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x16491 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16492 = x16491 * x80;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16493 = x16490 + x16492;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16494 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x16494 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16495 = x16494 * x73;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16496 = x16493 + x16495;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16497 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x16497 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16498 = x16497 * x72;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16499 = x16496 + x16498;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
                auto x16500 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x16500 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":40:19)
                auto x16501 = x16500 * x71;
                // loc("./cirgen/components/onehot.h":40:13)
                auto x16502 = x16499 + x16501;
                // loc("./cirgen/components/onehot.h":34:8)
                auto x16503 = x16502 - x71;
                // loc("./cirgen/components/onehot.h":34:8)
                if (x16503 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:34");
              }
            }
          }
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg"("cirgen/circuit/rv32im/ffpu.cpp":360:21))
        auto x16504 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x16504 != Fp::invalid());
        if (x16504 != 0) {
          host_args.at(0) = x16267;
          host_args.at(1) = x16268;
          host_args.at(2) = x16269;
          host_args.at(3) = x16270;
          host_args.at(4) = x526;
          host(ctx, "log", "FFPU Decoded INIT from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":361:26))
        auto x16505 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x16505 != Fp::invalid());
        if (x16505 != 0) {
          host_args.at(0) = x16267;
          host_args.at(1) = x16268;
          host_args.at(2) = x16269;
          host_args.at(3) = x16270;
          host_args.at(4) = x526;
          host(ctx, "log", "FFPU Decoded BINOP_ADD from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":362:26))
        auto x16506 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x16506 != Fp::invalid());
        if (x16506 != 0) {
          host_args.at(0) = x16267;
          host_args.at(1) = x16268;
          host_args.at(2) = x16269;
          host_args.at(3) = x16270;
          host_args.at(4) = x526;
          host(ctx, "log", "FFPU Decoded BINOP_SUB from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":363:26))
        auto x16507 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x16507 != Fp::invalid());
        if (x16507 != 0) {
          host_args.at(0) = x16267;
          host_args.at(1) = x16268;
          host_args.at(2) = x16269;
          host_args.at(3) = x16270;
          host_args.at(4) = x526;
          host(ctx, "log", "FFPU Decoded BINOP_MUL from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":364:20))
        auto x16508 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x16508 != Fp::invalid());
        if (x16508 != 0) {
          host_args.at(0) = x16267;
          host_args.at(1) = x16268;
          host_args.at(2) = x16269;
          host_args.at(3) = x16270;
          host_args.at(4) = x526;
          host(ctx, "log", "FFPU Decoded SET from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("cirgen/circuit/rv32im/ffpu.cpp":365:20))
        auto x16509 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x16509 != Fp::invalid());
        if (x16509 != 0) {
          host_args.at(0) = x16267;
          host_args.at(1) = x16268;
          host_args.at(2) = x16269;
          host_args.at(3) = x16270;
          host_args.at(4) = x526;
          host(ctx, "log", "FFPU Decoded GET from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("cirgen/circuit/rv32im/ffpu.cpp":366:30))
        auto x16510 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x16510 != Fp::invalid());
        if (x16510 != 0) {
          host_args.at(0) = x16267;
          host_args.at(1) = x16268;
          host_args.at(2) = x16269;
          host_args.at(3) = x16270;
          host_args.at(4) = x526;
          host(ctx, "log", "FFPU Decoded UNOP_IDENTITY from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("cirgen/circuit/rv32im/ffpu.cpp":367:25))
        auto x16511 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x16511 != Fp::invalid());
        if (x16511 != 0) {
          host_args.at(0) = x16267;
          host_args.at(1) = x16268;
          host_args.at(2) = x16269;
          host_args.at(3) = x16270;
          host_args.at(4) = x526;
          host(ctx, "log", "FFPU Decoded UNOP_INV from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":372:32))
      auto x16512 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x16512 != Fp::invalid());
      if (x16512 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":373:8)
        auto x16513 = x16333 - x87;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":373:8)
        if (x16513 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:373");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16514 = x16345 + x6;
        {
          host_args.at(0) = x16514;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x16515 = host_outs.at(0);
          auto x16516 = host_outs.at(1);
          auto x16517 = host_outs.at(2);
          auto x16518 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16515);
            reg = x16515;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16516);
            reg = x16516;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16517);
            reg = x16517;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16518);
            reg = x16518;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16519 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x16519 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16520 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x16520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16521 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x16521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16522 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x16522 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16514);
          reg = x16514;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16519);
          reg = x16519;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16520);
          reg = x16520;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16521);
          reg = x16521;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16522);
          reg = x16522;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16523 = x16351 + x6;
        {
          host_args.at(0) = x16523;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x16524 = host_outs.at(0);
          auto x16525 = host_outs.at(1);
          auto x16526 = host_outs.at(2);
          auto x16527 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16524);
            reg = x16524;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16525);
            reg = x16525;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16526);
            reg = x16526;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16527);
            reg = x16527;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16528 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x16528 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16529 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x16529 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16530 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x16530 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16531 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x16531 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16523);
          reg = x16523;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16528);
          reg = x16528;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16529);
          reg = x16529;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16530);
          reg = x16530;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16531);
          reg = x16531;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":56:85)
        auto x16532 = x16519 + x16528;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":56:85)
        auto x16533 = x16520 + x16529;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":56:85)
        auto x16534 = x16521 + x16530;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":56:85)
        auto x16535 = x16522 + x16531;
        host_args.at(0) = x16345;
        host_args.at(1) = x16519;
        host_args.at(2) = x16520;
        host_args.at(3) = x16521;
        host_args.at(4) = x16522;
        host_args.at(5) = x16351;
        host_args.at(6) = x16528;
        host_args.at(7) = x16529;
        host_args.at(8) = x16530;
        host_args.at(9) = x16531;
        host_args.at(10) = x16532;
        host_args.at(11) = x16533;
        host_args.at(12) = x16534;
        host_args.at(13) = x16535;
        host(ctx, "log", "FFPU: Add %%%u (%w) + %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":13:20))
        auto x16536 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x16536 != Fp::invalid());
        host_args.at(0) = x16536;
        host_args.at(1) = x16532;
        host_args.at(2) = x16533;
        host_args.at(3) = x16534;
        host_args.at(4) = x16535;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16537 = x16536 + x6;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16532);
          reg = x16532;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16533);
          reg = x16533;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16534);
          reg = x16534;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16535);
          reg = x16535;
        }
        {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16538 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x16538 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16539 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x16539 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16540 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x16540 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16541 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x16541 != Fp::invalid());
          host_args.at(0) = x16537;
          host_args.at(1) = x16538;
          host_args.at(2) = x16539;
          host_args.at(3) = x16540;
          host_args.at(4) = x16541;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16542 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x16542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16543 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x16543 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16544 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x16544 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16545 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x16545 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16537);
          reg = x16537;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16542);
          reg = x16542;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16543);
          reg = x16543;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16544);
          reg = x16544;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16545);
          reg = x16545;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":24:28)
        auto x16546 = x16536 + x87;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":24:3)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16546);
          reg = x16546;
        }
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":376:32))
      auto x16547 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x16547 != Fp::invalid());
      if (x16547 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":377:8)
        auto x16548 = x16333 - x84;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":377:8)
        if (x16548 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:377");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16549 = x16345 + x6;
        {
          host_args.at(0) = x16549;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x16550 = host_outs.at(0);
          auto x16551 = host_outs.at(1);
          auto x16552 = host_outs.at(2);
          auto x16553 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16550);
            reg = x16550;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16551);
            reg = x16551;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16552);
            reg = x16552;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16553);
            reg = x16553;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16554 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x16554 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16555 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x16555 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16556 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x16556 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16557 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x16557 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16549);
          reg = x16549;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16554);
          reg = x16554;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16555);
          reg = x16555;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16556);
          reg = x16556;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16557);
          reg = x16557;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16558 = x16351 + x6;
        {
          host_args.at(0) = x16558;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x16559 = host_outs.at(0);
          auto x16560 = host_outs.at(1);
          auto x16561 = host_outs.at(2);
          auto x16562 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16559);
            reg = x16559;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16560);
            reg = x16560;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16561);
            reg = x16561;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16562);
            reg = x16562;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16563 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x16563 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16564 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x16564 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16565 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x16565 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16566 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x16566 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16558);
          reg = x16558;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16563);
          reg = x16563;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16564);
          reg = x16564;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16565);
          reg = x16565;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16566);
          reg = x16566;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":61:85)
        auto x16567 = x16554 - x16563;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":61:85)
        auto x16568 = x16555 - x16564;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":61:85)
        auto x16569 = x16556 - x16565;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":61:85)
        auto x16570 = x16557 - x16566;
        host_args.at(0) = x16345;
        host_args.at(1) = x16554;
        host_args.at(2) = x16555;
        host_args.at(3) = x16556;
        host_args.at(4) = x16557;
        host_args.at(5) = x16351;
        host_args.at(6) = x16563;
        host_args.at(7) = x16564;
        host_args.at(8) = x16565;
        host_args.at(9) = x16566;
        host_args.at(10) = x16567;
        host_args.at(11) = x16568;
        host_args.at(12) = x16569;
        host_args.at(13) = x16570;
        host(ctx, "log", "FFPU: Sub %%%u (%w) - %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":13:20))
        auto x16571 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x16571 != Fp::invalid());
        host_args.at(0) = x16571;
        host_args.at(1) = x16567;
        host_args.at(2) = x16568;
        host_args.at(3) = x16569;
        host_args.at(4) = x16570;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16572 = x16571 + x6;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16567);
          reg = x16567;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16568);
          reg = x16568;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16569);
          reg = x16569;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16570);
          reg = x16570;
        }
        {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16573 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x16573 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16574 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x16574 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16575 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x16575 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16576 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x16576 != Fp::invalid());
          host_args.at(0) = x16572;
          host_args.at(1) = x16573;
          host_args.at(2) = x16574;
          host_args.at(3) = x16575;
          host_args.at(4) = x16576;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16577 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x16577 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16578 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x16578 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16579 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x16579 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16580 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x16580 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16572);
          reg = x16572;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16577);
          reg = x16577;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16578);
          reg = x16578;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16579);
          reg = x16579;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16580);
          reg = x16580;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":24:28)
        auto x16581 = x16571 + x87;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":24:3)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16581);
          reg = x16581;
        }
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":380:32))
      auto x16582 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x16582 != Fp::invalid());
      if (x16582 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":381:8)
        auto x16583 = x16333 - x79;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":381:8)
        if (x16583 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:381");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16584 = x16345 + x6;
        {
          host_args.at(0) = x16584;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x16585 = host_outs.at(0);
          auto x16586 = host_outs.at(1);
          auto x16587 = host_outs.at(2);
          auto x16588 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16585);
            reg = x16585;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16586);
            reg = x16586;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16587);
            reg = x16587;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16588);
            reg = x16588;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16589 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x16589 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16590 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x16590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16591 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x16591 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16592 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x16592 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16584);
          reg = x16584;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16589);
          reg = x16589;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16590);
          reg = x16590;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16591);
          reg = x16591;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16592);
          reg = x16592;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16593 = x16351 + x6;
        {
          host_args.at(0) = x16593;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x16594 = host_outs.at(0);
          auto x16595 = host_outs.at(1);
          auto x16596 = host_outs.at(2);
          auto x16597 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16594);
            reg = x16594;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16595);
            reg = x16595;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16596);
            reg = x16596;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16597);
            reg = x16597;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16598 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x16598 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16599 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x16599 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16600 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x16600 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16601 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x16601 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16593);
          reg = x16593;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16598);
          reg = x16598;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16599);
          reg = x16599;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16600);
          reg = x16600;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16601);
          reg = x16601;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16602 = x16589 * x16598;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16603 = x16590 * x16601;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16604 = x16591 * x16600;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16605 = x16603 + x16604;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16606 = x16592 * x16599;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16607 = x16605 + x16606;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16608 = x16607 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16609 = x16602 + x16608;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16610 = x16589 * x16599;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16611 = x16590 * x16598;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16612 = x16610 + x16611;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16613 = x16591 * x16601;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16614 = x16592 * x16600;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16615 = x16613 + x16614;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16616 = x16615 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16617 = x16612 + x16616;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16618 = x16589 * x16600;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16619 = x16590 * x16599;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16620 = x16618 + x16619;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16621 = x16591 * x16598;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16622 = x16620 + x16621;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16623 = x16592 * x16601;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16624 = x16623 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16625 = x16622 + x16624;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16626 = x16589 * x16601;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16627 = x16590 * x16600;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16628 = x16626 + x16627;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16629 = x16591 * x16599;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16630 = x16628 + x16629;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16631 = x16592 * x16598;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x16632 = x16630 + x16631;
        host_args.at(0) = x16345;
        host_args.at(1) = x16589;
        host_args.at(2) = x16590;
        host_args.at(3) = x16591;
        host_args.at(4) = x16592;
        host_args.at(5) = x16351;
        host_args.at(6) = x16598;
        host_args.at(7) = x16599;
        host_args.at(8) = x16600;
        host_args.at(9) = x16601;
        host_args.at(10) = x16609;
        host_args.at(11) = x16617;
        host_args.at(12) = x16625;
        host_args.at(13) = x16632;
        host(ctx, "log", "FFPU: Mul %%%u (%w) * %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":13:20))
        auto x16633 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x16633 != Fp::invalid());
        host_args.at(0) = x16633;
        host_args.at(1) = x16609;
        host_args.at(2) = x16617;
        host_args.at(3) = x16625;
        host_args.at(4) = x16632;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16634 = x16633 + x6;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16609);
          reg = x16609;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16617);
          reg = x16617;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16625);
          reg = x16625;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16632);
          reg = x16632;
        }
        {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16635 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x16635 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16636 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x16636 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16637 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x16637 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16638 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x16638 != Fp::invalid());
          host_args.at(0) = x16634;
          host_args.at(1) = x16635;
          host_args.at(2) = x16636;
          host_args.at(3) = x16637;
          host_args.at(4) = x16638;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16639 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x16639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16640 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x16640 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16641 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x16641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16642 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x16642 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16634);
          reg = x16634;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16639);
          reg = x16639;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16640);
          reg = x16640;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16641);
          reg = x16641;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16642);
          reg = x16642;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":24:28)
        auto x16643 = x16633 + x87;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":24:3)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16643);
          reg = x16643;
        }
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":384:26))
      auto x16644 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x16644 != Fp::invalid());
      if (x16644 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":385:8)
        if (x16333 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:385");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":386:8)
        auto x16645 = x16334 - x87;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":386:8)
        if (x16645 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:386");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":387:8)
        if (x16337 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:387");
        // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":161:46))
        auto x16646 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x16646 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":161:46)
        auto x16647 = x16646 + x16268;
        {
          host_args.at(0) = x16647;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x16648 = host_outs.at(0);
          auto x16649 = host_outs.at(1);
          auto x16650 = host_outs.at(2);
          auto x16651 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16648);
            reg = x16648;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16649);
            reg = x16649;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16650);
            reg = x16650;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16651);
            reg = x16651;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16652 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x16652 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16653 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x16653 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16654 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x16654 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16655 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x16655 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16647);
          reg = x16647;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16652);
          reg = x16652;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16653);
          reg = x16653;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16654);
          reg = x16654;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16655);
          reg = x16655;
        }
        // loc("./cirgen/components/u32.h":16:34)
        auto x16656 = x16653 * x82;
        // loc("./cirgen/components/u32.h":16:23)
        auto x16657 = x16652 + x16656;
        // loc("./cirgen/components/u32.h":16:51)
        auto x16658 = x16654 * x76;
        // loc("./cirgen/components/u32.h":16:23)
        auto x16659 = x16657 + x16658;
        // loc("./cirgen/components/u32.h":16:74)
        auto x16660 = x16655 * x75;
        // loc("./cirgen/components/u32.h":16:23)
        auto x16661 = x16659 + x16660;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":161:18)
        auto x16662 = x16661 * x78;
        // loc("Top/Mux/4/Mux/12/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16663 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x16663 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":163:27)
        auto x16664 = x87 - x16663;
        if (x16664 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16665 = args[2][131 * steps + ((cycle - 1) & mask)];
          assert(x16665 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16666 = args[2][132 * steps + ((cycle - 1) & mask)];
          assert(x16666 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16667 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x16667 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16668 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x16668 != Fp::invalid());
          {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":179:38)
            auto x16669 = x16345 * x80;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":179:27)
            auto x16670 = x16662 + x16669;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
            auto x16671 = x16665 * x1;
            // loc("cirgen/components/u32.cpp":37:12)
            auto x16672 = Fp(x16671.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/u32.cpp":38:12)
            auto x16673 = Fp(x16671.asUInt32() & x4.asUInt32());
            // loc("cirgen/components/u32.cpp":39:12)
            auto x16674 = Fp(x16671.asUInt32() & x3.asUInt32());
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16675 = x16671 - x16672;
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16676 = x16675 - x16673;
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16677 = x16676 - x16674;
            // loc("cirgen/components/u32.cpp":44:21)
            auto x16678 = x16673 * x81;
            // loc("cirgen/components/u32.cpp":45:21)
            auto x16679 = x16674 * x8;
            // loc("cirgen/components/u32.cpp":46:21)
            auto x16680 = x16677 * x2;
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16672);
              reg = x16672;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16678);
              reg = x16678;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16679);
              reg = x16679;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16680);
              reg = x16680;
            }
            {
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16681 = args[2][117 * steps + ((cycle - 0) & mask)];
              assert(x16681 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16682 = args[2][118 * steps + ((cycle - 0) & mask)];
              assert(x16682 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16683 = args[2][119 * steps + ((cycle - 0) & mask)];
              assert(x16683 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16684 = args[2][120 * steps + ((cycle - 0) & mask)];
              assert(x16684 != Fp::invalid());
              host_args.at(0) = x16670;
              host_args.at(1) = x16681;
              host_args.at(2) = x16682;
              host_args.at(3) = x16683;
              host_args.at(4) = x16684;
              host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16685 = args[2][117 * steps + ((cycle - 0) & mask)];
            assert(x16685 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16686 = args[2][118 * steps + ((cycle - 0) & mask)];
            assert(x16686 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16687 = args[2][119 * steps + ((cycle - 0) & mask)];
            assert(x16687 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16688 = args[2][120 * steps + ((cycle - 0) & mask)];
            assert(x16688 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":100:3)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16670);
              reg = x16670;
            }
            // loc("cirgen/components/ram.cpp":101:3)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16261);
              reg = x16261;
            }
            // loc("cirgen/components/ram.cpp":102:3)
            {
              auto& reg = args[2][116 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x87);
              reg = x87;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16685);
              reg = x16685;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16686);
              reg = x16686;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16687);
              reg = x16687;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16688);
              reg = x16688;
            }
            // loc("cirgen/circuit/rv32im/ffpu.cpp":180:27)
            auto x16689 = x16670 + x87;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
            auto x16690 = x16666 * x1;
            // loc("cirgen/components/u32.cpp":37:12)
            auto x16691 = Fp(x16690.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/u32.cpp":38:12)
            auto x16692 = Fp(x16690.asUInt32() & x4.asUInt32());
            // loc("cirgen/components/u32.cpp":39:12)
            auto x16693 = Fp(x16690.asUInt32() & x3.asUInt32());
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16694 = x16690 - x16691;
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16695 = x16694 - x16692;
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16696 = x16695 - x16693;
            // loc("cirgen/components/u32.cpp":44:21)
            auto x16697 = x16692 * x81;
            // loc("cirgen/components/u32.cpp":45:21)
            auto x16698 = x16693 * x8;
            // loc("cirgen/components/u32.cpp":46:21)
            auto x16699 = x16696 * x2;
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16691);
              reg = x16691;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16697);
              reg = x16697;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16698);
              reg = x16698;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16699);
              reg = x16699;
            }
            {
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16700 = args[2][124 * steps + ((cycle - 0) & mask)];
              assert(x16700 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16701 = args[2][125 * steps + ((cycle - 0) & mask)];
              assert(x16701 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16702 = args[2][126 * steps + ((cycle - 0) & mask)];
              assert(x16702 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16703 = args[2][127 * steps + ((cycle - 0) & mask)];
              assert(x16703 != Fp::invalid());
              host_args.at(0) = x16689;
              host_args.at(1) = x16700;
              host_args.at(2) = x16701;
              host_args.at(3) = x16702;
              host_args.at(4) = x16703;
              host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16704 = args[2][124 * steps + ((cycle - 0) & mask)];
            assert(x16704 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16705 = args[2][125 * steps + ((cycle - 0) & mask)];
            assert(x16705 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16706 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x16706 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16707 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x16707 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":100:3)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16689);
              reg = x16689;
            }
            // loc("cirgen/components/ram.cpp":101:3)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16261);
              reg = x16261;
            }
            // loc("cirgen/components/ram.cpp":102:3)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x87);
              reg = x87;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16704);
              reg = x16704;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16705);
              reg = x16705;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16706);
              reg = x16706;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16707);
              reg = x16707;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("cirgen/components/ram.cpp":110:10))
          auto x16708 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x16708 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":182:8)
          auto x16709 = x16708 - x16261;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":182:8)
          if (x16709 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:182");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":107:10))
          auto x16710 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x16710 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":183:32)
          auto x16711 = x16345 * x80;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":183:21)
          auto x16712 = x16662 + x16711;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":183:8)
          auto x16713 = x16710 - x16712;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":183:8)
          if (x16713 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:183");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16714 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x16714 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16715 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x16715 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16716 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x16716 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16717 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x16717 != Fp::invalid());
          // loc("./cirgen/components/u32.h":16:34)
          auto x16718 = x16715 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16719 = x16714 + x16718;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16720 = x16716 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16721 = x16719 + x16720;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16722 = x16717 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16723 = x16721 + x16722;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
          auto x16724 = x16665 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":184:8)
          auto x16725 = x16723 - x16724;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":184:8)
          if (x16725 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:184");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":110:10))
          auto x16726 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x16726 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":186:8)
          auto x16727 = x16726 - x16261;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":186:8)
          if (x16727 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:186");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":107:10))
          auto x16728 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x16728 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:21)
          auto x16729 = x16712 + x87;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:8)
          auto x16730 = x16728 - x16729;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:8)
          if (x16730 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:187");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16731 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x16731 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16732 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x16732 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16733 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x16733 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16734 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x16734 != Fp::invalid());
          // loc("./cirgen/components/u32.h":16:34)
          auto x16735 = x16732 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16736 = x16731 + x16735;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16737 = x16733 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16738 = x16736 + x16737;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16739 = x16734 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16740 = x16738 + x16739;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
          auto x16741 = x16666 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":188:8)
          auto x16742 = x16740 - x16741;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":188:8)
          if (x16742 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:188");
          // loc("cirgen/circuit/rv32im/ffpu.cpp":192:10)
          auto x16743 = x16662 * x80;
          host_args.at(0) = x16268;
          host_args.at(1) = x16743;
          host_args.at(2) = x16345;
          host_args.at(3) = x16665;
          host_args.at(4) = x16666;
          host_args.at(5) = x16667;
          host_args.at(6) = x16668;
          host_args.at(7) = x16665;
          host_args.at(8) = x16666;
          host(ctx, "log", "FFPU: Set to arg[%u] (%x) [%u] <- %w (%u, %u, ...)", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":28:28))
          auto x16744 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x16744 != Fp::invalid());
          host_args.at(0) = x16744;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":29:3)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16744);
            reg = x16744;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        if (x16663 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16745 = args[2][131 * steps + ((cycle - 2) & mask)];
          assert(x16745 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16746 = args[2][132 * steps + ((cycle - 2) & mask)];
          assert(x16746 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16747 = args[2][133 * steps + ((cycle - 2) & mask)];
          assert(x16747 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16748 = args[2][134 * steps + ((cycle - 2) & mask)];
          assert(x16748 != Fp::invalid());
          {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":217:38)
            auto x16749 = x16345 * x80;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":217:27)
            auto x16750 = x16662 + x16749;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":217:27)
            auto x16751 = x16750 + x84;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
            auto x16752 = x16747 * x1;
            // loc("cirgen/components/u32.cpp":37:12)
            auto x16753 = Fp(x16752.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/u32.cpp":38:12)
            auto x16754 = Fp(x16752.asUInt32() & x4.asUInt32());
            // loc("cirgen/components/u32.cpp":39:12)
            auto x16755 = Fp(x16752.asUInt32() & x3.asUInt32());
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16756 = x16752 - x16753;
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16757 = x16756 - x16754;
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16758 = x16757 - x16755;
            // loc("cirgen/components/u32.cpp":44:21)
            auto x16759 = x16754 * x81;
            // loc("cirgen/components/u32.cpp":45:21)
            auto x16760 = x16755 * x8;
            // loc("cirgen/components/u32.cpp":46:21)
            auto x16761 = x16758 * x2;
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16753);
              reg = x16753;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16759);
              reg = x16759;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16760);
              reg = x16760;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16761);
              reg = x16761;
            }
            {
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16762 = args[2][117 * steps + ((cycle - 0) & mask)];
              assert(x16762 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16763 = args[2][118 * steps + ((cycle - 0) & mask)];
              assert(x16763 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16764 = args[2][119 * steps + ((cycle - 0) & mask)];
              assert(x16764 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16765 = args[2][120 * steps + ((cycle - 0) & mask)];
              assert(x16765 != Fp::invalid());
              host_args.at(0) = x16751;
              host_args.at(1) = x16762;
              host_args.at(2) = x16763;
              host_args.at(3) = x16764;
              host_args.at(4) = x16765;
              host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16766 = args[2][117 * steps + ((cycle - 0) & mask)];
            assert(x16766 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16767 = args[2][118 * steps + ((cycle - 0) & mask)];
            assert(x16767 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16768 = args[2][119 * steps + ((cycle - 0) & mask)];
            assert(x16768 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16769 = args[2][120 * steps + ((cycle - 0) & mask)];
            assert(x16769 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":100:3)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16751);
              reg = x16751;
            }
            // loc("cirgen/components/ram.cpp":101:3)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16261);
              reg = x16261;
            }
            // loc("cirgen/components/ram.cpp":102:3)
            {
              auto& reg = args[2][116 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x87);
              reg = x87;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16766);
              reg = x16766;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16767);
              reg = x16767;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16768);
              reg = x16768;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16769);
              reg = x16769;
            }
            // loc("cirgen/circuit/rv32im/ffpu.cpp":218:27)
            auto x16770 = x16750 + x79;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
            auto x16771 = x16748 * x1;
            // loc("cirgen/components/u32.cpp":37:12)
            auto x16772 = Fp(x16771.asUInt32() & x83.asUInt32());
            // loc("cirgen/components/u32.cpp":38:12)
            auto x16773 = Fp(x16771.asUInt32() & x4.asUInt32());
            // loc("cirgen/components/u32.cpp":39:12)
            auto x16774 = Fp(x16771.asUInt32() & x3.asUInt32());
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16775 = x16771 - x16772;
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16776 = x16775 - x16773;
            // loc("cirgen/components/u32.cpp":40:12)
            auto x16777 = x16776 - x16774;
            // loc("cirgen/components/u32.cpp":44:21)
            auto x16778 = x16773 * x81;
            // loc("cirgen/components/u32.cpp":45:21)
            auto x16779 = x16774 * x8;
            // loc("cirgen/components/u32.cpp":46:21)
            auto x16780 = x16777 * x2;
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16772);
              reg = x16772;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16778);
              reg = x16778;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16779);
              reg = x16779;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16780);
              reg = x16780;
            }
            {
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16781 = args[2][124 * steps + ((cycle - 0) & mask)];
              assert(x16781 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16782 = args[2][125 * steps + ((cycle - 0) & mask)];
              assert(x16782 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16783 = args[2][126 * steps + ((cycle - 0) & mask)];
              assert(x16783 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
              auto x16784 = args[2][127 * steps + ((cycle - 0) & mask)];
              assert(x16784 != Fp::invalid());
              host_args.at(0) = x16770;
              host_args.at(1) = x16781;
              host_args.at(2) = x16782;
              host_args.at(3) = x16783;
              host_args.at(4) = x16784;
              host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16785 = args[2][124 * steps + ((cycle - 0) & mask)];
            assert(x16785 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16786 = args[2][125 * steps + ((cycle - 0) & mask)];
            assert(x16786 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16787 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x16787 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16788 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x16788 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":100:3)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16770);
              reg = x16770;
            }
            // loc("cirgen/components/ram.cpp":101:3)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16261);
              reg = x16261;
            }
            // loc("cirgen/components/ram.cpp":102:3)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x87);
              reg = x87;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16785);
              reg = x16785;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16786);
              reg = x16786;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16787);
              reg = x16787;
            }
            // loc("cirgen/components/u32.cpp":24:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16788);
              reg = x16788;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("cirgen/components/ram.cpp":110:10))
          auto x16789 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x16789 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":220:8)
          auto x16790 = x16789 - x16261;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":220:8)
          if (x16790 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:220");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":107:10))
          auto x16791 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x16791 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":221:32)
          auto x16792 = x16345 * x80;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":221:21)
          auto x16793 = x16662 + x16792;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":221:21)
          auto x16794 = x16793 + x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":221:8)
          auto x16795 = x16791 - x16794;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":221:8)
          if (x16795 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:221");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16796 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x16796 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16797 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x16797 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16798 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x16798 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16799 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x16799 != Fp::invalid());
          // loc("./cirgen/components/u32.h":16:34)
          auto x16800 = x16797 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16801 = x16796 + x16800;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16802 = x16798 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16803 = x16801 + x16802;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16804 = x16799 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16805 = x16803 + x16804;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
          auto x16806 = x16747 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":222:8)
          auto x16807 = x16805 - x16806;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":222:8)
          if (x16807 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:222");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":110:10))
          auto x16808 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x16808 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":224:8)
          auto x16809 = x16808 - x16261;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":224:8)
          if (x16809 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:224");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":107:10))
          auto x16810 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x16810 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:21)
          auto x16811 = x16793 + x79;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:8)
          auto x16812 = x16810 - x16811;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:8)
          if (x16812 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:225");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16813 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x16813 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16814 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x16814 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16815 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x16815 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16816 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x16816 != Fp::invalid());
          // loc("./cirgen/components/u32.h":16:34)
          auto x16817 = x16814 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16818 = x16813 + x16817;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16819 = x16815 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16820 = x16818 + x16819;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16821 = x16816 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16822 = x16820 + x16821;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
          auto x16823 = x16748 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":226:8)
          auto x16824 = x16822 - x16823;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":226:8)
          if (x16824 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:226");
          // loc("cirgen/circuit/rv32im/ffpu.cpp":230:10)
          auto x16825 = x16662 * x80;
          host_args.at(0) = x16268;
          host_args.at(1) = x16825;
          host_args.at(2) = x16345;
          host_args.at(3) = x16745;
          host_args.at(4) = x16746;
          host_args.at(5) = x16747;
          host_args.at(6) = x16748;
          host_args.at(7) = x16747;
          host_args.at(8) = x16748;
          host(ctx, "log", "FFPU: Set to arg[%u] (%x) [%u] <- %w (... %u, %u)", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":28:28))
          auto x16826 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x16826 != Fp::invalid());
          host_args.at(0) = x16826;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":29:3)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16826);
            reg = x16826;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("cirgen/circuit/rv32im/ffpu.cpp":390:26))
      auto x16827 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x16827 != Fp::invalid());
      if (x16827 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":391:8)
        if (x16333 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:391");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":392:8)
        if (x16334 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:392");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":393:8)
        if (x16337 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:393");
        // loc("Top/Mux/4/Mux/12/Bit2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16828 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x16828 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":111:27)
        auto x16829 = x87 - x16828;
        if (x16829 != 0) {
          // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":114:48))
          auto x16830 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x16830 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":114:48)
          auto x16831 = x16830 + x16268;
          {
            host_args.at(0) = x16831;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x16832 = host_outs.at(0);
            auto x16833 = host_outs.at(1);
            auto x16834 = host_outs.at(2);
            auto x16835 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][131 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16832);
              reg = x16832;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][132 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16833);
              reg = x16833;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][133 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16834);
              reg = x16834;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][134 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16835);
              reg = x16835;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16836 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x16836 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16837 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x16837 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16838 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x16838 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16839 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x16839 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16831);
            reg = x16831;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16261);
            reg = x16261;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16836);
            reg = x16836;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16837);
            reg = x16837;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16838);
            reg = x16838;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16839);
            reg = x16839;
          }
          // loc("./cirgen/components/u32.h":16:34)
          auto x16840 = x16837 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16841 = x16836 + x16840;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16842 = x16838 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16843 = x16841 + x16842;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16844 = x16839 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16845 = x16843 + x16844;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":114:20)
          auto x16846 = x16845 * x78;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":116:64)
          auto x16847 = x16345 * x80;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":116:53)
          auto x16848 = x16846 + x16847;
          {
            host_args.at(0) = x16848;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x16849 = host_outs.at(0);
            auto x16850 = host_outs.at(1);
            auto x16851 = host_outs.at(2);
            auto x16852 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16849);
              reg = x16849;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16850);
              reg = x16850;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16851);
              reg = x16851;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16852);
              reg = x16852;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16853 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x16853 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16854 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x16854 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16855 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x16855 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16856 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x16856 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16848);
            reg = x16848;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16261);
            reg = x16261;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16853);
            reg = x16853;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16854);
            reg = x16854;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16855);
            reg = x16855;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16856);
            reg = x16856;
          }
          // loc("./cirgen/components/u32.h":16:34)
          auto x16857 = x16854 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16858 = x16853 + x16857;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16859 = x16855 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16860 = x16858 + x16859;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16861 = x16856 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16862 = x16860 + x16861;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x16863 = x16862 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":117:53)
          auto x16864 = x16848 + x87;
          {
            host_args.at(0) = x16864;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x16865 = host_outs.at(0);
            auto x16866 = host_outs.at(1);
            auto x16867 = host_outs.at(2);
            auto x16868 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16865);
              reg = x16865;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16866);
              reg = x16866;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16867);
              reg = x16867;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16868);
              reg = x16868;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16869 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x16869 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16870 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x16870 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16871 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x16871 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16872 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x16872 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16864);
            reg = x16864;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16261);
            reg = x16261;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16869);
            reg = x16869;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16870);
            reg = x16870;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16871);
            reg = x16871;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16872);
            reg = x16872;
          }
          // loc("./cirgen/components/u32.h":16:34)
          auto x16873 = x16870 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16874 = x16869 + x16873;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16875 = x16871 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16876 = x16874 + x16875;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16877 = x16872 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16878 = x16876 + x16877;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x16879 = x16878 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":121:10)
          auto x16880 = x16846 * x80;
          host_args.at(0) = x16268;
          host_args.at(1) = x16880;
          host_args.at(2) = x16345;
          host_args.at(3) = x16863;
          host_args.at(4) = x16879;
          host(ctx, "log", "FFPU: Get from arg[%u] (%x) [%u] -> %u, %u, ..", host_args.data(), 5, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":28:28))
          auto x16881 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x16881 != Fp::invalid());
          host_args.at(0) = x16881;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":29:3)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16881);
            reg = x16881;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        if (x16828 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16882 = args[2][131 * steps + ((cycle - 1) & mask)];
          assert(x16882 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16883 = args[2][132 * steps + ((cycle - 1) & mask)];
          assert(x16883 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16884 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x16884 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16885 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x16885 != Fp::invalid());
          // loc("./cirgen/components/u32.h":16:34)
          auto x16886 = x16883 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16887 = x16882 + x16886;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16888 = x16884 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16889 = x16887 + x16888;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16890 = x16885 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16891 = x16889 + x16890;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":134:59)
          auto x16892 = x16891 * x78;
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16893 = args[2][117 * steps + ((cycle - 1) & mask)];
          assert(x16893 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16894 = args[2][118 * steps + ((cycle - 1) & mask)];
          assert(x16894 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16895 = args[2][119 * steps + ((cycle - 1) & mask)];
          assert(x16895 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16896 = args[2][120 * steps + ((cycle - 1) & mask)];
          assert(x16896 != Fp::invalid());
          // loc("./cirgen/components/u32.h":16:34)
          auto x16897 = x16894 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16898 = x16893 + x16897;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16899 = x16895 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16900 = x16898 + x16899;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16901 = x16896 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16902 = x16900 + x16901;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x16903 = x16902 * x0;
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16904 = args[2][124 * steps + ((cycle - 1) & mask)];
          assert(x16904 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16905 = args[2][125 * steps + ((cycle - 1) & mask)];
          assert(x16905 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16906 = args[2][126 * steps + ((cycle - 1) & mask)];
          assert(x16906 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16907 = args[2][127 * steps + ((cycle - 1) & mask)];
          assert(x16907 != Fp::invalid());
          // loc("./cirgen/components/u32.h":16:34)
          auto x16908 = x16905 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16909 = x16904 + x16908;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16910 = x16906 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16911 = x16909 + x16910;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16912 = x16907 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16913 = x16911 + x16912;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x16914 = x16913 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":138:64)
          auto x16915 = x16345 * x80;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":138:53)
          auto x16916 = x16892 + x16915;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":138:53)
          auto x16917 = x16916 + x84;
          {
            host_args.at(0) = x16917;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x16918 = host_outs.at(0);
            auto x16919 = host_outs.at(1);
            auto x16920 = host_outs.at(2);
            auto x16921 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16918);
              reg = x16918;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16919);
              reg = x16919;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16920);
              reg = x16920;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16921);
              reg = x16921;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16922 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x16922 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16923 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x16923 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16924 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x16924 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16925 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x16925 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16917);
            reg = x16917;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16261);
            reg = x16261;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16922);
            reg = x16922;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16923);
            reg = x16923;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16924);
            reg = x16924;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16925);
            reg = x16925;
          }
          // loc("./cirgen/components/u32.h":16:34)
          auto x16926 = x16923 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16927 = x16922 + x16926;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16928 = x16924 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16929 = x16927 + x16928;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16930 = x16925 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16931 = x16929 + x16930;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x16932 = x16931 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":139:53)
          auto x16933 = x16916 + x79;
          {
            host_args.at(0) = x16933;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x16934 = host_outs.at(0);
            auto x16935 = host_outs.at(1);
            auto x16936 = host_outs.at(2);
            auto x16937 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16934);
              reg = x16934;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16935);
              reg = x16935;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16936);
              reg = x16936;
            }
            // loc("cirgen/components/u32.cpp":72:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16937);
              reg = x16937;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16938 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x16938 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16939 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x16939 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16940 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x16940 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16941 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x16941 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16933);
            reg = x16933;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16261);
            reg = x16261;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16938);
            reg = x16938;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16939);
            reg = x16939;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16940);
            reg = x16940;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16941);
            reg = x16941;
          }
          // loc("./cirgen/components/u32.h":16:34)
          auto x16942 = x16939 * x82;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16943 = x16938 + x16942;
          // loc("./cirgen/components/u32.h":16:51)
          auto x16944 = x16940 * x76;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16945 = x16943 + x16944;
          // loc("./cirgen/components/u32.h":16:74)
          auto x16946 = x16941 * x75;
          // loc("./cirgen/components/u32.h":16:23)
          auto x16947 = x16945 + x16946;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x16948 = x16947 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":144:10)
          auto x16949 = x16892 * x80;
          host_args.at(0) = x16268;
          host_args.at(1) = x16949;
          host_args.at(2) = x16345;
          host_args.at(3) = x16903;
          host_args.at(4) = x16914;
          host_args.at(5) = x16932;
          host_args.at(6) = x16948;
          host(ctx, "log", "FFPU: Get from arg[%u] (%x) [%u] -> %u, %u, %u, %u", host_args.data(), 7, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":13:20))
          auto x16950 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x16950 != Fp::invalid());
          host_args.at(0) = x16950;
          host_args.at(1) = x16903;
          host_args.at(2) = x16914;
          host_args.at(3) = x16932;
          host_args.at(4) = x16948;
          host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
          auto x16951 = x16950 + x6;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16903);
            reg = x16903;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16914);
            reg = x16914;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16932);
            reg = x16932;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16948);
            reg = x16948;
          }
          {
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16952 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x16952 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16953 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x16953 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16954 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x16954 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
            auto x16955 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x16955 != Fp::invalid());
            host_args.at(0) = x16951;
            host_args.at(1) = x16952;
            host_args.at(2) = x16953;
            host_args.at(3) = x16954;
            host_args.at(4) = x16955;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16956 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x16956 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16957 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x16957 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16958 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x16958 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16959 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x16959 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":100:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16951);
            reg = x16951;
          }
          // loc("cirgen/components/ram.cpp":101:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16261);
            reg = x16261;
          }
          // loc("cirgen/components/ram.cpp":102:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16956);
            reg = x16956;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16957);
            reg = x16957;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16958);
            reg = x16958;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16959);
            reg = x16959;
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":24:28)
          auto x16960 = x16950 + x87;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":24:3)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16960);
            reg = x16960;
          }
          // loc("./cirgen/components/bits.h":14:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("cirgen/circuit/rv32im/ffpu.cpp":396:36))
      auto x16961 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x16961 != Fp::invalid());
      if (x16961 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":397:8)
        if (x16333 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:397");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":398:8)
        if (x16334 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:398");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":399:8)
        auto x16962 = x16337 - x87;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":399:8)
        if (x16962 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:399");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":400:8)
        if (x16268 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:400");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16963 = x16345 + x6;
        {
          host_args.at(0) = x16963;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x16964 = host_outs.at(0);
          auto x16965 = host_outs.at(1);
          auto x16966 = host_outs.at(2);
          auto x16967 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16964);
            reg = x16964;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16965);
            reg = x16965;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16966);
            reg = x16966;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16967);
            reg = x16967;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16968 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x16968 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16969 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x16969 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16970 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x16970 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16971 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x16971 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16963);
          reg = x16963;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16968);
          reg = x16968;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16969);
          reg = x16969;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16970);
          reg = x16970;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16971);
          reg = x16971;
        }
        host_args.at(0) = x16345;
        host_args.at(1) = x16968;
        host_args.at(2) = x16969;
        host_args.at(3) = x16970;
        host_args.at(4) = x16971;
        host(ctx, "log", "FFPU: Identity %%%u (%w)", host_args.data(), 5, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":13:20))
        auto x16972 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x16972 != Fp::invalid());
        host_args.at(0) = x16972;
        host_args.at(1) = x16968;
        host_args.at(2) = x16969;
        host_args.at(3) = x16970;
        host_args.at(4) = x16971;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16973 = x16972 + x6;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16968);
          reg = x16968;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16969);
          reg = x16969;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16970);
          reg = x16970;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16971);
          reg = x16971;
        }
        {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16974 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x16974 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16975 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x16975 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16976 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x16976 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x16977 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x16977 != Fp::invalid());
          host_args.at(0) = x16973;
          host_args.at(1) = x16974;
          host_args.at(2) = x16975;
          host_args.at(3) = x16976;
          host_args.at(4) = x16977;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16978 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x16978 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16979 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x16979 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16980 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x16980 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16981 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x16981 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16973);
          reg = x16973;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16978);
          reg = x16978;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16979);
          reg = x16979;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16980);
          reg = x16980;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16981);
          reg = x16981;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":24:28)
        auto x16982 = x16972 + x87;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":24:3)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16982);
          reg = x16982;
        }
        // loc("cirgen/components/ram.cpp":39:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":40:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":41:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("cirgen/circuit/rv32im/ffpu.cpp":403:31))
      auto x16983 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x16983 != Fp::invalid());
      if (x16983 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":404:8)
        if (x16333 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:404");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":405:8)
        if (x16334 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:405");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":406:8)
        auto x16984 = x16337 - x87;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":406:8)
        if (x16984 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:406");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":407:8)
        auto x16985 = x16268 - x87;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":407:8)
        if (x16985 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:407");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x16986 = x16345 + x6;
        {
          host_args.at(0) = x16986;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x16987 = host_outs.at(0);
          auto x16988 = host_outs.at(1);
          auto x16989 = host_outs.at(2);
          auto x16990 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16987);
            reg = x16987;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16988);
            reg = x16988;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16989);
            reg = x16989;
          }
          // loc("cirgen/components/u32.cpp":72:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x16990);
            reg = x16990;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16991 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x16991 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16992 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x16992 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16993 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x16993 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x16994 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x16994 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16986);
          reg = x16986;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16991);
          reg = x16991;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16992);
          reg = x16992;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16993);
          reg = x16993;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16994);
          reg = x16994;
        }
        {
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x16995 = x16991 * x16991;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x16996 = x16994 + x16994;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x16997 = x16992 * x16996;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x16998 = x16993 * x16993;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x16999 = x16997 - x16998;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17000 = x16999 * x67;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17001 = x16995 + x17000;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17002 = x16993 + x16993;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17003 = x16991 * x17002;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17004 = x16992 * x16992;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17005 = x17003 - x17004;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17006 = x16994 * x16994;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17007 = x17006 * x67;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17008 = x17005 + x17007;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17009 = x17001 * x17001;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17010 = x17008 * x67;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17011 = x17010 * x17008;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17012 = x17009 + x17011;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17013 = inv(x17012);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17014 = x17001 * x17013;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17015 = x17008 * x17013;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17016 = x16991 * x17014;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17017 = x16993 * x67;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17018 = x17017 * x17015;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17019 = x17016 + x17018;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17020 = -x16992;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17021 = x17020 * x17014;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17022 = x16994 * x67;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17023 = x17022 * x17015;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17024 = x17021 - x17023;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17025 = -x16991;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17026 = x17025 * x17015;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17027 = x16993 * x17014;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17028 = x17026 + x17027;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17029 = x16992 * x17015;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17030 = x16994 * x17014;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":82:24)
          auto x17031 = x17029 - x17030;
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17019);
            reg = x17019;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17024);
            reg = x17024;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17028);
            reg = x17028;
          }
          // loc("cirgen/components/u32.cpp":24:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17031);
            reg = x17031;
          }
        }
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17032 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x17032 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17033 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x17033 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17034 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x17034 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17035 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x17035 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17036 = x17032 * x16991;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17037 = x17033 * x16994;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17038 = x17034 * x16993;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17039 = x17037 + x17038;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17040 = x17035 * x16992;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17041 = x17039 + x17040;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17042 = x17041 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17043 = x17036 + x17042;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17044 = x17032 * x16992;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17045 = x17033 * x16991;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17046 = x17044 + x17045;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17047 = x17034 * x16994;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17048 = x17035 * x16993;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17049 = x17047 + x17048;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17050 = x17049 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17051 = x17046 + x17050;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17052 = x17032 * x16993;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17053 = x17033 * x16992;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17054 = x17052 + x17053;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17055 = x17034 * x16991;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17056 = x17054 + x17055;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17057 = x17035 * x16994;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17058 = x17057 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17059 = x17056 + x17058;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17060 = x17032 * x16994;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17061 = x17033 * x16993;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17062 = x17060 + x17061;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17063 = x17034 * x16992;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17064 = x17062 + x17063;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17065 = x17035 * x16991;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:21)
        auto x17066 = x17064 + x17065;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:6)
        auto x17067 = x87 - x17043;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:6)
        if (x17067 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:86");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:6)
        auto x17068 = x86 - x17051;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:6)
        if (x17068 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:86");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:6)
        auto x17069 = x86 - x17059;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:6)
        if (x17069 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:86");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:6)
        auto x17070 = x86 - x17066;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":86:6)
        if (x17070 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:86");
        host_args.at(0) = x16345;
        host_args.at(1) = x16991;
        host_args.at(2) = x16992;
        host_args.at(3) = x16993;
        host_args.at(4) = x16994;
        host_args.at(5) = x17032;
        host_args.at(6) = x17033;
        host_args.at(7) = x17034;
        host_args.at(8) = x17035;
        host(ctx, "log", "FFPU: Inv %%%u (%w) -> %w", host_args.data(), 9, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":13:20))
        auto x17071 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x17071 != Fp::invalid());
        host_args.at(0) = x17071;
        host_args.at(1) = x17032;
        host_args.at(2) = x17033;
        host_args.at(3) = x17034;
        host_args.at(4) = x17035;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:10)
        auto x17072 = x17071 + x6;
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17032);
          reg = x17032;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17033);
          reg = x17033;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17034);
          reg = x17034;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17035);
          reg = x17035;
        }
        {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
          auto x17073 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x17073 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
          auto x17074 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x17074 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
          auto x17075 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x17075 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
          auto x17076 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x17076 != Fp::invalid());
          host_args.at(0) = x17072;
          host_args.at(1) = x17073;
          host_args.at(2) = x17074;
          host_args.at(3) = x17075;
          host_args.at(4) = x17076;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17077 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x17077 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17078 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x17078 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17079 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x17079 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17080 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x17080 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":100:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17072);
          reg = x17072;
        }
        // loc("cirgen/components/ram.cpp":101:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x16261);
          reg = x16261;
        }
        // loc("cirgen/components/ram.cpp":102:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17077);
          reg = x17077;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17078);
          reg = x17078;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17079);
          reg = x17079;
        }
        // loc("cirgen/components/u32.cpp":24:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17080);
          reg = x17080;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":24:28)
        auto x17081 = x17071 + x87;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":24:3)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17081);
          reg = x17081;
        }
        // loc("cirgen/components/ram.cpp":39:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":40:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":41:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
      // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
      auto x17082 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x17082 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":412:57)
      auto x17083 = x526 + x80;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":412:20)
      auto x17084 = x17082 - x17083;
      {
        // loc("cirgen/components/iszero.cpp":7:24)
        auto x17085 = (x17084 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17085);
          reg = x17085;
        }
        // loc("cirgen/components/iszero.cpp":8:21)
        auto x17086 = inv(x17084);
        // loc("cirgen/components/iszero.cpp":8:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17086);
          reg = x17086;
        }
      }
      // loc("Top/Mux/4/Mux/12/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17087 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x17087 != Fp::invalid());
      if (x17087 != 0) {
        // loc("cirgen/components/iszero.cpp":10:23)
        if (x17084 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:10");
      }
      // loc("cirgen/components/iszero.cpp":11:19)
      auto x17088 = x87 - x17087;
      if (x17088 != 0) {
        // loc("Top/Mux/4/Mux/12/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x17089 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x17089 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x17090 = x17084 * x17089;
        // loc("cirgen/components/iszero.cpp":11:26)
        auto x17091 = x17090 - x87;
        // loc("cirgen/components/iszero.cpp":11:26)
        if (x17091 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:11");
      }
      // loc("Top/Mux/4/Mux/12/Bit3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17092 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x17092 != Fp::invalid());
      if (x17092 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":415:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x17093 = Fp(x17083.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17093);
            reg = x17093;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x17094 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x17094 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x17095 = x17083 - x17094;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x17096 = x17095 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x17097 = Fp(x17096.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17097);
            reg = x17097;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x17098 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x17098 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x17099 = x17096 - x17098;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x17100 = x17099 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x17101 = Fp(x17100.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17101);
            reg = x17101;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x17102 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x17102 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x17103 = x17100 - x17102;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x17104 = x17103 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x17105 = Fp(x17104.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17105);
            reg = x17105;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17106 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x17106 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x17107 = x17104 - x17106;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x17108 = x17107 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17108);
          reg = x17108;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17109 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x17109 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x17110 = x87 - x17109;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x17111 = x17109 * x17110;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17111);
          reg = x17111;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x17112 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x17112 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x17113 = x84 - x17109;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x17114 = x17112 * x17113;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x17114 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
      // loc("cirgen/circuit/rv32im/ffpu.cpp":421:25)
      auto x17115 = x87 - x17092;
      if (x17115 != 0) {
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17088);
          reg = x17088;
        }
        // loc("./cirgen/components/bits.h":14:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17087);
          reg = x17087;
        }
      }
      // loc("Top/Mux/4/Mux/12/Bit5/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17116 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x17116 != Fp::invalid());
      if (x17116 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":427:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x17117 = x17083 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x17118 = Fp(x17117.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17118);
            reg = x17118;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x17119 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x17119 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x17120 = x17117 - x17119;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x17121 = x17120 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x17122 = Fp(x17121.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17122);
            reg = x17122;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x17123 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x17123 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x17124 = x17121 - x17123;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x17125 = x17124 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x17126 = Fp(x17125.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17126);
            reg = x17126;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x17127 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x17127 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x17128 = x17125 - x17127;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x17129 = x17128 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x17130 = Fp(x17129.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17130);
            reg = x17130;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17131 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x17131 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x17132 = x17129 - x17131;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x17133 = x17132 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17133);
          reg = x17133;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17134 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x17134 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x17135 = x87 - x17134;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x17136 = x17134 * x17135;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17136);
          reg = x17136;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x17137 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x17137 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x17138 = x84 - x17134;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x17139 = x17137 * x17138;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x17139 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
      }
      // loc("Top/Mux/4/Mux/12/Bit4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17140 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x17140 != Fp::invalid());
      if (x17140 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":432:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
        // loc("Top/Mux/4/Mux/12/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":433:29))
        auto x17141 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x17141 != Fp::invalid());
        host_args.at(0) = x17141;
        host(ctx, "log", "Returning to %x", host_args.data(), 1, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/body.cpp":10:23)
        auto x17142 = x17141 + x80;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x17143 = Fp(x17142.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17143);
            reg = x17143;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x17144 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x17144 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x17145 = x17142 - x17144;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x17146 = x17145 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x17147 = Fp(x17146.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17147);
            reg = x17147;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":79:16))
        auto x17148 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x17148 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x17149 = x17146 - x17148;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x17150 = x17149 * x81;
        {
          // loc("cirgen/components/bytes.cpp":78:21)
          auto x17151 = Fp(x17150.asUInt32() & x83.asUInt32());
          // loc("cirgen/components/bytes.cpp":78:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17151);
            reg = x17151;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":79:16))
        auto x17152 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x17152 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":79:11)
        auto x17153 = x17150 - x17152;
        // loc("cirgen/components/bytes.cpp":79:10)
        auto x17154 = x17153 * x81;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":13:26)
          auto x17155 = Fp(x17154.asUInt32() & x79.asUInt32());
          // loc("./cirgen/components/bits.h":53:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x17155);
            reg = x17155;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17156 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x17156 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":14:18)
        auto x17157 = x17154 - x17156;
        // loc("cirgen/circuit/rv32im/body.cpp":14:17)
        auto x17158 = x17157 * x78;
        // loc("./cirgen/components/bits.h":53:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17158);
          reg = x17158;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17159 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x17159 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:23)
        auto x17160 = x87 - x17159;
        // loc("cirgen/circuit/rv32im/body.cpp":18:15)
        auto x17161 = x17159 * x17160;
        // loc("cirgen/circuit/rv32im/body.cpp":18:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x17161);
          reg = x17161;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
        auto x17162 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x17162 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":19:17)
        auto x17163 = x84 - x17159;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        auto x17164 = x17162 * x17163;
        // loc("cirgen/circuit/rv32im/body.cpp":19:7)
        if (x17164 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:19");
      }
    }
  }
  // loc("Top/Code/OneHot/Reg5"("./cirgen/components/mux.h":33:25))
  auto x17165 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x17165 != Fp::invalid());
  if (x17165 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x17166 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x17166 != Fp::invalid());
    host_args.at(0) = x17166;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
    // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17167 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x17167 != Fp::invalid());
    // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17168 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x17168 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17169 = x17168 * x84;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17170 = x17167 + x17169;
    // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17171 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x17171 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17172 = x17171 * x79;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17173 = x17170 + x17172;
    // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17174 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x17174 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17175 = x17174 * x80;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17176 = x17173 + x17175;
    // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17177 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x17177 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17178 = x17177 * x73;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17179 = x17176 + x17178;
    // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17180 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x17180 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17181 = x17180 * x72;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17182 = x17179 + x17181;
    // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17183 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x17183 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17184 = x17183 * x71;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17185 = x17182 + x17184;
    // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17186 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x17186 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17187 = x17186 * x70;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17188 = x17185 + x17187;
    // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17189 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x17189 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17190 = x17189 * x69;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17191 = x17188 + x17190;
    // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17192 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x17192 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17193 = x17192 * x68;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17194 = x17191 + x17193;
    // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17195 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x17195 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17196 = x17195 * x67;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17197 = x17194 + x17196;
    // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17198 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x17198 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17199 = x17198 * x66;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17200 = x17197 + x17199;
    // loc("cirgen/circuit/rv32im/top.cpp":42:38)
    auto x17201 = x17200 - x70;
    // loc("cirgen/circuit/rv32im/top.cpp":42:38)
    if (x17201 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:42");
    // loc("Top/Mux/4/Mux/8/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17202 = args[2][161 * steps + ((cycle - 1) & mask)];
    assert(x17202 != Fp::invalid());
    // loc("Top/Mux/4/Mux/8/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17203 = args[2][162 * steps + ((cycle - 1) & mask)];
    assert(x17203 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17204 = x17203 * x84;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17205 = x17202 + x17204;
    // loc("Top/Mux/4/Mux/8/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17206 = args[2][163 * steps + ((cycle - 1) & mask)];
    assert(x17206 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17207 = x17206 * x79;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17208 = x17205 + x17207;
    // loc("Top/Mux/4/Mux/8/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":106:61))
    auto x17209 = args[2][164 * steps + ((cycle - 1) & mask)];
    assert(x17209 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":40:19)
    auto x17210 = x17209 * x80;
    // loc("./cirgen/components/onehot.h":40:13)
    auto x17211 = x17208 + x17210;
    // loc("cirgen/circuit/rv32im/top.cpp":44:39)
    if (x17211 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:44");
  }
  // loc("Top/Code/OneHot/Reg6"("./cirgen/components/mux.h":33:25))
  auto x17212 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x17212 != Fp::invalid());
  if (x17212 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":81:27))
    auto x17213 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x17213 != Fp::invalid());
    host_args.at(0) = x17213;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/Reg"("cirgen/circuit/rv32im/top.cpp":65:27))
  auto x17214 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x17214 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":65:16)
  auto x17215 = x17214 + x88;
  // loc("cirgen/circuit/rv32im/top.cpp":65:16)
  auto x17216 = x17215 + x413;
  // loc("cirgen/circuit/rv32im/top.cpp":65:16)
  auto x17217 = x17216 + x478;
  // loc("cirgen/circuit/rv32im/top.cpp":65:16)
  auto x17218 = x17217 + x512;
  // loc("cirgen/circuit/rv32im/top.cpp":65:16)
  auto x17219 = x17218 + x17165;
  // loc("cirgen/circuit/rv32im/top.cpp":65:16)
  auto x17220 = x17219 + x17212;
  if (x512 != 0) {
    // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/top.cpp":73:19))
    auto x17221 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x17221 != Fp::invalid());
    if (x17221 != 0) {
      // loc("Top/Mux/4/Mux/8/OneHot/Reg"("cirgen/circuit/rv32im/top.cpp":76:20))
      auto x17222 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x17222 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/top.cpp":77:7)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x17222);
        reg = x17222;
      }
    }
    // loc("cirgen/circuit/rv32im/top.cpp":79:19)
    auto x17223 = x87 - x17221;
    if (x17223 != 0) {
      // loc("cirgen/circuit/rv32im/top.cpp":79:23)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
    }
  }
  // loc("cirgen/circuit/rv32im/top.cpp":81:23)
  auto x17224 = x17220 - x512;
  if (x17224 != 0) {
    // loc("cirgen/circuit/rv32im/top.cpp":81:27)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x86);
      reg = x86;
    }
  }
  // loc("Top/Reg"("./cirgen/compiler/edsl/edsl.h":106:61))
  auto x17225 = args[2][9 * steps + ((cycle - 0) & mask)];
  assert(x17225 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":82:10)
  auto x17226 = x87 - x17225;
  if (x413 != 0) {
    {
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
    }
  }
  if (x478 != 0) {
    {
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("./cirgen/components/bits.h":24:46)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
    }
  }
  if (x512 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17227 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x17227 != Fp::invalid());
    if (x17227 != 0) {
      {
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17228 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x17228 != Fp::invalid());
    if (x17228 != 0) {
      {
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17229 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x17229 != Fp::invalid());
    if (x17229 != 0) {
      {
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17230 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x17230 != Fp::invalid());
    if (x17230 != 0) {
      {
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17231 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x17231 != Fp::invalid());
    if (x17231 != 0) {
      {
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":39:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":40:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":41:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/u32.cpp":18:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17232 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x17232 != Fp::invalid());
    if (x17232 != 0) {
      {
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17233 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x17233 != Fp::invalid());
    if (x17233 != 0) {
      {
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17234 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x17234 != Fp::invalid());
    if (x17234 != 0) {
      {
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17235 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x17235 != Fp::invalid());
    if (x17235 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":35:15)
      auto x17236 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x17236 != Fp::invalid());
      if (x17236 != 0) {
        {
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":39:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":40:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/ram.cpp":41:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("cirgen/components/u32.cpp":18:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":35:15)
      auto x17237 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x17237 != Fp::invalid());
      if (x17237 != 0) {
        {
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":35:15)
      auto x17238 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x17238 != Fp::invalid());
      if (x17238 != 0) {
        {
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":35:15)
      auto x17239 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x17239 != Fp::invalid());
      if (x17239 != 0) {
        {
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":35:15)
      auto x17240 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x17240 != Fp::invalid());
      if (x17240 != 0) {
        {
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bytes.h":33:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
          // loc("./cirgen/components/bits.h":24:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x86);
            reg = x86;
          }
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17241 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x17241 != Fp::invalid());
    if (x17241 != 0) {
      {
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bytes.h":33:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("./cirgen/components/bits.h":24:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
      }
    }
  }
  if (x17165 != 0) {
    {
      // loc("./cirgen/components/bytes.h":33:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
    }
  }
  if (x413 != 0) {
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17242 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x17242 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17243 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x17243 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17244 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x17244 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17245 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x17245 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17246 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x17246 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17247 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x17247 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17248 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x17248 != Fp::invalid());
      host_args.at(0) = x17242;
      host_args.at(1) = x17243;
      host_args.at(2) = x17244;
      host_args.at(3) = x17245;
      host_args.at(4) = x17246;
      host_args.at(5) = x17247;
      host_args.at(6) = x17248;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17249 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x17249 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17250 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x17250 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17251 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x17251 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17252 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x17252 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17253 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x17253 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17254 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x17254 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17255 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x17255 != Fp::invalid());
      host_args.at(0) = x17249;
      host_args.at(1) = x17250;
      host_args.at(2) = x17251;
      host_args.at(3) = x17252;
      host_args.at(4) = x17253;
      host_args.at(5) = x17254;
      host_args.at(6) = x17255;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17256 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x17256 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17257 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x17257 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17258 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x17258 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17259 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x17259 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17260 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x17260 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17261 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x17261 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
      auto x17262 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x17262 != Fp::invalid());
      host_args.at(0) = x17256;
      host_args.at(1) = x17257;
      host_args.at(2) = x17258;
      host_args.at(3) = x17259;
      host_args.at(4) = x17260;
      host_args.at(5) = x17261;
      host_args.at(6) = x17262;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x512 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17263 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x17263 != Fp::invalid());
    if (x17263 != 0) {
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17264 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17264 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17265 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17265 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17266 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17266 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17267 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17267 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17268 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17268 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17269 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17269 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17270 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17270 != Fp::invalid());
        host_args.at(0) = x17264;
        host_args.at(1) = x17265;
        host_args.at(2) = x17266;
        host_args.at(3) = x17267;
        host_args.at(4) = x17268;
        host_args.at(5) = x17269;
        host_args.at(6) = x17270;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17271 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17271 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17272 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17272 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17273 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17273 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17274 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17274 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17275 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17275 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17276 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17276 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17277 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17277 != Fp::invalid());
        host_args.at(0) = x17271;
        host_args.at(1) = x17272;
        host_args.at(2) = x17273;
        host_args.at(3) = x17274;
        host_args.at(4) = x17275;
        host_args.at(5) = x17276;
        host_args.at(6) = x17277;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17278 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x17278 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17279 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x17279 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17280 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x17280 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17281 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x17281 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17282 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x17282 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17283 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x17283 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17284 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x17284 != Fp::invalid());
        host_args.at(0) = x17278;
        host_args.at(1) = x17279;
        host_args.at(2) = x17280;
        host_args.at(3) = x17281;
        host_args.at(4) = x17282;
        host_args.at(5) = x17283;
        host_args.at(6) = x17284;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17285 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x17285 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17286 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x17286 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17287 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x17287 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17288 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x17288 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17289 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x17289 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17290 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x17290 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17291 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x17291 != Fp::invalid());
        host_args.at(0) = x17285;
        host_args.at(1) = x17286;
        host_args.at(2) = x17287;
        host_args.at(3) = x17288;
        host_args.at(4) = x17289;
        host_args.at(5) = x17290;
        host_args.at(6) = x17291;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17292 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x17292 != Fp::invalid());
    if (x17292 != 0) {
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17293 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17293 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17294 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17294 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17295 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17295 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17296 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17296 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17297 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17297 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17298 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17298 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17299 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17299 != Fp::invalid());
        host_args.at(0) = x17293;
        host_args.at(1) = x17294;
        host_args.at(2) = x17295;
        host_args.at(3) = x17296;
        host_args.at(4) = x17297;
        host_args.at(5) = x17298;
        host_args.at(6) = x17299;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17300 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17300 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17301 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17301 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17302 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17302 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17303 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17303 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17304 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17304 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17305 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17305 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17306 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17306 != Fp::invalid());
        host_args.at(0) = x17300;
        host_args.at(1) = x17301;
        host_args.at(2) = x17302;
        host_args.at(3) = x17303;
        host_args.at(4) = x17304;
        host_args.at(5) = x17305;
        host_args.at(6) = x17306;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17307 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x17307 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17308 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x17308 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17309 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x17309 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17310 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x17310 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17311 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x17311 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17312 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x17312 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17313 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x17313 != Fp::invalid());
        host_args.at(0) = x17307;
        host_args.at(1) = x17308;
        host_args.at(2) = x17309;
        host_args.at(3) = x17310;
        host_args.at(4) = x17311;
        host_args.at(5) = x17312;
        host_args.at(6) = x17313;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17314 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x17314 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17315 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x17315 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17316 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x17316 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17317 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x17317 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17318 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x17318 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17319 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x17319 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17320 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x17320 != Fp::invalid());
        host_args.at(0) = x17314;
        host_args.at(1) = x17315;
        host_args.at(2) = x17316;
        host_args.at(3) = x17317;
        host_args.at(4) = x17318;
        host_args.at(5) = x17319;
        host_args.at(6) = x17320;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17321 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x17321 != Fp::invalid());
    if (x17321 != 0) {
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17322 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17322 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17323 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17323 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17324 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17324 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17325 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17325 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17326 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17326 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17327 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17327 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17328 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17328 != Fp::invalid());
        host_args.at(0) = x17322;
        host_args.at(1) = x17323;
        host_args.at(2) = x17324;
        host_args.at(3) = x17325;
        host_args.at(4) = x17326;
        host_args.at(5) = x17327;
        host_args.at(6) = x17328;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17329 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17329 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17330 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17330 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17331 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17331 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17332 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17332 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17333 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17333 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17334 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17334 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17335 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17335 != Fp::invalid());
        host_args.at(0) = x17329;
        host_args.at(1) = x17330;
        host_args.at(2) = x17331;
        host_args.at(3) = x17332;
        host_args.at(4) = x17333;
        host_args.at(5) = x17334;
        host_args.at(6) = x17335;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17336 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x17336 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17337 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x17337 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17338 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x17338 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17339 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x17339 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17340 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x17340 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17341 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x17341 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17342 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x17342 != Fp::invalid());
        host_args.at(0) = x17336;
        host_args.at(1) = x17337;
        host_args.at(2) = x17338;
        host_args.at(3) = x17339;
        host_args.at(4) = x17340;
        host_args.at(5) = x17341;
        host_args.at(6) = x17342;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17343 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x17343 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17344 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x17344 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17345 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x17345 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17346 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x17346 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17347 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x17347 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17348 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x17348 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17349 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x17349 != Fp::invalid());
        host_args.at(0) = x17343;
        host_args.at(1) = x17344;
        host_args.at(2) = x17345;
        host_args.at(3) = x17346;
        host_args.at(4) = x17347;
        host_args.at(5) = x17348;
        host_args.at(6) = x17349;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17350 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x17350 != Fp::invalid());
    if (x17350 != 0) {
      {
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17351 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17351 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17352 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17352 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17353 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17353 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17354 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17354 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17355 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17355 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17356 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17356 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17357 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17357 != Fp::invalid());
        host_args.at(0) = x17351;
        host_args.at(1) = x17352;
        host_args.at(2) = x17353;
        host_args.at(3) = x17354;
        host_args.at(4) = x17355;
        host_args.at(5) = x17356;
        host_args.at(6) = x17357;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17358 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17358 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17359 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17359 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17360 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17360 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17361 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17361 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17362 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17362 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17363 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17363 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17364 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17364 != Fp::invalid());
        host_args.at(0) = x17358;
        host_args.at(1) = x17359;
        host_args.at(2) = x17360;
        host_args.at(3) = x17361;
        host_args.at(4) = x17362;
        host_args.at(5) = x17363;
        host_args.at(6) = x17364;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17365 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x17365 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17366 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x17366 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17367 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x17367 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17368 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x17368 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17369 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x17369 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17370 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x17370 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17371 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x17371 != Fp::invalid());
        host_args.at(0) = x17365;
        host_args.at(1) = x17366;
        host_args.at(2) = x17367;
        host_args.at(3) = x17368;
        host_args.at(4) = x17369;
        host_args.at(5) = x17370;
        host_args.at(6) = x17371;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17372 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x17372 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17373 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x17373 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17374 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x17374 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17375 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x17375 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17376 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x17376 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17377 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x17377 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17378 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x17378 != Fp::invalid());
        host_args.at(0) = x17372;
        host_args.at(1) = x17373;
        host_args.at(2) = x17374;
        host_args.at(3) = x17375;
        host_args.at(4) = x17376;
        host_args.at(5) = x17377;
        host_args.at(6) = x17378;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17379 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x17379 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17380 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x17380 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17381 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x17381 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17382 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x17382 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17383 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x17383 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17384 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x17384 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17385 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x17385 != Fp::invalid());
        host_args.at(0) = x17379;
        host_args.at(1) = x17380;
        host_args.at(2) = x17381;
        host_args.at(3) = x17382;
        host_args.at(4) = x17383;
        host_args.at(5) = x17384;
        host_args.at(6) = x17385;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17386 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x17386 != Fp::invalid());
    if (x17386 != 0) {
      {
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17387 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17387 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17388 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17388 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17389 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17389 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17390 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17390 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17391 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17391 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17392 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17392 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17393 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17393 != Fp::invalid());
        host_args.at(0) = x17387;
        host_args.at(1) = x17388;
        host_args.at(2) = x17389;
        host_args.at(3) = x17390;
        host_args.at(4) = x17391;
        host_args.at(5) = x17392;
        host_args.at(6) = x17393;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17394 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17394 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17395 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17395 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17396 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17396 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17397 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17397 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17398 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17398 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17399 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17399 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17400 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17400 != Fp::invalid());
        host_args.at(0) = x17394;
        host_args.at(1) = x17395;
        host_args.at(2) = x17396;
        host_args.at(3) = x17397;
        host_args.at(4) = x17398;
        host_args.at(5) = x17399;
        host_args.at(6) = x17400;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17401 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x17401 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17402 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x17402 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17403 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x17403 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17404 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x17404 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17405 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x17405 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17406 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x17406 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17407 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x17407 != Fp::invalid());
        host_args.at(0) = x17401;
        host_args.at(1) = x17402;
        host_args.at(2) = x17403;
        host_args.at(3) = x17404;
        host_args.at(4) = x17405;
        host_args.at(5) = x17406;
        host_args.at(6) = x17407;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17408 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x17408 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17409 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x17409 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17410 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x17410 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17411 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x17411 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17412 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x17412 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17413 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x17413 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17414 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x17414 != Fp::invalid());
        host_args.at(0) = x17408;
        host_args.at(1) = x17409;
        host_args.at(2) = x17410;
        host_args.at(3) = x17411;
        host_args.at(4) = x17412;
        host_args.at(5) = x17413;
        host_args.at(6) = x17414;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17415 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x17415 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17416 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x17416 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17417 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x17417 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17418 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x17418 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17419 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x17419 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17420 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x17420 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17421 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x17421 != Fp::invalid());
        host_args.at(0) = x17415;
        host_args.at(1) = x17416;
        host_args.at(2) = x17417;
        host_args.at(3) = x17418;
        host_args.at(4) = x17419;
        host_args.at(5) = x17420;
        host_args.at(6) = x17421;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17422 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x17422 != Fp::invalid());
    if (x17422 != 0) {
      {
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17423 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17423 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17424 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17424 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17425 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17425 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17426 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17426 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17427 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17427 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17428 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17428 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17429 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17429 != Fp::invalid());
        host_args.at(0) = x17423;
        host_args.at(1) = x17424;
        host_args.at(2) = x17425;
        host_args.at(3) = x17426;
        host_args.at(4) = x17427;
        host_args.at(5) = x17428;
        host_args.at(6) = x17429;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17430 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17430 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17431 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17431 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17432 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17432 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17433 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17433 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17434 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17434 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17435 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17435 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17436 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17436 != Fp::invalid());
        host_args.at(0) = x17430;
        host_args.at(1) = x17431;
        host_args.at(2) = x17432;
        host_args.at(3) = x17433;
        host_args.at(4) = x17434;
        host_args.at(5) = x17435;
        host_args.at(6) = x17436;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17437 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x17437 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17438 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x17438 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17439 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x17439 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17440 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x17440 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17441 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x17441 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17442 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x17442 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17443 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x17443 != Fp::invalid());
        host_args.at(0) = x17437;
        host_args.at(1) = x17438;
        host_args.at(2) = x17439;
        host_args.at(3) = x17440;
        host_args.at(4) = x17441;
        host_args.at(5) = x17442;
        host_args.at(6) = x17443;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17444 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x17444 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17445 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x17445 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17446 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x17446 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17447 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x17447 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17448 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x17448 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17449 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x17449 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17450 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x17450 != Fp::invalid());
        host_args.at(0) = x17444;
        host_args.at(1) = x17445;
        host_args.at(2) = x17446;
        host_args.at(3) = x17447;
        host_args.at(4) = x17448;
        host_args.at(5) = x17449;
        host_args.at(6) = x17450;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17451 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x17451 != Fp::invalid());
    if (x17451 != 0) {
      {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17452 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17452 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17453 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17453 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17454 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17454 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17455 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17455 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17456 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17456 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17457 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17457 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17458 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17458 != Fp::invalid());
        host_args.at(0) = x17452;
        host_args.at(1) = x17453;
        host_args.at(2) = x17454;
        host_args.at(3) = x17455;
        host_args.at(4) = x17456;
        host_args.at(5) = x17457;
        host_args.at(6) = x17458;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17459 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17459 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17460 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17460 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17461 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17461 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17462 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17462 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17463 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17463 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17464 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17464 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17465 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17465 != Fp::invalid());
        host_args.at(0) = x17459;
        host_args.at(1) = x17460;
        host_args.at(2) = x17461;
        host_args.at(3) = x17462;
        host_args.at(4) = x17463;
        host_args.at(5) = x17464;
        host_args.at(6) = x17465;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17466 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x17466 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17467 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x17467 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17468 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x17468 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17469 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x17469 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17470 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x17470 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17471 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x17471 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17472 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x17472 != Fp::invalid());
        host_args.at(0) = x17466;
        host_args.at(1) = x17467;
        host_args.at(2) = x17468;
        host_args.at(3) = x17469;
        host_args.at(4) = x17470;
        host_args.at(5) = x17471;
        host_args.at(6) = x17472;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17473 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x17473 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17474 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x17474 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17475 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x17475 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17476 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x17476 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17477 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x17477 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17478 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x17478 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17479 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x17479 != Fp::invalid());
        host_args.at(0) = x17473;
        host_args.at(1) = x17474;
        host_args.at(2) = x17475;
        host_args.at(3) = x17476;
        host_args.at(4) = x17477;
        host_args.at(5) = x17478;
        host_args.at(6) = x17479;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17480 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x17480 != Fp::invalid());
    if (x17480 != 0) {
      {
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17481 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17481 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17482 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17482 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17483 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17483 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17484 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17484 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17485 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17485 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17486 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17486 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17487 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17487 != Fp::invalid());
        host_args.at(0) = x17481;
        host_args.at(1) = x17482;
        host_args.at(2) = x17483;
        host_args.at(3) = x17484;
        host_args.at(4) = x17485;
        host_args.at(5) = x17486;
        host_args.at(6) = x17487;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17488 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17488 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17489 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17489 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17490 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17490 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17491 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17491 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17492 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17492 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17493 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17493 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17494 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17494 != Fp::invalid());
        host_args.at(0) = x17488;
        host_args.at(1) = x17489;
        host_args.at(2) = x17490;
        host_args.at(3) = x17491;
        host_args.at(4) = x17492;
        host_args.at(5) = x17493;
        host_args.at(6) = x17494;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17495 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x17495 != Fp::invalid());
    if (x17495 != 0) {
      {
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17496 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17496 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17497 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17497 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17498 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17498 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17499 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17499 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17500 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17500 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17501 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17502 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17502 != Fp::invalid());
        host_args.at(0) = x17496;
        host_args.at(1) = x17497;
        host_args.at(2) = x17498;
        host_args.at(3) = x17499;
        host_args.at(4) = x17500;
        host_args.at(5) = x17501;
        host_args.at(6) = x17502;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17503 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17503 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17504 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17504 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17505 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17505 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17506 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17506 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17507 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17507 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17508 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17508 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17509 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17509 != Fp::invalid());
        host_args.at(0) = x17503;
        host_args.at(1) = x17504;
        host_args.at(2) = x17505;
        host_args.at(3) = x17506;
        host_args.at(4) = x17507;
        host_args.at(5) = x17508;
        host_args.at(6) = x17509;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17510 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x17510 != Fp::invalid());
    if (x17510 != 0) {
      {
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17511 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17511 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17512 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17512 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17513 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17513 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17514 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17514 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17515 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17515 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17516 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17516 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17517 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17517 != Fp::invalid());
        host_args.at(0) = x17511;
        host_args.at(1) = x17512;
        host_args.at(2) = x17513;
        host_args.at(3) = x17514;
        host_args.at(4) = x17515;
        host_args.at(5) = x17516;
        host_args.at(6) = x17517;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17518 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17518 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17519 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17519 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17520 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17521 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17522 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17522 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17523 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17523 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17524 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17524 != Fp::invalid());
        host_args.at(0) = x17518;
        host_args.at(1) = x17519;
        host_args.at(2) = x17520;
        host_args.at(3) = x17521;
        host_args.at(4) = x17522;
        host_args.at(5) = x17523;
        host_args.at(6) = x17524;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":35:15)
    auto x17525 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x17525 != Fp::invalid());
    if (x17525 != 0) {
      {
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17526 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x17526 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17527 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x17527 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17528 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x17528 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17529 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x17529 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17530 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x17530 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17531 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x17531 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17532 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x17532 != Fp::invalid());
        host_args.at(0) = x17526;
        host_args.at(1) = x17527;
        host_args.at(2) = x17528;
        host_args.at(3) = x17529;
        host_args.at(4) = x17530;
        host_args.at(5) = x17531;
        host_args.at(6) = x17532;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17533 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x17533 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17534 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x17534 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17535 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x17535 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17536 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x17536 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17537 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x17537 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17538 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x17538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17539 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x17539 != Fp::invalid());
        host_args.at(0) = x17533;
        host_args.at(1) = x17534;
        host_args.at(2) = x17535;
        host_args.at(3) = x17536;
        host_args.at(4) = x17537;
        host_args.at(5) = x17538;
        host_args.at(6) = x17539;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17540 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x17540 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17541 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x17541 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17542 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x17542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17543 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x17543 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17544 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x17544 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17545 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x17545 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17546 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x17546 != Fp::invalid());
        host_args.at(0) = x17540;
        host_args.at(1) = x17541;
        host_args.at(2) = x17542;
        host_args.at(3) = x17543;
        host_args.at(4) = x17544;
        host_args.at(5) = x17545;
        host_args.at(6) = x17546;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17547 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x17547 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17548 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x17548 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17549 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x17549 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17550 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x17550 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17551 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x17551 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17552 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x17552 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":81:27))
        auto x17553 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x17553 != Fp::invalid());
        host_args.at(0) = x17547;
        host_args.at(1) = x17548;
        host_args.at(2) = x17549;
        host_args.at(3) = x17550;
        host_args.at(4) = x17551;
        host_args.at(5) = x17552;
        host_args.at(6) = x17553;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x17226;
}

} // namespace risc0::circuit::rv32im
// clang-format on
