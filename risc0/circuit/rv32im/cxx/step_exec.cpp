// Copyright 2022 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 32> host_args;
  std::array<Fp, 32> host_outs;
  // loc("cirgen/circuit/rv32im/ffpu.cpp":45:20)
  Fp x0(943718400);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":41:25)
  Fp x1(268435454);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":95:20)
  Fp x2(56361024);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":94:21)
  Fp x3(54525952);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":48:30)
  Fp x4(33554432);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":84:18)
  Fp x5(63);
  // loc("cirgen/components/u32.cpp":56:26)
  Fp x6(2013265801);
  // loc("cirgen/components/u32.cpp":49:17)
  Fp x7(16711680);
  // loc("cirgen/components/u32.cpp":48:17)
  Fp x8(65280);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
  Fp x9(2013265910);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
  Fp x10(62914560);
  // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
  Fp x11(56361023);
  // loc("cirgen/circuit/rv32im/sha.cpp":342:18)
  Fp x12(47);
  // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
  Fp x13(56360975);
  // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
  Fp x14(56360967);
  // loc("cirgen/circuit/rv32im/sha.cpp":111:30)
  Fp x15(2013235201);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x16(2013204481);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x17(32768);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x18(2013143041);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x19(2013020161);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x20(8192);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x21(2012774401);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x22(4096);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x23(2012282881);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x24(2048);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x25(2011299841);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x26(1024);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x27(2009333761);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x28(512);
  // loc("cirgen/circuit/rv32im/sha.cpp":196:24)
  Fp x29(50331661);
  // loc("cirgen/circuit/rv32im/sha.cpp":195:24)
  Fp x30(50331660);
  // loc("cirgen/circuit/rv32im/ecall.cpp":90:25)
  Fp x31(50331662);
  // loc("cirgen/circuit/rv32im/ecall.cpp":38:45)
  Fp x32(50331659);
  // loc("cirgen/circuit/rv32im/ecall.cpp":36:43)
  Fp x33(50331658);
  // loc("cirgen/circuit/rv32im/ecall.cpp":129:49)
  Fp x34(50331653);
  // loc("cirgen/circuit/rv32im/ecall.cpp":124:21)
  Fp x35(115);
  // loc("cirgen/components/u32.cpp":238:19)
  Fp x36(131070);
  // loc("cirgen/components/u32.cpp":234:19)
  Fp x37(131072);
  // loc("cirgen/components/u32.cpp":189:21)
  Fp x38(15);
  // loc("cirgen/circuit/rv32im/multiply.cpp":65:32)
  Fp x39(31);
  // loc("cirgen/circuit/rv32im/multiply.cpp":63:34)
  Fp x40(192);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
  Fp x41(35);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:79)
  Fp x42(16384);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:56)
  Fp x43(4194304);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
  Fp x44(23);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x45(55);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x46(103);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x47(111);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
  Fp x48(99);
  // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
  Fp x49(240);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
  Fp x50(19);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
  Fp x51(51);
  // loc("cirgen/components/u32.cpp":65:36)
  Fp x52(1996488705);
  // loc("cirgen/components/u32.cpp":65:28)
  Fp x53(465814468);
  // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
  Fp x54(50331648);
  // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
  Fp x55(248);
  // loc("cirgen/circuit/rv32im/compute.cpp":45:13)
  Fp x56(2013265919);
  // loc("cirgen/circuit/rv32im/compute.cpp":17:12)
  Fp x57(2013265920);
  // loc("cirgen/circuit/rv32im/decode.cpp":28:34)
  Fp x58(127);
  // loc("cirgen/circuit/rv32im/decode.cpp":24:36)
  Fp x59(48);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:43)
  Fp x60(1981808641);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:35)
  Fp x61(64);
  // loc("cirgen/circuit/rv32im/decode.cpp":15:41)
  Fp x62(1006632961);
  // loc("cirgen/circuit/rv32im/decode.cpp":14:40)
  Fp x63(1761607681);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:40)
  Fp x64(1887436801);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:32)
  Fp x65(16);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x66(1950351361);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x67(32);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:33)
  Fp x68(96);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:40)
  Fp x69(1997537281);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:32)
  Fp x70(128);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x71(13);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x72(12);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x73(11);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x74(10);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x75(9);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x76(8);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x77(7);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x78(6);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x79(5);
  // loc("cirgen/circuit/rv32im/body.cpp":31:21)
  Fp x80(67108864);
  // loc("cirgen/circuit/rv32im/body.cpp":48:18)
  Fp x81(14);
  // loc("cirgen/circuit/rv32im/body.cpp":18:43)
  Fp x82(1509949441);
  // loc("cirgen/circuit/rv32im/body.cpp":17:32)
  Fp x83(3);
  // loc("cirgen/circuit/rv32im/body.cpp":14:29)
  Fp x84(4);
  // loc("./cirgen/components/u32.h":27:12)
  Fp x85(16777216);
  // loc("./cirgen/components/u32.h":26:12)
  Fp x86(65536);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x87(56014263);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x88(56014262);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x89(56014261);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x90(56014260);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x91(56014259);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x92(56014258);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x93(56014257);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x94(56014256);
  // loc("cirgen/components/bytes.cpp":83:30)
  Fp x95(2005401601);
  // loc("cirgen/components/bytes.cpp":83:30)
  Fp x96(256);
  // loc("cirgen/components/bytes.cpp":82:26)
  Fp x97(255);
  // loc("cirgen/components/bytes.cpp":37:25)
  Fp x98(2);
  // loc("cirgen/components/bytes.cpp":34:29)
  Fp x99(254);
  // loc("cirgen/components/bytes.cpp":21:13)
  Fp x100(0);
  // loc("cirgen/circuit/rv32im/top.cpp":18:17)
  Fp x101(1);
  // loc("Top/Code/OneHot/Reg1"("./cirgen/components/mux.h":37:25))
  auto x102 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x102 != Fp::invalid());
  if (x102 != 0) {
    // loc("Top/Code/OneHot/Reg1"("cirgen/circuit/rv32im/top.cpp":18:69))
    auto x103 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x103 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":18:17)
    auto x104 = x101 - x103;
    // loc("Top/Code/Mux/1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x105 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x105 != Fp::invalid());
    if (x104 != 0) {
      // loc("cirgen/components/bytes.cpp":21:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":22:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
    }
    // loc("cirgen/components/bytes.cpp":103:17)
    auto x106 = x101 - x104;
    if (x106 != 0) {
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x107 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x107 != Fp::invalid());
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x108 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x108 != Fp::invalid());
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x109 = x108 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x110 = (x109 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x111 = x101 - x110;
        if (x111 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x107);
            reg = x107;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x112 = x108 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x112);
            reg = x112;
          }
        }
        if (x110 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x113 = x107 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x113);
            reg = x113;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x114 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x114 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x115 = x114 - x107;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x116 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x116 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x117 = x116 - x108;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x118 = x115 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x119 = x115 * x118;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x119 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x120 = x117 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x121 = x115 * x120;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x121 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x122 = x117 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x123 = x118 * x122;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x123 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x124 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x124 != Fp::invalid());
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x125 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x125 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x126 = x125 - x99;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x127 = (x126 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x128 = x101 - x127;
      if (x128 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x124);
          reg = x124;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x129 = x125 + x98;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x129);
          reg = x129;
        }
      }
      if (x127 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x130 = x124 + x101;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x130);
          reg = x130;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x131 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x131 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x132 = x131 - x124;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement1/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x133 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x133 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x134 = x133 - x125;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x135 = x132 - x101;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x136 = x132 * x135;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x136 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x137 = x134 + x99;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x138 = x132 * x137;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x138 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x139 = x134 - x98;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x140 = x135 * x139;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x140 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x141 = x133 - x99;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x142 = (x141 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x143 = x101 - x142;
      if (x143 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x131);
          reg = x131;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x144 = x133 + x98;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x144);
          reg = x144;
        }
      }
      if (x142 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x145 = x131 + x101;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x145);
          reg = x145;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement2/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x146 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x146 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x147 = x146 - x131;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement2/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x148 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x148 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x149 = x148 - x133;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x150 = x147 - x101;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x151 = x147 * x150;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x151 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x152 = x149 + x99;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x153 = x147 * x152;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x153 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x154 = x149 - x98;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x155 = x150 * x154;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x155 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x156 = x148 - x99;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x157 = (x156 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x158 = x101 - x157;
      if (x158 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x146);
          reg = x146;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x159 = x148 + x98;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x159);
          reg = x159;
        }
      }
      if (x157 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x160 = x146 + x101;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x160);
          reg = x160;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement3/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x161 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x161 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x162 = x161 - x146;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement3/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x163 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x163 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x164 = x163 - x148;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x165 = x162 - x101;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x166 = x162 * x165;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x166 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x167 = x164 + x99;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x168 = x162 * x167;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x168 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x169 = x164 - x98;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x170 = x165 * x169;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x170 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x171 = x163 - x99;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x172 = (x171 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x173 = x101 - x172;
      if (x173 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x161);
          reg = x161;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x174 = x163 + x98;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x174);
          reg = x174;
        }
      }
      if (x172 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x175 = x161 + x101;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x175);
          reg = x175;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement4/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x176 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x176 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x177 = x176 - x161;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x178 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x178 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x179 = x178 - x163;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x180 = x177 - x101;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x181 = x177 * x180;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x181 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x182 = x179 + x99;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x183 = x177 * x182;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x183 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x184 = x179 - x98;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x185 = x180 * x184;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x185 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x186 = x178 - x99;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x187 = (x186 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x188 = x101 - x187;
      if (x188 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x176);
          reg = x176;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x189 = x178 + x98;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x189);
          reg = x189;
        }
      }
      if (x187 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x190 = x176 + x101;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x190);
          reg = x190;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x191 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x191 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x192 = x191 - x176;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x193 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x193 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x194 = x193 - x178;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x195 = x192 - x101;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x196 = x192 * x195;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x196 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x197 = x194 + x99;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x198 = x192 * x197;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x198 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x199 = x194 - x98;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x200 = x195 * x199;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x200 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x201 = x193 - x99;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x202 = (x201 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x203 = x101 - x202;
      if (x203 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x191);
          reg = x191;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x204 = x193 + x98;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x204);
          reg = x204;
        }
      }
      if (x202 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x205 = x191 + x101;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x205);
          reg = x205;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x206 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x206 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x207 = x206 - x191;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x208 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x208 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x209 = x208 - x193;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x210 = x207 - x101;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x211 = x207 * x210;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x211 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x212 = x209 + x99;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x213 = x207 * x212;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x213 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x214 = x209 - x98;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x215 = x210 * x214;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x215 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x216 = x208 - x99;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x217 = (x216 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x218 = x101 - x217;
      if (x218 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x206);
          reg = x206;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x219 = x208 + x98;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x219);
          reg = x219;
        }
      }
      if (x217 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x220 = x206 + x101;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x220);
          reg = x220;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x221 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x221 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x222 = x221 - x206;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x223 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x223 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x224 = x223 - x208;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x225 = x222 - x101;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x226 = x222 * x225;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x226 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x227 = x224 + x99;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x228 = x222 * x227;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x228 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x229 = x224 - x98;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x230 = x225 * x229;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x230 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    if (x105 != 0) {
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][50 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][51 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
    }
    // loc("cirgen/components/bytes.cpp":116:16)
    auto x231 = x101 - x105;
    if (x231 != 0) {
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x232 = x223 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x233 = (x232 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x234 = x101 - x233;
        if (x234 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x221);
            reg = x221;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x235 = x223 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x235);
            reg = x235;
          }
        }
        if (x233 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x236 = x221 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x236);
            reg = x236;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x237 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x237 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x238 = x237 - x221;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x239 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x239 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x240 = x239 - x223;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x241 = x238 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x242 = x238 * x241;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x242 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x243 = x240 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x244 = x238 * x243;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x244 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x245 = x240 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x246 = x241 * x245;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x246 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x247 = x239 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x248 = (x247 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x249 = x101 - x248;
        if (x249 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x237);
            reg = x237;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x250 = x239 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x250);
            reg = x250;
          }
        }
        if (x248 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x251 = x237 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x251);
            reg = x251;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x252 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x252 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x253 = x252 - x237;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x254 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x254 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x255 = x254 - x239;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x256 = x253 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x257 = x253 * x256;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x257 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x258 = x255 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x259 = x253 * x258;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x259 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x260 = x255 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x261 = x256 * x260;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x261 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x262 = x254 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x263 = (x262 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x264 = x101 - x263;
        if (x264 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x252);
            reg = x252;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x265 = x254 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x265);
            reg = x265;
          }
        }
        if (x263 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x266 = x252 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x266);
            reg = x266;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x267 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x267 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x268 = x267 - x252;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x269 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x269 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x270 = x269 - x254;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x271 = x268 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x272 = x268 * x271;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x272 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x273 = x270 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x274 = x268 * x273;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x274 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x275 = x270 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x276 = x271 * x275;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x276 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x277 = x269 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x278 = (x277 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x279 = x101 - x278;
        if (x279 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x267);
            reg = x267;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x280 = x269 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x280);
            reg = x280;
          }
        }
        if (x278 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x281 = x267 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x281);
            reg = x281;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x282 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x282 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x283 = x282 - x267;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x284 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x284 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x285 = x284 - x269;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x286 = x283 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x287 = x283 * x286;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x287 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x288 = x285 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x289 = x283 * x288;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x289 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x290 = x285 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x291 = x286 * x290;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x291 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x292 = x284 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x293 = (x292 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x294 = x101 - x293;
        if (x294 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x282);
            reg = x282;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x295 = x284 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x295);
            reg = x295;
          }
        }
        if (x293 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x296 = x282 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x296);
            reg = x296;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x297 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x297 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x298 = x297 - x282;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x299 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x299 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x300 = x299 - x284;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x301 = x298 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x302 = x298 * x301;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x302 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x303 = x300 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x304 = x298 * x303;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x304 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x305 = x300 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x306 = x301 * x305;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x306 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x307 = x299 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x308 = (x307 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x309 = x101 - x308;
        if (x309 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x297);
            reg = x297;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x310 = x299 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x310);
            reg = x310;
          }
        }
        if (x308 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x311 = x297 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x311);
            reg = x311;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x312 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x312 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x313 = x312 - x297;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x314 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x314 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x315 = x314 - x299;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x316 = x313 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x317 = x313 * x316;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x317 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x318 = x315 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x319 = x313 * x318;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x319 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x320 = x315 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x321 = x316 * x320;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x321 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x322 = x314 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x323 = (x322 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x324 = x101 - x323;
        if (x324 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x312);
            reg = x312;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x325 = x314 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x325);
            reg = x325;
          }
        }
        if (x323 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x326 = x312 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x326);
            reg = x326;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x327 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x327 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x328 = x327 - x312;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x329 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x329 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x330 = x329 - x314;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x331 = x328 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x332 = x328 * x331;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x332 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x333 = x330 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x334 = x328 * x333;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x334 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x335 = x330 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x336 = x331 * x335;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x336 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x337 = x329 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x338 = (x337 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x339 = x101 - x338;
        if (x339 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x327);
            reg = x327;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x340 = x329 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x340);
            reg = x340;
          }
        }
        if (x338 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x341 = x327 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x341);
            reg = x341;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x342 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x342 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x343 = x342 - x327;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x344 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x344 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x345 = x344 - x329;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x346 = x343 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x347 = x343 * x346;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x347 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x348 = x345 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x349 = x343 * x348;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x349 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x350 = x345 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x351 = x346 * x350;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x351 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x352 = x344 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x353 = (x352 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x354 = x101 - x353;
        if (x354 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x342);
            reg = x342;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x355 = x344 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x355);
            reg = x355;
          }
        }
        if (x353 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x356 = x342 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x356);
            reg = x356;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement16/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x357 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x357 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x358 = x357 - x342;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement16/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x359 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x359 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x360 = x359 - x344;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x361 = x358 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x362 = x358 * x361;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x362 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x363 = x360 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x364 = x358 * x363;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x364 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x365 = x360 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x366 = x361 * x365;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x366 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x367 = x359 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x368 = (x367 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x369 = x101 - x368;
        if (x369 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x357);
            reg = x357;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x370 = x359 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x370);
            reg = x370;
          }
        }
        if (x368 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x371 = x357 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x371);
            reg = x371;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement17/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x372 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x372 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x373 = x372 - x357;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement17/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x374 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x374 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x375 = x374 - x359;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x376 = x373 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x377 = x373 * x376;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x377 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x378 = x375 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x379 = x373 * x378;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x379 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x380 = x375 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x381 = x376 * x380;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x381 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x382 = x374 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x383 = (x382 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x384 = x101 - x383;
        if (x384 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x372);
            reg = x372;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x385 = x374 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x385);
            reg = x385;
          }
        }
        if (x383 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x386 = x372 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x386);
            reg = x386;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement18/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x387 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x387 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x388 = x387 - x372;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement18/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x389 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x389 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x390 = x389 - x374;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x391 = x388 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x392 = x388 * x391;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x392 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x393 = x390 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x394 = x388 * x393;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x394 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x395 = x390 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x396 = x391 * x395;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x396 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x397 = x389 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x398 = (x397 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x399 = x101 - x398;
        if (x399 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x387);
            reg = x387;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x400 = x389 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x400);
            reg = x400;
          }
        }
        if (x398 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x401 = x387 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x401);
            reg = x401;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement19/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x402 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x402 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x403 = x402 - x387;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement19/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x404 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x404 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x405 = x404 - x389;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x406 = x403 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x407 = x403 * x406;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x407 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x408 = x405 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x409 = x403 * x408;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x409 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x410 = x405 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x411 = x406 * x410;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x411 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x412 = x404 - x99;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x413 = (x412 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x414 = x101 - x413;
        if (x414 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x402);
            reg = x402;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x415 = x404 + x98;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x415);
            reg = x415;
          }
        }
        if (x413 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x416 = x402 + x101;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x416);
            reg = x416;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x417 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x417 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x418 = x417 - x402;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x419 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x419 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x420 = x419 - x404;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x421 = x418 - x101;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x422 = x418 * x421;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x422 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x423 = x420 + x99;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x424 = x418 * x423;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x424 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x425 = x420 - x98;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x426 = x421 * x425;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x426 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    }
  }
  // loc("Top/Code/OneHot/Reg2"("./cirgen/components/mux.h":37:25))
  auto x427 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x427 != Fp::invalid());
  if (x427 != 0) {
    // loc("Top/Code/Mux/2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x428 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x428 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x429 = Fp(x428.asUInt32() & x97.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x429);
        reg = x429;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x430 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x430 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x431 = x428 - x430;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x432 = x431 * x95;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("Top/Code/Mux/2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x433 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x433 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x434 = Fp(x433.asUInt32() & x97.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x434);
        reg = x434;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x435 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x435 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x436 = x433 - x435;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x437 = x436 * x95;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x437);
      reg = x437;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x438 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x438 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x439 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x439 != Fp::invalid());
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x440 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x440 != Fp::invalid());
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x441 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x441 != Fp::invalid());
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][58 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x430);
      reg = x430;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][59 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x438);
      reg = x438;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][60 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][61 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x439);
      reg = x439;
    }
    {
      host_args.at(0) = x441;
      host_args.at(1) = x430;
      host_args.at(2) = x438;
      host_args.at(3) = x435;
      host_args.at(4) = x439;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x442 = args[2][58 * steps + ((cycle - 0) & mask)];
    assert(x442 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x443 = args[2][59 * steps + ((cycle - 0) & mask)];
    assert(x443 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x444 = args[2][60 * steps + ((cycle - 0) & mask)];
    assert(x444 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x445 = args[2][61 * steps + ((cycle - 0) & mask)];
    assert(x445 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][55 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x441);
      reg = x441;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][56 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][57 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][58 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x442);
      reg = x442;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][59 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x443);
      reg = x443;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][60 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x444);
      reg = x444;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][61 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x445);
      reg = x445;
    }
    // loc("Top/Code/Mux/2/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x446 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x446 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x447 = Fp(x446.asUInt32() & x97.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x447);
        reg = x447;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x448 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x448 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x449 = x446 - x448;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x450 = x449 * x95;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x450);
      reg = x450;
    }
    // loc("Top/Code/Mux/2/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
    auto x451 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x451 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x452 = Fp(x451.asUInt32() & x97.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x452);
        reg = x452;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x453 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x453 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x454 = x451 - x453;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x455 = x454 * x95;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x455);
      reg = x455;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x456 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x456 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x457 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":38:44)
    auto x458 = x441 + x101;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][65 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x448);
      reg = x448;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][66 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x456);
      reg = x456;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][67 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x453);
      reg = x453;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][68 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x457);
      reg = x457;
    }
    {
      host_args.at(0) = x458;
      host_args.at(1) = x448;
      host_args.at(2) = x456;
      host_args.at(3) = x453;
      host_args.at(4) = x457;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x459 = args[2][65 * steps + ((cycle - 0) & mask)];
    assert(x459 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x460 = args[2][66 * steps + ((cycle - 0) & mask)];
    assert(x460 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x461 = args[2][67 * steps + ((cycle - 0) & mask)];
    assert(x461 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x462 = args[2][68 * steps + ((cycle - 0) & mask)];
    assert(x462 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][62 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x458);
      reg = x458;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][63 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][64 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][65 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x459);
      reg = x459;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][66 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x460);
      reg = x460;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][67 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x461);
      reg = x461;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][68 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x462);
      reg = x462;
    }
    // loc("Top/Code/Mux/2/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
    auto x463 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x463 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x464 = Fp(x463.asUInt32() & x97.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x464);
        reg = x464;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x465 = args[2][27 * steps + ((cycle - 0) & mask)];
    assert(x465 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x466 = x463 - x465;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x467 = x466 * x95;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][28 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x467);
      reg = x467;
    }
    // loc("Top/Code/Mux/2/Reg6"("./cirgen/compiler/edsl/component.h":85:27))
    auto x468 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x468 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x469 = Fp(x468.asUInt32() & x97.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x469);
        reg = x469;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x470 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x470 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x471 = x468 - x470;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x472 = x471 * x95;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x472);
      reg = x472;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x473 = args[2][28 * steps + ((cycle - 0) & mask)];
    assert(x473 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x474 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x474 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":38:44)
    auto x475 = x441 + x98;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][72 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x465);
      reg = x465;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x473);
      reg = x473;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][74 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x470);
      reg = x470;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][75 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x474);
      reg = x474;
    }
    {
      host_args.at(0) = x475;
      host_args.at(1) = x465;
      host_args.at(2) = x473;
      host_args.at(3) = x470;
      host_args.at(4) = x474;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x476 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x476 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x477 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x477 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x478 = args[2][74 * steps + ((cycle - 0) & mask)];
    assert(x478 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x479 = args[2][75 * steps + ((cycle - 0) & mask)];
    assert(x479 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][69 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x475);
      reg = x475;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][70 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][71 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][72 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x476);
      reg = x476;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x477);
      reg = x477;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][74 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x478);
      reg = x478;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][75 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x479);
      reg = x479;
    }
  }
  // loc("Top/Code/OneHot/Reg3"("./cirgen/components/mux.h":37:25))
  auto x480 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x480 != Fp::invalid());
  if (x480 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x481 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x481 != Fp::invalid());
    // loc("Top/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x482 = args[1][4];
    // loc("Top/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x483 = args[1][5];
    // loc("Top/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x484 = args[1][6];
    // loc("Top/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x485 = args[1][7];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x482);
      reg = x482;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x483);
      reg = x483;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x484);
      reg = x484;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x485);
      reg = x485;
    }
    {
      host_args.at(0) = x94;
      host_args.at(1) = x482;
      host_args.at(2) = x483;
      host_args.at(3) = x484;
      host_args.at(4) = x485;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x486 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x486 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x487 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x487 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x488 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x488 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x489 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x489 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][94 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x94);
      reg = x94;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][95 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x481);
      reg = x481;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][96 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x486);
      reg = x486;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x487);
      reg = x487;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x488);
      reg = x488;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x489);
      reg = x489;
    }
    // loc("Top/Mux/3/U32Reg2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x490 = args[1][8];
    // loc("Top/Mux/3/U32Reg2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x491 = args[1][9];
    // loc("Top/Mux/3/U32Reg2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x492 = args[1][10];
    // loc("Top/Mux/3/U32Reg2/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x493 = args[1][11];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x490);
      reg = x490;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x491);
      reg = x491;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x492);
      reg = x492;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x493);
      reg = x493;
    }
    {
      host_args.at(0) = x93;
      host_args.at(1) = x490;
      host_args.at(2) = x491;
      host_args.at(3) = x492;
      host_args.at(4) = x493;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x494 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x494 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x495 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x495 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x496 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x496 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x497 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x497 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][101 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x93);
      reg = x93;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][102 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x481);
      reg = x481;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][103 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x494);
      reg = x494;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x495);
      reg = x495;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x496);
      reg = x496;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x497);
      reg = x497;
    }
    // loc("Top/Mux/3/U32Reg3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x498 = args[1][12];
    // loc("Top/Mux/3/U32Reg3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x499 = args[1][13];
    // loc("Top/Mux/3/U32Reg3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x500 = args[1][14];
    // loc("Top/Mux/3/U32Reg3/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x501 = args[1][15];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x498);
      reg = x498;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x499);
      reg = x499;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x500);
      reg = x500;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x501);
      reg = x501;
    }
    {
      host_args.at(0) = x92;
      host_args.at(1) = x498;
      host_args.at(2) = x499;
      host_args.at(3) = x500;
      host_args.at(4) = x501;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x502 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x502 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x503 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x503 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x504 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x504 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x505 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x505 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x92);
      reg = x92;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x481);
      reg = x481;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x502);
      reg = x502;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x503);
      reg = x503;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x504);
      reg = x504;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x505);
      reg = x505;
    }
    // loc("Top/Mux/3/U32Reg4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x506 = args[1][16];
    // loc("Top/Mux/3/U32Reg4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x507 = args[1][17];
    // loc("Top/Mux/3/U32Reg4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x508 = args[1][18];
    // loc("Top/Mux/3/U32Reg4/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x509 = args[1][19];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x506);
      reg = x506;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x507);
      reg = x507;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x508);
      reg = x508;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x509);
      reg = x509;
    }
    {
      host_args.at(0) = x91;
      host_args.at(1) = x506;
      host_args.at(2) = x507;
      host_args.at(3) = x508;
      host_args.at(4) = x509;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x510 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x510 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x511 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x511 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x512 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x512 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x513 = args[2][121 * steps + ((cycle - 0) & mask)];
    assert(x513 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][115 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x91);
      reg = x91;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][116 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x481);
      reg = x481;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x510);
      reg = x510;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x511);
      reg = x511;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x512);
      reg = x512;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x513);
      reg = x513;
    }
    // loc("Top/Mux/3/U32Reg5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x514 = args[1][20];
    // loc("Top/Mux/3/U32Reg5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x515 = args[1][21];
    // loc("Top/Mux/3/U32Reg5/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x516 = args[1][22];
    // loc("Top/Mux/3/U32Reg5/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x517 = args[1][23];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x514);
      reg = x514;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x515);
      reg = x515;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x516);
      reg = x516;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x517);
      reg = x517;
    }
    {
      host_args.at(0) = x90;
      host_args.at(1) = x514;
      host_args.at(2) = x515;
      host_args.at(3) = x516;
      host_args.at(4) = x517;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x518 = args[2][125 * steps + ((cycle - 0) & mask)];
    assert(x518 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x519 = args[2][126 * steps + ((cycle - 0) & mask)];
    assert(x519 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x520 = args[2][127 * steps + ((cycle - 0) & mask)];
    assert(x520 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x521 = args[2][128 * steps + ((cycle - 0) & mask)];
    assert(x521 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][122 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x90);
      reg = x90;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][123 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x481);
      reg = x481;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x518);
      reg = x518;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x519);
      reg = x519;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x520);
      reg = x520;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x521);
      reg = x521;
    }
    // loc("Top/Mux/3/U32Reg6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x522 = args[1][24];
    // loc("Top/Mux/3/U32Reg6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x523 = args[1][25];
    // loc("Top/Mux/3/U32Reg6/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x524 = args[1][26];
    // loc("Top/Mux/3/U32Reg6/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x525 = args[1][27];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x522);
      reg = x522;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x523);
      reg = x523;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x524);
      reg = x524;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][135 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x525);
      reg = x525;
    }
    {
      host_args.at(0) = x89;
      host_args.at(1) = x522;
      host_args.at(2) = x523;
      host_args.at(3) = x524;
      host_args.at(4) = x525;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x526 = args[2][132 * steps + ((cycle - 0) & mask)];
    assert(x526 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x527 = args[2][133 * steps + ((cycle - 0) & mask)];
    assert(x527 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x528 = args[2][134 * steps + ((cycle - 0) & mask)];
    assert(x528 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x529 = args[2][135 * steps + ((cycle - 0) & mask)];
    assert(x529 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][129 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x89);
      reg = x89;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][130 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x481);
      reg = x481;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x526);
      reg = x526;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x527);
      reg = x527;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x528);
      reg = x528;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][135 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x529);
      reg = x529;
    }
    // loc("Top/Mux/3/U32Reg7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x530 = args[1][28];
    // loc("Top/Mux/3/U32Reg7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x531 = args[1][29];
    // loc("Top/Mux/3/U32Reg7/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x532 = args[1][30];
    // loc("Top/Mux/3/U32Reg7/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x533 = args[1][31];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][139 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x530);
      reg = x530;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][140 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x531);
      reg = x531;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][141 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x532);
      reg = x532;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][142 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x533);
      reg = x533;
    }
    {
      host_args.at(0) = x88;
      host_args.at(1) = x530;
      host_args.at(2) = x531;
      host_args.at(3) = x532;
      host_args.at(4) = x533;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x534 = args[2][139 * steps + ((cycle - 0) & mask)];
    assert(x534 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x535 = args[2][140 * steps + ((cycle - 0) & mask)];
    assert(x535 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x536 = args[2][141 * steps + ((cycle - 0) & mask)];
    assert(x536 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x537 = args[2][142 * steps + ((cycle - 0) & mask)];
    assert(x537 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][136 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x88);
      reg = x88;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][137 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x481);
      reg = x481;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][138 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][139 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x534);
      reg = x534;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][140 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x535);
      reg = x535;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][141 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x536);
      reg = x536;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][142 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x537);
      reg = x537;
    }
    // loc("Top/Mux/3/U32Reg8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x538 = args[1][32];
    // loc("Top/Mux/3/U32Reg8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x539 = args[1][33];
    // loc("Top/Mux/3/U32Reg8/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x540 = args[1][34];
    // loc("Top/Mux/3/U32Reg8/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x541 = args[1][35];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][146 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x538);
      reg = x538;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][147 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x539);
      reg = x539;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][148 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x540);
      reg = x540;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][149 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x541);
      reg = x541;
    }
    {
      host_args.at(0) = x87;
      host_args.at(1) = x538;
      host_args.at(2) = x539;
      host_args.at(3) = x540;
      host_args.at(4) = x541;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x542 = args[2][146 * steps + ((cycle - 0) & mask)];
    assert(x542 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x543 = args[2][147 * steps + ((cycle - 0) & mask)];
    assert(x543 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x544 = args[2][148 * steps + ((cycle - 0) & mask)];
    assert(x544 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x545 = args[2][149 * steps + ((cycle - 0) & mask)];
    assert(x545 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][143 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x87);
      reg = x87;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][144 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x481);
      reg = x481;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][145 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][146 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x542);
      reg = x542;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][147 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x543);
      reg = x543;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][148 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x544);
      reg = x544;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][149 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x545);
      reg = x545;
    }
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x546 = args[1][0];
    // loc("Top/Mux/3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x547 = args[1][1];
    // loc("Top/Mux/3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x548 = args[1][2];
    // loc("Top/Mux/3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x549 = args[1][3];
    // loc("./cirgen/components/u32.h":25:12)
    auto x550 = x547 * x96;
    // loc("./cirgen/components/u32.h":24:12)
    auto x551 = x546 + x550;
    // loc("./cirgen/components/u32.h":26:12)
    auto x552 = x548 * x86;
    // loc("./cirgen/components/u32.h":24:12)
    auto x553 = x551 + x552;
    // loc("./cirgen/components/u32.h":27:12)
    auto x554 = x549 * x85;
    // loc("./cirgen/components/u32.h":24:12)
    auto x555 = x553 + x554;
    // loc("cirgen/circuit/rv32im/body.cpp":14:23)
    auto x556 = x555 + x84;
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x557 = Fp(x556.asUInt32() & x97.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x557);
        reg = x557;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
    auto x558 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x558 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x559 = x556 - x558;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x560 = x559 * x95;
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x561 = Fp(x560.asUInt32() & x97.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x561);
        reg = x561;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x562 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x562 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x563 = x560 - x562;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x564 = x563 * x95;
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x565 = Fp(x564.asUInt32() & x97.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x565);
        reg = x565;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
    auto x566 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x566 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x567 = x564 - x566;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x568 = x567 * x95;
    {
      // loc("cirgen/circuit/rv32im/body.cpp":17:26)
      auto x569 = Fp(x568.asUInt32() & x83.asUInt32());
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x569);
        reg = x569;
      }
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x570 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x570 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":18:18)
    auto x571 = x568 - x570;
    // loc("cirgen/circuit/rv32im/body.cpp":18:17)
    auto x572 = x571 * x82;
    // loc("./cirgen/components/bits.h":57:23)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x572);
      reg = x572;
    }
    // loc("Top/Mux/3/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x573 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x573 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":22:23)
    auto x574 = x101 - x573;
    // loc("cirgen/circuit/rv32im/body.cpp":22:15)
    auto x575 = x573 * x574;
    // loc("cirgen/circuit/rv32im/body.cpp":22:3)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x575);
      reg = x575;
    }
    // loc("Top/Mux/3/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x576 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x576 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":23:17)
    auto x577 = x98 - x573;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    auto x578 = x576 * x577;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    if (x578 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
    // loc("cirgen/circuit/rv32im/body.cpp":48:3)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x81);
      reg = x81;
    }
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x579 = x562 * x96;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x580 = x558 + x579;
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x581 = x566 * x86;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x582 = x580 + x581;
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x583 = x570 * x85;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x584 = x582 + x583;
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x585 = x573 * x80;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x586 = x584 + x585;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x587 = x586 - x84;
    host_args.at(0) = x481;
    host_args.at(1) = x587;
    host(ctx, "log", "%u: Reset: PC = 0x%x", host_args.data(), 2, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/Reg4"("./cirgen/components/mux.h":37:25))
  auto x588 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x588 != Fp::invalid());
  if (x588 != 0) {
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x589 = args[2][10 * steps + ((cycle - 1) & mask)];
    assert(x589 != Fp::invalid());
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":78:10))
    auto x590 = args[2][11 * steps + ((cycle - 1) & mask)];
    assert(x590 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x591 = x590 * x96;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x592 = x589 + x591;
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x593 = args[2][12 * steps + ((cycle - 1) & mask)];
    assert(x593 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x594 = x593 * x86;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x595 = x592 + x594;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x596 = args[2][72 * steps + ((cycle - 1) & mask)];
    assert(x596 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x597 = x596 * x85;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x598 = x595 + x597;
    // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x599 = args[2][73 * steps + ((cycle - 1) & mask)];
    assert(x599 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x600 = x599 * x80;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x601 = x598 + x600;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x602 = x601 - x84;
    {
      // loc("Top/Mux/4/Reg"("cirgen/circuit/rv32im/body.cpp":59:45))
      auto x603 = args[2][93 * steps + ((cycle - 1) & mask)];
      assert(x603 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":60:24)
      auto x604 = x603 - x81;
      // loc("cirgen/circuit/rv32im/body.cpp":60:24)
      auto x605 = (x604 == 0) ? Fp(1) : Fp(0);
      if (x605 != 0) {
        // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x606 = args[0][0 * steps + ((cycle - 0) & mask)];
        assert(x606 != Fp::invalid());
        host_args.at(0) = x606;
        host_args.at(1) = x602;
        host(ctx, "log", "%u: BODY pc: 0x%x", host_args.data(), 2, host_outs.data(), 0);
        host_args.at(0) = x602;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x602;
        host(ctx, "getMajor", "", host_args.data(), 1, host_outs.data(), 1);
        auto x607 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x608 = (x607 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x608);
            reg = x608;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x609 = x607 - x101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x610 = (x609 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x610);
            reg = x610;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x611 = x607 - x98;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x612 = (x611 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x612);
            reg = x612;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x613 = x607 - x83;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x614 = (x613 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x614);
            reg = x614;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x615 = x607 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x616 = (x615 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x616);
            reg = x616;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x617 = x607 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x618 = (x617 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x618);
            reg = x618;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x619 = x607 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x620 = (x619 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x620);
            reg = x620;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x621 = x607 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x622 = (x621 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x622);
            reg = x622;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x623 = x607 - x76;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x624 = (x623 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x624);
            reg = x624;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x625 = x607 - x75;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x626 = (x625 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x626);
            reg = x626;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x627 = x607 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x628 = (x627 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x628);
            reg = x628;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x629 = x607 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x630 = (x629 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x630);
            reg = x630;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x631 = x607 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x632 = (x631 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x632);
            reg = x632;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x633 = x607 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x634 = (x633 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x634);
            reg = x634;
          }
        }
        // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x635 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x635 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x636 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x636 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x637 = x636 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x638 = x635 + x637;
        // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x639 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x639 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x640 = x639 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x641 = x638 + x640;
        // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x642 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x642 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x643 = x642 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x644 = x641 + x643;
        // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x645 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x645 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x646 = x645 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x647 = x644 + x646;
        // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x648 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x648 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x649 = x648 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x650 = x647 + x649;
        // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x651 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x651 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x652 = x651 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x653 = x650 + x652;
        // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x654 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x654 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x655 = x654 * x76;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x656 = x653 + x655;
        // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x657 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x657 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x658 = x657 * x75;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x659 = x656 + x658;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x660 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x660 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x661 = x660 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x662 = x659 + x661;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x663 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x663 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x664 = x663 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x665 = x662 + x664;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x666 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x666 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x667 = x666 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x668 = x665 + x667;
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x669 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x669 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x670 = x669 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x671 = x668 + x670;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x672 = x671 - x607;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x672 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":67:20)
      auto x673 = x101 - x605;
      if (x673 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":68:48)
        auto x674 = x603 - x76;
        // loc("cirgen/circuit/rv32im/body.cpp":68:48)
        auto x675 = (x674 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/body.cpp":68:48)
        auto x676 = x101 - x675;
        if (x676 != 0) {
          // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x677 = args[0][0 * steps + ((cycle - 0) & mask)];
          assert(x677 != Fp::invalid());
          host_args.at(0) = x677;
          host_args.at(1) = x602;
          host_args.at(2) = x603;
          host(ctx, "log", "%u: BODY pc: 0x%x, major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x678 = (x603 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x678);
            reg = x678;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x679 = x603 - x101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x680 = (x679 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x680);
            reg = x680;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x681 = x603 - x98;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x682 = (x681 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x682);
            reg = x682;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x683 = x603 - x83;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x684 = (x683 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x684);
            reg = x684;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x685 = x603 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x686 = (x685 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x686);
            reg = x686;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x687 = x603 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x688 = (x687 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x688);
            reg = x688;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x689 = x603 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x690 = (x689 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x690);
            reg = x690;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x691 = x603 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x692 = (x691 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x692);
            reg = x692;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x675);
            reg = x675;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x693 = x603 - x75;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x694 = (x693 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x694);
            reg = x694;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x695 = x603 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x696 = (x695 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x696);
            reg = x696;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x697 = x603 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x698 = (x697 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x698);
            reg = x698;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x699 = x603 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x700 = (x699 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x700);
            reg = x700;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x701 = x603 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x702 = (x701 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x702);
            reg = x702;
          }
        }
        // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x703 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x703 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x704 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x704 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x705 = x704 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x706 = x703 + x705;
        // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x707 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x707 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x708 = x707 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x709 = x706 + x708;
        // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x710 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x710 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x711 = x710 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x712 = x709 + x711;
        // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x713 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x713 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x714 = x713 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x715 = x712 + x714;
        // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x716 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x716 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x717 = x716 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x718 = x715 + x717;
        // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x719 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x719 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x720 = x719 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x721 = x718 + x720;
        // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x722 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x722 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x723 = x722 * x76;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x724 = x721 + x723;
        // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x725 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x725 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x726 = x725 * x75;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x727 = x724 + x726;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x728 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x728 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x729 = x728 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x730 = x727 + x729;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x731 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x731 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x732 = x731 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x733 = x730 + x732;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x734 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x734 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x735 = x734 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x736 = x733 + x735;
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x737 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x737 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x738 = x737 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x739 = x736 + x738;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x740 = x739 - x603;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x740 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg"("./cirgen/components/mux.h":37:25))
    auto x741 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x741 != Fp::invalid());
    if (x741 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x742 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x742 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x743 = x602 * x82;
      {
        host_args.at(0) = x743;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x744 = host_outs.at(0);
        auto x745 = host_outs.at(1);
        auto x746 = host_outs.at(2);
        auto x747 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x744);
          reg = x744;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x745);
          reg = x745;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x746);
          reg = x746;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x747);
          reg = x747;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x748 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x749 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x750 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x751 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x751 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x743);
        reg = x743;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x742);
        reg = x742;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x748);
        reg = x748;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x749);
        reg = x749;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x750);
        reg = x750;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x751);
        reg = x751;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x752 = Fp(x751.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x753 = x752 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x753);
          reg = x753;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x754 = Fp(x751.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x755 = x754 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x755);
          reg = x755;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x756 = Fp(x751.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x757 = x756 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x757);
          reg = x757;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x758 = Fp(x751.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x759 = x758 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x759);
          reg = x759;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x760 = Fp(x751.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x761 = x760 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x761);
          reg = x761;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x762 = Fp(x751.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x762);
          reg = x762;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x763 = Fp(x750.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x764 = x763 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x764);
          reg = x764;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x765 = Fp(x750.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x766 = x765 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x766);
          reg = x766;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x767 = Fp(x750.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x768 = x767 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x768);
          reg = x768;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x769 = Fp(x750.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x770 = x769 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x770);
          reg = x770;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x771 = Fp(x750.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x771);
          reg = x771;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x772 = Fp(x749.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x773 = x772 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x773);
          reg = x773;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x774 = Fp(x749.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x775 = x774 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x775);
          reg = x775;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x776 = Fp(x749.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x777 = x776 * x64;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x777);
          reg = x777;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x778 = Fp(x749.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x779 = x778 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x779);
          reg = x779;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x780 = Fp(x749.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x780);
          reg = x780;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x781 = Fp(x748.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x782 = x781 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x782);
          reg = x782;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x783 = Fp(x748.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x783);
          reg = x783;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x784 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x784 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x785 = x784 * x61;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x786 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x786 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x787 = x786 * x65;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x788 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x788 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x789 = x788 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x790 = x787 + x789;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x791 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x791 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x792 = x791 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x793 = x790 + x792;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x794 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x794 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x795 = x793 + x794;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x796 = x785 + x795;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x797 = x796 * x98;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x798 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x798 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x799 = x797 + x798;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x800 = x751 - x799;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x800 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x801 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x801 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x802 = x801 * x76;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x803 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x803 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x804 = x803 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x805 = x802 + x804;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x806 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x806 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x807 = x805 + x806;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x808 = x807 * x65;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x809 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x809 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x810 = x809 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x811 = x808 + x810;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x812 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x812 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x813 = x811 + x812;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x814 = x750 - x813;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x814 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x815 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x815 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x816 = x815 * x70;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x817 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x817 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x818 = x817 * x84;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x819 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x819 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x820 = x818 + x819;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x821 = x820 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x822 = x816 + x821;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x823 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x823 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x824 = x823 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x825 = x822 + x824;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x826 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x826 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x827 = x825 + x826;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x828 = x749 - x827;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x828 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x829 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x829 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x830 = x829 * x70;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x831 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x831 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x832 = x830 + x831;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x833 = x748 - x832;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x833 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x748;
        host_args.at(1) = x749;
        host_args.at(2) = x750;
        host_args.at(3) = x751;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x834 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x835 = (x834 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x835);
            reg = x835;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x836 = x834 - x101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x837 = (x836 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x837);
            reg = x837;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x838 = x834 - x98;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x839 = (x838 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x839);
            reg = x839;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x840 = x834 - x83;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x841 = (x840 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x841);
            reg = x841;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x842 = x834 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x843 = (x842 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x843);
            reg = x843;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x844 = x834 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x845 = (x844 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x845);
            reg = x845;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x846 = x834 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x847 = (x846 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x847);
            reg = x847;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x848 = x834 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x849 = (x848 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x849);
            reg = x849;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x850 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x850 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x851 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x851 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x852 = x851 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x853 = x850 + x852;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x854 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x854 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x855 = x854 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x856 = x853 + x855;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x857 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x857 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x858 = x857 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x859 = x856 + x858;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x860 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x860 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x861 = x860 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x862 = x859 + x861;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x863 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x863 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x864 = x863 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x865 = x862 + x864;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x866 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x866 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x867 = x866 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x868 = x865 + x867;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x869 = x868 - x834;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x869 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
        auto x870 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x870 != Fp::invalid());
        if (x870 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
        auto x871 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x871 != Fp::invalid());
        if (x871 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
        auto x872 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x872 != Fp::invalid());
        if (x872 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x56);
            reg = x56;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
        auto x873 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x873 != Fp::invalid());
        if (x873 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
        auto x874 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x874 != Fp::invalid());
        if (x874 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
        auto x875 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x875 != Fp::invalid());
        if (x875 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
        auto x876 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x876 != Fp::invalid());
        if (x876 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
        auto x877 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x877 != Fp::invalid());
        if (x877 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x878 = x791 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x879 = x794 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x880 = x878 + x879;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x881 = x798 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x882 = x881 + x807;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x883 = x880 + x882;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x884 = x784 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x885 = x786 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x886 = x884 + x885;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x887 = x886 + x788;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x888 = x784 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x883);
            reg = x883;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x887);
            reg = x887;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x888);
            reg = x888;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x888);
            reg = x888;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x889 = x809 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x890 = x812 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x891 = x889 + x890;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x892 = x891 + x815;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x893 = x892 + x54;
      {
        host_args.at(0) = x893;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x894 = host_outs.at(0);
        auto x895 = host_outs.at(1);
        auto x896 = host_outs.at(2);
        auto x897 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x894);
          reg = x894;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x895);
          reg = x895;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x896);
          reg = x896;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x897);
          reg = x897;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x898 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x898 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x899 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x899 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x900 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x900 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x901 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x901 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x893);
        reg = x893;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x742);
        reg = x742;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x898);
        reg = x898;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x899);
        reg = x899;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x900);
        reg = x900;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x901);
        reg = x901;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x902 = x798 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x903 = x902 + x807;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x904 = x903 + x54;
      {
        host_args.at(0) = x904;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x905 = host_outs.at(0);
        auto x906 = host_outs.at(1);
        auto x907 = host_outs.at(2);
        auto x908 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x905);
          reg = x905;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x906);
          reg = x906;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x907);
          reg = x907;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x908);
          reg = x908;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x909 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x910 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x911 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x912 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x912 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x904);
        reg = x904;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x742);
        reg = x742;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x909);
        reg = x909;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x910);
        reg = x910;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x911);
        reg = x911;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x912);
        reg = x912;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x913 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x914 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x914 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x915 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x915 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x916 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x916 != Fp::invalid());
      host_args.at(0) = x913;
      host_args.at(1) = x914;
      host_args.at(2) = x915;
      host_args.at(3) = x916;
      host_args.at(4) = x892;
      host_args.at(5) = x898;
      host_args.at(6) = x899;
      host_args.at(7) = x900;
      host_args.at(8) = x901;
      host_args.at(9) = x903;
      host_args.at(10) = x909;
      host_args.at(11) = x910;
      host_args.at(12) = x911;
      host_args.at(13) = x912;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x917 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x917 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x918 = x101 - x917;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x919 = x918 * x898;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x920 = x918 * x899;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x921 = x918 * x900;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x922 = x918 * x901;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x923 = x599 * x84;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x924 = x596 + x923;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x925 = x589 - x84;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x926 = x917 * x925;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x927 = x917 * x590;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x928 = x917 * x593;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x929 = x917 * x924;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x930 = x919 + x926;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x931 = x920 + x927;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x932 = x921 + x928;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x933 = x922 + x929;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x934 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x934 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x935 = x101 - x934;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x936 = x935 * x909;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x937 = x935 * x910;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x938 = x935 * x911;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x939 = x935 * x912;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x940 = x934 * x913;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x941 = x934 * x914;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x942 = x934 * x915;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x943 = x934 * x916;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x944 = x936 + x940;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x945 = x937 + x941;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x946 = x938 + x942;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x947 = x939 + x943;
      host_args.at(0) = x930;
      host_args.at(1) = x931;
      host_args.at(2) = x932;
      host_args.at(3) = x933;
      host_args.at(4) = x944;
      host_args.at(5) = x945;
      host_args.at(6) = x946;
      host_args.at(7) = x947;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x948 = Fp(x933.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x949 = x948 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x949);
          reg = x949;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x950 = Fp(x933.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x951 = x950 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x951);
          reg = x951;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x952 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x952 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x953 = x952 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x954 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x954 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x955 = x954 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x956 = x953 + x955;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x957 = x933 - x956;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x957 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x958 = Fp(x947.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x959 = x958 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x959);
          reg = x959;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x960 = Fp(x947.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x961 = x960 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x962 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x962 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x963 = x962 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x964 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x964 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x965 = x964 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x966 = x963 + x965;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x967 = x947 - x966;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x967 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x944);
        reg = x944;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x946);
        reg = x946;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x947);
        reg = x947;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x968 = Fp(x930.asUInt32() & x944.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x969 = Fp(x931.asUInt32() & x945.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x970 = Fp(x932.asUInt32() & x946.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x971 = Fp(x933.asUInt32() & x947.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x968);
          reg = x968;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x969);
          reg = x969;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x970);
          reg = x970;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x971);
          reg = x971;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x972 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x972 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x973 = x972 * x930;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x974 = x972 * x931;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x975 = x972 * x932;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x976 = x972 * x933;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x977 = x973 + x96;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x978 = x974 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x979 = x975 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x980 = x976 + x97;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x981 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x981 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x982 = x981 * x944;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x983 = x981 * x945;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x984 = x981 * x946;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x985 = x981 * x947;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x986 = x977 + x982;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x987 = x978 + x983;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x988 = x979 + x984;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x989 = x980 + x985;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x990 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x990 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x991 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x991 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x992 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x992 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x993 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x993 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x994 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x994 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x995 = x990 * x991;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x996 = x990 * x992;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x997 = x990 * x993;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x998 = x990 * x994;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x999 = x986 + x995;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1000 = x987 + x996;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1001 = x988 + x997;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1002 = x989 + x998;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1003 = x1000 * x96;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1004 = x999 + x1003;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1005 = Fp(x1004.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1005);
          reg = x1005;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x1006 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1006 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1007 = x1004 - x1006;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1008 = x1007 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1009 = Fp(x1008.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1009);
          reg = x1009;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x1010 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1010 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1011 = x1008 - x1010;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1012 = x1011 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1012);
        reg = x1012;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1013 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1013 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1014 = x1013 + x1001;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1015 = x1002 * x96;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1016 = x1014 + x1015;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1017 = Fp(x1016.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1017);
          reg = x1017;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x1018 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1018 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1019 = x1016 - x1018;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1020 = x1019 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1021 = Fp(x1020.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1021);
          reg = x1021;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x1022 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1022 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1023 = x1020 - x1022;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1024 = x1023 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1024);
        reg = x1024;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1025 = Fp(x1022.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1026 = x1025 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1026);
          reg = x1026;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1027 = Fp(x1022.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1028 = x1027 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1028);
          reg = x1028;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1029 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1029 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1030 = x1029 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x1031 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1031 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1032 = x1031 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1033 = x1030 + x1032;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1034 = x1022 - x1033;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1034 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1035 = x101 - x962;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1036 = x952 * x1035;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1037 = x101 - x1029;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1038 = x1036 * x1037;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1039 = x101 - x952;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1040 = x1039 * x962;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1041 = x1040 * x1029;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1042 = x1038 + x1041;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1042);
        reg = x1042;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x1043 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1043 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1044 = x1043 + x1029;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1045 = x1043 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1046 = x1045 * x1029;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1047 = x1044 - x1046;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1047);
        reg = x1047;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1048 = x1010 * x96;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1049 = x1006 + x1048;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1050 = (x1049 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1050);
          reg = x1050;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1051 = inv(x1049);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1051);
          reg = x1051;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1052 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x1052 != Fp::invalid());
      if (x1052 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1049 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1053 = x101 - x1052;
      if (x1053 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1054 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x1054 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1055 = x1049 * x1054;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1056 = x1055 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1056 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1057 = x1022 * x96;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1058 = x1018 + x1057;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1059 = x1053 * x86;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1060 = x1058 + x1059;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1061 = (x1060 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1061);
          reg = x1061;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1062 = inv(x1060);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1062);
          reg = x1062;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1063 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x1063 != Fp::invalid());
      if (x1063 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1060 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1064 = x101 - x1063;
      if (x1064 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1065 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x1065 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1066 = x1060 * x1065;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1067 = x1066 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1067 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1068 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1068 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1069 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1069 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1070 = x101 - x1069;
      host_args.at(0) = x1006;
      host_args.at(1) = x1010;
      host_args.at(2) = x1018;
      host_args.at(3) = x1022;
      host_args.at(4) = x1063;
      host_args.at(5) = x1068;
      host_args.at(6) = x1070;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1071 = x823 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1072 = x826 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1073 = x1071 + x1072;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1074 = x1073 + x829;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1075 = (x1074 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1075);
          reg = x1075;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1076 = inv(x1074);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1076);
          reg = x1076;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1077 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1077 != Fp::invalid());
      if (x1077 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1074 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1078 = x101 - x1077;
      if (x1078 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1079 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x1079 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1080 = x1074 * x1079;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1081 = x1080 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1081 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1082 = x602 + x84;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
      auto x1083 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1083 != Fp::invalid());
      if (x1083 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1084 = x831 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1084 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x820 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x796 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1085 = x1082 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1086 = Fp(x1085.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1086);
            reg = x1086;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1087 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1087 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1088 = x1085 - x1087;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1089 = x1088 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1090 = Fp(x1089.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1090);
            reg = x1090;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1091 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1091 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1092 = x1089 - x1091;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1093 = x1092 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1094 = Fp(x1093.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1094);
            reg = x1094;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1095 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1095 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1096 = x1093 - x1095;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1097 = x1096 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1098 = Fp(x1097.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1098);
            reg = x1098;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1099 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1099 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1100 = x1097 - x1099;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1101 = x1100 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1101);
          reg = x1101;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1102 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1102 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1103 = x101 - x1102;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1104 = x1102 * x1103;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1104);
          reg = x1104;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1105 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1105 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1106 = x98 - x1102;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1107 = x1105 * x1106;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1107 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1108 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1108 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1108);
          reg = x1108;
        }
        if (x1078 != 0) {
          host_args.at(0) = x1074;
          host_args.at(1) = x1006;
          host_args.at(2) = x1010;
          host_args.at(3) = x1018;
          host_args.at(4) = x1022;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
          auto x1109 = x1074 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1010);
            reg = x1010;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1022);
            reg = x1022;
          }
          {
            host_args.at(0) = x1109;
            host_args.at(1) = x1006;
            host_args.at(2) = x1010;
            host_args.at(3) = x1018;
            host_args.at(4) = x1022;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1110 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1110 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1111 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1111 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1112 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1112 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1113 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1113 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1109);
            reg = x1109;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x742);
            reg = x742;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1110);
            reg = x1110;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1111);
            reg = x1111;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1112);
            reg = x1112;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1113);
            reg = x1113;
          }
        }
        if (x1077 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
      auto x1114 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1114 != Fp::invalid());
      if (x1114 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1115 = x831 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1115 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x820 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1116 = x796 - x67;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1116 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1117 = x1082 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1118 = Fp(x1117.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1118);
            reg = x1118;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1119 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1119 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1120 = x1117 - x1119;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1121 = x1120 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1122 = Fp(x1121.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1122);
            reg = x1122;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1123 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1123 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1124 = x1121 - x1123;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1125 = x1124 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1126 = Fp(x1125.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1126);
            reg = x1126;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1127 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1127 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1128 = x1125 - x1127;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1129 = x1128 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1130 = Fp(x1129.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1130);
            reg = x1130;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1131 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1131 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1132 = x1129 - x1131;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1133 = x1132 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1133);
          reg = x1133;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1134 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1134 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1135 = x101 - x1134;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1136 = x1134 * x1135;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1136);
          reg = x1136;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1137 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1137 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1138 = x98 - x1134;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1139 = x1137 * x1138;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1139 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1140 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1140 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1140);
          reg = x1140;
        }
        if (x1078 != 0) {
          host_args.at(0) = x1074;
          host_args.at(1) = x1006;
          host_args.at(2) = x1010;
          host_args.at(3) = x1018;
          host_args.at(4) = x1022;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
          auto x1141 = x1074 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1010);
            reg = x1010;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1022);
            reg = x1022;
          }
          {
            host_args.at(0) = x1141;
            host_args.at(1) = x1006;
            host_args.at(2) = x1010;
            host_args.at(3) = x1018;
            host_args.at(4) = x1022;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1142 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1142 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1143 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1143 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1144 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1144 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1145 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1145 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1141);
            reg = x1141;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x742);
            reg = x742;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1142);
            reg = x1142;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1143);
            reg = x1143;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1144);
            reg = x1144;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1145);
            reg = x1145;
          }
        }
        if (x1077 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
      auto x1146 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1146 != Fp::invalid());
      if (x1146 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1147 = x831 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1147 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1148 = x820 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1148 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x796 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x56);
          reg = x56;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1149 = x1082 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1150 = Fp(x1149.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1150);
            reg = x1150;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1151 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1151 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1152 = x1149 - x1151;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1153 = x1152 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1154 = Fp(x1153.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1154);
            reg = x1154;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1155 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1155 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1156 = x1153 - x1155;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1157 = x1156 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1158 = Fp(x1157.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1158);
            reg = x1158;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1159 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1159 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1160 = x1157 - x1159;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1161 = x1160 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1162 = Fp(x1161.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1162);
            reg = x1162;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1163 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1163 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1164 = x1161 - x1163;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1165 = x1164 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1165);
          reg = x1165;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1166 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1166 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1167 = x101 - x1166;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1168 = x1166 * x1167;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1168);
          reg = x1168;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1169 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1169 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1170 = x98 - x1166;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1171 = x1169 * x1170;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1171 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1172 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1172 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1172);
          reg = x1172;
        }
        if (x1078 != 0) {
          host_args.at(0) = x1074;
          host_args.at(1) = x1006;
          host_args.at(2) = x1010;
          host_args.at(3) = x1018;
          host_args.at(4) = x1022;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
          auto x1173 = x1074 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1010);
            reg = x1010;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1022);
            reg = x1022;
          }
          {
            host_args.at(0) = x1173;
            host_args.at(1) = x1006;
            host_args.at(2) = x1010;
            host_args.at(3) = x1018;
            host_args.at(4) = x1022;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1174 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1174 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1175 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1175 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1176 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1176 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1177 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1177 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1173);
            reg = x1173;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x742);
            reg = x742;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1174);
            reg = x1174;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1175);
            reg = x1175;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1176);
            reg = x1176;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1177);
            reg = x1177;
          }
        }
        if (x1077 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
      auto x1178 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1178 != Fp::invalid());
      if (x1178 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1179 = x831 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1179 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1180 = x820 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1180 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x796 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1181 = x1082 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1182 = Fp(x1181.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1182);
            reg = x1182;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1183 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1183 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1184 = x1181 - x1183;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1185 = x1184 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1186 = Fp(x1185.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1186);
            reg = x1186;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1187 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1187 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1188 = x1185 - x1187;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1189 = x1188 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1190 = Fp(x1189.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1190);
            reg = x1190;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1191 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1191 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1192 = x1189 - x1191;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1193 = x1192 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1194 = Fp(x1193.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1194);
            reg = x1194;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1195 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1195 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1196 = x1193 - x1195;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1197 = x1196 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1197);
          reg = x1197;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1198 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1198 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1199 = x101 - x1198;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1200 = x1198 * x1199;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1200);
          reg = x1200;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1201 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1201 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1202 = x98 - x1198;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1203 = x1201 * x1202;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1203 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1204 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1204 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1204);
          reg = x1204;
        }
        if (x1078 != 0) {
          host_args.at(0) = x1074;
          host_args.at(1) = x1006;
          host_args.at(2) = x1010;
          host_args.at(3) = x1018;
          host_args.at(4) = x1022;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
          auto x1205 = x1074 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1010);
            reg = x1010;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1022);
            reg = x1022;
          }
          {
            host_args.at(0) = x1205;
            host_args.at(1) = x1006;
            host_args.at(2) = x1010;
            host_args.at(3) = x1018;
            host_args.at(4) = x1022;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1206 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1206 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1207 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1207 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1208 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1208 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1209 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1209 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1205);
            reg = x1205;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x742);
            reg = x742;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1206);
            reg = x1206;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1207);
            reg = x1207;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1208);
            reg = x1208;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1209);
            reg = x1209;
          }
        }
        if (x1077 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
      auto x1210 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1210 != Fp::invalid());
      if (x1210 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1211 = x831 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1211 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1212 = x820 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1212 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x796 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1213 = x1082 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1214 = Fp(x1213.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1214);
            reg = x1214;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1215 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1215 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1216 = x1213 - x1215;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1217 = x1216 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1218 = Fp(x1217.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1218);
            reg = x1218;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1219 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1219 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1220 = x1217 - x1219;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1221 = x1220 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1222 = Fp(x1221.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1222);
            reg = x1222;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1223 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1223 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1224 = x1221 - x1223;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1225 = x1224 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1226 = Fp(x1225.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1226);
            reg = x1226;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1227 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1227 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1228 = x1225 - x1227;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1229 = x1228 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1229);
          reg = x1229;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1230 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1230 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1231 = x101 - x1230;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1232 = x1230 * x1231;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1232);
          reg = x1232;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1233 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1233 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1234 = x98 - x1230;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1235 = x1233 * x1234;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1235 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1236 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1236 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1236);
          reg = x1236;
        }
        if (x1078 != 0) {
          host_args.at(0) = x1074;
          host_args.at(1) = x1006;
          host_args.at(2) = x1010;
          host_args.at(3) = x1018;
          host_args.at(4) = x1022;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
          auto x1237 = x1074 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1010);
            reg = x1010;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1022);
            reg = x1022;
          }
          {
            host_args.at(0) = x1237;
            host_args.at(1) = x1006;
            host_args.at(2) = x1010;
            host_args.at(3) = x1018;
            host_args.at(4) = x1022;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1238 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1238 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1239 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1239 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1240 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1240 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1241 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1241 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1237);
            reg = x1237;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x742);
            reg = x742;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1238);
            reg = x1238;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1239);
            reg = x1239;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1240);
            reg = x1240;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1241);
            reg = x1241;
          }
        }
        if (x1077 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
      auto x1242 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1242 != Fp::invalid());
      if (x1242 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1243 = x831 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1243 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1244 = x820 - x98;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1244 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x796 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1245 = x1082 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1246 = Fp(x1245.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1246);
            reg = x1246;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1247 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1247 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1248 = x1245 - x1247;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1249 = x1248 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1250 = Fp(x1249.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1250);
            reg = x1250;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1251 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1251 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1252 = x1249 - x1251;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1253 = x1252 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1254 = Fp(x1253.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1254);
            reg = x1254;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1255 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1255 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1256 = x1253 - x1255;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1257 = x1256 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1258 = Fp(x1257.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1258);
            reg = x1258;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1259 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1259 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1260 = x1257 - x1259;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1261 = x1260 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1261);
          reg = x1261;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1262 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1262 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1263 = x101 - x1262;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1264 = x1262 * x1263;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1264);
          reg = x1264;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1265 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1265 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1266 = x98 - x1262;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1267 = x1265 * x1266;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1267 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1268 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1268 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1268);
          reg = x1268;
        }
        if (x1078 != 0) {
          host_args.at(0) = x1074;
          host_args.at(1) = x1068;
          host_args.at(2) = x100;
          host_args.at(3) = x100;
          host_args.at(4) = x100;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
          auto x1269 = x1074 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1068);
            reg = x1068;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          {
            host_args.at(0) = x1269;
            host_args.at(1) = x1068;
            host_args.at(2) = x100;
            host_args.at(3) = x100;
            host_args.at(4) = x100;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1270 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1270 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1271 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1271 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1272 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1272 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1273 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1273 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1269);
            reg = x1269;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x742);
            reg = x742;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1270);
            reg = x1270;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1271);
            reg = x1271;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1272);
            reg = x1272;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1273);
            reg = x1273;
          }
        }
        if (x1077 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
      auto x1274 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1274 != Fp::invalid());
      if (x1274 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1275 = x831 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1275 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1276 = x820 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1276 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x796 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1277 = x1082 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1278 = Fp(x1277.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1278);
            reg = x1278;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1279 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1279 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1280 = x1277 - x1279;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1281 = x1280 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1282 = Fp(x1281.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1282);
            reg = x1282;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1283 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1283 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1284 = x1281 - x1283;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1285 = x1284 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1286 = Fp(x1285.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1286);
            reg = x1286;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1287 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1287 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1288 = x1285 - x1287;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1289 = x1288 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1290 = Fp(x1289.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1290);
            reg = x1290;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1291 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1292 = x1289 - x1291;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1293 = x1292 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1293);
          reg = x1293;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1294 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1294 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1295 = x101 - x1294;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1296 = x1294 * x1295;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1296);
          reg = x1296;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1297 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1297 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1298 = x98 - x1294;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1299 = x1297 * x1298;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1299 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1300 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1300 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1300);
          reg = x1300;
        }
        if (x1078 != 0) {
          host_args.at(0) = x1074;
          host_args.at(1) = x1070;
          host_args.at(2) = x100;
          host_args.at(3) = x100;
          host_args.at(4) = x100;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
          auto x1301 = x1074 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1070);
            reg = x1070;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          {
            host_args.at(0) = x1301;
            host_args.at(1) = x1070;
            host_args.at(2) = x100;
            host_args.at(3) = x100;
            host_args.at(4) = x100;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1302 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1302 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1303 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1303 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1304 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1304 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1305 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1305 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1301);
            reg = x1301;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x742);
            reg = x742;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1302);
            reg = x1302;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1303);
            reg = x1303;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1304);
            reg = x1304;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1305);
            reg = x1305;
          }
        }
        if (x1077 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
      auto x1306 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1306 != Fp::invalid());
      if (x1306 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        auto x1307 = x831 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x1307 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x820 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1308 = x791 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1309 = x794 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1310 = x1308 + x1309;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1311 = x1310 + x903;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1312 = x784 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1313 = x786 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1314 = x1312 + x1313;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1315 = x1314 + x788;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1316 = x784 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1311);
          reg = x1311;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1315);
          reg = x1315;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1316);
          reg = x1316;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1316);
          reg = x1316;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1317 = x1082 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1318 = Fp(x1317.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1318);
            reg = x1318;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1319 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1319 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1320 = x1317 - x1319;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1321 = x1320 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1322 = Fp(x1321.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1322);
            reg = x1322;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1323 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1323 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1324 = x1321 - x1323;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1325 = x1324 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1326 = Fp(x1325.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1326);
            reg = x1326;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1327 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1327 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1328 = x1325 - x1327;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1329 = x1328 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1330 = Fp(x1329.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1330);
            reg = x1330;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1331 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1331 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1332 = x1329 - x1331;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1333 = x1332 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1333);
          reg = x1333;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1334 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1334 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1335 = x101 - x1334;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1336 = x1334 * x1335;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1336);
          reg = x1336;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1337 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1337 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1338 = x98 - x1334;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1339 = x1337 * x1338;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1339 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1340 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1340 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1340);
          reg = x1340;
        }
        if (x1078 != 0) {
          host_args.at(0) = x1074;
          host_args.at(1) = x1006;
          host_args.at(2) = x1010;
          host_args.at(3) = x1018;
          host_args.at(4) = x1022;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
          auto x1341 = x1074 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1010);
            reg = x1010;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1022);
            reg = x1022;
          }
          {
            host_args.at(0) = x1341;
            host_args.at(1) = x1006;
            host_args.at(2) = x1010;
            host_args.at(3) = x1018;
            host_args.at(4) = x1022;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1342 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1342 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1343 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1343 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1344 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1344 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1345 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1345 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1341);
            reg = x1341;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x742);
            reg = x742;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1342);
            reg = x1342;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1344);
            reg = x1344;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1345);
            reg = x1345;
          }
        }
        if (x1077 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/components/mux.h":37:25))
    auto x1346 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x1346 != Fp::invalid());
    if (x1346 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1347 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x1347 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x1348 = x602 * x82;
      {
        host_args.at(0) = x1348;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1349 = host_outs.at(0);
        auto x1350 = host_outs.at(1);
        auto x1351 = host_outs.at(2);
        auto x1352 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1349);
          reg = x1349;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1350);
          reg = x1350;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1351);
          reg = x1351;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1352);
          reg = x1352;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1353 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x1353 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1354 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x1354 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1355 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x1355 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1356 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x1356 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1348);
        reg = x1348;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1347);
        reg = x1347;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1353);
        reg = x1353;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1354);
        reg = x1354;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1355);
        reg = x1355;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1356);
        reg = x1356;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1357 = Fp(x1356.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x1358 = x1357 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1358);
          reg = x1358;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1359 = Fp(x1356.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x1360 = x1359 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1360);
          reg = x1360;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1361 = Fp(x1356.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x1362 = x1361 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1362);
          reg = x1362;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1363 = Fp(x1356.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x1364 = x1363 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1364);
          reg = x1364;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1365 = Fp(x1356.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1366 = x1365 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1366);
          reg = x1366;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1367 = Fp(x1356.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1367);
          reg = x1367;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1368 = Fp(x1355.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x1369 = x1368 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1369);
          reg = x1369;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1370 = Fp(x1355.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1371 = x1370 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1371);
          reg = x1371;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1372 = Fp(x1355.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x1373 = x1372 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1373);
          reg = x1373;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1374 = Fp(x1355.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x1375 = x1374 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1375);
          reg = x1375;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1376 = Fp(x1355.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1376);
          reg = x1376;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1377 = Fp(x1354.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x1378 = x1377 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1378);
          reg = x1378;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1379 = Fp(x1354.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x1380 = x1379 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1380);
          reg = x1380;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1381 = Fp(x1354.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x1382 = x1381 * x64;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1382);
          reg = x1382;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1383 = Fp(x1354.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x1384 = x1383 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1384);
          reg = x1384;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1385 = Fp(x1354.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1385);
          reg = x1385;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1386 = Fp(x1353.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x1387 = x1386 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1387);
          reg = x1387;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1388 = Fp(x1353.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1388);
          reg = x1388;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1389 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x1389 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1390 = x1389 * x61;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1391 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1391 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1392 = x1391 * x65;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1393 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x1393 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x1394 = x1393 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1395 = x1392 + x1394;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1396 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x1396 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x1397 = x1396 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1398 = x1395 + x1397;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1399 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1399 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1400 = x1398 + x1399;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1401 = x1390 + x1400;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1402 = x1401 * x98;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1403 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x1403 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1404 = x1402 + x1403;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1405 = x1356 - x1404;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1405 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1406 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x1406 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1407 = x1406 * x76;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1408 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1408 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x1409 = x1408 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1410 = x1407 + x1409;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1411 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x1411 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1412 = x1410 + x1411;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1413 = x1412 * x65;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1414 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1414 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x1415 = x1414 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1416 = x1413 + x1415;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1417 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1417 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1418 = x1416 + x1417;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1419 = x1355 - x1418;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1419 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1420 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x1420 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1421 = x1420 * x70;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1422 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x1422 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1423 = x1422 * x84;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1424 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1424 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1425 = x1423 + x1424;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x1426 = x1425 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1427 = x1421 + x1426;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1428 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1428 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x1429 = x1428 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1430 = x1427 + x1429;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1431 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1431 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1432 = x1430 + x1431;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1433 = x1354 - x1432;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1433 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1434 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x1434 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1435 = x1434 * x70;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x1436 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x1436 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1437 = x1435 + x1436;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1438 = x1353 - x1437;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1438 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1353;
        host_args.at(1) = x1354;
        host_args.at(2) = x1355;
        host_args.at(3) = x1356;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1439 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1440 = (x1439 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1440);
            reg = x1440;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1441 = x1439 - x101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1442 = (x1441 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1442);
            reg = x1442;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1443 = x1439 - x98;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1444 = (x1443 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1444);
            reg = x1444;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1445 = x1439 - x83;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1446 = (x1445 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1446);
            reg = x1446;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1447 = x1439 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1448 = (x1447 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1448);
            reg = x1448;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1449 = x1439 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1450 = (x1449 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1450);
            reg = x1450;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1451 = x1439 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1452 = (x1451 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1452);
            reg = x1452;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1453 = x1439 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1454 = (x1453 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1454);
            reg = x1454;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1455 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1455 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1456 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1456 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1457 = x1456 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1458 = x1455 + x1457;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1459 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1459 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1460 = x1459 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1461 = x1458 + x1460;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1462 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1462 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1463 = x1462 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1464 = x1461 + x1463;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1465 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1465 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1466 = x1465 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1467 = x1464 + x1466;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1468 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1468 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1469 = x1468 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1470 = x1467 + x1469;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1471 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x1471 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1472 = x1471 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1473 = x1470 + x1472;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x1474 = x1473 - x1439;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x1474 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
        auto x1475 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x1475 != Fp::invalid());
        if (x1475 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1476 = x1396 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1477 = x1399 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1478 = x1476 + x1477;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1479 = x1403 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1480 = x1479 + x1412;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1481 = x1478 + x1480;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1482 = x1389 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1483 = x1391 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1484 = x1482 + x1483;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1485 = x1484 + x1393;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1486 = x1389 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1481);
            reg = x1481;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1485);
            reg = x1485;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1486);
            reg = x1486;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1486);
            reg = x1486;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x56);
            reg = x56;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
        auto x1487 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1487 != Fp::invalid());
        if (x1487 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1488 = x1396 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1489 = x1399 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1490 = x1488 + x1489;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1491 = x1403 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1492 = x1491 + x1412;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1493 = x1490 + x1492;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1494 = x1389 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1495 = x1391 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1496 = x1494 + x1495;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1497 = x1496 + x1393;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1498 = x1389 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1493);
            reg = x1493;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1497);
            reg = x1497;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1498);
            reg = x1498;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1498);
            reg = x1498;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
        auto x1499 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1499 != Fp::invalid());
        if (x1499 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1500 = x1396 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1501 = x1399 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1502 = x1500 + x1501;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1503 = x1403 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1504 = x1503 + x1412;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1505 = x1502 + x1504;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1506 = x1389 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1507 = x1391 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1508 = x1506 + x1507;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1509 = x1508 + x1393;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1510 = x1389 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1505);
            reg = x1505;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1509);
            reg = x1509;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1510);
            reg = x1510;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1510);
            reg = x1510;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
        auto x1511 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1511 != Fp::invalid());
        if (x1511 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1512 = x1396 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1513 = x1399 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1514 = x1512 + x1513;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1515 = x1403 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1516 = x1515 + x1412;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1517 = x1514 + x1516;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1518 = x1389 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1519 = x1391 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1520 = x1518 + x1519;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1521 = x1520 + x1393;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1522 = x1389 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1517);
            reg = x1517;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1521);
            reg = x1521;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1522);
            reg = x1522;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1522);
            reg = x1522;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
        auto x1523 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1523 != Fp::invalid());
        if (x1523 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1524 = x1396 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1525 = x1399 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1526 = x1524 + x1525;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1527 = x1403 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1528 = x1527 + x1412;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1529 = x1526 + x1528;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1530 = x1389 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1531 = x1391 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1532 = x1530 + x1531;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1533 = x1532 + x1393;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1534 = x1389 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1529);
            reg = x1529;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1533);
            reg = x1533;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1534);
            reg = x1534;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1534);
            reg = x1534;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
        auto x1535 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1535 != Fp::invalid());
        if (x1535 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1536 = x1396 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1537 = x1399 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1538 = x1536 + x1537;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1539 = x1428 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1540 = x1538 + x1539;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1541 = x1431 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1542 = x1540 + x1541;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1543 = x1389 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1544 = x1434 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1545 = x1543 + x1544;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1546 = x1391 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1547 = x1545 + x1546;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1548 = x1547 + x1393;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1549 = x1389 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1542);
            reg = x1542;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1548);
            reg = x1548;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1549);
            reg = x1549;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1549);
            reg = x1549;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
        auto x1550 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1550 != Fp::invalid());
        if (x1550 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1551 = x1396 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1552 = x1399 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1553 = x1551 + x1552;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1554 = x1428 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1555 = x1553 + x1554;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1556 = x1431 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1557 = x1555 + x1556;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1558 = x1389 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1559 = x1434 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1560 = x1558 + x1559;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1561 = x1391 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1562 = x1560 + x1561;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1563 = x1562 + x1393;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1564 = x1389 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1557);
            reg = x1557;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1563);
            reg = x1563;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1564);
            reg = x1564;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1564);
            reg = x1564;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
        auto x1565 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x1565 != Fp::invalid());
        if (x1565 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1566 = x1396 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1567 = x1399 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1568 = x1566 + x1567;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1569 = x1428 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1570 = x1568 + x1569;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1571 = x1431 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1572 = x1570 + x1571;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1573 = x1389 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1574 = x1434 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1575 = x1573 + x1574;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1576 = x1391 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1577 = x1575 + x1576;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1578 = x1577 + x1393;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1579 = x1389 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1572);
            reg = x1572;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1578);
            reg = x1578;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1579);
            reg = x1579;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1579);
            reg = x1579;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1580 = x1414 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1581 = x1417 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1582 = x1580 + x1581;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1583 = x1582 + x1420;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1584 = x1583 + x54;
      {
        host_args.at(0) = x1584;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1585 = host_outs.at(0);
        auto x1586 = host_outs.at(1);
        auto x1587 = host_outs.at(2);
        auto x1588 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1585);
          reg = x1585;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1586);
          reg = x1586;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1587);
          reg = x1587;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1588);
          reg = x1588;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1589 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x1589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1590 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1591 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1592 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1592 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1584);
        reg = x1584;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1347);
        reg = x1347;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1589);
        reg = x1589;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1590);
        reg = x1590;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1591);
        reg = x1591;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1592);
        reg = x1592;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1593 = x1403 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1594 = x1593 + x1412;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1595 = x1594 + x54;
      {
        host_args.at(0) = x1595;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1596 = host_outs.at(0);
        auto x1597 = host_outs.at(1);
        auto x1598 = host_outs.at(2);
        auto x1599 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1596);
          reg = x1596;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1597);
          reg = x1597;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1598);
          reg = x1598;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1599);
          reg = x1599;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1600 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x1600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1601 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1602 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1603 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1603 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1595);
        reg = x1595;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1347);
        reg = x1347;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1600);
        reg = x1600;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1601);
        reg = x1601;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1602);
        reg = x1602;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1603);
        reg = x1603;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1604 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1605 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1606 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1607 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1607 != Fp::invalid());
      host_args.at(0) = x1604;
      host_args.at(1) = x1605;
      host_args.at(2) = x1606;
      host_args.at(3) = x1607;
      host_args.at(4) = x1583;
      host_args.at(5) = x1589;
      host_args.at(6) = x1590;
      host_args.at(7) = x1591;
      host_args.at(8) = x1592;
      host_args.at(9) = x1594;
      host_args.at(10) = x1600;
      host_args.at(11) = x1601;
      host_args.at(12) = x1602;
      host_args.at(13) = x1603;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1608 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1608 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x1609 = x101 - x1608;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1610 = x1609 * x1589;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1611 = x1609 * x1590;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1612 = x1609 * x1591;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1613 = x1609 * x1592;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x1614 = x599 * x84;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x1615 = x596 + x1614;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x1616 = x589 - x84;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1617 = x1608 * x1616;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1618 = x1608 * x590;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1619 = x1608 * x593;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1620 = x1608 * x1615;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1621 = x1610 + x1617;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1622 = x1611 + x1618;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1623 = x1612 + x1619;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1624 = x1613 + x1620;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1625 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1625 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x1626 = x101 - x1625;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1627 = x1626 * x1600;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1628 = x1626 * x1601;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1629 = x1626 * x1602;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1630 = x1626 * x1603;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1631 = x1625 * x1604;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1632 = x1625 * x1605;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1633 = x1625 * x1606;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1634 = x1625 * x1607;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1635 = x1627 + x1631;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1636 = x1628 + x1632;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1637 = x1629 + x1633;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1638 = x1630 + x1634;
      host_args.at(0) = x1621;
      host_args.at(1) = x1622;
      host_args.at(2) = x1623;
      host_args.at(3) = x1624;
      host_args.at(4) = x1635;
      host_args.at(5) = x1636;
      host_args.at(6) = x1637;
      host_args.at(7) = x1638;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1639 = Fp(x1624.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1640 = x1639 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1640);
          reg = x1640;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1641 = Fp(x1624.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1642 = x1641 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1642);
          reg = x1642;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1643 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1643 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1644 = x1643 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x1645 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x1645 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1646 = x1645 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1647 = x1644 + x1646;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1648 = x1624 - x1647;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1648 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1649 = Fp(x1638.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1650 = x1649 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1650);
          reg = x1650;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1651 = Fp(x1638.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1652 = x1651 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1652);
          reg = x1652;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1653 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1653 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1654 = x1653 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x1655 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x1655 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1656 = x1655 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1657 = x1654 + x1656;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1658 = x1638 - x1657;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1658 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1635);
        reg = x1635;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1636);
        reg = x1636;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1637);
        reg = x1637;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1638);
        reg = x1638;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1659 = Fp(x1621.asUInt32() & x1635.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1660 = Fp(x1622.asUInt32() & x1636.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1661 = Fp(x1623.asUInt32() & x1637.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1662 = Fp(x1624.asUInt32() & x1638.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1659);
          reg = x1659;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1660);
          reg = x1660;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1661);
          reg = x1661;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1662);
          reg = x1662;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1663 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1663 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1664 = x1663 * x1621;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1665 = x1663 * x1622;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1666 = x1663 * x1623;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1667 = x1663 * x1624;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1668 = x1664 + x96;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1669 = x1665 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1670 = x1666 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1671 = x1667 + x97;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1672 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1672 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1673 = x1672 * x1635;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1674 = x1672 * x1636;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1675 = x1672 * x1637;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1676 = x1672 * x1638;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1677 = x1668 + x1673;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1678 = x1669 + x1674;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1679 = x1670 + x1675;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1680 = x1671 + x1676;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1681 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x1681 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1682 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1683 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1684 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1685 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x1685 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1686 = x1681 * x1682;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1687 = x1681 * x1683;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1688 = x1681 * x1684;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1689 = x1681 * x1685;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1690 = x1677 + x1686;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1691 = x1678 + x1687;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1692 = x1679 + x1688;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1693 = x1680 + x1689;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1694 = x1691 * x96;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1695 = x1690 + x1694;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1696 = Fp(x1695.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1696);
          reg = x1696;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x1697 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1697 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1698 = x1695 - x1697;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1699 = x1698 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1700 = Fp(x1699.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1700);
          reg = x1700;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x1701 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1701 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1702 = x1699 - x1701;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1703 = x1702 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1703);
        reg = x1703;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1704 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1704 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1705 = x1704 + x1692;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1706 = x1693 * x96;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1707 = x1705 + x1706;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1708 = Fp(x1707.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1708);
          reg = x1708;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x1709 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1709 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1710 = x1707 - x1709;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1711 = x1710 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1712 = Fp(x1711.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1712);
          reg = x1712;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x1713 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1713 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1714 = x1711 - x1713;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1715 = x1714 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1715);
        reg = x1715;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1716 = Fp(x1713.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1717 = x1716 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1717);
          reg = x1717;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1718 = Fp(x1713.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1719 = x1718 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1719);
          reg = x1719;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1720 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1720 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1721 = x1720 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x1722 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1722 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1723 = x1722 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1724 = x1721 + x1723;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1725 = x1713 - x1724;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1725 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1726 = x101 - x1653;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1727 = x1643 * x1726;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1728 = x101 - x1720;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1729 = x1727 * x1728;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1730 = x101 - x1643;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1731 = x1730 * x1653;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1732 = x1731 * x1720;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1733 = x1729 + x1732;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1733);
        reg = x1733;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x1734 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1734 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1735 = x1734 + x1720;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1736 = x1734 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1737 = x1736 * x1720;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1738 = x1735 - x1737;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1738);
        reg = x1738;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1739 = x1701 * x96;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1740 = x1697 + x1739;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1741 = (x1740 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1741);
          reg = x1741;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1742 = inv(x1740);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1742);
          reg = x1742;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1743 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x1743 != Fp::invalid());
      if (x1743 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1740 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1744 = x101 - x1743;
      if (x1744 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1745 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x1745 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1746 = x1740 * x1745;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1747 = x1746 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1747 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1748 = x1713 * x96;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1749 = x1709 + x1748;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1750 = x1744 * x86;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1751 = x1749 + x1750;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1752 = (x1751 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1752);
          reg = x1752;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1753 = inv(x1751);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1753);
          reg = x1753;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1754 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x1754 != Fp::invalid());
      if (x1754 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1751 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1755 = x101 - x1754;
      if (x1755 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1756 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x1756 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1757 = x1751 * x1756;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1758 = x1757 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1758 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1759 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1760 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1760 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1761 = x101 - x1760;
      host_args.at(0) = x1697;
      host_args.at(1) = x1701;
      host_args.at(2) = x1709;
      host_args.at(3) = x1713;
      host_args.at(4) = x1754;
      host_args.at(5) = x1759;
      host_args.at(6) = x1761;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1762 = x1428 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1763 = x1431 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1764 = x1762 + x1763;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1765 = x1764 + x1434;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1766 = (x1765 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1766);
          reg = x1766;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1767 = inv(x1765);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1767);
          reg = x1767;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1768 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1768 != Fp::invalid());
      if (x1768 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1765 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1769 = x101 - x1768;
      if (x1769 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1770 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x1770 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1771 = x1765 * x1770;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1772 = x1771 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1772 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1773 = x602 + x84;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x1774 = x1605 * x96;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1775 = x1604 + x1774;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x1776 = x1606 * x86;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1777 = x1775 + x1776;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x1778 = x1607 * x53;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x1779 = x1778 * x52;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x1780 = x1777 + x1779;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x1781 = x602 + x1780;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1782 = x1754 * x1781;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:35)
      auto x1783 = x1755 * x1773;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1784 = x1782 + x1783;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1785 = x1754 * x1773;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:34)
      auto x1786 = x1755 * x1781;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1787 = x1785 + x1786;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1788 = x1759 * x1781;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:36)
      auto x1789 = x101 - x1759;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:35)
      auto x1790 = x1789 * x1773;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1791 = x1788 + x1790;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
      auto x1792 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1792 != Fp::invalid());
      if (x1792 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1793 = x1436 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1793 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1794 = x1425 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1794 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1795 = x1396 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1796 = x1399 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1797 = x1795 + x1796;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1798 = x1797 + x1594;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1799 = x1389 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1800 = x1391 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1801 = x1799 + x1800;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1802 = x1801 + x1393;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1803 = x1389 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1798);
          reg = x1798;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1802);
          reg = x1802;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1803);
          reg = x1803;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1803);
          reg = x1803;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x56);
          reg = x56;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1804 = x1773 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1805 = Fp(x1804.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1805);
            reg = x1805;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1806 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1806 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1807 = x1804 - x1806;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1808 = x1807 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1809 = Fp(x1808.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1809);
            reg = x1809;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1810 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1810 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1811 = x1808 - x1810;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1812 = x1811 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1813 = Fp(x1812.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1813);
            reg = x1813;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1814 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1814 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1815 = x1812 - x1814;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1816 = x1815 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1817 = Fp(x1816.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1817);
            reg = x1817;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1818 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1818 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1819 = x1816 - x1818;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1820 = x1819 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1820);
          reg = x1820;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1821 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1821 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1822 = x101 - x1821;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1823 = x1821 * x1822;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1823);
          reg = x1823;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1824 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1824 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1825 = x98 - x1821;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1826 = x1824 * x1825;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1826 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1827 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1827 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1827);
          reg = x1827;
        }
        if (x1769 != 0) {
          host_args.at(0) = x1765;
          host_args.at(1) = x1697;
          host_args.at(2) = x1701;
          host_args.at(3) = x1709;
          host_args.at(4) = x1713;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
          auto x1828 = x1765 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1701);
            reg = x1701;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1713);
            reg = x1713;
          }
          {
            host_args.at(0) = x1828;
            host_args.at(1) = x1697;
            host_args.at(2) = x1701;
            host_args.at(3) = x1709;
            host_args.at(4) = x1713;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1829 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1829 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1830 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1830 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1831 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1831 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1832 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1832 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1828);
            reg = x1828;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1347);
            reg = x1347;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1829);
            reg = x1829;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1830);
            reg = x1830;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1831);
            reg = x1831;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1832);
            reg = x1832;
          }
        }
        if (x1768 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
      auto x1833 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1833 != Fp::invalid());
      if (x1833 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1834 = x1436 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1834 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1835 = x1425 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1835 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1836 = x1396 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1837 = x1399 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1838 = x1836 + x1837;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1839 = x1838 + x1594;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1840 = x1389 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1841 = x1391 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1842 = x1840 + x1841;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1843 = x1842 + x1393;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1844 = x1389 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1839);
          reg = x1839;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1843);
          reg = x1843;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1844);
          reg = x1844;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1844);
          reg = x1844;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1845 = x1773 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1846 = Fp(x1845.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1846);
            reg = x1846;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1847 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1847 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1848 = x1845 - x1847;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1849 = x1848 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1850 = Fp(x1849.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1850);
            reg = x1850;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1851 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1851 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1852 = x1849 - x1851;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1853 = x1852 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1854 = Fp(x1853.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1855 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1855 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1856 = x1853 - x1855;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1857 = x1856 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1858 = Fp(x1857.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1858);
            reg = x1858;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1859 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1859 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1860 = x1857 - x1859;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1861 = x1860 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1861);
          reg = x1861;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1862 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1862 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1863 = x101 - x1862;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1864 = x1862 * x1863;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1864);
          reg = x1864;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1865 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1865 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1866 = x98 - x1862;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1867 = x1865 * x1866;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1867 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1868 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1868 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1868);
          reg = x1868;
        }
        if (x1769 != 0) {
          host_args.at(0) = x1765;
          host_args.at(1) = x1697;
          host_args.at(2) = x1701;
          host_args.at(3) = x1709;
          host_args.at(4) = x1713;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
          auto x1869 = x1765 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1701);
            reg = x1701;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1713);
            reg = x1713;
          }
          {
            host_args.at(0) = x1869;
            host_args.at(1) = x1697;
            host_args.at(2) = x1701;
            host_args.at(3) = x1709;
            host_args.at(4) = x1713;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1870 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1870 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1871 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1871 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1872 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1872 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1873 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1873 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1869);
            reg = x1869;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1347);
            reg = x1347;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1870);
            reg = x1870;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1871);
            reg = x1871;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1872);
            reg = x1872;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1873);
            reg = x1873;
          }
        }
        if (x1768 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
      auto x1874 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1874 != Fp::invalid());
      if (x1874 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1875 = x1436 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1875 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1876 = x1425 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1876 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1877 = x1396 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1878 = x1399 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1879 = x1877 + x1878;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1880 = x1879 + x1594;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1881 = x1389 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1882 = x1391 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1883 = x1881 + x1882;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1884 = x1883 + x1393;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1885 = x1389 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1880);
          reg = x1880;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1884);
          reg = x1884;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1885);
          reg = x1885;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1885);
          reg = x1885;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1886 = x1773 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1887 = Fp(x1886.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1887);
            reg = x1887;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1888 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1888 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1889 = x1886 - x1888;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1890 = x1889 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1891 = Fp(x1890.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1891);
            reg = x1891;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1892 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1892 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1893 = x1890 - x1892;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1894 = x1893 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1895 = Fp(x1894.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1895);
            reg = x1895;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1896 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1896 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1897 = x1894 - x1896;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1898 = x1897 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1899 = Fp(x1898.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1899);
            reg = x1899;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1900 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1900 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1901 = x1898 - x1900;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1902 = x1901 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1902);
          reg = x1902;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1903 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1903 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1904 = x101 - x1903;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1905 = x1903 * x1904;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1905);
          reg = x1905;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1906 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1906 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1907 = x98 - x1903;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1908 = x1906 * x1907;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1908 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1909 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1909 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1909);
          reg = x1909;
        }
        if (x1769 != 0) {
          host_args.at(0) = x1765;
          host_args.at(1) = x1697;
          host_args.at(2) = x1701;
          host_args.at(3) = x1709;
          host_args.at(4) = x1713;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
          auto x1910 = x1765 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1701);
            reg = x1701;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1713);
            reg = x1713;
          }
          {
            host_args.at(0) = x1910;
            host_args.at(1) = x1697;
            host_args.at(2) = x1701;
            host_args.at(3) = x1709;
            host_args.at(4) = x1713;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1911 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1911 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1912 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1912 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1913 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1913 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1914 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1914 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1910);
            reg = x1910;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1347);
            reg = x1347;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1911);
            reg = x1911;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1912);
            reg = x1912;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1913);
            reg = x1913;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1914);
            reg = x1914;
          }
        }
        if (x1768 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
      auto x1915 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1915 != Fp::invalid());
      if (x1915 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1916 = x1436 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1916 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1917 = x1425 - x98;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1917 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1918 = x1396 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1919 = x1399 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1920 = x1918 + x1919;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1921 = x1920 + x1594;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1922 = x1389 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1923 = x1391 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1924 = x1922 + x1923;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1925 = x1924 + x1393;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1926 = x1389 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1921);
          reg = x1921;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1925);
          reg = x1925;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1926);
          reg = x1926;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1926);
          reg = x1926;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1927 = x1773 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1928 = Fp(x1927.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1928);
            reg = x1928;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1929 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1929 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1930 = x1927 - x1929;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1931 = x1930 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1932 = Fp(x1931.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1932);
            reg = x1932;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1933 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1933 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1934 = x1931 - x1933;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1935 = x1934 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1936 = Fp(x1935.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1936);
            reg = x1936;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1937 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1937 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1938 = x1935 - x1937;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1939 = x1938 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1940 = Fp(x1939.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1940);
            reg = x1940;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1941 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1942 = x1939 - x1941;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1943 = x1942 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1943);
          reg = x1943;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1944 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1944 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1945 = x101 - x1944;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1946 = x1944 * x1945;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1946);
          reg = x1946;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1947 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1947 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1948 = x98 - x1944;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1949 = x1947 * x1948;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1949 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1950 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1950 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1950);
          reg = x1950;
        }
        if (x1769 != 0) {
          host_args.at(0) = x1765;
          host_args.at(1) = x1759;
          host_args.at(2) = x100;
          host_args.at(3) = x100;
          host_args.at(4) = x100;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
          auto x1951 = x1765 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1759);
            reg = x1759;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          {
            host_args.at(0) = x1951;
            host_args.at(1) = x1759;
            host_args.at(2) = x100;
            host_args.at(3) = x100;
            host_args.at(4) = x100;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1952 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1952 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1953 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1953 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1954 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1954 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1955 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1955 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1951);
            reg = x1951;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1347);
            reg = x1347;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1952);
            reg = x1952;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1953);
            reg = x1953;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1954);
            reg = x1954;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1955);
            reg = x1955;
          }
        }
        if (x1768 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
      auto x1956 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1956 != Fp::invalid());
      if (x1956 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1957 = x1436 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1957 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1958 = x1425 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1958 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1959 = x1396 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1960 = x1399 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1961 = x1959 + x1960;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1962 = x1961 + x1594;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1963 = x1389 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1964 = x1391 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1965 = x1963 + x1964;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1966 = x1965 + x1393;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1967 = x1389 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1962);
          reg = x1962;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1966);
          reg = x1966;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1967);
          reg = x1967;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1967);
          reg = x1967;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1968 = x1773 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1969 = Fp(x1968.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1969);
            reg = x1969;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1970 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1970 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1971 = x1968 - x1970;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1972 = x1971 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1973 = Fp(x1972.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1973);
            reg = x1973;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1974 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1974 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1975 = x1972 - x1974;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1976 = x1975 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1977 = Fp(x1976.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1977);
            reg = x1977;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1978 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1978 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1979 = x1976 - x1978;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1980 = x1979 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1981 = Fp(x1980.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1981);
            reg = x1981;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1982 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1982 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1983 = x1980 - x1982;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1984 = x1983 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1984);
          reg = x1984;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1985 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1985 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1986 = x101 - x1985;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1987 = x1985 * x1986;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1987);
          reg = x1987;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1988 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1988 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1989 = x98 - x1985;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1990 = x1988 * x1989;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1990 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1991 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1991 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1991);
          reg = x1991;
        }
        if (x1769 != 0) {
          host_args.at(0) = x1765;
          host_args.at(1) = x1761;
          host_args.at(2) = x100;
          host_args.at(3) = x100;
          host_args.at(4) = x100;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
          auto x1992 = x1765 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1761);
            reg = x1761;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          {
            host_args.at(0) = x1992;
            host_args.at(1) = x1761;
            host_args.at(2) = x100;
            host_args.at(3) = x100;
            host_args.at(4) = x100;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1993 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1993 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1994 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1994 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1995 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1995 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1996 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1996 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1992);
            reg = x1992;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1347);
            reg = x1347;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1993);
            reg = x1993;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1994);
            reg = x1994;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1995);
            reg = x1995;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1996);
            reg = x1996;
          }
        }
        if (x1768 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
      auto x1997 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1997 != Fp::invalid());
      if (x1997 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x1998 = x1436 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1998 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1425 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1999 = x1396 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2000 = x1399 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2001 = x1999 + x2000;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2002 = x2001 + x1762;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2003 = x2002 + x1763;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2004 = x1389 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2005 = x1434 * x76;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2006 = x2004 + x2005;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2007 = x1391 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2008 = x2006 + x2007;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2009 = x2008 + x1393;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2010 = x1389 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2003);
          reg = x2003;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2009);
          reg = x2009;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2010);
          reg = x2010;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2010);
          reg = x2010;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2011 = x1784 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2012 = Fp(x2011.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2012);
            reg = x2012;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2013 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2013 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2014 = x2011 - x2013;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2015 = x2014 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2016 = Fp(x2015.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2016);
            reg = x2016;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2017 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2017 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2018 = x2015 - x2017;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2019 = x2018 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2020 = Fp(x2019.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2020);
            reg = x2020;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2021 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2021 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2022 = x2019 - x2021;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2023 = x2022 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2024 = Fp(x2023.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2024);
            reg = x2024;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2025 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2025 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2026 = x2023 - x2025;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2027 = x2026 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2027);
          reg = x2027;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2028 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2028 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2029 = x101 - x2028;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2030 = x2028 * x2029;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2030);
          reg = x2030;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2031 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2031 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2032 = x98 - x2028;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2033 = x2031 * x2032;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2033 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2034 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2034 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2034);
          reg = x2034;
        }
        if (x100 != 0) {
          host_args.at(0) = x1765;
          host_args.at(1) = x1697;
          host_args.at(2) = x1701;
          host_args.at(3) = x1709;
          host_args.at(4) = x1713;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
          auto x2035 = x1765 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1701);
            reg = x1701;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1713);
            reg = x1713;
          }
          {
            host_args.at(0) = x2035;
            host_args.at(1) = x1697;
            host_args.at(2) = x1701;
            host_args.at(3) = x1709;
            host_args.at(4) = x1713;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2036 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2036 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2037 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2037 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2038 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2038 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2039 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2039 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2035);
            reg = x2035;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1347);
            reg = x1347;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2036);
            reg = x2036;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2037);
            reg = x2037;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2038);
            reg = x2038;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2039);
            reg = x2039;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2040 = x1768 + x101;
        if (x2040 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
      auto x2041 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2041 != Fp::invalid());
      if (x2041 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2042 = x1436 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2042 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2043 = x1425 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2043 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2044 = x1396 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2045 = x1399 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2046 = x2044 + x2045;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2047 = x2046 + x1762;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2048 = x2047 + x1763;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2049 = x1389 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2050 = x1434 * x76;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2051 = x2049 + x2050;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2052 = x1391 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2053 = x2051 + x2052;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2054 = x2053 + x1393;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2055 = x1389 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2048);
          reg = x2048;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2054);
          reg = x2054;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2055);
          reg = x2055;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2055);
          reg = x2055;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2056 = x1787 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2057 = Fp(x2056.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2057);
            reg = x2057;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2058 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2058 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2059 = x2056 - x2058;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2060 = x2059 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2061 = Fp(x2060.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2061);
            reg = x2061;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2062 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2062 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2063 = x2060 - x2062;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2064 = x2063 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2065 = Fp(x2064.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2065);
            reg = x2065;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2066 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2066 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2067 = x2064 - x2066;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2068 = x2067 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2069 = Fp(x2068.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2069);
            reg = x2069;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2070 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2070 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2071 = x2068 - x2070;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2072 = x2071 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2072);
          reg = x2072;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2073 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2073 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2074 = x101 - x2073;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2075 = x2073 * x2074;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2075);
          reg = x2075;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2076 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2076 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2077 = x98 - x2073;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2078 = x2076 * x2077;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2078 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2079 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2079 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2079);
          reg = x2079;
        }
        if (x100 != 0) {
          host_args.at(0) = x1765;
          host_args.at(1) = x1697;
          host_args.at(2) = x1701;
          host_args.at(3) = x1709;
          host_args.at(4) = x1713;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
          auto x2080 = x1765 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1701);
            reg = x1701;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1713);
            reg = x1713;
          }
          {
            host_args.at(0) = x2080;
            host_args.at(1) = x1697;
            host_args.at(2) = x1701;
            host_args.at(3) = x1709;
            host_args.at(4) = x1713;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2081 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2081 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2082 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2082 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2083 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2083 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2084 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2084 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2080);
            reg = x2080;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1347);
            reg = x1347;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2081);
            reg = x2081;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2083);
            reg = x2083;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2084);
            reg = x2084;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2085 = x1768 + x101;
        if (x2085 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
      auto x2086 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2086 != Fp::invalid());
      if (x2086 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2087 = x1436 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2087 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2088 = x1425 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2088 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2089 = x1396 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2090 = x1399 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2091 = x2089 + x2090;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2092 = x2091 + x1762;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2093 = x2092 + x1763;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2094 = x1389 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2095 = x1434 * x76;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2096 = x2094 + x2095;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2097 = x1391 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2098 = x2096 + x2097;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2099 = x2098 + x1393;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2100 = x1389 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2093);
          reg = x2093;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2099);
          reg = x2099;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2100);
          reg = x2100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2100);
          reg = x2100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2101 = x1791 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2102 = Fp(x2101.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2102);
            reg = x2102;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2103 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2103 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2104 = x2101 - x2103;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2105 = x2104 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2106 = Fp(x2105.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2106);
            reg = x2106;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2107 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2107 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2108 = x2105 - x2107;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2109 = x2108 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2110 = Fp(x2109.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2110);
            reg = x2110;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2111 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2111 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2112 = x2109 - x2111;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2113 = x2112 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2114 = Fp(x2113.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2114);
            reg = x2114;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2115 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2115 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2116 = x2113 - x2115;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2117 = x2116 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2117);
          reg = x2117;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2118 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2118 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2119 = x101 - x2118;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2120 = x2118 * x2119;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2120);
          reg = x2120;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2121 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2121 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2122 = x98 - x2118;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2123 = x2121 * x2122;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2123 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2124 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2124 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2124);
          reg = x2124;
        }
        if (x100 != 0) {
          host_args.at(0) = x1765;
          host_args.at(1) = x1697;
          host_args.at(2) = x1701;
          host_args.at(3) = x1709;
          host_args.at(4) = x1713;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
          auto x2125 = x1765 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1701);
            reg = x1701;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1713);
            reg = x1713;
          }
          {
            host_args.at(0) = x2125;
            host_args.at(1) = x1697;
            host_args.at(2) = x1701;
            host_args.at(3) = x1709;
            host_args.at(4) = x1713;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2126 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2126 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2127 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2127 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2128 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2128 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2129 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2129 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2125);
            reg = x2125;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1347);
            reg = x1347;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2126);
            reg = x2126;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2127);
            reg = x2127;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2128);
            reg = x2128;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2129);
            reg = x2129;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2130 = x1768 + x101;
        if (x2130 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/components/mux.h":37:25))
    auto x2131 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x2131 != Fp::invalid());
    if (x2131 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2132 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2132 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x2133 = x602 * x82;
      {
        host_args.at(0) = x2133;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2134 = host_outs.at(0);
        auto x2135 = host_outs.at(1);
        auto x2136 = host_outs.at(2);
        auto x2137 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2134);
          reg = x2134;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2135);
          reg = x2135;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2136);
          reg = x2136;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2137);
          reg = x2137;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2138 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2138 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2139 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2139 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2140 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2140 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2141 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2141 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2133);
        reg = x2133;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2132);
        reg = x2132;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2138);
        reg = x2138;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2139);
        reg = x2139;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2140);
        reg = x2140;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2141);
        reg = x2141;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2142 = Fp(x2141.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2143 = x2142 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2143);
          reg = x2143;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2144 = Fp(x2141.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2145 = x2144 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2145);
          reg = x2145;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2146 = Fp(x2141.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2147 = x2146 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2147);
          reg = x2147;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2148 = Fp(x2141.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2149 = x2148 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2149);
          reg = x2149;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2150 = Fp(x2141.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2151 = x2150 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2151);
          reg = x2151;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2152 = Fp(x2141.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2152);
          reg = x2152;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2153 = Fp(x2140.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2154 = x2153 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2154);
          reg = x2154;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2155 = Fp(x2140.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2156 = x2155 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2156);
          reg = x2156;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2157 = Fp(x2140.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2158 = x2157 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2158);
          reg = x2158;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2159 = Fp(x2140.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2160 = x2159 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2160);
          reg = x2160;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2161 = Fp(x2140.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2161);
          reg = x2161;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2162 = Fp(x2139.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2163 = x2162 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2163);
          reg = x2163;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2164 = Fp(x2139.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2165 = x2164 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2165);
          reg = x2165;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2166 = Fp(x2139.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2167 = x2166 * x64;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2167);
          reg = x2167;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2168 = Fp(x2139.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2169 = x2168 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2169);
          reg = x2169;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2170 = Fp(x2139.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2170);
          reg = x2170;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2171 = Fp(x2138.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2172 = x2171 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2172);
          reg = x2172;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2173 = Fp(x2138.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2173);
          reg = x2173;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2174 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x2174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2175 = x2174 * x61;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2176 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2176 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2177 = x2176 * x65;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2178 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x2178 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2179 = x2178 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2180 = x2177 + x2179;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2181 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x2181 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2182 = x2181 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2183 = x2180 + x2182;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2184 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2184 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2185 = x2183 + x2184;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2186 = x2175 + x2185;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2187 = x2186 * x98;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2188 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x2188 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2189 = x2187 + x2188;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2190 = x2141 - x2189;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2190 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2191 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x2191 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2192 = x2191 * x76;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2193 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2193 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2194 = x2193 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2195 = x2192 + x2194;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2196 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x2196 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2197 = x2195 + x2196;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2198 = x2197 * x65;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2199 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2199 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2200 = x2199 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2201 = x2198 + x2200;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2202 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2202 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2203 = x2201 + x2202;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2204 = x2140 - x2203;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2204 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2205 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x2205 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2206 = x2205 * x70;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2207 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x2207 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2208 = x2207 * x84;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2209 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2209 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2210 = x2208 + x2209;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2211 = x2210 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2212 = x2206 + x2211;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2213 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2213 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2214 = x2213 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2215 = x2212 + x2214;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2216 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2216 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2217 = x2215 + x2216;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2218 = x2139 - x2217;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2218 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2219 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x2219 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2220 = x2219 * x70;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x2221 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x2221 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2222 = x2220 + x2221;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2223 = x2138 - x2222;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2223 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2138;
        host_args.at(1) = x2139;
        host_args.at(2) = x2140;
        host_args.at(3) = x2141;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2224 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2225 = (x2224 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2225);
            reg = x2225;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2226 = x2224 - x101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2227 = (x2226 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2227);
            reg = x2227;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2228 = x2224 - x98;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2229 = (x2228 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2229);
            reg = x2229;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2230 = x2224 - x83;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2231 = (x2230 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2231);
            reg = x2231;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2232 = x2224 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2233 = (x2232 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2233);
            reg = x2233;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2234 = x2224 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2235 = (x2234 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2235);
            reg = x2235;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2236 = x2224 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2237 = (x2236 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2237);
            reg = x2237;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2238 = x2224 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2239 = (x2238 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2239);
            reg = x2239;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2240 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2240 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2241 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2241 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2242 = x2241 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2243 = x2240 + x2242;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2244 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2244 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2245 = x2244 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2246 = x2243 + x2245;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2247 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2247 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2248 = x2247 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2249 = x2246 + x2248;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2250 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2250 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2251 = x2250 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2252 = x2249 + x2251;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2253 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2253 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2254 = x2253 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2255 = x2252 + x2254;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2256 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x2256 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2257 = x2256 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2258 = x2255 + x2257;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x2259 = x2258 - x2224;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x2259 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
        auto x2260 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x2260 != Fp::invalid());
        if (x2260 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2261 = x2181 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2262 = x2184 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2263 = x2261 + x2262;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2264 = x2213 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2265 = x2263 + x2264;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2266 = x2216 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2267 = x2265 + x2266;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2268 = x2174 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2269 = x2219 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2270 = x2268 + x2269;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2271 = x2176 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2272 = x2270 + x2271;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2273 = x2272 + x2178;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2274 = x2174 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2267);
            reg = x2267;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2273);
            reg = x2273;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2274);
            reg = x2274;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2274);
            reg = x2274;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
        auto x2275 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2275 != Fp::invalid());
        if (x2275 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2276 = x2181 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2277 = x2184 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2278 = x2276 + x2277;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2279 = x2213 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2280 = x2278 + x2279;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2281 = x2216 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2282 = x2280 + x2281;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2283 = x2174 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2284 = x2219 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2285 = x2283 + x2284;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2286 = x2176 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2287 = x2285 + x2286;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2288 = x2287 + x2178;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2289 = x2174 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2282);
            reg = x2282;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2288);
            reg = x2288;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2289);
            reg = x2289;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2289);
            reg = x2289;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
        auto x2290 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2290 != Fp::invalid());
        if (x2290 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2291 = x2181 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2292 = x2184 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2293 = x2291 + x2292;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2294 = x2213 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2295 = x2293 + x2294;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2296 = x2216 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2297 = x2295 + x2296;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2298 = x2174 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2299 = x2219 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2300 = x2298 + x2299;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2301 = x2176 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2302 = x2300 + x2301;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2303 = x2302 + x2178;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2304 = x2174 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2297);
            reg = x2297;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2303);
            reg = x2303;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2304);
            reg = x2304;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2304);
            reg = x2304;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
        auto x2305 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2305 != Fp::invalid());
        if (x2305 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2306 = x2181 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
          auto x2307 = x2184 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2308 = x2306 + x2307;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2309 = x2188 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2310 = x2309 + x2197;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2311 = x2308 + x2310;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2312 = x2311 - x2196;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
          auto x2313 = x2196 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2314 = x2212 + x2313;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
          auto x2315 = x2176 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2316 = x2314 + x2315;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2317 = x2316 + x2178;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2318 = x2174 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2319 = x2318 + x2200;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2320 = x2319 + x2202;
          // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
          auto x2321 = x2174 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2312);
            reg = x2312;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2317);
            reg = x2317;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2320);
            reg = x2320;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2321);
            reg = x2321;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
        auto x2322 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2322 != Fp::invalid());
        if (x2322 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2323 = x2181 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2324 = x2184 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2325 = x2323 + x2324;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2326 = x2188 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2327 = x2326 + x2197;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2328 = x2325 + x2327;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2329 = x2174 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2330 = x2176 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2331 = x2329 + x2330;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2332 = x2331 + x2178;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2333 = x2174 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2328);
            reg = x2328;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2332);
            reg = x2332;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2333);
            reg = x2333;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2333);
            reg = x2333;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
        auto x2334 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2334 != Fp::invalid());
        if (x2334 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2212);
            reg = x2212;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2203);
            reg = x2203;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2189);
            reg = x2189;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
        auto x2335 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2335 != Fp::invalid());
        if (x2335 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2212);
            reg = x2212;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2203);
            reg = x2203;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2189);
            reg = x2189;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2336 = x2199 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x2337 = x2202 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2338 = x2336 + x2337;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2339 = x2338 + x2205;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x2340 = x2339 + x54;
      {
        host_args.at(0) = x2340;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2341 = host_outs.at(0);
        auto x2342 = host_outs.at(1);
        auto x2343 = host_outs.at(2);
        auto x2344 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2341);
          reg = x2341;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2342);
          reg = x2342;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2343);
          reg = x2343;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2344);
          reg = x2344;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2345 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2345 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2346 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2346 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2347 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2347 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2348 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2348 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2340);
        reg = x2340;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2132);
        reg = x2132;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2345);
        reg = x2345;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2346);
        reg = x2346;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2347);
        reg = x2347;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2348);
        reg = x2348;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2349 = x2188 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2350 = x2349 + x2197;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x2351 = x2350 + x54;
      {
        host_args.at(0) = x2351;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2352 = host_outs.at(0);
        auto x2353 = host_outs.at(1);
        auto x2354 = host_outs.at(2);
        auto x2355 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2352);
          reg = x2352;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2353);
          reg = x2353;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2354);
          reg = x2354;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2355);
          reg = x2355;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2356 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2356 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2357 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2357 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2358 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2358 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2359 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x2359 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2351);
        reg = x2351;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2132);
        reg = x2132;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2356);
        reg = x2356;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2357);
        reg = x2357;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2358);
        reg = x2358;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2359);
        reg = x2359;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2360 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2360 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2361 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2361 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2362 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2362 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2363 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2363 != Fp::invalid());
      host_args.at(0) = x2360;
      host_args.at(1) = x2361;
      host_args.at(2) = x2362;
      host_args.at(3) = x2363;
      host_args.at(4) = x2339;
      host_args.at(5) = x2345;
      host_args.at(6) = x2346;
      host_args.at(7) = x2347;
      host_args.at(8) = x2348;
      host_args.at(9) = x2350;
      host_args.at(10) = x2356;
      host_args.at(11) = x2357;
      host_args.at(12) = x2358;
      host_args.at(13) = x2359;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2364 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2364 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x2365 = x101 - x2364;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2366 = x2365 * x2345;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2367 = x2365 * x2346;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2368 = x2365 * x2347;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2369 = x2365 * x2348;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x2370 = x599 * x84;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x2371 = x596 + x2370;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x2372 = x589 - x84;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2373 = x2364 * x2372;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2374 = x2364 * x590;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2375 = x2364 * x593;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2376 = x2364 * x2371;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2377 = x2366 + x2373;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2378 = x2367 + x2374;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2379 = x2368 + x2375;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2380 = x2369 + x2376;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2381 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2381 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x2382 = x101 - x2381;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2383 = x2382 * x2356;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2384 = x2382 * x2357;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2385 = x2382 * x2358;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2386 = x2382 * x2359;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2387 = x2381 * x2360;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2388 = x2381 * x2361;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2389 = x2381 * x2362;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2390 = x2381 * x2363;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2391 = x2383 + x2387;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2392 = x2384 + x2388;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2393 = x2385 + x2389;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2394 = x2386 + x2390;
      host_args.at(0) = x2377;
      host_args.at(1) = x2378;
      host_args.at(2) = x2379;
      host_args.at(3) = x2380;
      host_args.at(4) = x2391;
      host_args.at(5) = x2392;
      host_args.at(6) = x2393;
      host_args.at(7) = x2394;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2395 = Fp(x2380.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2396 = x2395 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2396);
          reg = x2396;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2397 = Fp(x2380.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2398 = x2397 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2398);
          reg = x2398;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2399 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x2399 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2400 = x2399 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x2401 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x2401 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2402 = x2401 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2403 = x2400 + x2402;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2404 = x2380 - x2403;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2404 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2405 = Fp(x2394.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2406 = x2405 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2406);
          reg = x2406;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2407 = Fp(x2394.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2408 = x2407 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2408);
          reg = x2408;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2409 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x2409 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2410 = x2409 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x2411 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2411 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2412 = x2411 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2413 = x2410 + x2412;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2414 = x2394 - x2413;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2414 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2391);
        reg = x2391;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2392);
        reg = x2392;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2393);
        reg = x2393;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2394);
        reg = x2394;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2415 = Fp(x2377.asUInt32() & x2391.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2416 = Fp(x2378.asUInt32() & x2392.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2417 = Fp(x2379.asUInt32() & x2393.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2418 = Fp(x2380.asUInt32() & x2394.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2415);
          reg = x2415;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2416);
          reg = x2416;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2417);
          reg = x2417;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2418);
          reg = x2418;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2419 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2419 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2420 = x2419 * x2377;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2421 = x2419 * x2378;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2422 = x2419 * x2379;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2423 = x2419 * x2380;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2424 = x2420 + x96;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2425 = x2421 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2426 = x2422 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2427 = x2423 + x97;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2428 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2428 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2429 = x2428 * x2391;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2430 = x2428 * x2392;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2431 = x2428 * x2393;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2432 = x2428 * x2394;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2433 = x2424 + x2429;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2434 = x2425 + x2430;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2435 = x2426 + x2431;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2436 = x2427 + x2432;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2437 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x2437 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2438 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2438 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2439 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2439 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2440 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2440 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2441 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x2441 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2442 = x2437 * x2438;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2443 = x2437 * x2439;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2444 = x2437 * x2440;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2445 = x2437 * x2441;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2446 = x2433 + x2442;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2447 = x2434 + x2443;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2448 = x2435 + x2444;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2449 = x2436 + x2445;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x2450 = x2447 * x96;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x2451 = x2446 + x2450;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2452 = Fp(x2451.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2452);
          reg = x2452;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x2453 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2453 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2454 = x2451 - x2453;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2455 = x2454 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2456 = Fp(x2455.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2456);
          reg = x2456;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x2457 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2457 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2458 = x2455 - x2457;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2459 = x2458 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2459);
        reg = x2459;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2460 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2460 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2461 = x2460 + x2448;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x2462 = x2449 * x96;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2463 = x2461 + x2462;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2464 = Fp(x2463.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2464);
          reg = x2464;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x2465 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2465 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2466 = x2463 - x2465;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2467 = x2466 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2468 = Fp(x2467.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2468);
          reg = x2468;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x2469 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2469 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2470 = x2467 - x2469;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2471 = x2470 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2471);
        reg = x2471;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2472 = Fp(x2469.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2473 = x2472 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2473);
          reg = x2473;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2474 = Fp(x2469.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2475 = x2474 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2475);
          reg = x2475;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2476 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2476 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2477 = x2476 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x2478 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2478 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2479 = x2478 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2480 = x2477 + x2479;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2481 = x2469 - x2480;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2481 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2482 = x101 - x2409;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2483 = x2399 * x2482;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2484 = x101 - x2476;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2485 = x2483 * x2484;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2486 = x101 - x2399;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2487 = x2486 * x2409;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2488 = x2487 * x2476;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2489 = x2485 + x2488;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2489);
        reg = x2489;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x2490 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2490 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2491 = x2490 + x2476;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2492 = x2490 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2493 = x2492 * x2476;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2494 = x2491 - x2493;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2494);
        reg = x2494;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x2495 = x2457 * x96;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x2496 = x2453 + x2495;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2497 = (x2496 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2497);
          reg = x2497;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2498 = inv(x2496);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2498);
          reg = x2498;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2499 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x2499 != Fp::invalid());
      if (x2499 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x2496 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x2500 = x101 - x2499;
      if (x2500 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2501 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x2501 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2502 = x2496 * x2501;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2503 = x2502 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x2503 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x2504 = x2469 * x96;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2505 = x2465 + x2504;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x2506 = x2500 * x86;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2507 = x2505 + x2506;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2508 = (x2507 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2508);
          reg = x2508;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2509 = inv(x2507);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2509);
          reg = x2509;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2510 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x2510 != Fp::invalid());
      if (x2510 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x2507 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x2511 = x101 - x2510;
      if (x2511 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2512 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x2512 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2513 = x2507 * x2512;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2514 = x2513 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x2514 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2515 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x2515 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2516 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x2516 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2517 = x101 - x2516;
      host_args.at(0) = x2453;
      host_args.at(1) = x2457;
      host_args.at(2) = x2465;
      host_args.at(3) = x2469;
      host_args.at(4) = x2510;
      host_args.at(5) = x2515;
      host_args.at(6) = x2517;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2518 = x2213 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x2519 = x2216 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2520 = x2518 + x2519;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2521 = x2520 + x2219;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2522 = (x2521 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2522);
          reg = x2522;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2523 = inv(x2521);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2523);
          reg = x2523;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2524 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x2524 != Fp::invalid());
      if (x2524 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x2521 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x2525 = x101 - x2524;
      if (x2525 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2526 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x2526 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2527 = x2521 * x2526;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2528 = x2527 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x2528 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x2529 = x602 + x84;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x2530 = x2361 * x96;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2531 = x2360 + x2530;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x2532 = x2362 * x86;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2533 = x2531 + x2532;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x2534 = x2363 * x53;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x2535 = x2534 * x52;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x2536 = x2533 + x2535;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x2537 = x602 + x2536;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:57)
      auto x2538 = x2465 * x86;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2539 = x2496 + x2538;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:14)
      auto x2540 = x2469 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2541 = x2539 + x2540;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2542 = x2515 * x2529;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:35)
      auto x2543 = x101 - x2515;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:34)
      auto x2544 = x2543 * x2537;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2545 = x2542 + x2544;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2546 = x2517 * x2537;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:38)
      auto x2547 = x101 - x2517;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:37)
      auto x2548 = x2547 * x2529;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2549 = x2546 + x2548;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2550 = x2517 * x2529;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:36)
      auto x2551 = x2547 * x2537;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2552 = x2550 + x2551;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
      auto x2553 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2553 != Fp::invalid());
      if (x2553 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2554 = x2221 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2554 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2555 = x2210 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2555 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2556 = x2181 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2557 = x2184 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2558 = x2556 + x2557;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2559 = x2558 + x2518;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2560 = x2559 + x2519;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2561 = x2174 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2562 = x2219 * x76;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2563 = x2561 + x2562;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2564 = x2176 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2565 = x2563 + x2564;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2566 = x2565 + x2178;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2567 = x2174 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2560);
          reg = x2560;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2566);
          reg = x2566;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2567);
          reg = x2567;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2567);
          reg = x2567;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2568 = x2545 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2569 = Fp(x2568.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2569);
            reg = x2569;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2570 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2570 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2571 = x2568 - x2570;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2572 = x2571 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2573 = Fp(x2572.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2573);
            reg = x2573;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2574 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2574 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2575 = x2572 - x2574;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2576 = x2575 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2577 = Fp(x2576.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2577);
            reg = x2577;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2578 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2578 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2579 = x2576 - x2578;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2580 = x2579 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2581 = Fp(x2580.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2581);
            reg = x2581;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2582 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2582 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2583 = x2580 - x2582;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2584 = x2583 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2584);
          reg = x2584;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2585 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2585 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2586 = x101 - x2585;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2587 = x2585 * x2586;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2587);
          reg = x2587;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2588 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2588 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2589 = x98 - x2585;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2590 = x2588 * x2589;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2590 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2591 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2591 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2591);
          reg = x2591;
        }
        if (x100 != 0) {
          host_args.at(0) = x2521;
          host_args.at(1) = x2453;
          host_args.at(2) = x2457;
          host_args.at(3) = x2465;
          host_args.at(4) = x2469;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
          auto x2592 = x2521 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2457);
            reg = x2457;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2469);
            reg = x2469;
          }
          {
            host_args.at(0) = x2592;
            host_args.at(1) = x2453;
            host_args.at(2) = x2457;
            host_args.at(3) = x2465;
            host_args.at(4) = x2469;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2593 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2593 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2594 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2594 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2595 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2595 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2596 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2596 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2592);
            reg = x2592;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2132);
            reg = x2132;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2593);
            reg = x2593;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2594);
            reg = x2594;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2595);
            reg = x2595;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2596);
            reg = x2596;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2597 = x2524 + x101;
        if (x2597 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
      auto x2598 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2598 != Fp::invalid());
      if (x2598 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2599 = x2221 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2599 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2600 = x2210 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2600 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2601 = x2181 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2602 = x2184 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2603 = x2601 + x2602;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2604 = x2603 + x2518;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2605 = x2604 + x2519;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2606 = x2174 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2607 = x2219 * x76;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2608 = x2606 + x2607;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2609 = x2176 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2610 = x2608 + x2609;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2611 = x2610 + x2178;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2612 = x2174 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2605);
          reg = x2605;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2611);
          reg = x2611;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2612);
          reg = x2612;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2612);
          reg = x2612;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2613 = x2549 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2614 = Fp(x2613.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2614);
            reg = x2614;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2615 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2615 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2616 = x2613 - x2615;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2617 = x2616 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2618 = Fp(x2617.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2618);
            reg = x2618;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2619 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2619 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2620 = x2617 - x2619;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2621 = x2620 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2622 = Fp(x2621.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2622);
            reg = x2622;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2623 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2623 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2624 = x2621 - x2623;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2625 = x2624 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2626 = Fp(x2625.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2626);
            reg = x2626;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2627 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2627 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2628 = x2625 - x2627;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2629 = x2628 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2629);
          reg = x2629;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2630 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2631 = x101 - x2630;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2632 = x2630 * x2631;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2632);
          reg = x2632;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2633 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2633 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2634 = x98 - x2630;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2635 = x2633 * x2634;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2635 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2636 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2636 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2636);
          reg = x2636;
        }
        if (x100 != 0) {
          host_args.at(0) = x2521;
          host_args.at(1) = x2453;
          host_args.at(2) = x2457;
          host_args.at(3) = x2465;
          host_args.at(4) = x2469;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
          auto x2637 = x2521 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2457);
            reg = x2457;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2469);
            reg = x2469;
          }
          {
            host_args.at(0) = x2637;
            host_args.at(1) = x2453;
            host_args.at(2) = x2457;
            host_args.at(3) = x2465;
            host_args.at(4) = x2469;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2638 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2638 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2639 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2639 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2640 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2640 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2641 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2641 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2637);
            reg = x2637;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2132);
            reg = x2132;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2638);
            reg = x2638;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2639);
            reg = x2639;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2640);
            reg = x2640;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2641);
            reg = x2641;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2642 = x2524 + x101;
        if (x2642 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
      auto x2643 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2643 != Fp::invalid());
      if (x2643 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2644 = x2221 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2644 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2645 = x2210 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2645 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2646 = x2181 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2647 = x2184 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2648 = x2646 + x2647;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2649 = x2648 + x2518;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2650 = x2649 + x2519;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2651 = x2174 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2652 = x2219 * x76;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2653 = x2651 + x2652;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2654 = x2176 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2655 = x2653 + x2654;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2656 = x2655 + x2178;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2657 = x2174 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2650);
          reg = x2650;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2656);
          reg = x2656;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2657);
          reg = x2657;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2657);
          reg = x2657;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2658 = x2552 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2659 = Fp(x2658.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2659);
            reg = x2659;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2660 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2660 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2661 = x2658 - x2660;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2662 = x2661 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2663 = Fp(x2662.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2663);
            reg = x2663;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2664 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2664 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2665 = x2662 - x2664;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2666 = x2665 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2667 = Fp(x2666.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2667);
            reg = x2667;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2668 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2668 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2669 = x2666 - x2668;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2670 = x2669 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2671 = Fp(x2670.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2671);
            reg = x2671;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2672 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2672 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2673 = x2670 - x2672;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2674 = x2673 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2674);
          reg = x2674;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2675 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2675 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2676 = x101 - x2675;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2677 = x2675 * x2676;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2677);
          reg = x2677;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2678 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2678 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2679 = x98 - x2675;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2680 = x2678 * x2679;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2680 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2681 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2681 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2681);
          reg = x2681;
        }
        if (x100 != 0) {
          host_args.at(0) = x2521;
          host_args.at(1) = x2453;
          host_args.at(2) = x2457;
          host_args.at(3) = x2465;
          host_args.at(4) = x2469;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
          auto x2682 = x2521 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2457);
            reg = x2457;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2469);
            reg = x2469;
          }
          {
            host_args.at(0) = x2682;
            host_args.at(1) = x2453;
            host_args.at(2) = x2457;
            host_args.at(3) = x2465;
            host_args.at(4) = x2469;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2683 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2683 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2684 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2684 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2685 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2685 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2686 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2686 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2682);
            reg = x2682;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2132);
            reg = x2132;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2683);
            reg = x2683;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2684);
            reg = x2684;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2685);
            reg = x2685;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2686);
            reg = x2686;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2687 = x2524 + x101;
        if (x2687 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
      auto x2688 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2688 != Fp::invalid());
      if (x2688 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2689 = x2221 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2689 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2690 = x2181 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
        auto x2691 = x2184 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2692 = x2690 + x2691;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2693 = x2692 + x2350;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2694 = x2693 - x2196;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
        auto x2695 = x2196 * x76;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2696 = x2212 + x2695;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
        auto x2697 = x2176 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2698 = x2696 + x2697;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2699 = x2698 + x2178;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2700 = x2174 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2701 = x2700 + x2200;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2702 = x2701 + x2202;
        // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
        auto x2703 = x2174 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2694);
          reg = x2694;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2699);
          reg = x2699;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2702);
          reg = x2702;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2703);
          reg = x2703;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2704 = x2537 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2705 = Fp(x2704.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2705);
            reg = x2705;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2706 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2706 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2707 = x2704 - x2706;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2708 = x2707 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2709 = Fp(x2708.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2709);
            reg = x2709;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2710 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2710 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2711 = x2708 - x2710;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2712 = x2711 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2713 = Fp(x2712.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2713);
            reg = x2713;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2714 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2714 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2715 = x2712 - x2714;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2716 = x2715 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2717 = Fp(x2716.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2717);
            reg = x2717;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2718 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2718 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2719 = x2716 - x2718;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2720 = x2719 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2720);
          reg = x2720;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2721 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2721 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2722 = x101 - x2721;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2723 = x2721 * x2722;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2723);
          reg = x2723;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2724 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2724 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2725 = x98 - x2721;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2726 = x2724 * x2725;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2726 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2727 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2727 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2727);
          reg = x2727;
        }
        if (x2525 != 0) {
          host_args.at(0) = x2521;
          host_args.at(1) = x589;
          host_args.at(2) = x590;
          host_args.at(3) = x593;
          host_args.at(4) = x2371;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
          auto x2728 = x2521 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x589);
            reg = x589;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x590);
            reg = x590;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x593);
            reg = x593;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2371);
            reg = x2371;
          }
          {
            host_args.at(0) = x2728;
            host_args.at(1) = x589;
            host_args.at(2) = x590;
            host_args.at(3) = x593;
            host_args.at(4) = x2371;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2729 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2729 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2730 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2730 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2731 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2731 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2732 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2732 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2728);
            reg = x2728;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2132);
            reg = x2132;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2729);
            reg = x2729;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2730);
            reg = x2730;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2731);
            reg = x2731;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2732);
            reg = x2732;
          }
        }
        if (x2524 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
      auto x2733 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2733 != Fp::invalid());
      if (x2733 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x2734 = x2221 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2734 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2210 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2735 = x2181 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2736 = x2184 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2737 = x2735 + x2736;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2738 = x2737 + x2350;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2739 = x2174 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2740 = x2176 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2741 = x2739 + x2740;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2742 = x2741 + x2178;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2743 = x2174 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2738);
          reg = x2738;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2742);
          reg = x2742;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2743);
          reg = x2743;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2743);
          reg = x2743;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2744 = x2541 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2745 = Fp(x2744.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2745);
            reg = x2745;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2746 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2746 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2747 = x2744 - x2746;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2748 = x2747 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2749 = Fp(x2748.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2749);
            reg = x2749;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2750 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2750 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2751 = x2748 - x2750;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2752 = x2751 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2753 = Fp(x2752.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2753);
            reg = x2753;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2754 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2754 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2755 = x2752 - x2754;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2756 = x2755 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2757 = Fp(x2756.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2757);
            reg = x2757;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2758 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2758 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2759 = x2756 - x2758;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2760 = x2759 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2760);
          reg = x2760;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2761 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2761 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2762 = x101 - x2761;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2763 = x2761 * x2762;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2763);
          reg = x2763;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2764 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2764 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2765 = x98 - x2761;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2766 = x2764 * x2765;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2766 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2767 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2767 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2767);
          reg = x2767;
        }
        if (x2525 != 0) {
          host_args.at(0) = x2521;
          host_args.at(1) = x589;
          host_args.at(2) = x590;
          host_args.at(3) = x593;
          host_args.at(4) = x2371;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
          auto x2768 = x2521 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x589);
            reg = x589;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x590);
            reg = x590;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x593);
            reg = x593;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2371);
            reg = x2371;
          }
          {
            host_args.at(0) = x2768;
            host_args.at(1) = x589;
            host_args.at(2) = x590;
            host_args.at(3) = x593;
            host_args.at(4) = x2371;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2769 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2769 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2770 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2770 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2771 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2771 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2772 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2772 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2768);
            reg = x2768;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2132);
            reg = x2132;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2769);
            reg = x2769;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2770);
            reg = x2770;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2771);
            reg = x2771;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2772);
            reg = x2772;
          }
        }
        if (x2524 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
      auto x2773 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2773 != Fp::invalid());
      if (x2773 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x2774 = x2221 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x2774 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:59");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2212);
          reg = x2212;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2203);
          reg = x2203;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2189);
          reg = x2189;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2775 = x2529 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2776 = Fp(x2775.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2776);
            reg = x2776;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2777 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2777 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2778 = x2775 - x2777;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2779 = x2778 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2780 = Fp(x2779.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2780);
            reg = x2780;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2781 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2781 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2782 = x2779 - x2781;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2783 = x2782 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2784 = Fp(x2783.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2784);
            reg = x2784;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2785 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2785 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2786 = x2783 - x2785;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2787 = x2786 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2788 = Fp(x2787.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2788);
            reg = x2788;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2789 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2789 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2790 = x2787 - x2789;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2791 = x2790 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2791);
          reg = x2791;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2792 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2792 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2793 = x101 - x2792;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2794 = x2792 * x2793;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2794);
          reg = x2794;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2795 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2795 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2796 = x98 - x2792;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2797 = x2795 * x2796;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2797 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2798 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2798 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2798);
          reg = x2798;
        }
        if (x2525 != 0) {
          host_args.at(0) = x2521;
          host_args.at(1) = x2453;
          host_args.at(2) = x2457;
          host_args.at(3) = x2465;
          host_args.at(4) = x2469;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
          auto x2799 = x2521 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2457);
            reg = x2457;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2469);
            reg = x2469;
          }
          {
            host_args.at(0) = x2799;
            host_args.at(1) = x2453;
            host_args.at(2) = x2457;
            host_args.at(3) = x2465;
            host_args.at(4) = x2469;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2800 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2800 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2801 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2801 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2802 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2802 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2803 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2803 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2799);
            reg = x2799;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2132);
            reg = x2132;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2800);
            reg = x2800;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2801);
            reg = x2801;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2802);
            reg = x2802;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2803);
            reg = x2803;
          }
        }
        if (x2524 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
      auto x2804 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2804 != Fp::invalid());
      if (x2804 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        auto x2805 = x2221 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        if (x2805 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:60");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2212);
          reg = x2212;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2203);
          reg = x2203;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2189);
          reg = x2189;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2806 = x2529 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2807 = Fp(x2806.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2807);
            reg = x2807;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2808 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2808 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2809 = x2806 - x2808;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2810 = x2809 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2811 = Fp(x2810.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2811);
            reg = x2811;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2812 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2812 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2813 = x2810 - x2812;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2814 = x2813 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2815 = Fp(x2814.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2815);
            reg = x2815;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2816 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2816 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2817 = x2814 - x2816;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2818 = x2817 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2819 = Fp(x2818.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2819);
            reg = x2819;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2820 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2820 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2821 = x2818 - x2820;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2822 = x2821 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2822);
          reg = x2822;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2823 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2823 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2824 = x101 - x2823;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2825 = x2823 * x2824;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2825);
          reg = x2825;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2826 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2826 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2827 = x98 - x2823;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2828 = x2826 * x2827;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2828 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2829 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2829 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2829);
          reg = x2829;
        }
        if (x2525 != 0) {
          host_args.at(0) = x2521;
          host_args.at(1) = x2453;
          host_args.at(2) = x2457;
          host_args.at(3) = x2465;
          host_args.at(4) = x2469;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
          auto x2830 = x2521 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2457);
            reg = x2457;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2469);
            reg = x2469;
          }
          {
            host_args.at(0) = x2830;
            host_args.at(1) = x2453;
            host_args.at(2) = x2457;
            host_args.at(3) = x2465;
            host_args.at(4) = x2469;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2831 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2831 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2832 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2832 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2833 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2833 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2834 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2834 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2830);
            reg = x2830;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2132);
            reg = x2132;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2831);
            reg = x2831;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2832);
            reg = x2832;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2833);
            reg = x2833;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2834);
            reg = x2834;
          }
        }
        if (x2524 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/components/mux.h":37:25))
    auto x2835 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x2835 != Fp::invalid());
    if (x2835 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2836 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2836 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":20:41)
      auto x2837 = x602 * x82;
      {
        host_args.at(0) = x2837;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2838 = host_outs.at(0);
        auto x2839 = host_outs.at(1);
        auto x2840 = host_outs.at(2);
        auto x2841 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2838);
          reg = x2838;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2839);
          reg = x2839;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2840);
          reg = x2840;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2841);
          reg = x2841;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2842 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2842 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2843 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2843 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2844 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2845 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2845 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2837);
        reg = x2837;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2836);
        reg = x2836;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2842);
        reg = x2842;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2843);
        reg = x2843;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2844);
        reg = x2844;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2845);
        reg = x2845;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2846 = Fp(x2845.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2847 = x2846 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2847);
          reg = x2847;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2848 = Fp(x2845.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2849 = x2848 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2849);
          reg = x2849;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2850 = Fp(x2845.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2851 = x2850 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2851);
          reg = x2851;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2852 = Fp(x2845.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2853 = x2852 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2853);
          reg = x2853;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2854 = Fp(x2845.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2855 = x2854 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2855);
          reg = x2855;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2856 = Fp(x2845.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2856);
          reg = x2856;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2857 = Fp(x2844.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2858 = x2857 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2858);
          reg = x2858;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2859 = Fp(x2844.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2860 = x2859 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2860);
          reg = x2860;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2861 = Fp(x2844.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2862 = x2861 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2862);
          reg = x2862;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2863 = Fp(x2844.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2864 = x2863 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2864);
          reg = x2864;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2865 = Fp(x2844.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2865);
          reg = x2865;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2866 = Fp(x2843.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2867 = x2866 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2867);
          reg = x2867;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2868 = Fp(x2843.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2869 = x2868 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2869);
          reg = x2869;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2870 = Fp(x2843.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2871 = x2870 * x64;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2871);
          reg = x2871;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2872 = Fp(x2843.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2873 = x2872 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2873);
          reg = x2873;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2874 = Fp(x2843.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2874);
          reg = x2874;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2875 = Fp(x2842.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2876 = x2875 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2876);
          reg = x2876;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2877 = Fp(x2842.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2877);
          reg = x2877;
        }
      }
      // loc("Top/Mux/4/Mux/3/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2878 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2878 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2879 = x2878 * x61;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2880 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2880 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2881 = x2880 * x65;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2882 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2882 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2883 = x2882 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2884 = x2881 + x2883;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2885 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2885 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2886 = x2885 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2887 = x2884 + x2886;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2888 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2888 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2889 = x2887 + x2888;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2890 = x2879 + x2889;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2891 = x2890 * x98;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2892 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2892 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2893 = x2891 + x2892;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2894 = x2845 - x2893;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2894 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2895 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2895 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2896 = x2895 * x76;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2897 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2897 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2898 = x2897 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2899 = x2896 + x2898;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2900 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2900 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2901 = x2899 + x2900;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2902 = x2901 * x65;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2903 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2903 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2904 = x2903 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2905 = x2902 + x2904;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2906 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2906 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2907 = x2905 + x2906;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2908 = x2844 - x2907;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2908 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2909 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2909 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2910 = x2909 * x70;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2911 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2911 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2912 = x2911 * x84;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2913 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2913 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2914 = x2912 + x2913;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2915 = x2914 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2916 = x2910 + x2915;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2917 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2917 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2918 = x2917 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2919 = x2916 + x2918;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2920 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2920 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2921 = x2919 + x2920;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2922 = x2843 - x2921;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2922 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2923 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2923 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2924 = x2923 * x70;
      // loc("Top/Mux/4/Mux/3/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x2925 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2925 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2926 = x2924 + x2925;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2927 = x2842 - x2926;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2927 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2842;
        host_args.at(1) = x2843;
        host_args.at(2) = x2844;
        host_args.at(3) = x2845;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2928 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2929 = (x2928 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2929);
            reg = x2929;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2930 = x2928 - x101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2931 = (x2930 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2931);
            reg = x2931;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2932 = x2928 - x98;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2933 = (x2932 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2933);
            reg = x2933;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2934 = x2928 - x83;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2935 = (x2934 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2935);
            reg = x2935;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2936 = x2928 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2937 = (x2936 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2937);
            reg = x2937;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2938 = x2928 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2939 = (x2938 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2939);
            reg = x2939;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2940 = x2928 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2941 = (x2940 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2941);
            reg = x2941;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2942 = x2928 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2943 = (x2942 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2943);
            reg = x2943;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2944 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2944 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2945 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2945 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2946 = x2945 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2947 = x2944 + x2946;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2948 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x2948 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2949 = x2948 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2950 = x2947 + x2949;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2951 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x2951 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2952 = x2951 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2953 = x2950 + x2952;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2954 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x2954 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2955 = x2954 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2956 = x2953 + x2955;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2957 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x2957 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2958 = x2957 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2959 = x2956 + x2958;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2960 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2960 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2961 = x2960 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2962 = x2959 + x2961;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x2963 = x2962 - x2928;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x2963 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/3/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x2964 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x2964 != Fp::invalid());
        if (x2964 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2965 = x2885 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2966 = x2888 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2967 = x2965 + x2966;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2968 = x2892 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2969 = x2968 + x2901;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2970 = x2967 + x2969;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2971 = x2878 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2972 = x2880 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2973 = x2971 + x2972;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2974 = x2973 + x2882;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2975 = x2878 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2970);
            reg = x2970;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2974);
            reg = x2974;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2975);
            reg = x2975;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2975);
            reg = x2975;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x2976 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2976 != Fp::invalid());
        if (x2976 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2977 = x2885 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2978 = x2888 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2979 = x2977 + x2978;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2980 = x2892 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2981 = x2980 + x2901;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2982 = x2979 + x2981;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2983 = x2878 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2984 = x2880 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2985 = x2983 + x2984;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2986 = x2985 + x2882;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2987 = x2878 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2982);
            reg = x2982;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2986);
            reg = x2986;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2987);
            reg = x2987;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2987);
            reg = x2987;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x2988 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2988 != Fp::invalid());
        if (x2988 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2989 = x2885 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2990 = x2888 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2991 = x2989 + x2990;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2992 = x2892 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2993 = x2992 + x2901;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2994 = x2991 + x2993;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2995 = x2878 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2996 = x2880 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2997 = x2995 + x2996;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2998 = x2997 + x2882;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2999 = x2878 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2994);
            reg = x2994;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2998);
            reg = x2998;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2999);
            reg = x2999;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2999);
            reg = x2999;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3000 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3000 != Fp::invalid());
        if (x3000 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3001 = x2885 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3002 = x2888 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3003 = x3001 + x3002;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3004 = x2892 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3005 = x3004 + x2901;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3006 = x3003 + x3005;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3007 = x2878 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3008 = x2880 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3009 = x3007 + x3008;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3010 = x3009 + x2882;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3011 = x2878 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3006);
            reg = x3006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3010);
            reg = x3010;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3011);
            reg = x3011;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3011);
            reg = x3011;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3012 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3012 != Fp::invalid());
        if (x3012 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3013 = x2885 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3014 = x2888 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3015 = x3013 + x3014;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3016 = x2892 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3017 = x3016 + x2901;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3018 = x3015 + x3017;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3019 = x2878 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3020 = x2880 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3021 = x3019 + x3020;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3022 = x3021 + x2882;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3023 = x2878 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3018);
            reg = x3018;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3022);
            reg = x3022;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3023);
            reg = x3023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3023);
            reg = x3023;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3024 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3024 != Fp::invalid());
        if (x3024 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3025 = x2885 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3026 = x2888 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3027 = x3025 + x3026;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3028 = x2917 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3029 = x2920 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3030 = x3028 + x3029;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3031 = x3030 + x2923;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3032 = x3027 + x3031;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3033 = x2878 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3034 = x2880 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3035 = x3033 + x3034;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3036 = x3035 + x2882;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3037 = x2878 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3032);
            reg = x3032;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3036);
            reg = x3036;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3037);
            reg = x3037;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3037);
            reg = x3037;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3038 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3038 != Fp::invalid());
        if (x3038 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3039 = x2885 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3040 = x2888 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3041 = x3039 + x3040;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3042 = x2917 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3043 = x2920 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3044 = x3042 + x3043;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3045 = x3044 + x2923;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3046 = x3041 + x3045;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3047 = x2878 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3048 = x2880 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3049 = x3047 + x3048;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3050 = x3049 + x2882;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3051 = x2878 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3046);
            reg = x3046;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3050);
            reg = x3050;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3051);
            reg = x3051;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3051);
            reg = x3051;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3052 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x3052 != Fp::invalid());
        if (x3052 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3053 = x2885 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3054 = x2888 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3055 = x3053 + x3054;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3056 = x2917 * x76;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3057 = x2920 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3058 = x3056 + x3057;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3059 = x3058 + x2923;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3060 = x3055 + x3059;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3061 = x2878 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3062 = x2880 * x98;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3063 = x3061 + x3062;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3064 = x3063 + x2882;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3065 = x2878 * x97;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3060);
            reg = x3060;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3064);
            reg = x3064;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3065);
            reg = x3065;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3065);
            reg = x3065;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3066 = x2903 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3067 = x2906 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3068 = x3066 + x3067;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3069 = x3068 + x2909;
      // loc("cirgen/circuit/rv32im/memio.cpp":38:39)
      auto x3070 = x3069 + x54;
      {
        host_args.at(0) = x3070;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3071 = host_outs.at(0);
        auto x3072 = host_outs.at(1);
        auto x3073 = host_outs.at(2);
        auto x3074 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3071);
          reg = x3071;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3072);
          reg = x3072;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3073);
          reg = x3073;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3074);
          reg = x3074;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3075 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3075 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3076 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3076 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3077 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3077 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3078 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3078 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3070);
        reg = x3070;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2836);
        reg = x2836;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3075);
        reg = x3075;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3076);
        reg = x3076;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3077);
        reg = x3077;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3078);
        reg = x3078;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3079 = x2892 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3080 = x3079 + x2901;
      // loc("cirgen/circuit/rv32im/memio.cpp":39:39)
      auto x3081 = x3080 + x54;
      {
        host_args.at(0) = x3081;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3082 = host_outs.at(0);
        auto x3083 = host_outs.at(1);
        auto x3084 = host_outs.at(2);
        auto x3085 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3082);
          reg = x3082;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3083);
          reg = x3083;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3084);
          reg = x3084;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3085);
          reg = x3085;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3086 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3086 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3087 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3087 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3088 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3088 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3089 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3089 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3081);
        reg = x3081;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2836);
        reg = x2836;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3086);
        reg = x3086;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3087);
        reg = x3087;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3088);
        reg = x3088;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3089);
        reg = x3089;
      }
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3090 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3090 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3091 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3091 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3092 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3092 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3093 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3093 != Fp::invalid());
      host_args.at(0) = x3090;
      host_args.at(1) = x3091;
      host_args.at(2) = x3092;
      host_args.at(3) = x3093;
      host_args.at(4) = x3069;
      host_args.at(5) = x3075;
      host_args.at(6) = x3076;
      host_args.at(7) = x3077;
      host_args.at(8) = x3078;
      host_args.at(9) = x3080;
      host_args.at(10) = x3086;
      host_args.at(11) = x3087;
      host_args.at(12) = x3088;
      host_args.at(13) = x3089;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3094 = x2917 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3095 = x2920 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3096 = x3094 + x3095;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3097 = x3096 + x2923;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3098 = (x3097 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3098);
          reg = x3098;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3099 = inv(x3097);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3099);
          reg = x3099;
        }
      }
      // loc("Top/Mux/4/Mux/3/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3100 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3100 != Fp::invalid());
      if (x3100 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x3097 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x3101 = x101 - x3100;
      if (x3101 != 0) {
        // loc("Top/Mux/4/Mux/3/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3102 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3102 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x3103 = x3097 * x3102;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x3104 = x3103 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x3104 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      {
        // loc("cirgen/circuit/rv32im/memio.cpp":48:17)
        auto x3105 = x3075 + x3090;
        // loc("cirgen/circuit/rv32im/memio.cpp":49:18)
        auto x3106 = Fp(x3105.asUInt32() & x83.asUInt32());
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3107 = (x3106 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3107);
            reg = x3107;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3108 = x3106 - x101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3109 = (x3108 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3109);
            reg = x3109;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3110 = x3106 - x98;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3111 = (x3110 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3111);
            reg = x3111;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3112 = x3106 - x83;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3113 = (x3112 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3113);
            reg = x3113;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3114 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3114 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3115 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3115 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3116 = x3115 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3117 = x3114 + x3116;
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3118 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3118 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3119 = x3118 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3120 = x3117 + x3119;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x3121 = x3120 - x3106;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x3121 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
        // loc("cirgen/circuit/rv32im/memio.cpp":50:20)
        auto x3122 = Fp(x3105.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":50:19)
        auto x3123 = x3122 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x3124 = Fp(x3123.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3124);
            reg = x3124;
          }
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3125 = x3105 - x3120;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3126 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x3126 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":51:33)
        auto x3127 = x3126 * x96;
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3128 = x3125 - x3127;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3128);
          reg = x3128;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":53:22)
        auto x3129 = x3128 * x82;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3129);
          reg = x3129;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3130 = x3076 + x3091;
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3131 = x3130 + x3126;
        // loc("cirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3132 = Fp(x3131.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3132);
          reg = x3132;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":56:25)
        auto x3133 = Fp(x3131.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":56:24)
        auto x3134 = x3133 * x95;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3134);
          reg = x3134;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3135 = x3077 + x3092;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3136 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3136 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3137 = x3135 + x3136;
        // loc("cirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3138 = Fp(x3137.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3138);
          reg = x3138;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":59:25)
        auto x3139 = Fp(x3137.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":59:24)
        auto x3140 = x3139 * x95;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3140);
          reg = x3140;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3141 = x3078 + x3093;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3142 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3142 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3143 = x3141 + x3142;
        // loc("cirgen/circuit/rv32im/memio.cpp":61:23)
        auto x3144 = Fp(x3143.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3144);
          reg = x3144;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":62:24)
        auto x3145 = Fp(x3143.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":62:23)
        auto x3146 = x3145 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3146);
          reg = x3146;
        }
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x3147 = Fp(x3140.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3147);
            reg = x3147;
          }
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3148 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3148 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3149 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3149 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":66:16)
      auto x3150 = x3149 * x84;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      auto x3151 = x3148 - x3150;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      if (x3151 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:66");
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3152 = x3075 + x3090;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3153 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3153 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3154 = x3153 * x96;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3155 = x3154 + x3148;
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3156 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3156 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3157 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3157 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x3158 = x3157 * x98;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x3159 = x3156 + x3158;
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3160 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3160 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x3161 = x3160 * x83;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x3162 = x3159 + x3161;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3163 = x3155 + x3162;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3164 = x3152 - x3163;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      if (x3164 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:68");
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3165 = x3076 + x3091;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3166 = x3165 + x3153;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3167 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3167 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3168 = x3167 * x96;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3169 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3169 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3170 = x3168 + x3169;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3171 = x3166 - x3170;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      if (x3171 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:70");
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3172 = x3077 + x3092;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3173 = x3172 + x3167;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3174 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3175 = x3174 * x96;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3176 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3176 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3177 = x3175 + x3176;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3178 = x3173 - x3177;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      if (x3178 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:72");
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3179 = x3078 + x3093;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3180 = x3179 + x3174;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3181 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3181 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3182 = x3181 * x96;
      // loc("Top/Mux/4/Mux/3/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3183 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3183 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:63)
      auto x3184 = x3183 * x84;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3185 = x3182 + x3184;
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3186 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3186 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3187 = x3185 + x3186;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3188 = x3180 - x3187;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      if (x3188 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:74");
      // loc("cirgen/circuit/rv32im/memio.cpp":77:15)
      auto x3189 = x101 - x3183;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3190 = x3183 * x3189;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:28)
      auto x3191 = x98 - x3183;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3192 = x3190 * x3191;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      if (x3192 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:77");
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3193 = x3183 * x85;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:41)
      auto x3194 = x3186 * x43;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3195 = x3193 + x3194;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:68)
      auto x3196 = x3176 * x42;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3197 = x3195 + x3196;
      // loc("cirgen/circuit/rv32im/memio.cpp":81:14)
      auto x3198 = x3169 * x61;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3199 = x3197 + x3198;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3200 = x3199 + x3149;
      {
        host_args.at(0) = x3200;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3201 = host_outs.at(0);
        auto x3202 = host_outs.at(1);
        auto x3203 = host_outs.at(2);
        auto x3204 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3201);
          reg = x3201;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3202);
          reg = x3202;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3203);
          reg = x3203;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3204);
          reg = x3204;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3205 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x3205 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3206 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3206 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3207 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3207 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3208 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3208 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3200);
        reg = x3200;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2836);
        reg = x2836;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3205);
        reg = x3205;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3206);
        reg = x3206;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3207);
        reg = x3207;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3208);
        reg = x3208;
      }
      host_args.at(0) = x3200;
      host_args.at(1) = x3162;
      host_args.at(2) = x3205;
      host_args.at(3) = x3206;
      host_args.at(4) = x3207;
      host_args.at(5) = x3208;
      host(ctx, "log", "  Addr = 0x%x, lowBits = %u, loaded = %w", host_args.data(), 6, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/memio.cpp":85:17)
      auto x3209 = x602 + x84;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3210 = x3209 + x84;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3211 = Fp(x3210.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3211);
          reg = x3211;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3212 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3212 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3213 = x3210 - x3212;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3214 = x3213 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3215 = Fp(x3214.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3215);
          reg = x3215;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3216 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3216 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3217 = x3214 - x3216;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3218 = x3217 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3219 = Fp(x3218.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3219);
          reg = x3219;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3220 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3220 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3221 = x3218 - x3220;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3222 = x3221 * x95;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3223 = Fp(x3222.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3223);
          reg = x3223;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3224 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3224 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3225 = x3222 - x3224;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x3226 = x3225 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3226);
        reg = x3226;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3227 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3227 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3228 = x101 - x3227;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x3229 = x3227 * x3228;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3229);
        reg = x3229;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3230 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x3230 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x3231 = x98 - x3227;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x3232 = x3230 * x3231;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x3232 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/memio.cpp":86:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x81);
        reg = x81;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
      auto x3233 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3233 != Fp::invalid());
      if (x3233 != 0) {
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3234 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3234 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3235 = x3234 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3235 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3236 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3236 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3237 = x3236 + x3157;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3238 = x3237 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3238 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3239 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3239 != Fp::invalid());
        if (x3239 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3240 = Fp(x3205.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3240);
              reg = x3240;
            }
          }
        }
        if (x3156 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3241 = Fp(x3206.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3241);
              reg = x3241;
            }
          }
        }
        if (x3157 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3242 = Fp(x3207.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3242);
              reg = x3242;
            }
          }
        }
        if (x3160 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3243 = Fp(x3208.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3243);
              reg = x3243;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3244 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3244 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3245 = Fp(x3244.asUInt32() & x70.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3246 = x3245 * x69;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3246);
            reg = x3246;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3247 = Fp(x3244.asUInt32() & x58.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3248 = x3247 * x98;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3248);
            reg = x3248;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3249 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3249 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3250 = x101 - x3249;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3251 = x3249 * x3250;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3251 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3252 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3252 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3253 = x3249 * x70;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3254 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3254 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3255 = x3254 * x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3256 = x3253 + x3255;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3257 = x3252 - x3256;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3257 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3258 = x3249 * x97;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3259 = x3239 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3260 = x3156 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3261 = x3259 + x3260;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3262 = x3157 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3263 = x3261 + x3262;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3264 = x3160 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3265 = x3263 + x3264;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3265);
          reg = x3265;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3258);
          reg = x3258;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3258);
          reg = x3258;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3258);
          reg = x3258;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3266 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3266 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3267 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3267 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3268 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3268 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3269 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3269 != Fp::invalid());
        host_args.at(0) = x3258;
        host_args.at(1) = x3266;
        host_args.at(2) = x3267;
        host_args.at(3) = x3268;
        host_args.at(4) = x3269;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3101 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3270 = x3097 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3266);
            reg = x3266;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3267);
            reg = x3267;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3268);
            reg = x3268;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3269);
            reg = x3269;
          }
          {
            host_args.at(0) = x3270;
            host_args.at(1) = x3266;
            host_args.at(2) = x3267;
            host_args.at(3) = x3268;
            host_args.at(4) = x3269;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3271 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3271 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3272 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3272 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3273 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3273 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3274 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3274 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3270);
            reg = x3270;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2836);
            reg = x2836;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3271);
            reg = x3271;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3272);
            reg = x3272;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3273);
            reg = x3273;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3274);
            reg = x3274;
          }
        }
        if (x3100 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3275 = x2925 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3275 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x2914 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3276 = x2885 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3277 = x2888 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3278 = x3276 + x3277;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3279 = x3278 + x3080;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3280 = x2878 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3281 = x2880 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3282 = x3280 + x3281;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3283 = x3282 + x2882;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3284 = x2878 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3279);
          reg = x3279;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3283);
          reg = x3283;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3284);
          reg = x3284;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3284);
          reg = x3284;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
      auto x3285 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3285 != Fp::invalid());
      if (x3285 != 0) {
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3286 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3286 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3287 = x3286 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3287 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3288 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3288 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3289 = x3288 + x3157;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3290 = x3289 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3290 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3291 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3291 != Fp::invalid());
        if (x3291 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3292 = Fp(x3206.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3292);
              reg = x3292;
            }
          }
        }
        if (x3157 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3293 = Fp(x3208.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3293);
              reg = x3293;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3294 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3294 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3295 = Fp(x3294.asUInt32() & x70.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3296 = x3295 * x69;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3296);
            reg = x3296;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3297 = Fp(x3294.asUInt32() & x58.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3298 = x3297 * x98;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3298);
            reg = x3298;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3299 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3299 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3300 = x101 - x3299;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3301 = x3299 * x3300;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3301 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3302 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3302 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3303 = x3299 * x70;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3304 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3304 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3305 = x3304 * x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3306 = x3303 + x3305;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3307 = x3302 - x3306;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3307 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3308 = x3299 * x97;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3309 = x3291 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3310 = x3157 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3311 = x3309 + x3310;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3312 = x3291 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3313 = x3157 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3314 = x3312 + x3313;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3311);
          reg = x3311;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3314);
          reg = x3314;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3308);
          reg = x3308;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3308);
          reg = x3308;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3315 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3315 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3316 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3316 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3317 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3317 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3318 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3318 != Fp::invalid());
        host_args.at(0) = x3308;
        host_args.at(1) = x3315;
        host_args.at(2) = x3316;
        host_args.at(3) = x3317;
        host_args.at(4) = x3318;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3101 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3319 = x3097 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3315);
            reg = x3315;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3316);
            reg = x3316;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3317);
            reg = x3317;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3318);
            reg = x3318;
          }
          {
            host_args.at(0) = x3319;
            host_args.at(1) = x3315;
            host_args.at(2) = x3316;
            host_args.at(3) = x3317;
            host_args.at(4) = x3318;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3320 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3320 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3321 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3321 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3322 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3322 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3323 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3323 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3319);
            reg = x3319;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2836);
            reg = x2836;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3320);
            reg = x3320;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3321);
            reg = x3321;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3322);
            reg = x3322;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3323);
            reg = x3323;
          }
        }
        if (x3100 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3324 = x2925 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3324 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3325 = x2914 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3325 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3326 = x2885 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3327 = x2888 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3328 = x3326 + x3327;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3329 = x3328 + x3080;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3330 = x2878 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3331 = x2880 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3332 = x3330 + x3331;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3333 = x3332 + x2882;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3334 = x2878 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3329);
          reg = x3329;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3333);
          reg = x3333;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3334);
          reg = x3334;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3334);
          reg = x3334;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
      auto x3335 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3335 != Fp::invalid());
      if (x3335 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3336 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3336 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3337 = x3336 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3337 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3338 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3338 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3339 = x3338 + x3157;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3340 = x3339 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3340 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3341 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3341 != Fp::invalid());
        if (x3341 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3342 = Fp(x3208.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3342);
              reg = x3342;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3343 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3343 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3344 = Fp(x3343.asUInt32() & x70.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3345 = x3344 * x69;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3345);
            reg = x3345;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3346 = Fp(x3343.asUInt32() & x58.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3347 = x3346 * x98;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3347);
            reg = x3347;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3348 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3348 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3349 = x101 - x3348;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3350 = x3348 * x3349;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3350 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3351 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3351 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3352 = x3348 * x70;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3353 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3353 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3354 = x3353 * x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3355 = x3352 + x3354;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3356 = x3351 - x3355;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3356 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3357 = x3341 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3358 = x3341 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3359 = x3341 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3360 = x3341 * x3208;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3357);
          reg = x3357;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3358);
          reg = x3358;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3359);
          reg = x3359;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3360);
          reg = x3360;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3361 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3361 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3362 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3362 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3363 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3363 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3364 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3364 != Fp::invalid());
        host_args.at(0) = x100;
        host_args.at(1) = x3361;
        host_args.at(2) = x3362;
        host_args.at(3) = x3363;
        host_args.at(4) = x3364;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3101 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3365 = x3097 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3361);
            reg = x3361;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3362);
            reg = x3362;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3363);
            reg = x3363;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3364);
            reg = x3364;
          }
          {
            host_args.at(0) = x3365;
            host_args.at(1) = x3361;
            host_args.at(2) = x3362;
            host_args.at(3) = x3363;
            host_args.at(4) = x3364;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3366 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3366 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3367 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3367 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3368 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3368 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3369 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3369 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3365);
            reg = x3365;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2836);
            reg = x2836;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3366);
            reg = x3366;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3367);
            reg = x3367;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3368);
            reg = x3368;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3369);
            reg = x3369;
          }
        }
        if (x3100 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3370 = x2925 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3370 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3371 = x2914 - x98;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3371 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3372 = x2885 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3373 = x2888 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3374 = x3372 + x3373;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3375 = x3374 + x3080;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3376 = x2878 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3377 = x2880 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3378 = x3376 + x3377;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3379 = x3378 + x2882;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3380 = x2878 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3375);
          reg = x3375;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3379);
          reg = x3379;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3380);
          reg = x3380;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3380);
          reg = x3380;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
      auto x3381 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3381 != Fp::invalid());
      if (x3381 != 0) {
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3382 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3382 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3383 = x3382 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3383 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3384 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3384 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3385 = x3384 + x3157;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3386 = x3385 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3386 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3387 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3387 != Fp::invalid());
        if (x3387 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3388 = Fp(x3205.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3388);
              reg = x3388;
            }
          }
        }
        if (x3156 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3389 = Fp(x3206.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3389);
              reg = x3389;
            }
          }
        }
        if (x3157 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3390 = Fp(x3207.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3390);
              reg = x3390;
            }
          }
        }
        if (x3160 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3391 = Fp(x3208.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3391);
              reg = x3391;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3392 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3392 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3393 = Fp(x3392.asUInt32() & x70.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3394 = x3393 * x69;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3394);
            reg = x3394;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3395 = Fp(x3392.asUInt32() & x58.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3396 = x3395 * x98;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3396);
            reg = x3396;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3397 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3397 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3398 = x101 - x3397;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3399 = x3397 * x3398;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3399 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3400 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3400 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3401 = x3397 * x70;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3402 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3402 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3403 = x3402 * x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3404 = x3401 + x3403;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3405 = x3400 - x3404;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3405 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3406 = x3387 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3407 = x3156 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3408 = x3406 + x3407;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3409 = x3157 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3410 = x3408 + x3409;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3411 = x3160 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3412 = x3410 + x3411;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3412);
          reg = x3412;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3413 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3413 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3414 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3414 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3415 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3415 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3416 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3416 != Fp::invalid());
        host_args.at(0) = x100;
        host_args.at(1) = x3413;
        host_args.at(2) = x3414;
        host_args.at(3) = x3415;
        host_args.at(4) = x3416;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3101 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3417 = x3097 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3413);
            reg = x3413;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3414);
            reg = x3414;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3415);
            reg = x3415;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3416);
            reg = x3416;
          }
          {
            host_args.at(0) = x3417;
            host_args.at(1) = x3413;
            host_args.at(2) = x3414;
            host_args.at(3) = x3415;
            host_args.at(4) = x3416;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3418 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3418 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3419 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3419 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3420 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3420 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3421 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3421 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3417);
            reg = x3417;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2836);
            reg = x2836;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3418);
            reg = x3418;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3419);
            reg = x3419;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3420);
            reg = x3420;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3421);
            reg = x3421;
          }
        }
        if (x3100 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3422 = x2925 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3422 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3423 = x2914 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3423 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3424 = x2885 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3425 = x2888 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3426 = x3424 + x3425;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3427 = x3426 + x3080;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3428 = x2878 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3429 = x2880 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3430 = x3428 + x3429;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3431 = x3430 + x2882;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3432 = x2878 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3427);
          reg = x3427;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3431);
          reg = x3431;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3432);
          reg = x3432;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3432);
          reg = x3432;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
      auto x3433 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3433 != Fp::invalid());
      if (x3433 != 0) {
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3434 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3434 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3435 = x3434 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3435 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3436 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3436 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3437 = x3436 + x3157;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3438 = x3437 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3438 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3439 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3439 != Fp::invalid());
        if (x3439 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3440 = Fp(x3206.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3440);
              reg = x3440;
            }
          }
        }
        if (x3157 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3441 = Fp(x3208.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3441);
              reg = x3441;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3442 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3442 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3443 = Fp(x3442.asUInt32() & x70.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3444 = x3443 * x69;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3444);
            reg = x3444;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3445 = Fp(x3442.asUInt32() & x58.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3446 = x3445 * x98;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3446);
            reg = x3446;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3447 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3447 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3448 = x101 - x3447;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3449 = x3447 * x3448;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3449 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3450 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3450 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3451 = x3447 * x70;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3452 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3452 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3453 = x3452 * x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3454 = x3451 + x3453;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3455 = x3450 - x3454;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3455 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3456 = x3439 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3457 = x3157 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3458 = x3456 + x3457;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3459 = x3439 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3460 = x3157 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3461 = x3459 + x3460;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3458);
          reg = x3458;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3461);
          reg = x3461;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3462 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3462 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3463 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3463 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3464 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3464 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3465 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3465 != Fp::invalid());
        host_args.at(0) = x100;
        host_args.at(1) = x3462;
        host_args.at(2) = x3463;
        host_args.at(3) = x3464;
        host_args.at(4) = x3465;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3101 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3466 = x3097 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3462);
            reg = x3462;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3463);
            reg = x3463;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3464);
            reg = x3464;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3465);
            reg = x3465;
          }
          {
            host_args.at(0) = x3466;
            host_args.at(1) = x3462;
            host_args.at(2) = x3463;
            host_args.at(3) = x3464;
            host_args.at(4) = x3465;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3467 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3467 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3468 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3468 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3469 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3469 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3470 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3470 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3466);
            reg = x3466;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2836);
            reg = x2836;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3467);
            reg = x3467;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3468);
            reg = x3468;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3469);
            reg = x3469;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3470);
            reg = x3470;
          }
        }
        if (x3100 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3471 = x2925 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3471 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3472 = x2914 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3472 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3473 = x2885 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3474 = x2888 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3475 = x3473 + x3474;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3476 = x3475 + x3080;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3477 = x2878 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3478 = x2880 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3479 = x3477 + x3478;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3480 = x3479 + x2882;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3481 = x2878 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3476);
          reg = x3476;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3480);
          reg = x3480;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3481);
          reg = x3481;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3481);
          reg = x3481;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
      auto x3482 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3482 != Fp::invalid());
      if (x3482 != 0) {
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3483 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3483 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3484 = x3483 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3484 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3485 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3485 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3486 = x3485 + x3157;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3487 = x3486 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3487 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3488 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3488 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3489 = x3488 * x3086;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3490 = x101 - x3488;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3491 = x3490 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3492 = x3489 + x3491;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3493 = x3156 * x3086;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3494 = x101 - x3156;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3495 = x3494 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3496 = x3493 + x3495;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3497 = x3157 * x3086;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3498 = x101 - x3157;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3499 = x3498 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3500 = x3497 + x3499;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3501 = x3160 * x3086;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3502 = x101 - x3160;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3503 = x3502 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3504 = x3501 + x3503;
        host_args.at(0) = x3492;
        host_args.at(1) = x3496;
        host_args.at(2) = x3500;
        host_args.at(3) = x3504;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3492);
          reg = x3492;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3496);
          reg = x3496;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3500);
          reg = x3500;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3504);
          reg = x3504;
        }
        {
          host_args.at(0) = x3200;
          host_args.at(1) = x3492;
          host_args.at(2) = x3496;
          host_args.at(3) = x3500;
          host_args.at(4) = x3504;
          host_args.at(5) = x100;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3505 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3505 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3506 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3506 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3507 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3507 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3508 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3508 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3200);
          reg = x3200;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2836);
          reg = x2836;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3505);
          reg = x3505;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3506);
          reg = x3506;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3507);
          reg = x3507;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3508);
          reg = x3508;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3509 = x2925 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3509 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x2914 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3510 = x2885 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3511 = x2888 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3512 = x3510 + x3511;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3513 = x3512 + x3097;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3514 = x2878 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3515 = x2880 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3516 = x3514 + x3515;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3517 = x3516 + x2882;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3518 = x2878 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3513);
          reg = x3513;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3517);
          reg = x3517;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3518);
          reg = x3518;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3518);
          reg = x3518;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
      auto x3519 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3519 != Fp::invalid());
      if (x3519 != 0) {
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3520 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3520 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3521 = x3520 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3521 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3522 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3522 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3523 = x3522 + x3157;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3524 = x3523 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3524 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3525 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3525 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3526 = x3525 * x3086;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3527 = x101 - x3525;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3528 = x3527 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3529 = x3526 + x3528;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3530 = x3157 * x3086;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3531 = x101 - x3157;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3532 = x3531 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3533 = x3530 + x3532;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3534 = x3525 * x3087;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3535 = x3527 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3536 = x3534 + x3535;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3537 = x3157 * x3087;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3538 = x3531 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3539 = x3537 + x3538;
        host_args.at(0) = x3529;
        host_args.at(1) = x3536;
        host_args.at(2) = x3533;
        host_args.at(3) = x3539;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3529);
          reg = x3529;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3536);
          reg = x3536;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3533);
          reg = x3533;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3539);
          reg = x3539;
        }
        {
          host_args.at(0) = x3200;
          host_args.at(1) = x3529;
          host_args.at(2) = x3536;
          host_args.at(3) = x3533;
          host_args.at(4) = x3539;
          host_args.at(5) = x100;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3540 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3540 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3541 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3541 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3542 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3543 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3543 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3200);
          reg = x3200;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2836);
          reg = x2836;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3540);
          reg = x3540;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3541);
          reg = x3541;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3542);
          reg = x3542;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3543);
          reg = x3543;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3544 = x2925 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3544 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3545 = x2914 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3545 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3546 = x2885 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3547 = x2888 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3548 = x3546 + x3547;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3549 = x3548 + x3097;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3550 = x2878 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3551 = x2880 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3552 = x3550 + x3551;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3553 = x3552 + x2882;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3554 = x2878 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3549);
          reg = x3549;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3553);
          reg = x3553;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3554);
          reg = x3554;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3554);
          reg = x3554;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
      auto x3555 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3555 != Fp::invalid());
      if (x3555 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3556 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3556 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3557 = x3556 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3557 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x100 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3558 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3558 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3559 = x3558 + x3157;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3560 = x3559 - x101;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3560 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3561 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3561 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3562 = x3561 * x3086;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3563 = x101 - x3561;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3564 = x3563 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3565 = x3562 + x3564;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3566 = x3561 * x3087;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3567 = x3563 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3568 = x3566 + x3567;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3569 = x3561 * x3088;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3570 = x3563 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3571 = x3569 + x3570;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3572 = x3561 * x3089;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3573 = x3563 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3574 = x3572 + x3573;
        host_args.at(0) = x3565;
        host_args.at(1) = x3568;
        host_args.at(2) = x3571;
        host_args.at(3) = x3574;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3565);
          reg = x3565;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3568);
          reg = x3568;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3571);
          reg = x3571;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3574);
          reg = x3574;
        }
        {
          host_args.at(0) = x3200;
          host_args.at(1) = x3565;
          host_args.at(2) = x3568;
          host_args.at(3) = x3571;
          host_args.at(4) = x3574;
          host_args.at(5) = x100;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3575 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3575 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3576 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3576 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3577 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3577 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3578 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3578 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3200);
          reg = x3200;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2836);
          reg = x2836;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3575);
          reg = x3575;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3576);
          reg = x3576;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3577);
          reg = x3577;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3578);
          reg = x3578;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3579 = x2925 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3579 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3580 = x2914 - x98;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3580 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3581 = x2885 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3582 = x2888 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3583 = x3581 + x3582;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3584 = x3583 + x3097;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3585 = x2878 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3586 = x2880 * x98;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3587 = x3585 + x3586;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3588 = x3587 + x2882;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3589 = x2878 * x97;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3584);
          reg = x3584;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3588);
          reg = x3588;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3589);
          reg = x3589;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3589);
          reg = x3589;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/components/mux.h":37:25))
    auto x3590 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x3590 != Fp::invalid());
    if (x3590 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3591 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x3591 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":20:41)
      auto x3592 = x602 * x82;
      {
        host_args.at(0) = x3592;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3593 = host_outs.at(0);
        auto x3594 = host_outs.at(1);
        auto x3595 = host_outs.at(2);
        auto x3596 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3593);
          reg = x3593;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3594);
          reg = x3594;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3595);
          reg = x3595;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3596);
          reg = x3596;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3597 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x3597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3598 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x3598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3599 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x3599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3600 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x3600 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3592);
        reg = x3592;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3591);
        reg = x3591;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3597);
        reg = x3597;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3598);
        reg = x3598;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3599);
        reg = x3599;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3600);
        reg = x3600;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3601 = Fp(x3600.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3602 = x3601 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3602);
          reg = x3602;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3603 = Fp(x3600.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3604 = x3603 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3604);
          reg = x3604;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3605 = Fp(x3600.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3606 = x3605 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3606);
          reg = x3606;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3607 = Fp(x3600.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3608 = x3607 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3608);
          reg = x3608;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3609 = Fp(x3600.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3610 = x3609 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3610);
          reg = x3610;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3611 = Fp(x3600.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3611);
          reg = x3611;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3612 = Fp(x3599.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3613 = x3612 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3613);
          reg = x3613;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3614 = Fp(x3599.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3615 = x3614 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3615);
          reg = x3615;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3616 = Fp(x3599.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3617 = x3616 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3617);
          reg = x3617;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3618 = Fp(x3599.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3619 = x3618 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3619);
          reg = x3619;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3620 = Fp(x3599.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3620);
          reg = x3620;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3621 = Fp(x3598.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3622 = x3621 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3622);
          reg = x3622;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3623 = Fp(x3598.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3624 = x3623 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3624);
          reg = x3624;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3625 = Fp(x3598.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3626 = x3625 * x64;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3626);
          reg = x3626;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3627 = Fp(x3598.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3628 = x3627 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3628);
          reg = x3628;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3629 = Fp(x3598.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3629);
          reg = x3629;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3630 = Fp(x3597.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3631 = x3630 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3631);
          reg = x3631;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3632 = Fp(x3597.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3632);
          reg = x3632;
        }
      }
      // loc("Top/Mux/4/Mux/4/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3633 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x3633 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3634 = x3633 * x61;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3635 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3635 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3636 = x3635 * x65;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3637 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x3637 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3638 = x3637 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3639 = x3636 + x3638;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3640 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x3640 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3641 = x3640 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3642 = x3639 + x3641;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3643 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3643 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3644 = x3642 + x3643;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3645 = x3634 + x3644;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3646 = x3645 * x98;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3647 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x3647 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3648 = x3646 + x3647;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3649 = x3600 - x3648;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3649 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3650 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x3650 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3651 = x3650 * x76;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3652 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3652 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3653 = x3652 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3654 = x3651 + x3653;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3655 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x3655 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3656 = x3654 + x3655;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3657 = x3656 * x65;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3658 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3658 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3659 = x3658 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3660 = x3657 + x3659;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3661 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3661 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3662 = x3660 + x3661;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3663 = x3599 - x3662;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3663 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3664 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x3664 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3665 = x3664 * x70;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3666 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x3666 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3667 = x3666 * x84;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3668 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3668 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3669 = x3667 + x3668;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3670 = x3669 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3671 = x3665 + x3670;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3672 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x3672 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3673 = x3672 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3674 = x3671 + x3673;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3675 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3675 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3676 = x3674 + x3675;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3677 = x3598 - x3676;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3677 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3678 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x3678 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3679 = x3678 * x70;
      // loc("Top/Mux/4/Mux/4/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3680 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3680 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3681 = x3679 + x3680;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3682 = x3597 - x3681;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3682 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3597;
        host_args.at(1) = x3598;
        host_args.at(2) = x3599;
        host_args.at(3) = x3600;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3683 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3684 = (x3683 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3684);
            reg = x3684;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3685 = x3683 - x101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3686 = (x3685 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3686);
            reg = x3686;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3687 = x3683 - x98;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3688 = (x3687 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3688);
            reg = x3688;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3689 = x3683 - x83;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3690 = (x3689 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3690);
            reg = x3690;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3691 = x3683 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3692 = (x3691 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3692);
            reg = x3692;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3693 = x3683 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3694 = (x3693 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3694);
            reg = x3694;
          }
        }
        // loc("Top/Mux/4/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3695 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x3695 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3696 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x3696 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3697 = x3696 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3698 = x3695 + x3697;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3699 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x3699 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3700 = x3699 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3701 = x3698 + x3700;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3702 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x3702 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3703 = x3702 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3704 = x3701 + x3703;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3705 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x3705 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3706 = x3705 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3707 = x3704 + x3706;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x3708 = x3707 - x3683;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x3708 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      host_args.at(0) = x100;
      host_args.at(1) = x100;
      host_args.at(2) = x100;
      host_args.at(3) = x100;
      host_args.at(4) = x100;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/4/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":102:49))
      auto x3709 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3709 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":103:49))
      auto x3710 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3710 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
      auto x3711 = x3709 + x3710;
      // loc("Top/Mux/4/Mux/4/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":104:49))
      auto x3712 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3712 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
      auto x3713 = x3711 + x3712;
      // loc("Top/Mux/4/Mux/4/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":105:49))
      auto x3714 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3714 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":106:49))
      auto x3715 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3715 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
      auto x3716 = x3714 + x3715;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3717 = x3658 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3718 = x3661 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3719 = x3717 + x3718;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3720 = x3719 + x3664;
      // loc("cirgen/circuit/rv32im/multiply.cpp":54:39)
      auto x3721 = x3720 + x54;
      {
        host_args.at(0) = x3721;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3722 = host_outs.at(0);
        auto x3723 = host_outs.at(1);
        auto x3724 = host_outs.at(2);
        auto x3725 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3722);
          reg = x3722;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3723);
          reg = x3723;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3724);
          reg = x3724;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3725);
          reg = x3725;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3726 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3726 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3727 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3728 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3729 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3729 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3721);
        reg = x3721;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3591);
        reg = x3591;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3726);
        reg = x3726;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3727);
        reg = x3727;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3728);
        reg = x3728;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3729);
        reg = x3729;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3730 = x3647 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3731 = x3730 + x3656;
      // loc("cirgen/circuit/rv32im/multiply.cpp":55:39)
      auto x3732 = x3731 + x54;
      {
        host_args.at(0) = x3732;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3733 = host_outs.at(0);
        auto x3734 = host_outs.at(1);
        auto x3735 = host_outs.at(2);
        auto x3736 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3733);
          reg = x3733;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3734);
          reg = x3734;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3735);
          reg = x3735;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3736);
          reg = x3736;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3737 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3738 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3739 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3740 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3740 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3732);
        reg = x3732;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3591);
        reg = x3591;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3737);
        reg = x3737;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3738);
        reg = x3738;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3739);
        reg = x3739;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3740);
        reg = x3740;
      }
      host_args.at(0) = x3720;
      host_args.at(1) = x3726;
      host_args.at(2) = x3727;
      host_args.at(3) = x3728;
      host_args.at(4) = x3729;
      host_args.at(5) = x3731;
      host_args.at(6) = x3737;
      host_args.at(7) = x3738;
      host_args.at(8) = x3739;
      host_args.at(9) = x3740;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3741 = x3640 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x3742 = x3643 * x67;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3743 = x3741 + x3742;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3744 = x3743 + x3731;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3745 = x3715 * x3744;
      // loc("cirgen/circuit/rv32im/multiply.cpp":61:35)
      auto x3746 = x101 - x3715;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3747 = x3746 * x3737;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3748 = x3745 + x3747;
      {
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:16)
        auto x3749 = Fp(x3748.asUInt32() & x40.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:15)
        auto x3750 = x3749 * x60;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3750);
          reg = x3750;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:16)
        auto x3751 = Fp(x3748.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:15)
        auto x3752 = x3751 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3752);
          reg = x3752;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":65:14)
        auto x3753 = Fp(x3748.asUInt32() & x39.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3754 = Fp(x3753.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3754);
            reg = x3754;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3755 = Fp(x3753.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3756 = x3755 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3756);
            reg = x3756;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3757 = Fp(x3753.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3758 = x3757 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3758);
            reg = x3758;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3759 = Fp(x3753.asUInt32() & x76.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3760 = x3759 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3760);
            reg = x3760;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3761 = Fp(x3753.asUInt32() & x65.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3762 = x3761 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3762);
            reg = x3762;
          }
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3763 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x3763 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x3764 = x3763 * x38;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x3765 = x3764 + x101;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3766 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x3766 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x3767 = x3766 * x83;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x3768 = x3767 + x101;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3769 = x3765 * x3768;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3770 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x3770 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x3771 = x3770 + x101;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3772 = x3769 * x3771;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3773 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x3773 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3774 = x3773 * x98;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3775 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x3775 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3776 = x3774 + x3775;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x3777 = (x3776 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x3778 = x3777 * x3772;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3779 = x3776 - x101;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3780 = (x3779 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x3781 = x3780 * x3772;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3782 = x3776 - x98;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3783 = (x3782 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x3784 = x3783 * x3772;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3785 = x3776 - x83;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3786 = (x3785 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x3787 = x3786 * x3772;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3778);
            reg = x3778;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3781);
            reg = x3781;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3784);
            reg = x3784;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3787);
            reg = x3787;
          }
        }
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3788 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3788 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3789 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3789 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3790 = x3789 * x98;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3791 = x3788 + x3790;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3792 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3792 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3793 = x3792 * x84;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3794 = x3791 + x3793;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3795 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3795 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3796 = x3795 * x76;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3797 = x3794 + x3796;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3798 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x3798 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3799 = x3798 * x65;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3800 = x3797 + x3799;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x3801 = x3800 - x3753;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x3801 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/4/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3802 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3802 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3803 = x3802 * x61;
      // loc("Top/Mux/4/Mux/4/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3804 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3804 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:37)
      auto x3805 = x3804 * x67;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3806 = x3803 + x3805;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3807 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3807 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3808 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3808 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3809 = x3808 * x98;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3810 = x3807 + x3809;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3811 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3811 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3812 = x3811 * x84;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3813 = x3810 + x3812;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3814 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3814 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3815 = x3814 * x76;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3816 = x3813 + x3815;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3817 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3817 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3818 = x3817 * x65;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3819 = x3816 + x3818;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3820 = x3806 + x3819;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      auto x3821 = x3748 - x3820;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      if (x3821 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/multiply.cpp:67");
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3822 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3822 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3823 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x3823 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3824 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x3824 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3825 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3825 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3826 = x3716 * x3822;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3827 = x3716 * x3823;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3828 = x3716 * x3824;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3829 = x3716 * x3825;
      // loc("cirgen/circuit/rv32im/multiply.cpp":70:42)
      auto x3830 = x101 - x3716;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3831 = x3830 * x3737;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3832 = x3830 * x3738;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3833 = x3830 * x3739;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3834 = x3830 * x3740;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3835 = x3826 + x3831;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3836 = x3827 + x3832;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3837 = x3828 + x3833;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3838 = x3829 + x3834;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3839 = Fp(x3729.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x3840 = x3839 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3840);
          reg = x3840;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3841 = Fp(x3729.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x3842 = x3841 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3842);
          reg = x3842;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3843 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3843 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3844 = x3843 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3845 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3845 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x3846 = x3845 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3847 = x3844 + x3846;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3848 = x3729 - x3847;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3848 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3849 = Fp(x3838.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x3850 = x3849 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3850);
          reg = x3850;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3851 = Fp(x3838.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x3852 = x3851 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3852);
          reg = x3852;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3853 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3853 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3854 = x3853 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3855 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3855 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x3856 = x3855 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3857 = x3854 + x3856;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3858 = x3838 - x3857;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3858 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":213:13)
      auto x3859 = x3709 * x3853;
      // loc("cirgen/components/u32.cpp":213:3)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3859);
        reg = x3859;
      }
      // loc("cirgen/components/u32.cpp":214:13)
      auto x3860 = x3711 * x3843;
      // loc("cirgen/components/u32.cpp":214:3)
      {
        auto& reg = args[2][205 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3860);
        reg = x3860;
      }
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3861 = x3726 * x3835;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3862 = x3727 * x3835;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3863 = x3726 * x3836;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3864 = x3862 + x3863;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3865 = x3864 * x96;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3866 = x3861 + x3865;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3867 = Fp(x3866.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3867);
          reg = x3867;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3868 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3868 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3869 = x3866 - x3868;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3870 = x3869 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3871 = Fp(x3870.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3871);
          reg = x3871;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3872 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3872 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3873 = x3870 - x3872;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3874 = x3873 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3875 = Fp(x3874.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3875);
          reg = x3875;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3876 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3876 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3877 = x3874 - x3876;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3878 = x3877 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3878);
        reg = x3878;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3879 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3879 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3880 = x3879 * x96;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3881 = x3876 + x3880;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3882 = x3728 * x3835;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3883 = x3727 * x3836;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3884 = x3882 + x3883;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3885 = x3726 * x3837;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3886 = x3884 + x3885;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3887 = x3881 + x3886;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3888 = x3729 * x3835;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3889 = x3728 * x3836;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3890 = x3888 + x3889;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3891 = x3727 * x3837;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3892 = x3890 + x3891;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3893 = x3726 * x3838;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3894 = x3892 + x3893;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3895 = x3894 * x96;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3896 = x3887 + x3895;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3897 = Fp(x3896.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3897);
          reg = x3897;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3898 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3898 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3899 = x3896 - x3898;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3900 = x3899 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3901 = Fp(x3900.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3901);
          reg = x3901;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3902 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3902 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3903 = x3900 - x3902;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3904 = x3903 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3905 = Fp(x3904.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3905);
          reg = x3905;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3906 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3906 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3907 = x3904 - x3906;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3908 = x3907 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3908);
        reg = x3908;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3909 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x3909 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3910 = x3909 * x96;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3911 = x3906 + x3910;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3912 = x3729 * x3836;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3913 = x3728 * x3837;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3914 = x3912 + x3913;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3915 = x3727 * x3838;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3916 = x3914 + x3915;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3917 = x3911 + x3916;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3918 = x3729 * x3837;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3919 = x3728 * x3838;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3920 = x3918 + x3919;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3921 = x3920 * x96;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3922 = x3917 + x3921;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3923 = x3922 + x37;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3924 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x3924 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":234:53)
      auto x3925 = x3727 * x96;
      // loc("cirgen/components/u32.cpp":234:38)
      auto x3926 = x3726 + x3925;
      // loc("cirgen/components/u32.cpp":234:30)
      auto x3927 = x3924 * x3926;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3928 = x3923 - x3927;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3929 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x3929 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":235:37)
      auto x3930 = x3836 * x96;
      // loc("cirgen/components/u32.cpp":235:22)
      auto x3931 = x3835 + x3930;
      // loc("cirgen/components/u32.cpp":235:14)
      auto x3932 = x3929 * x3931;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3933 = x3928 - x3932;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3934 = Fp(x3933.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3934);
          reg = x3934;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3935 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x3935 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3936 = x3933 - x3935;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3937 = x3936 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3938 = Fp(x3937.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3938);
          reg = x3938;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3939 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x3939 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3940 = x3937 - x3939;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3941 = x3940 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3942 = Fp(x3941.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3942);
          reg = x3942;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3943 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x3943 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3944 = x3941 - x3943;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3945 = x3944 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3945);
        reg = x3945;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3946 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x3946 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3947 = x3946 * x96;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3948 = x3943 + x3947;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3949 = x3729 * x3838;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3950 = x3948 + x3949;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3951 = x3950 + x36;
      // loc("cirgen/components/u32.cpp":238:53)
      auto x3952 = x3729 * x96;
      // loc("cirgen/components/u32.cpp":238:38)
      auto x3953 = x3728 + x3952;
      // loc("cirgen/components/u32.cpp":238:30)
      auto x3954 = x3924 * x3953;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3955 = x3951 - x3954;
      // loc("cirgen/components/u32.cpp":239:37)
      auto x3956 = x3838 * x96;
      // loc("cirgen/components/u32.cpp":239:22)
      auto x3957 = x3837 + x3956;
      // loc("cirgen/components/u32.cpp":239:14)
      auto x3958 = x3929 * x3957;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3959 = x3955 - x3958;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3960 = Fp(x3959.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3960);
          reg = x3960;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3961 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x3961 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3962 = x3959 - x3961;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3963 = x3962 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3964 = Fp(x3963.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3964);
          reg = x3964;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3965 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x3965 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3966 = x3963 - x3965;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3967 = x3966 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3967);
        reg = x3967;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3968 = x3672 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3969 = x3675 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3970 = x3968 + x3969;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3971 = x3970 + x3678;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3972 = (x3971 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3972);
          reg = x3972;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3973 = inv(x3971);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3973);
          reg = x3973;
        }
      }
      // loc("Top/Mux/4/Mux/4/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3974 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x3974 != Fp::invalid());
      if (x3974 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x3971 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x3975 = x101 - x3974;
      if (x3975 != 0) {
        // loc("Top/Mux/4/Mux/4/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3976 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3976 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x3977 = x3971 * x3976;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x3978 = x3977 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x3978 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":78:17)
      auto x3979 = x602 + x84;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3980 = x3979 + x84;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3981 = Fp(x3980.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3981);
          reg = x3981;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3982 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3982 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3983 = x3980 - x3982;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3984 = x3983 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3985 = Fp(x3984.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3985);
          reg = x3985;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3986 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3986 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3987 = x3984 - x3986;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3988 = x3987 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3989 = Fp(x3988.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3989);
          reg = x3989;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3990 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3990 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3991 = x3988 - x3990;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3992 = x3991 * x95;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3993 = Fp(x3992.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3993);
          reg = x3993;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3994 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3994 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3995 = x3992 - x3994;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x3996 = x3995 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3996);
        reg = x3996;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3997 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3997 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3998 = x101 - x3997;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x3999 = x3997 * x3998;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3999);
        reg = x3999;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4000 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4000 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4001 = x98 - x3997;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4002 = x4000 * x4001;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4002 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x81);
        reg = x81;
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":80:38)
      auto x4003 = x3713 * x3975;
      if (x4003 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":81:29)
        auto x4004 = x3971 + x54;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3935);
          reg = x3935;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3939);
          reg = x3939;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3961);
          reg = x3961;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3965);
          reg = x3965;
        }
        {
          host_args.at(0) = x4004;
          host_args.at(1) = x3935;
          host_args.at(2) = x3939;
          host_args.at(3) = x3961;
          host_args.at(4) = x3965;
          host_args.at(5) = x100;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4005 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4005 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4006 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4006 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4007 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4007 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4008 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4008 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4004);
          reg = x4004;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3591);
          reg = x3591;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4005);
          reg = x4005;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4006);
          reg = x4006;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4007);
          reg = x4007;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4008);
          reg = x4008;
        }
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4009 = x101 - x3713;
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4010 = x4009 * x3975;
      if (x4010 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":84:29)
        auto x4011 = x3971 + x54;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3868);
          reg = x3868;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3872);
          reg = x3872;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3898);
          reg = x3898;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3902);
          reg = x3902;
        }
        {
          host_args.at(0) = x4011;
          host_args.at(1) = x3868;
          host_args.at(2) = x3872;
          host_args.at(3) = x3898;
          host_args.at(4) = x3902;
          host_args.at(5) = x100;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4012 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4012 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4013 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4013 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4014 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4014 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4015 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4015 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4011);
          reg = x4011;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3591);
          reg = x3591;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4012);
          reg = x4012;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4013);
          reg = x4013;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4014);
          reg = x4014;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4015);
          reg = x4015;
        }
      }
      if (x3974 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
      // loc("Top/Mux/4/Mux/4/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":101:49))
      auto x4016 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4016 != Fp::invalid());
      if (x4016 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4017 = x3680 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4017 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3669 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4018 = x3645 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4018 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3709 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4019 = x3680 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4019 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4020 = x3669 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4020 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4021 = x3645 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4021 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x3710 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4022 = x3680 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4022 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4023 = x3669 - x98;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4023 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4024 = x3645 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4024 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x3712 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4025 = x3680 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4025 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4026 = x3669 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4026 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4027 = x3645 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4027 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x3714 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4028 = x3680 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4028 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4029 = x3669 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4029 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3645 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x3715 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4030 = x3680 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4030 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4031 = x3669 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4031 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3645 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/components/mux.h":37:25))
    auto x4032 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x4032 != Fp::invalid());
    if (x4032 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4033 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x4033 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":20:41)
      auto x4034 = x602 * x82;
      {
        host_args.at(0) = x4034;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4035 = host_outs.at(0);
        auto x4036 = host_outs.at(1);
        auto x4037 = host_outs.at(2);
        auto x4038 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4035);
          reg = x4035;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4036);
          reg = x4036;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4037);
          reg = x4037;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4038);
          reg = x4038;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4039 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4039 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4040 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4040 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4041 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4041 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4042 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4042 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4034);
        reg = x4034;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4033);
        reg = x4033;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4039);
        reg = x4039;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4040);
        reg = x4040;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4041);
        reg = x4041;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4042);
        reg = x4042;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4043 = Fp(x4042.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x4044 = x4043 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4044);
          reg = x4044;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4045 = Fp(x4042.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x4046 = x4045 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4046);
          reg = x4046;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4047 = Fp(x4042.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x4048 = x4047 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4048);
          reg = x4048;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x4049 = Fp(x4042.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x4050 = x4049 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4050);
          reg = x4050;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4051 = Fp(x4042.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x4052 = x4051 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4052);
          reg = x4052;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4053 = Fp(x4042.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4053);
          reg = x4053;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x4054 = Fp(x4041.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x4055 = x4054 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4055);
          reg = x4055;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x4056 = Fp(x4041.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x4057 = x4056 * x66;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4057);
          reg = x4057;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x4058 = Fp(x4041.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x4059 = x4058 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4059);
          reg = x4059;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x4060 = Fp(x4041.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x4061 = x4060 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4061);
          reg = x4061;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x4062 = Fp(x4041.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4062);
          reg = x4062;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4063 = Fp(x4040.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x4064 = x4063 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4064);
          reg = x4064;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x4065 = Fp(x4040.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x4066 = x4065 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4066);
          reg = x4066;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x4067 = Fp(x4040.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x4068 = x4067 * x64;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4068);
          reg = x4068;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x4069 = Fp(x4040.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x4070 = x4069 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4070);
          reg = x4070;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x4071 = Fp(x4040.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4071);
          reg = x4071;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x4072 = Fp(x4039.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x4073 = x4072 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4073);
          reg = x4073;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x4074 = Fp(x4039.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4074);
          reg = x4074;
        }
      }
      // loc("Top/Mux/4/Mux/5/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4075 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4075 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4076 = x4075 * x61;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4077 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4077 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4078 = x4077 * x65;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4079 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4079 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x4080 = x4079 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4081 = x4078 + x4080;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4082 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4082 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x4083 = x4082 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4084 = x4081 + x4083;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4085 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4085 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4086 = x4084 + x4085;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4087 = x4076 + x4086;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4088 = x4087 * x98;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4089 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4089 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4090 = x4088 + x4089;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x4091 = x4042 - x4090;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x4091 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4092 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4092 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4093 = x4092 * x76;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4094 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4094 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x4095 = x4094 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4096 = x4093 + x4095;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4097 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4097 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4098 = x4096 + x4097;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4099 = x4098 * x65;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4100 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4100 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x4101 = x4100 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4102 = x4099 + x4101;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4103 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4103 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4104 = x4102 + x4103;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x4105 = x4041 - x4104;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x4105 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4106 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4106 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4107 = x4106 * x70;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4108 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4108 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4109 = x4108 * x84;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4110 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4110 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4111 = x4109 + x4110;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x4112 = x4111 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4113 = x4107 + x4112;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4114 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4114 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x4115 = x4114 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4116 = x4113 + x4115;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4117 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4117 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4118 = x4116 + x4117;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x4119 = x4040 - x4118;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x4119 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4120 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4120 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4121 = x4120 * x70;
      // loc("Top/Mux/4/Mux/5/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4122 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4122 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4123 = x4121 + x4122;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x4124 = x4039 - x4123;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x4124 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x4039;
        host_args.at(1) = x4040;
        host_args.at(2) = x4041;
        host_args.at(3) = x4042;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x4125 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4126 = (x4125 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4126);
            reg = x4126;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4127 = x4125 - x101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4128 = (x4127 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4128);
            reg = x4128;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4129 = x4125 - x98;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4130 = (x4129 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4130);
            reg = x4130;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4131 = x4125 - x83;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4132 = (x4131 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4132);
            reg = x4132;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4133 = x4125 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4134 = (x4133 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4134);
            reg = x4134;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4135 = x4125 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4136 = (x4135 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4136);
            reg = x4136;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4137 = x4125 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4138 = (x4137 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4138);
            reg = x4138;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4139 = x4125 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4140 = (x4139 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4140);
            reg = x4140;
          }
        }
        // loc("Top/Mux/4/Mux/5/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4141 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x4141 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4142 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x4142 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4143 = x4142 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4144 = x4141 + x4143;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4145 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x4145 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4146 = x4145 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4147 = x4144 + x4146;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4148 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x4148 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4149 = x4148 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4150 = x4147 + x4149;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4151 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x4151 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4152 = x4151 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4153 = x4150 + x4152;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4154 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x4154 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4155 = x4154 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4156 = x4153 + x4155;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4157 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x4157 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4158 = x4157 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4159 = x4156 + x4158;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x4160 = x4159 - x4125;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x4160 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":124:49))
      auto x4161 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4161 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":126:49))
      auto x4162 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4162 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
      auto x4163 = x4161 + x4162;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":127:49))
      auto x4164 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4164 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
      auto x4165 = x4162 + x4164;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":128:49))
      auto x4166 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4166 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":129:49))
      auto x4167 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4167 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4168 = x4166 + x4167;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4169 = x4163 + x4167;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":130:49))
      auto x4170 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4170 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4171 = x4168 + x4170;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":131:49))
      auto x4172 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4172 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4173 = x4170 + x4172;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4174 = x4171 + x4172;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4175 = x4169 + x4172;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4176 = x4167 + x4172;
      // loc("cirgen/circuit/rv32im/divide.cpp":46:3)
      {
        auto& reg = args[2][189 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4175);
        reg = x4175;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":47:3)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4176);
        reg = x4176;
      }
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":51:8))
      auto x4177 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4177 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg1"("cirgen/circuit/rv32im/divide.cpp":52:8))
      auto x4178 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4178 != Fp::invalid());
      host_args.at(0) = x4173;
      host_args.at(1) = x4174;
      host_args.at(2) = x4177;
      host_args.at(3) = x4178;
      host_args.at(4) = x4165;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4179 = x4100 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x4180 = x4103 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4181 = x4179 + x4180;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4182 = x4181 + x4106;
      // loc("cirgen/circuit/rv32im/divide.cpp":56:39)
      auto x4183 = x4182 + x54;
      {
        host_args.at(0) = x4183;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4184 = host_outs.at(0);
        auto x4185 = host_outs.at(1);
        auto x4186 = host_outs.at(2);
        auto x4187 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4184);
          reg = x4184;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4185);
          reg = x4185;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4186);
          reg = x4186;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4187);
          reg = x4187;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4188 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4188 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4189 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4189 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4190 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4190 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4191 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4191 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4183);
        reg = x4183;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4033);
        reg = x4033;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4188);
        reg = x4188;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4189);
        reg = x4189;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4190);
        reg = x4190;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4191);
        reg = x4191;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4192 = x4089 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4193 = x4192 + x4098;
      // loc("cirgen/circuit/rv32im/divide.cpp":57:39)
      auto x4194 = x4193 + x54;
      {
        host_args.at(0) = x4194;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4195 = host_outs.at(0);
        auto x4196 = host_outs.at(1);
        auto x4197 = host_outs.at(2);
        auto x4198 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4195);
          reg = x4195;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4196);
          reg = x4196;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4197);
          reg = x4197;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4198);
          reg = x4198;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4199 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4199 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4200 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4200 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4201 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4201 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4202 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4202 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4194);
        reg = x4194;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4033);
        reg = x4033;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4199);
        reg = x4199;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4200);
        reg = x4200;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4201);
        reg = x4201;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4202);
        reg = x4202;
      }
      host_args.at(0) = x4182;
      host_args.at(1) = x4188;
      host_args.at(2) = x4189;
      host_args.at(3) = x4190;
      host_args.at(4) = x4191;
      host_args.at(5) = x4193;
      host_args.at(6) = x4199;
      host_args.at(7) = x4200;
      host_args.at(8) = x4201;
      host_args.at(9) = x4202;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4203 = x4082 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x4204 = x4085 * x67;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4205 = x4203 + x4204;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4206 = x4205 + x4193;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4207 = x4173 * x4206;
      // loc("cirgen/circuit/rv32im/divide.cpp":63:35)
      auto x4208 = x101 - x4173;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4209 = x4208 * x4199;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4210 = x4207 + x4209;
      {
        // loc("cirgen/circuit/rv32im/divide.cpp":65:16)
        auto x4211 = Fp(x4210.asUInt32() & x40.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":65:15)
        auto x4212 = x4211 * x60;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4212);
          reg = x4212;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":66:16)
        auto x4213 = Fp(x4210.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":66:15)
        auto x4214 = x4213 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4214);
          reg = x4214;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":67:14)
        auto x4215 = Fp(x4210.asUInt32() & x39.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4216 = Fp(x4215.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4216);
            reg = x4216;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4217 = Fp(x4215.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4218 = x4217 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4218);
            reg = x4218;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4219 = Fp(x4215.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4220 = x4219 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4220);
            reg = x4220;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4221 = Fp(x4215.asUInt32() & x76.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4222 = x4221 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4222);
            reg = x4222;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4223 = Fp(x4215.asUInt32() & x65.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4224 = x4223 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4224);
            reg = x4224;
          }
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4225 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x4225 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x4226 = x4225 * x38;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x4227 = x4226 + x101;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4228 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x4228 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x4229 = x4228 * x83;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x4230 = x4229 + x101;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4231 = x4227 * x4230;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4232 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x4232 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x4233 = x4232 + x101;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4234 = x4231 * x4233;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4235 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x4235 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4236 = x4235 * x98;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4237 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x4237 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4238 = x4236 + x4237;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x4239 = (x4238 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x4240 = x4239 * x4234;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4241 = x4238 - x101;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4242 = (x4241 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x4243 = x4242 * x4234;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4244 = x4238 - x98;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4245 = (x4244 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x4246 = x4245 * x4234;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4247 = x4238 - x83;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4248 = (x4247 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x4249 = x4248 * x4234;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4240);
            reg = x4240;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4243);
            reg = x4243;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4246);
            reg = x4246;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4249);
            reg = x4249;
          }
        }
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4250 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x4250 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4251 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x4251 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4252 = x4251 * x98;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4253 = x4250 + x4252;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4254 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4254 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4255 = x4254 * x84;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4256 = x4253 + x4255;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4257 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4257 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4258 = x4257 * x76;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4259 = x4256 + x4258;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4260 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x4260 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4261 = x4260 * x65;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4262 = x4259 + x4261;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x4263 = x4262 - x4215;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x4263 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/5/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4264 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4264 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4265 = x4264 * x61;
      // loc("Top/Mux/4/Mux/5/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4266 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4266 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:37)
      auto x4267 = x4266 * x67;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4268 = x4265 + x4267;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4269 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4269 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4270 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4270 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4271 = x4270 * x98;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4272 = x4269 + x4271;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4273 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4273 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4274 = x4273 * x84;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4275 = x4272 + x4274;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4276 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4276 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4277 = x4276 * x76;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4278 = x4275 + x4277;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4279 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4279 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4280 = x4279 * x65;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4281 = x4278 + x4280;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4282 = x4268 + x4281;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      auto x4283 = x4210 - x4282;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      if (x4283 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:69");
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4284 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4284 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4285 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4285 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4286 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4286 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4287 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4287 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4288 = x4174 * x4284;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4289 = x4174 * x4285;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4290 = x4174 * x4286;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4291 = x4174 * x4287;
      // loc("cirgen/circuit/rv32im/divide.cpp":72:42)
      auto x4292 = x101 - x4174;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4293 = x4292 * x4199;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4294 = x4292 * x4200;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4295 = x4292 * x4201;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4296 = x4292 * x4202;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4297 = x4288 + x4293;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4298 = x4289 + x4294;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4299 = x4290 + x4295;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4300 = x4291 + x4296;
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4297);
        reg = x4297;
      }
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4298);
        reg = x4298;
      }
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4299);
        reg = x4299;
      }
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4300);
        reg = x4300;
      }
      {
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x4301 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x4301 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x4302 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x4302 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x4303 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x4303 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x4304 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x4304 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/divide.cpp":83:16)
        auto x4305 = x4177 + x4178;
        host_args.at(0) = x4188;
        host_args.at(1) = x4189;
        host_args.at(2) = x4190;
        host_args.at(3) = x4191;
        host_args.at(4) = x4301;
        host_args.at(5) = x4302;
        host_args.at(6) = x4303;
        host_args.at(7) = x4304;
        host_args.at(8) = x4305;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        auto x4306 = host_outs.at(0);
        auto x4307 = host_outs.at(1);
        auto x4308 = host_outs.at(2);
        auto x4309 = host_outs.at(3);
        auto x4310 = host_outs.at(4);
        auto x4311 = host_outs.at(5);
        auto x4312 = host_outs.at(6);
        auto x4313 = host_outs.at(7);
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4306);
          reg = x4306;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4310);
          reg = x4310;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4307);
          reg = x4307;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4311);
          reg = x4311;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4308);
          reg = x4308;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4312);
          reg = x4312;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4309);
          reg = x4309;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4313);
          reg = x4313;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4314 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4314 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4315 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4315 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4316 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4316 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4317 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4317 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4318 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4318 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4319 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4319 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4320 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x4320 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4321 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x4321 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4322 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x4322 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4323 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x4323 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4324 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x4324 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4325 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x4325 != Fp::invalid());
      host_args.at(0) = x4188;
      host_args.at(1) = x4189;
      host_args.at(2) = x4190;
      host_args.at(3) = x4191;
      host_args.at(4) = x4314;
      host_args.at(5) = x4315;
      host_args.at(6) = x4316;
      host_args.at(7) = x4317;
      host_args.at(8) = x4318;
      host_args.at(9) = x4319;
      host_args.at(10) = x4320;
      host_args.at(11) = x4321;
      host_args.at(12) = x4322;
      host_args.at(13) = x4323;
      host_args.at(14) = x4324;
      host_args.at(15) = x4325;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4326 = x4114 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4327 = x4117 * x98;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4328 = x4326 + x4327;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4329 = x4328 + x4120;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4330 = (x4329 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4330);
          reg = x4330;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4331 = inv(x4329);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4331);
          reg = x4331;
        }
      }
      // loc("Top/Mux/4/Mux/5/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4332 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4332 != Fp::invalid());
      if (x4332 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x4329 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x4333 = x101 - x4332;
      if (x4333 != 0) {
        // loc("Top/Mux/4/Mux/5/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4334 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x4334 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4335 = x4329 * x4334;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4336 = x4335 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x4336 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":94:37)
      auto x4337 = x4165 * x4333;
      if (x4337 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":96:16)
        auto x4338 = x4329 + x54;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4322);
          reg = x4322;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4323);
          reg = x4323;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4324);
          reg = x4324;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4325);
          reg = x4325;
        }
        {
          host_args.at(0) = x4338;
          host_args.at(1) = x4322;
          host_args.at(2) = x4323;
          host_args.at(3) = x4324;
          host_args.at(4) = x4325;
          host_args.at(5) = x100;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4339 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4339 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4340 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4340 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4341 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4341 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4342 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4342 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4338);
          reg = x4338;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4033);
          reg = x4033;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4339);
          reg = x4339;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4340);
          reg = x4340;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4341);
          reg = x4341;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4342);
          reg = x4342;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4343 = x101 - x4165;
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4344 = x4343 * x4333;
      if (x4344 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":100:16)
        auto x4345 = x4329 + x54;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4318);
          reg = x4318;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4319);
          reg = x4319;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4320);
          reg = x4320;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4321);
          reg = x4321;
        }
        {
          host_args.at(0) = x4345;
          host_args.at(1) = x4318;
          host_args.at(2) = x4319;
          host_args.at(3) = x4320;
          host_args.at(4) = x4321;
          host_args.at(5) = x100;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4346 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4346 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4347 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4347 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4348 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4348 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4349 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4349 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4345);
          reg = x4345;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4033);
          reg = x4033;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4346);
          reg = x4346;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4347);
          reg = x4347;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4348);
          reg = x4348;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4349);
          reg = x4349;
        }
      }
      if (x4332 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":105:17)
      auto x4350 = x602 + x84;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4351 = x4350 + x84;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4352 = Fp(x4351.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4352);
          reg = x4352;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4353 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4353 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4354 = x4351 - x4353;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4355 = x4354 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4356 = Fp(x4355.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4356);
          reg = x4356;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4357 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4357 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4358 = x4355 - x4357;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4359 = x4358 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4360 = Fp(x4359.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4360);
          reg = x4360;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4361 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4361 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4362 = x4359 - x4361;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4363 = x4362 * x95;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4364 = Fp(x4363.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4364);
          reg = x4364;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4365 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4365 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4366 = x4363 - x4365;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4367 = x4366 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4367);
        reg = x4367;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4368 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4368 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4369 = x101 - x4368;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4370 = x4368 * x4369;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4370);
        reg = x4370;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4371 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4371 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4372 = x98 - x4368;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4373 = x4371 * x4372;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4373 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":106:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x77);
        reg = x77;
      }
      if (x4161 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4374 = x4122 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4374 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4375 = x4111 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4375 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4376 = x4087 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4376 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":125:49))
      auto x4377 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4377 != Fp::invalid());
      if (x4377 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4378 = x4122 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4378 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4379 = x4111 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4379 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4380 = x4087 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4380 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4162 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4381 = x4122 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4381 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4382 = x4111 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4382 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4383 = x4087 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4383 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4164 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4384 = x4122 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4384 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4385 = x4111 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4385 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4386 = x4087 - x101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4386 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4166 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4387 = x4122 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4387 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4388 = x4111 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4388 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4087 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4167 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4389 = x4122 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4389 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4390 = x4111 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4390 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4391 = x4087 - x67;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4391 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4170 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4392 = x4122 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4392 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4393 = x4111 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4393 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4087 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
      }
      if (x4172 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4394 = x4122 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4394 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4395 = x4111 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4395 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4396 = x4087 - x67;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4396 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/components/mux.h":37:25))
    auto x4397 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x4397 != Fp::invalid());
    if (x4397 != 0) {
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4398 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4398 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4399 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4399 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4400 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4400 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4401 = args[2][121 * steps + ((cycle - 1) & mask)];
      assert(x4401 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4402 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x4402 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4403 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x4403 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4404 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x4404 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4405 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x4405 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4406 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x4406 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4407 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x4407 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4408 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x4408 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4409 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x4409 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4410 = Fp(x4398.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4410);
          reg = x4410;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4411 = Fp(x4402.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4411);
          reg = x4411;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4412 = Fp(x4398.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4413 = x4412 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4413);
          reg = x4413;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4414 = Fp(x4402.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4415 = x4414 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4415);
          reg = x4415;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4416 = Fp(x4398.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4417 = x4416 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4417);
          reg = x4417;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4418 = Fp(x4402.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4419 = x4418 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4419);
          reg = x4419;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4420 = Fp(x4398.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4421 = x4420 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4421);
          reg = x4421;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4422 = Fp(x4402.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4423 = x4422 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4423);
          reg = x4423;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4424 = Fp(x4398.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4425 = x4424 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4425);
          reg = x4425;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4426 = Fp(x4402.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4427 = x4426 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4427);
          reg = x4427;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4428 = Fp(x4398.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4429 = x4428 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4429);
          reg = x4429;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4430 = Fp(x4402.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4431 = x4430 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4431);
          reg = x4431;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4432 = Fp(x4398.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4433 = x4432 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4433);
          reg = x4433;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4434 = Fp(x4402.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4435 = x4434 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4435);
          reg = x4435;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4436 = Fp(x4398.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4437 = x4436 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4437);
          reg = x4437;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4438 = Fp(x4402.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4439 = x4438 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4439);
          reg = x4439;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4440 = Fp(x4399.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4440);
          reg = x4440;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4441 = Fp(x4403.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4441);
          reg = x4441;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4442 = Fp(x4399.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4443 = x4442 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4443);
          reg = x4443;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4444 = Fp(x4403.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4445 = x4444 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4445);
          reg = x4445;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4446 = Fp(x4399.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4447 = x4446 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4447);
          reg = x4447;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4448 = Fp(x4403.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4449 = x4448 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4449);
          reg = x4449;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4450 = Fp(x4399.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4451 = x4450 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4451);
          reg = x4451;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4452 = Fp(x4403.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4453 = x4452 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4453);
          reg = x4453;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4454 = Fp(x4399.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4455 = x4454 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4455);
          reg = x4455;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4456 = Fp(x4403.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4457 = x4456 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4457);
          reg = x4457;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4458 = Fp(x4399.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4459 = x4458 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4459);
          reg = x4459;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4460 = Fp(x4403.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4461 = x4460 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4461);
          reg = x4461;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4462 = Fp(x4399.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4463 = x4462 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4463);
          reg = x4463;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4464 = Fp(x4403.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4465 = x4464 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4465);
          reg = x4465;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4466 = Fp(x4399.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4467 = x4466 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4467);
          reg = x4467;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4468 = Fp(x4403.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4469 = x4468 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4469);
          reg = x4469;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4470 = Fp(x4400.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4470);
          reg = x4470;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4471 = Fp(x4404.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4471);
          reg = x4471;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4472 = Fp(x4400.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4473 = x4472 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4473);
          reg = x4473;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4474 = Fp(x4404.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4475 = x4474 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4475);
          reg = x4475;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4476 = Fp(x4400.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4477 = x4476 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4477);
          reg = x4477;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4478 = Fp(x4404.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4479 = x4478 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4479);
          reg = x4479;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4480 = Fp(x4400.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4481 = x4480 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4481);
          reg = x4481;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4482 = Fp(x4404.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4483 = x4482 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4483);
          reg = x4483;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4484 = Fp(x4400.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4485 = x4484 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4485);
          reg = x4485;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4486 = Fp(x4404.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4487 = x4486 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4487);
          reg = x4487;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4488 = Fp(x4400.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4489 = x4488 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4489);
          reg = x4489;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4490 = Fp(x4404.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4491 = x4490 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4491);
          reg = x4491;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4492 = Fp(x4400.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4493 = x4492 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4493);
          reg = x4493;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4494 = Fp(x4404.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4495 = x4494 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4495);
          reg = x4495;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4496 = Fp(x4400.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4497 = x4496 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4497);
          reg = x4497;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4498 = Fp(x4404.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4499 = x4498 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4499);
          reg = x4499;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4500 = Fp(x4401.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4500);
          reg = x4500;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4501 = Fp(x4405.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4501);
          reg = x4501;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4502 = Fp(x4401.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4503 = x4502 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4503);
          reg = x4503;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4504 = Fp(x4405.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4505 = x4504 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4505);
          reg = x4505;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4506 = Fp(x4401.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4507 = x4506 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4507);
          reg = x4507;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4508 = Fp(x4405.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4509 = x4508 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4509);
          reg = x4509;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4510 = Fp(x4401.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4511 = x4510 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4511);
          reg = x4511;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4512 = Fp(x4405.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4513 = x4512 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4513);
          reg = x4513;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4514 = Fp(x4401.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4515 = x4514 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4515);
          reg = x4515;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4516 = Fp(x4405.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4517 = x4516 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4517);
          reg = x4517;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4518 = Fp(x4401.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4519 = x4518 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4519);
          reg = x4519;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4520 = Fp(x4405.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4521 = x4520 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4521);
          reg = x4521;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4522 = Fp(x4401.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4523 = x4522 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4523);
          reg = x4523;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4524 = Fp(x4405.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4525 = x4524 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4525);
          reg = x4525;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4526 = Fp(x4401.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4527 = x4526 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4527);
          reg = x4527;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4528 = Fp(x4405.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4529 = x4528 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4529);
          reg = x4529;
        }
      }
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4530 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4530 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4531 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x4531 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4532 = x4530 * x4531;
      // loc("Top/Mux/4/Mux/6/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4533 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4533 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4534 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x4534 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4535 = x4533 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4536 = x4530 + x4535;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4537 = x4534 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4538 = x4531 + x4537;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4539 = x4533 * x4534;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4540 = x4539 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4541 = x4532 + x4540;
      // loc("Top/Mux/4/Mux/6/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4542 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4543 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x4543 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4544 = x4542 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4545 = x4536 + x4544;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4546 = x4543 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4547 = x4538 + x4546;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4548 = x4542 * x4543;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4549 = x4548 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4550 = x4541 + x4549;
      // loc("Top/Mux/4/Mux/6/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4551 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4552 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x4552 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4553 = x4551 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4554 = x4545 + x4553;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4555 = x4552 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4556 = x4547 + x4555;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4557 = x4551 * x4552;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4558 = x4557 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4559 = x4550 + x4558;
      // loc("Top/Mux/4/Mux/6/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4560 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4561 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x4561 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4562 = x4560 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4563 = x4554 + x4562;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4564 = x4561 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4565 = x4556 + x4564;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4566 = x4560 * x4561;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4567 = x4566 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4568 = x4559 + x4567;
      // loc("Top/Mux/4/Mux/6/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4569 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4569 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4570 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x4570 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4571 = x4569 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4572 = x4563 + x4571;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4573 = x4570 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4574 = x4565 + x4573;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4575 = x4569 * x4570;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4576 = x4575 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4577 = x4568 + x4576;
      // loc("Top/Mux/4/Mux/6/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4578 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4579 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x4579 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4580 = x4578 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4581 = x4572 + x4580;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4582 = x4579 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4583 = x4574 + x4582;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4584 = x4578 * x4579;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4585 = x4584 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4586 = x4577 + x4585;
      // loc("Top/Mux/4/Mux/6/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4587 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4588 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x4588 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4589 = x4587 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4590 = x4581 + x4589;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4591 = x4588 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4592 = x4583 + x4591;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4593 = x4587 * x4588;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4594 = x4593 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4595 = x4586 + x4594;
      // loc("Top/Mux/4/Mux/6/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4596 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4597 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4597 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4598 = x4596 * x4597;
      // loc("Top/Mux/4/Mux/6/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4599 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4600 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4600 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4601 = x4599 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4602 = x4596 + x4601;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4603 = x4600 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4604 = x4597 + x4603;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4605 = x4599 * x4600;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4606 = x4605 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4607 = x4598 + x4606;
      // loc("Top/Mux/4/Mux/6/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4608 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4609 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4609 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4610 = x4608 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4611 = x4602 + x4610;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4612 = x4609 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4613 = x4604 + x4612;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4614 = x4608 * x4609;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4615 = x4614 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4616 = x4607 + x4615;
      // loc("Top/Mux/4/Mux/6/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4617 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4618 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4618 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4619 = x4617 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4620 = x4611 + x4619;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4621 = x4618 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4622 = x4613 + x4621;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4623 = x4617 * x4618;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4624 = x4623 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4625 = x4616 + x4624;
      // loc("Top/Mux/4/Mux/6/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4626 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4627 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4627 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4628 = x4626 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4629 = x4620 + x4628;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4630 = x4627 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4631 = x4622 + x4630;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4632 = x4626 * x4627;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4633 = x4632 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4634 = x4625 + x4633;
      // loc("Top/Mux/4/Mux/6/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4635 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4636 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4636 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4637 = x4635 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4638 = x4629 + x4637;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4639 = x4636 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4640 = x4631 + x4639;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4641 = x4635 * x4636;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4642 = x4641 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4643 = x4634 + x4642;
      // loc("Top/Mux/4/Mux/6/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4644 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4645 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4645 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4646 = x4644 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4647 = x4638 + x4646;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4648 = x4645 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4649 = x4640 + x4648;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4650 = x4644 * x4645;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4651 = x4650 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4652 = x4643 + x4651;
      // loc("Top/Mux/4/Mux/6/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4653 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4653 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4654 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4654 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4655 = x4653 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4656 = x4647 + x4655;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4657 = x4654 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4658 = x4649 + x4657;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4659 = x4653 * x4654;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4660 = x4659 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4661 = x4652 + x4660;
      // loc("Top/Mux/4/Mux/6/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4662 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4662 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4663 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4663 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4664 = x4662 * x4663;
      // loc("Top/Mux/4/Mux/6/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4665 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4666 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4666 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4667 = x4665 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4668 = x4662 + x4667;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4669 = x4666 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4670 = x4663 + x4669;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4671 = x4665 * x4666;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4672 = x4671 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4673 = x4664 + x4672;
      // loc("Top/Mux/4/Mux/6/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4674 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4674 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4675 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4675 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4676 = x4674 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4677 = x4668 + x4676;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4678 = x4675 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4679 = x4670 + x4678;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4680 = x4674 * x4675;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4681 = x4680 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4682 = x4673 + x4681;
      // loc("Top/Mux/4/Mux/6/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4683 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4684 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4684 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4685 = x4683 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4686 = x4677 + x4685;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4687 = x4684 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4688 = x4679 + x4687;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4689 = x4683 * x4684;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4690 = x4689 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4691 = x4682 + x4690;
      // loc("Top/Mux/4/Mux/6/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4692 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4692 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4693 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4693 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4694 = x4692 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4695 = x4686 + x4694;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4696 = x4693 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4697 = x4688 + x4696;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4698 = x4692 * x4693;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4699 = x4698 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4700 = x4691 + x4699;
      // loc("Top/Mux/4/Mux/6/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4701 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4701 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4702 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4702 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4703 = x4701 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4704 = x4695 + x4703;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4705 = x4702 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4706 = x4697 + x4705;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4707 = x4701 * x4702;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4708 = x4707 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4709 = x4700 + x4708;
      // loc("Top/Mux/4/Mux/6/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4710 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x4710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4711 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4711 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4712 = x4710 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4713 = x4704 + x4712;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4714 = x4711 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4715 = x4706 + x4714;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4716 = x4710 * x4711;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4717 = x4716 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4718 = x4709 + x4717;
      // loc("Top/Mux/4/Mux/6/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4719 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x4719 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4720 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4720 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4721 = x4719 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4722 = x4713 + x4721;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4723 = x4720 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4724 = x4715 + x4723;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4725 = x4719 * x4720;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4726 = x4725 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4727 = x4718 + x4726;
      // loc("Top/Mux/4/Mux/6/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4728 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4729 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4729 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4730 = x4728 * x4729;
      // loc("Top/Mux/4/Mux/6/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4731 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4731 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4732 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4732 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4733 = x4731 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4734 = x4728 + x4733;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4735 = x4732 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4736 = x4729 + x4735;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4737 = x4731 * x4732;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4738 = x4737 * x98;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4739 = x4730 + x4738;
      // loc("Top/Mux/4/Mux/6/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4740 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4740 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4741 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4741 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4742 = x4740 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4743 = x4734 + x4742;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4744 = x4741 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4745 = x4736 + x4744;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4746 = x4740 * x4741;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4747 = x4746 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4748 = x4739 + x4747;
      // loc("Top/Mux/4/Mux/6/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4749 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4750 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4750 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4751 = x4749 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4752 = x4743 + x4751;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4753 = x4750 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4754 = x4745 + x4753;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4755 = x4749 * x4750;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4756 = x4755 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4757 = x4748 + x4756;
      // loc("Top/Mux/4/Mux/6/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4758 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4759 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4759 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4760 = x4758 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4761 = x4752 + x4760;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4762 = x4759 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4763 = x4754 + x4762;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4764 = x4758 * x4759;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4765 = x4764 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4766 = x4757 + x4765;
      // loc("Top/Mux/4/Mux/6/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4767 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x4767 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4768 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4768 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4769 = x4767 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4770 = x4761 + x4769;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4771 = x4768 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4772 = x4763 + x4771;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4773 = x4767 * x4768;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4774 = x4773 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4775 = x4766 + x4774;
      // loc("Top/Mux/4/Mux/6/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4776 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x4776 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4777 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4777 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4778 = x4776 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4779 = x4770 + x4778;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4780 = x4777 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4781 = x4772 + x4780;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4782 = x4776 * x4777;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4783 = x4782 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4784 = x4775 + x4783;
      // loc("Top/Mux/4/Mux/6/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4785 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x4785 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4786 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4786 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4787 = x4785 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4788 = x4779 + x4787;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4789 = x4786 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4790 = x4781 + x4789;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4791 = x4785 * x4786;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4792 = x4791 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4793 = x4784 + x4792;
      host_args.at(0) = x4398;
      host_args.at(1) = x4399;
      host_args.at(2) = x4400;
      host_args.at(3) = x4401;
      host_args.at(4) = x4590;
      host_args.at(5) = x4656;
      host_args.at(6) = x4722;
      host_args.at(7) = x4788;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4402;
      host_args.at(1) = x4403;
      host_args.at(2) = x4404;
      host_args.at(3) = x4405;
      host_args.at(4) = x4592;
      host_args.at(5) = x4658;
      host_args.at(6) = x4724;
      host_args.at(7) = x4790;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4406;
      host_args.at(1) = x4407;
      host_args.at(2) = x4408;
      host_args.at(3) = x4409;
      host_args.at(4) = x4595;
      host_args.at(5) = x4661;
      host_args.at(6) = x4727;
      host_args.at(7) = x4793;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4794 = x4398 - x4590;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4794 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4795 = x4399 - x4656;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4795 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4796 = x4400 - x4722;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4796 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4797 = x4401 - x4788;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4797 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4798 = x4402 - x4592;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4798 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4799 = x4403 - x4658;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4799 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4800 = x4404 - x4724;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4800 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4801 = x4405 - x4790;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4801 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4802 = x4406 - x4595;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4802 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4803 = x4407 - x4661;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4803 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4804 = x4408 - x4727;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4804 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4805 = x4409 - x4793;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4805 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4806 = x602 + x84;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4807 = Fp(x4806.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4807);
          reg = x4807;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4808 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4808 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4809 = x4806 - x4808;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4810 = x4809 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4811 = Fp(x4810.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4811);
          reg = x4811;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4812 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4812 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4813 = x4810 - x4812;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4814 = x4813 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4815 = Fp(x4814.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4815);
          reg = x4815;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4816 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4816 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4817 = x4814 - x4816;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4818 = x4817 * x95;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4819 = Fp(x4818.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4819);
          reg = x4819;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4820 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4820 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4821 = x4818 - x4820;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4822 = x4821 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4822);
        reg = x4822;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4823 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4823 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4824 = x101 - x4823;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4825 = x4823 * x4824;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4825);
        reg = x4825;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4826 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4826 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4827 = x98 - x4823;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4828 = x4826 * x4827;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4828 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/compute.cpp":235:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x81);
        reg = x81;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/components/mux.h":37:25))
    auto x4829 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x4829 != Fp::invalid());
    if (x4829 != 0) {
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4830 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4831 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4832 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4833 = args[2][121 * steps + ((cycle - 1) & mask)];
      assert(x4833 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4834 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x4834 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4835 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x4835 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4836 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x4836 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4837 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x4837 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4838 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x4838 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4839 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x4839 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4840 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x4840 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4841 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x4841 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4842 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x4842 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4843 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x4843 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4844 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x4844 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4845 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x4845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":135:51))
      auto x4846 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x4846 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg1"("cirgen/circuit/rv32im/divide.cpp":136:51))
      auto x4847 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x4847 != Fp::invalid());
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4848 = Fp(x4833.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4849 = x4848 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4849);
          reg = x4849;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4850 = Fp(x4833.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4851 = x4850 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4851);
          reg = x4851;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4852 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4852 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4853 = x4852 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4854 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x4854 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4855 = x4854 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4856 = x4853 + x4855;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4857 = x4833 - x4856;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4857 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4858 = Fp(x4837.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4859 = x4858 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4859);
          reg = x4859;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4860 = Fp(x4837.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4861 = x4860 * x98;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4861);
          reg = x4861;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4862 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4862 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4863 = x4862 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4864 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x4864 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4865 = x4864 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4866 = x4863 + x4865;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4867 = x4837 - x4866;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4867 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/divide.cpp":139:17)
      auto x4868 = x4846 * x4852;
      // loc("cirgen/circuit/rv32im/divide.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4868);
        reg = x4868;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":140:29)
      auto x4869 = x101 - x4847;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4870 = x4846 * x4869;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4871 = x4870 * x4862;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4871);
        reg = x4871;
      }
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4872 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4872 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":142:47)
      auto x4873 = x101 - x4872;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4874 = x4873 * x4830;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4875 = x4873 * x4831;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4876 = x4873 * x4832;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4877 = x4873 * x4833;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4878 = x4874 + x96;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4879 = x4875 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4880 = x4876 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4881 = x4877 + x97;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4882 = x4872 * x4830;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4883 = x4872 * x4831;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4884 = x4872 * x4832;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4885 = x4872 * x4833;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4886 = x4878 - x4882;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4887 = x4879 - x4883;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4888 = x4880 - x4884;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4889 = x4881 - x4885;
      // loc("cirgen/circuit/rv32im/divide.cpp":143:17)
      auto x4890 = x4872 * x4847;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4891 = x4886 - x4890;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x4892 = x4887 * x96;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x4893 = x4891 + x4892;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4894 = Fp(x4893.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4894);
          reg = x4894;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4895 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x4895 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4896 = x4893 - x4895;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4897 = x4896 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4898 = Fp(x4897.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4898);
          reg = x4898;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4899 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x4899 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4900 = x4897 - x4899;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4901 = x4900 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4901);
        reg = x4901;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4902 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x4902 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4903 = x4902 + x4888;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x4904 = x4889 * x96;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4905 = x4903 + x4904;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4906 = Fp(x4905.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4906);
          reg = x4906;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4907 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x4907 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4908 = x4905 - x4907;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4909 = x4908 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4910 = Fp(x4909.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4910);
          reg = x4910;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4911 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4911 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4912 = x4909 - x4911;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4913 = x4912 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4913);
        reg = x4913;
      }
      host_args.at(0) = x4830;
      host_args.at(1) = x4831;
      host_args.at(2) = x4832;
      host_args.at(3) = x4833;
      host_args.at(4) = x4895;
      host_args.at(5) = x4899;
      host_args.at(6) = x4907;
      host_args.at(7) = x4911;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/7/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4914 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4914 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":145:47)
      auto x4915 = x101 - x4914;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4916 = x4915 * x4834;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4917 = x4915 * x4835;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4918 = x4915 * x4836;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4919 = x4915 * x4837;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4920 = x4916 + x96;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4921 = x4917 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4922 = x4918 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4923 = x4919 + x97;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4924 = x4914 * x4834;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4925 = x4914 * x4835;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4926 = x4914 * x4836;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4927 = x4914 * x4837;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4928 = x4920 - x4924;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4929 = x4921 - x4925;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4930 = x4922 - x4926;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4931 = x4923 - x4927;
      // loc("cirgen/circuit/rv32im/divide.cpp":146:17)
      auto x4932 = x4914 * x4847;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4933 = x4928 - x4932;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x4934 = x4929 * x96;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x4935 = x4933 + x4934;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4936 = Fp(x4935.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4936);
          reg = x4936;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4937 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4937 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4938 = x4935 - x4937;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4939 = x4938 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4940 = Fp(x4939.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4940);
          reg = x4940;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4941 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4941 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4942 = x4939 - x4941;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4943 = x4942 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4943);
        reg = x4943;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize1/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4944 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x4944 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4945 = x4944 + x4930;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x4946 = x4931 * x96;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4947 = x4945 + x4946;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4948 = Fp(x4947.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4948);
          reg = x4948;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4949 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4949 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4950 = x4947 - x4949;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4951 = x4950 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4952 = Fp(x4951.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4952);
          reg = x4952;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4953 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4953 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4954 = x4951 - x4953;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4955 = x4954 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4955);
        reg = x4955;
      }
      host_args.at(0) = x4834;
      host_args.at(1) = x4835;
      host_args.at(2) = x4836;
      host_args.at(3) = x4837;
      host_args.at(4) = x4937;
      host_args.at(5) = x4941;
      host_args.at(6) = x4949;
      host_args.at(7) = x4953;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":137:26)
      auto x4956 = x4941 * x96;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x4957 = x4937 + x4956;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4958 = (x4957 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4958);
          reg = x4958;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4959 = inv(x4957);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4959);
          reg = x4959;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4960 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4960 != Fp::invalid());
      if (x4960 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x4957 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x4961 = x101 - x4960;
      if (x4961 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4962 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x4962 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4963 = x4957 * x4962;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4964 = x4963 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x4964 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x4965 = x4953 * x96;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x4966 = x4949 + x4965;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x4967 = x4961 * x86;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x4968 = x4966 + x4967;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4969 = (x4968 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4969);
          reg = x4969;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4970 = inv(x4968);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4970);
          reg = x4970;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4971 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4971 != Fp::invalid());
      if (x4971 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x4968 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x4972 = x101 - x4971;
      if (x4972 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4973 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x4973 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4974 = x4968 * x4973;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4975 = x4974 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x4975 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4976 = x4872 + x4914;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x4977 = x4872 * x98;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x4978 = x4977 * x4914;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4979 = x4976 - x4978;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:64)
      auto x4980 = x4971 * x4872;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4981 = x4979 - x4980;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:3)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4981);
        reg = x4981;
      }
      // loc("Top/Mux/4/Mux/7/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4982 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4982 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":151:46)
      auto x4983 = x101 - x4982;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4984 = x4983 * x4838;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4985 = x4983 * x4839;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4986 = x4983 * x4840;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4987 = x4983 * x4841;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4988 = x4984 + x96;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4989 = x4985 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4990 = x4986 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4991 = x4987 + x97;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4992 = x4982 * x4838;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4993 = x4982 * x4839;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4994 = x4982 * x4840;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4995 = x4982 * x4841;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4996 = x4988 - x4992;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4997 = x4989 - x4993;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4998 = x4990 - x4994;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4999 = x4991 - x4995;
      // loc("cirgen/circuit/rv32im/divide.cpp":152:16)
      auto x5000 = x4982 * x4847;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5001 = x4996 - x5000;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5002 = x4997 * x96;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5003 = x5001 + x5002;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5004 = Fp(x5003.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5004);
          reg = x5004;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5005 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5005 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5006 = x5003 - x5005;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5007 = x5006 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5008 = Fp(x5007.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5008);
          reg = x5008;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5009 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5009 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5010 = x5007 - x5009;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5011 = x5010 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5011);
        reg = x5011;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize2/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5012 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5012 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5013 = x5012 + x4998;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5014 = x4999 * x96;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5015 = x5013 + x5014;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5016 = Fp(x5015.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5016);
          reg = x5016;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5017 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5017 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5018 = x5015 - x5017;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5019 = x5018 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5020 = Fp(x5019.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5020);
          reg = x5020;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5021 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5021 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5022 = x5019 - x5021;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5023 = x5022 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5023);
        reg = x5023;
      }
      host_args.at(0) = x4838;
      host_args.at(1) = x4839;
      host_args.at(2) = x4840;
      host_args.at(3) = x4841;
      host_args.at(4) = x5005;
      host_args.at(5) = x5009;
      host_args.at(6) = x5017;
      host_args.at(7) = x5021;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5024 = x4873 * x4842;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5025 = x4873 * x4843;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5026 = x4873 * x4844;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5027 = x4873 * x4845;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5028 = x5024 + x96;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5029 = x5025 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5030 = x5026 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5031 = x5027 + x97;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5032 = x4872 * x4842;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5033 = x4872 * x4843;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5034 = x4872 * x4844;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5035 = x4872 * x4845;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5036 = x5028 - x5032;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5037 = x5029 - x5033;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5038 = x5030 - x5034;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5039 = x5031 - x5035;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5040 = x5036 - x4890;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5041 = x5037 * x96;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5042 = x5040 + x5041;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5043 = Fp(x5042.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5043);
          reg = x5043;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5044 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5044 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5045 = x5042 - x5044;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5046 = x5045 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5047 = Fp(x5046.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5047);
          reg = x5047;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5048 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5048 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5049 = x5046 - x5048;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5050 = x5049 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5050);
        reg = x5050;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize3/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5051 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5051 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5052 = x5051 + x5038;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5053 = x5039 * x96;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5054 = x5052 + x5053;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5055 = Fp(x5054.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5055);
          reg = x5055;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5056 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5056 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5057 = x5054 - x5056;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5058 = x5057 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5059 = Fp(x5058.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5059);
          reg = x5059;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5060 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5060 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5061 = x5058 - x5060;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5062 = x5061 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5062);
        reg = x5062;
      }
      host_args.at(0) = x4842;
      host_args.at(1) = x4843;
      host_args.at(2) = x4844;
      host_args.at(3) = x4845;
      host_args.at(4) = x5044;
      host_args.at(5) = x5048;
      host_args.at(6) = x5056;
      host_args.at(7) = x5060;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5063 = x4937 + x96;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5064 = x4941 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5065 = x4949 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5066 = x4953 + x97;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5067 = x5063 - x101;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5068 = x5067 - x5044;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5069 = x5064 - x5048;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5070 = x5065 - x5056;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5071 = x5066 - x5060;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5072 = x5069 * x96;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5073 = x5068 + x5072;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5074 = Fp(x5073.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5074);
          reg = x5074;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5075 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5075 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5076 = x5073 - x5075;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5077 = x5076 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5078 = Fp(x5077.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5078);
          reg = x5078;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5079 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5079 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5080 = x5077 - x5079;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5081 = x5080 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5081);
        reg = x5081;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize4/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5082 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5082 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5083 = x5082 + x5070;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5084 = x5071 * x96;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5085 = x5083 + x5084;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5086 = Fp(x5085.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5086);
          reg = x5086;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5087 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5087 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5088 = x5085 - x5087;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5089 = x5088 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5090 = Fp(x5089.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5090);
          reg = x5090;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5091 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5091 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5092 = x5089 - x5091;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5093 = x5092 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5093);
        reg = x5093;
      }
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5094 = x5005 * x4937;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5095 = x5094 + x5044;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5096 = x5005 * x4941;
      // loc("cirgen/components/u32.cpp":261:51)
      auto x5097 = x5009 * x4937;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5098 = x5096 + x5097;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5099 = x5098 + x5048;
      // loc("cirgen/components/u32.cpp":261:14)
      auto x5100 = x5099 * x96;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5101 = x5095 + x5100;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5102 = Fp(x5101.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5102);
          reg = x5102;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5103 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5103 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5104 = x5101 - x5103;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5105 = x5104 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5106 = Fp(x5105.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5106);
          reg = x5106;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5107 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5107 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5108 = x5105 - x5107;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5109 = x5108 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5110 = Fp(x5109.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5110);
          reg = x5110;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5111 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5111 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5112 = x5109 - x5111;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5113 = x5112 * x95;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5113);
        reg = x5113;
      }
      // loc("Top/Mux/4/Mux/7/U32MulAcc/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5114 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5114 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5115 = x5114 * x96;
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5116 = x5115 + x5111;
      // loc("cirgen/components/u32.cpp":266:7)
      auto x5117 = x5009 * x4953;
      // loc("cirgen/components/u32.cpp":266:7)
      if (x5117 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:266");
      // loc("cirgen/components/u32.cpp":267:7)
      auto x5118 = x5017 * x4949;
      // loc("cirgen/components/u32.cpp":267:7)
      if (x5118 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:267");
      // loc("cirgen/components/u32.cpp":268:7)
      auto x5119 = x5021 * x4941;
      // loc("cirgen/components/u32.cpp":268:7)
      if (x5119 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:268");
      // loc("cirgen/components/u32.cpp":269:7)
      auto x5120 = x5017 * x4953;
      // loc("cirgen/components/u32.cpp":269:7)
      if (x5120 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:269");
      // loc("cirgen/components/u32.cpp":270:7)
      auto x5121 = x5021 * x4949;
      // loc("cirgen/components/u32.cpp":270:7)
      if (x5121 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:270");
      // loc("cirgen/components/u32.cpp":271:7)
      auto x5122 = x5021 * x4953;
      // loc("cirgen/components/u32.cpp":271:7)
      if (x5122 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:271");
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5123 = x5017 * x4937;
      // loc("cirgen/components/u32.cpp":273:45)
      auto x5124 = x5009 * x4941;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5125 = x5123 + x5124;
      // loc("cirgen/components/u32.cpp":274:15)
      auto x5126 = x5005 * x4949;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5127 = x5125 + x5126;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5128 = x5127 + x5056;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5129 = x5128 + x5116;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5130 = x5021 * x4937;
      // loc("cirgen/components/u32.cpp":275:52)
      auto x5131 = x5017 * x4941;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5132 = x5130 + x5131;
      // loc("cirgen/components/u32.cpp":276:22)
      auto x5133 = x5009 * x4949;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5134 = x5132 + x5133;
      // loc("cirgen/components/u32.cpp":276:52)
      auto x5135 = x5005 * x4953;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5136 = x5134 + x5135;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5137 = x5136 + x5060;
      // loc("cirgen/components/u32.cpp":275:15)
      auto x5138 = x5137 * x96;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5139 = x5129 + x5138;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5140 = Fp(x5139.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5140);
          reg = x5140;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5141 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5141 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5142 = x5139 - x5141;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5143 = x5142 * x95;
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5143);
        reg = x5143;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x5144 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5144 != Fp::invalid());
      // loc("Top/Mux/4/Mux/7/U32Normalize4/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5145 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5145 != Fp::invalid());
      host_args.at(0) = x5103;
      host_args.at(1) = x5107;
      host_args.at(2) = x5141;
      host_args.at(3) = x5144;
      host_args.at(4) = x5145;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5146 = x5103 - x4895;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5146 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5147 = x5107 - x4899;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5147 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5148 = x5141 - x4907;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5148 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5149 = x5144 - x4911;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5149 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      if (x4972 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        auto x5150 = x5145 - x101;
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        if (x5150 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:162");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5151 = x602 + x84;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5152 = Fp(x5151.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5152);
          reg = x5152;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5153 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5153 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5154 = x5151 - x5153;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5155 = x5154 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5156 = Fp(x5155.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5156);
          reg = x5156;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5157 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5157 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5158 = x5155 - x5157;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5159 = x5158 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5160 = Fp(x5159.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5160);
          reg = x5160;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5161 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5161 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5162 = x5159 - x5161;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5163 = x5162 * x95;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5164 = Fp(x5163.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5164);
          reg = x5164;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5165 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5165 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5166 = x5163 - x5165;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5167 = x5166 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5167);
        reg = x5167;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5168 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5168 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5169 = x101 - x5168;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5170 = x5168 * x5169;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5170);
        reg = x5170;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5171 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5171 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5172 = x98 - x5168;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5173 = x5171 * x5172;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5173 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":164:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x81);
        reg = x81;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/components/mux.h":37:25))
    auto x5174 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x5174 != Fp::invalid());
    if (x5174 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5175 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5175 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":122:41)
      auto x5176 = x602 * x82;
      {
        host_args.at(0) = x5176;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5177 = host_outs.at(0);
        auto x5178 = host_outs.at(1);
        auto x5179 = host_outs.at(2);
        auto x5180 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5177);
          reg = x5177;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5178);
          reg = x5178;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5179);
          reg = x5179;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5180);
          reg = x5180;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5181 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5181 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5182 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5182 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5183 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5183 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5184 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5184 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5176);
        reg = x5176;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5175);
        reg = x5175;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5181);
        reg = x5181;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5182);
        reg = x5182;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5183);
        reg = x5183;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5184);
        reg = x5184;
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":124:6)
      auto x5185 = x5181 - x35;
      // loc("cirgen/circuit/rv32im/ecall.cpp":124:6)
      if (x5185 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:124");
      // loc("cirgen/circuit/rv32im/ecall.cpp":125:7)
      if (x5182 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:125");
      // loc("cirgen/circuit/rv32im/ecall.cpp":126:7)
      if (x5183 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:126");
      // loc("cirgen/circuit/rv32im/ecall.cpp":127:7)
      if (x5184 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:127");
      {
        host_args.at(0) = x34;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5186 = host_outs.at(0);
        auto x5187 = host_outs.at(1);
        auto x5188 = host_outs.at(2);
        auto x5189 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5186);
          reg = x5186;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5187);
          reg = x5187;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5188);
          reg = x5188;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5189);
          reg = x5189;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5190 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5190 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5191 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5191 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5192 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5192 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5193 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5193 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x34);
        reg = x34;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5175);
        reg = x5175;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5190);
        reg = x5190;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5191);
        reg = x5191;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5192);
        reg = x5192;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5193);
        reg = x5193;
      }
      {
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5194 = (x5190 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5194);
          reg = x5194;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5195 = x5190 - x101;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5196 = (x5195 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5196);
          reg = x5196;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5197 = x5190 - x98;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5198 = (x5197 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5198);
          reg = x5198;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5199 = x5190 - x83;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5200 = (x5199 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5201 = x5190 - x84;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5202 = (x5201 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5202);
          reg = x5202;
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5203 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5203 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5204 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5204 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x5205 = x5204 * x98;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x5206 = x5203 + x5205;
      // loc("Top/Mux/4/Mux/8/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5207 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5207 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x5208 = x5207 * x83;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x5209 = x5206 + x5208;
      // loc("Top/Mux/4/Mux/8/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5210 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x5210 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x5211 = x5210 * x84;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x5212 = x5209 + x5211;
      // loc("./cirgen/components/onehot.h":38:8)
      auto x5213 = x5212 - x5190;
      // loc("./cirgen/components/onehot.h":38:8)
      if (x5213 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":134:47)
        auto x5214 = (x5212 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":134:47)
        auto x5215 = x101 - x5214;
        if (x5215 != 0) {
          host_args.at(0) = x5190;
          host_args.at(1) = x5191;
          host_args.at(2) = x5192;
          host_args.at(3) = x5193;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/Reg"("./cirgen/components/mux.h":37:25))
      auto x5216 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5216 != Fp::invalid());
      if (x5216 != 0) {
        {
          host_args.at(0) = x5190;
          host_args.at(1) = x5191;
          host_args.at(2) = x5192;
          host_args.at(3) = x5193;
          host(ctx, "halt", "", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5217 = x602 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5218 = Fp(x5217.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5218);
            reg = x5218;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5219 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5219 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5220 = x5217 - x5219;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5221 = x5220 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5222 = Fp(x5221.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5222);
            reg = x5222;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5223 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5223 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5224 = x5221 - x5223;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5225 = x5224 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5226 = Fp(x5225.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5226);
            reg = x5226;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5227 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5227 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5228 = x5225 - x5227;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5229 = x5228 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5230 = Fp(x5229.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5230);
            reg = x5230;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5231 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5231 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5232 = x5229 - x5231;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5233 = x5232 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5233);
          reg = x5233;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5234 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5234 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5235 = x101 - x5234;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5236 = x5234 * x5235;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5236);
          reg = x5236;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5237 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5237 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5238 = x98 - x5234;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5239 = x5237 * x5238;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5239 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":24:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x76);
          reg = x76;
        }
      }
      if (x5203 != 0) {
        {
          host_args.at(0) = x33;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5240 = host_outs.at(0);
          auto x5241 = host_outs.at(1);
          auto x5242 = host_outs.at(2);
          auto x5243 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5240);
            reg = x5240;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5241);
            reg = x5241;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5242);
            reg = x5242;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5243);
            reg = x5243;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5244 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5244 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5245 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5245 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5246 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5246 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5247 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5247 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x33);
          reg = x33;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5175);
          reg = x5175;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5244);
          reg = x5244;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5245);
          reg = x5245;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5246);
          reg = x5246;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5247);
          reg = x5247;
        }
        {
          host_args.at(0) = x32;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5248 = host_outs.at(0);
          auto x5249 = host_outs.at(1);
          auto x5250 = host_outs.at(2);
          auto x5251 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5248);
            reg = x5248;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5249);
            reg = x5249;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5250);
            reg = x5250;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5251);
            reg = x5251;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5252 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5252 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5253 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5253 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5254 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5254 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5255 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5255 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x32);
          reg = x32;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5175);
          reg = x5175;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5252);
          reg = x5252;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5253);
          reg = x5253;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5254);
          reg = x5254;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5255);
          reg = x5255;
        }
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5256 = (x5244 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5256);
            reg = x5256;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5257 = x5244 - x101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5258 = (x5257 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5258);
            reg = x5258;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5259 = x5244 - x98;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5260 = (x5259 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5260);
            reg = x5260;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5261 = x5244 - x83;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5262 = (x5261 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5262);
            reg = x5262;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5263 = x5244 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5264 = (x5263 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5264);
            reg = x5264;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5265 = x5244 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5266 = (x5265 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5266);
            reg = x5266;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5267 = x5244 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5268 = (x5267 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5268);
            reg = x5268;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5269 = x5244 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5270 = (x5269 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5270);
            reg = x5270;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5271 = x5244 - x76;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5272 = (x5271 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5272);
            reg = x5272;
          }
        }
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5273 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x5273 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5274 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x5274 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5275 = x5274 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5276 = x5273 + x5275;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5277 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x5277 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5278 = x5277 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5279 = x5276 + x5278;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5280 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x5280 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5281 = x5280 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5282 = x5279 + x5281;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5283 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x5283 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5284 = x5283 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5285 = x5282 + x5284;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5286 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x5286 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5287 = x5286 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5288 = x5285 + x5287;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5289 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x5289 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5290 = x5289 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5291 = x5288 + x5290;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5292 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x5292 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5293 = x5292 * x76;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5294 = x5291 + x5293;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x5295 = x5294 - x5244;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x5295 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg"("cirgen/circuit/rv32im/ecall.cpp":43:24))
        auto x5296 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x5296 != Fp::invalid());
        if (x5296 != 0) {
          host_args.at(0) = x5294;
          host_args.at(1) = x5252;
          host_args.at(2) = x5253;
          host_args.at(3) = x5254;
          host_args.at(4) = x5255;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5297 = x5253 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5298 = x5297 + x5252;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][36] = x5298;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5299 = x5255 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5300 = x5299 + x5254;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][37] = x5300;
        }
        if (x5273 != 0) {
          host_args.at(0) = x5294;
          host_args.at(1) = x5252;
          host_args.at(2) = x5253;
          host_args.at(3) = x5254;
          host_args.at(4) = x5255;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5301 = x5253 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5302 = x5301 + x5252;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][38] = x5302;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5303 = x5255 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5304 = x5303 + x5254;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][39] = x5304;
        }
        if (x5274 != 0) {
          host_args.at(0) = x5294;
          host_args.at(1) = x5252;
          host_args.at(2) = x5253;
          host_args.at(3) = x5254;
          host_args.at(4) = x5255;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5305 = x5253 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5306 = x5305 + x5252;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][40] = x5306;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5307 = x5255 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5308 = x5307 + x5254;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][41] = x5308;
        }
        if (x5277 != 0) {
          host_args.at(0) = x5294;
          host_args.at(1) = x5252;
          host_args.at(2) = x5253;
          host_args.at(3) = x5254;
          host_args.at(4) = x5255;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5309 = x5253 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5310 = x5309 + x5252;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][42] = x5310;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5311 = x5255 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5312 = x5311 + x5254;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][43] = x5312;
        }
        if (x5280 != 0) {
          host_args.at(0) = x5294;
          host_args.at(1) = x5252;
          host_args.at(2) = x5253;
          host_args.at(3) = x5254;
          host_args.at(4) = x5255;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5313 = x5253 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5314 = x5313 + x5252;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][44] = x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5315 = x5255 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5316 = x5315 + x5254;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][45] = x5316;
        }
        if (x5283 != 0) {
          host_args.at(0) = x5294;
          host_args.at(1) = x5252;
          host_args.at(2) = x5253;
          host_args.at(3) = x5254;
          host_args.at(4) = x5255;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5317 = x5253 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5318 = x5317 + x5252;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][46] = x5318;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5319 = x5255 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5320 = x5319 + x5254;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][47] = x5320;
        }
        if (x5286 != 0) {
          host_args.at(0) = x5294;
          host_args.at(1) = x5252;
          host_args.at(2) = x5253;
          host_args.at(3) = x5254;
          host_args.at(4) = x5255;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5321 = x5253 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5322 = x5321 + x5252;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][48] = x5322;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5323 = x5255 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5324 = x5323 + x5254;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][49] = x5324;
        }
        if (x5289 != 0) {
          host_args.at(0) = x5294;
          host_args.at(1) = x5252;
          host_args.at(2) = x5253;
          host_args.at(3) = x5254;
          host_args.at(4) = x5255;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5325 = x5253 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5326 = x5325 + x5252;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][50] = x5326;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5327 = x5255 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5328 = x5327 + x5254;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][51] = x5328;
        }
        if (x5292 != 0) {
          host_args.at(0) = x5294;
          host_args.at(1) = x5252;
          host_args.at(2) = x5253;
          host_args.at(3) = x5254;
          host_args.at(4) = x5255;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5329 = x5253 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5330 = x5329 + x5252;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][52] = x5330;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5331 = x5255 * x96;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5332 = x5331 + x5254;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][53] = x5332;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":50:17)
        auto x5333 = x602 + x84;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5334 = x5333 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5335 = Fp(x5334.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5335);
            reg = x5335;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5336 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5336 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5337 = x5334 - x5336;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5338 = x5337 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5339 = Fp(x5338.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5339);
            reg = x5339;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5340 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5340 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5341 = x5338 - x5340;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5342 = x5341 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5343 = Fp(x5342.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5343);
            reg = x5343;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5344 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5344 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5345 = x5342 - x5344;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5346 = x5345 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5347 = Fp(x5346.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5347);
            reg = x5347;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5348 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5348 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5349 = x5346 - x5348;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5350 = x5349 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5350);
          reg = x5350;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5351 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5351 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5352 = x101 - x5351;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5353 = x5351 * x5352;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5353);
          reg = x5353;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5354 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5354 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5355 = x98 - x5351;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5356 = x5354 * x5355;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5356 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":51:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
      }
      if (x5204 != 0) {
        {
          host_args.at(0) = x5190;
          host_args.at(1) = x5191;
          host_args.at(2) = x5192;
          host_args.at(3) = x5193;
          host(ctx, "log", "  Doing syscall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
          host(ctx, "syscall", "", host_args.data(), 0, host_outs.data(), 8);
          auto x5357 = host_outs.at(0);
          auto x5358 = host_outs.at(1);
          auto x5359 = host_outs.at(2);
          auto x5360 = host_outs.at(3);
          auto x5361 = host_outs.at(4);
          auto x5362 = host_outs.at(5);
          auto x5363 = host_outs.at(6);
          auto x5364 = host_outs.at(7);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5357);
            reg = x5357;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5358);
            reg = x5358;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5359);
            reg = x5359;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5360);
            reg = x5360;
          }
          {
            host_args.at(0) = x33;
            host_args.at(1) = x5357;
            host_args.at(2) = x5358;
            host_args.at(3) = x5359;
            host_args.at(4) = x5360;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5365 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x5365 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5366 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x5366 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5367 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x5367 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5368 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x5368 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x33);
            reg = x33;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5175);
            reg = x5175;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5365);
            reg = x5365;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5366);
            reg = x5366;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5367);
            reg = x5367;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5368);
            reg = x5368;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5361);
            reg = x5361;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5362);
            reg = x5362;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5363);
            reg = x5363;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5364);
            reg = x5364;
          }
          {
            host_args.at(0) = x32;
            host_args.at(1) = x5361;
            host_args.at(2) = x5362;
            host_args.at(3) = x5363;
            host_args.at(4) = x5364;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5369 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x5369 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5370 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x5370 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5371 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x5371 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5372 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x5372 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x32);
            reg = x32;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5175);
            reg = x5175;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5369);
            reg = x5369;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5370);
            reg = x5370;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5371);
            reg = x5371;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5372);
            reg = x5372;
          }
          host_args.at(0) = x5365;
          host_args.at(1) = x5366;
          host_args.at(2) = x5367;
          host_args.at(3) = x5368;
          host(ctx, "log", "  A0 = %w", host_args.data(), 4, host_outs.data(), 0);
          host_args.at(0) = x5369;
          host_args.at(1) = x5370;
          host_args.at(2) = x5371;
          host_args.at(3) = x5372;
          host(ctx, "log", "  A1 = %w", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":148:10))
        auto x5373 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x5373 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":71:6)
        auto x5374 = x5373 - x5175;
        // loc("cirgen/circuit/rv32im/ecall.cpp":71:6)
        if (x5374 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:71");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg1"("cirgen/components/ram.cpp":148:10))
        auto x5375 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x5375 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":72:6)
        auto x5376 = x5375 - x5175;
        // loc("cirgen/circuit/rv32im/ecall.cpp":72:6)
        if (x5376 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:72");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":144:10))
        auto x5377 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5377 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":73:6)
        auto x5378 = x5377 - x33;
        // loc("cirgen/circuit/rv32im/ecall.cpp":73:6)
        if (x5378 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:73");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg"("cirgen/components/ram.cpp":144:10))
        auto x5379 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5379 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":74:6)
        auto x5380 = x5379 - x32;
        // loc("cirgen/circuit/rv32im/ecall.cpp":74:6)
        if (x5380 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:74");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg2"("cirgen/components/ram.cpp":152:10))
        auto x5381 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5381 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        auto x5382 = x5381 - x98;
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        if (x5382 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:75");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg2"("cirgen/components/ram.cpp":152:10))
        auto x5383 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5383 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        auto x5384 = x5383 - x98;
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        if (x5384 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:76");
        // loc("cirgen/circuit/rv32im/ecall.cpp":78:17)
        auto x5385 = x602 + x84;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5386 = x5385 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5387 = Fp(x5386.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5387);
            reg = x5387;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5388 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5388 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5389 = x5386 - x5388;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5390 = x5389 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5391 = Fp(x5390.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5391);
            reg = x5391;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5392 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5392 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5393 = x5390 - x5392;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5394 = x5393 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5395 = Fp(x5394.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5395);
            reg = x5395;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5396 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5396 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5397 = x5394 - x5396;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5398 = x5397 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5399 = Fp(x5398.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5399);
            reg = x5399;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5400 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5400 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5401 = x5398 - x5400;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5402 = x5401 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5402);
          reg = x5402;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5403 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5403 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5404 = x101 - x5403;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5405 = x5403 * x5404;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5405);
          reg = x5405;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5406 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5406 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5407 = x98 - x5403;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5408 = x5406 * x5407;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5408 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":79:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
      }
      if (x5207 != 0) {
        {
          host_args.at(0) = x33;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5409 = host_outs.at(0);
          auto x5410 = host_outs.at(1);
          auto x5411 = host_outs.at(2);
          auto x5412 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5409);
            reg = x5409;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5410);
            reg = x5410;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5411);
            reg = x5411;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5412);
            reg = x5412;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5413 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5413 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5414 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5414 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5415 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5415 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5416 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5416 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x33);
          reg = x33;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5175);
          reg = x5175;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5413);
          reg = x5413;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5414);
          reg = x5414;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5415);
          reg = x5415;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5416);
          reg = x5416;
        }
        {
          host_args.at(0) = x32;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5417 = host_outs.at(0);
          auto x5418 = host_outs.at(1);
          auto x5419 = host_outs.at(2);
          auto x5420 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5417);
            reg = x5417;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5418);
            reg = x5418;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5419);
            reg = x5419;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5420);
            reg = x5420;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5421 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5421 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5422 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5422 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5423 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5423 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5424 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5424 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x32);
          reg = x32;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5175);
          reg = x5175;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5421);
          reg = x5421;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5422);
          reg = x5422;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5423);
          reg = x5423;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5424);
          reg = x5424;
        }
        {
          host_args.at(0) = x31;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5425 = host_outs.at(0);
          auto x5426 = host_outs.at(1);
          auto x5427 = host_outs.at(2);
          auto x5428 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5425);
            reg = x5425;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5426);
            reg = x5426;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5427);
            reg = x5427;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5428);
            reg = x5428;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5429 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5429 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5430 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5430 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5431 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5431 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5432 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5432 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x31);
          reg = x31;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5175);
          reg = x5175;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5429);
          reg = x5429;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5430);
          reg = x5430;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5431);
          reg = x5431;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5432);
          reg = x5432;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":92:17)
        auto x5433 = x602 + x84;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5434 = x5433 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5435 = Fp(x5434.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5435);
            reg = x5435;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5436 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5436 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5437 = x5434 - x5436;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5438 = x5437 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5439 = Fp(x5438.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5439);
            reg = x5439;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5440 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5440 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5441 = x5438 - x5440;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5442 = x5441 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5443 = Fp(x5442.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5443);
            reg = x5443;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5444 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5444 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5445 = x5442 - x5444;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5446 = x5445 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5447 = Fp(x5446.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5447);
            reg = x5447;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5448 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5448 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5449 = x5446 - x5448;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5450 = x5449 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5450);
          reg = x5450;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5451 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5451 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5452 = x101 - x5451;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5453 = x5451 * x5452;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5453);
          reg = x5453;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5454 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5454 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5455 = x98 - x5451;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5456 = x5454 * x5455;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5456 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":93:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x75);
          reg = x75;
        }
      }
      if (x5210 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":102:3)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x602);
          reg = x602;
        }
        {
          host_args.at(0) = x33;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5457 = host_outs.at(0);
          auto x5458 = host_outs.at(1);
          auto x5459 = host_outs.at(2);
          auto x5460 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5457);
            reg = x5457;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5458);
            reg = x5458;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5459);
            reg = x5459;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5460);
            reg = x5460;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5461 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5461 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5462 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5462 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5463 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5463 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5464 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5464 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x33);
          reg = x33;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5175);
          reg = x5175;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5461);
          reg = x5461;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5462);
          reg = x5462;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5463);
          reg = x5463;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5464);
          reg = x5464;
        }
        {
          host_args.at(0) = x32;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5465 = host_outs.at(0);
          auto x5466 = host_outs.at(1);
          auto x5467 = host_outs.at(2);
          auto x5468 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5465);
            reg = x5465;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5466);
            reg = x5466;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5467);
            reg = x5467;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5468);
            reg = x5468;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5469 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5469 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5470 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5470 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5471 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5471 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5472 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5472 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x32);
          reg = x32;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5175);
          reg = x5175;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5469);
          reg = x5469;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5470);
          reg = x5470;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5471);
          reg = x5471;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5472);
          reg = x5472;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5473 = x5462 * x96;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5474 = x5461 + x5473;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5475 = x5463 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5476 = x5474 + x5475;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5477 = x5464 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5478 = x5476 + x5477;
        // loc("cirgen/circuit/rv32im/ecall.cpp":111:17)
        auto x5479 = x5478 - x84;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5480 = x5479 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5481 = Fp(x5480.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5481);
            reg = x5481;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5482 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5482 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5483 = x5480 - x5482;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5484 = x5483 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5485 = Fp(x5484.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5485);
            reg = x5485;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5486 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5486 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5487 = x5484 - x5486;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5488 = x5487 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5489 = Fp(x5488.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5489);
            reg = x5489;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5490 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5490 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5491 = x5488 - x5490;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5492 = x5491 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5493 = Fp(x5492.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5493);
            reg = x5493;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5494 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5494 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5495 = x5492 - x5494;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5496 = x5495 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5496);
          reg = x5496;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5497 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5497 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5498 = x101 - x5497;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5499 = x5497 * x5498;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5499);
          reg = x5499;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5500 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5500 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5501 = x98 - x5497;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5502 = x5500 * x5501;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5502 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":112:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/components/mux.h":37:25))
    auto x5503 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x5503 != Fp::invalid());
    if (x5503 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5504 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5504 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/sha.cpp":174:69))
      auto x5505 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x5505 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg13"("cirgen/circuit/rv32im/sha.cpp":175:77))
      auto x5506 = args[2][107 * steps + ((cycle - 1) & mask)];
      assert(x5506 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":176:35)
      auto x5507 = x5505 + x5506;
      if (x5507 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":178:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5508 = x101 - x5505;
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5509 = x5508 - x5506;
      if (x5509 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5510 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5510 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5510);
          reg = x5510;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":183:40))
        auto x5511 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5511 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":183:40)
        auto x5512 = x5511 - x101;
        // loc("cirgen/circuit/rv32im/sha.cpp":183:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5512);
          reg = x5512;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5513 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x5513 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5514 = (x5513 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5514);
          reg = x5514;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5515 = inv(x5513);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5515);
          reg = x5515;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5516 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x5516 != Fp::invalid());
      if (x5516 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x5513 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x5517 = x101 - x5516;
      if (x5517 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5518 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x5518 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5519 = x5513 * x5518;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5520 = x5519 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x5520 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      if (x5516 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":187:29)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
      }
      if (x5517 != 0) {
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5521 = x2131 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5522 = x1346 + x5521;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5523 = x2835 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5524 = x5522 + x5523;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5525 = x3590 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5526 = x5524 + x5525;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5527 = x4032 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5528 = x5526 + x5527;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5529 = x4397 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5530 = x5528 + x5529;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5531 = x4829 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5532 = x5530 + x5531;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5533 = x5174 * x76;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5534 = x5532 + x5533;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5535 = x5503 * x75;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5536 = x5534 + x5535;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5537 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x5537 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5538 = x5537 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5539 = x5536 + x5538;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5540 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x5540 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5541 = x5540 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5542 = x5539 + x5541;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5543 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x5543 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5544 = x5543 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5545 = x5542 + x5544;
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5546 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x5546 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5547 = x5546 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5548 = x5545 + x5547;
        // loc("cirgen/circuit/rv32im/sha.cpp":188:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5548);
          reg = x5548;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5549 = x602 + x84;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5550 = Fp(x5549.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5550);
          reg = x5550;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5551 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5551 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5552 = x5549 - x5551;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5553 = x5552 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5554 = Fp(x5553.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5554);
          reg = x5554;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5555 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5555 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5556 = x5553 - x5555;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5557 = x5556 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5558 = Fp(x5557.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5558);
          reg = x5558;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5559 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5559 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5560 = x5557 - x5559;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5561 = x5560 * x95;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5562 = Fp(x5561.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5562);
          reg = x5562;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5563 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5563 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5564 = x5561 - x5563;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5565 = x5564 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5565);
        reg = x5565;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5566 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5566 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5567 = x101 - x5566;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5568 = x5566 * x5567;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5568);
        reg = x5568;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5569 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5569 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5570 = x98 - x5566;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5571 = x5569 * x5570;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5571 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5572 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x5572 != Fp::invalid());
      host_args.at(0) = x75;
      host_args.at(1) = x5572;
      host_args.at(2) = x5513;
      host(ctx, "log", "SHA_INIT: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5505 != 0) {
        {
          host_args.at(0) = x30;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5573 = host_outs.at(0);
          auto x5574 = host_outs.at(1);
          auto x5575 = host_outs.at(2);
          auto x5576 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5573);
            reg = x5573;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5574);
            reg = x5574;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5575);
            reg = x5575;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5576);
            reg = x5576;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5577 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5577 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5578 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5578 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5579 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5579 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5580 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5580 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x30);
          reg = x30;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5504);
          reg = x5504;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5577);
          reg = x5577;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5578);
          reg = x5578;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5579);
          reg = x5579;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5580);
          reg = x5580;
        }
        {
          host_args.at(0) = x29;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5581 = host_outs.at(0);
          auto x5582 = host_outs.at(1);
          auto x5583 = host_outs.at(2);
          auto x5584 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5581);
            reg = x5581;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5582);
            reg = x5582;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5583);
            reg = x5583;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5584);
            reg = x5584;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5585 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5585 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5586 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5586 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5587 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5587 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5588 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5588 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x29);
          reg = x29;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5504);
          reg = x5504;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5585);
          reg = x5585;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5586);
          reg = x5586;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5587);
          reg = x5587;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5588);
          reg = x5588;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5589 = args[2][125 * steps + ((cycle - 1) & mask)];
        assert(x5589 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5590 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x5590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5591 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x5591 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5592 = args[2][128 * steps + ((cycle - 1) & mask)];
        assert(x5592 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5593 = x5590 * x96;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5594 = x5589 + x5593;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5595 = x5591 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5596 = x5594 + x5595;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5597 = x5592 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5598 = x5596 + x5597;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:58)
        auto x5599 = x5598 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5599);
          reg = x5599;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5600 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5600 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5601 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5601 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5602 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5602 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5603 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5603 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5604 = x5601 * x96;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5605 = x5600 + x5604;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5606 = x5602 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5607 = x5605 + x5606;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5608 = x5603 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5609 = x5607 + x5608;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:57)
        auto x5610 = x5609 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5610);
          reg = x5610;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5611 = x5578 * x96;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5612 = x5577 + x5611;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5613 = x5579 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5614 = x5612 + x5613;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5615 = x5580 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5616 = x5614 + x5615;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:16)
        auto x5617 = x5616 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5617);
          reg = x5617;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5618 = x5586 * x96;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5619 = x5585 + x5618;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5620 = x5587 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5621 = x5619 + x5620;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5622 = x5588 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5623 = x5621 + x5622;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:16)
        auto x5624 = x5623 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5624);
          reg = x5624;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5625 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x5625 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5626 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5627 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5627 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5628 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5628 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5629 = x5626 * x96;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5630 = x5625 + x5629;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5631 = x5627 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5632 = x5630 + x5631;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5633 = x5628 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5634 = x5632 + x5633;
        // loc("cirgen/circuit/rv32im/sha.cpp":201:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5634);
          reg = x5634;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5635 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5635 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":204:10)
        auto x5636 = x5635 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5637 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5637 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":205:10)
        auto x5638 = x5637 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5639 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5639 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":206:10)
        auto x5640 = x5639 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5641 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5641 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":207:10)
        auto x5642 = x5641 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5643 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5643 != Fp::invalid());
        host_args.at(0) = x5636;
        host_args.at(1) = x5638;
        host_args.at(2) = x5640;
        host_args.at(3) = x5642;
        host_args.at(4) = x5643;
        host(ctx, "log", "  FromEcall: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5506 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("Top/Mux/4/Mux/13/Reg1"("cirgen/circuit/rv32im/sha.cpp":214:53))
        auto x5644 = args[2][109 * steps + ((cycle - 1) & mask)];
        assert(x5644 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":214:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5644);
          reg = x5644;
        }
        // loc("Top/Mux/4/Mux/13/Reg2"("cirgen/circuit/rv32im/sha.cpp":215:51))
        auto x5645 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x5645 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":215:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5645);
          reg = x5645;
        }
        // loc("Top/Mux/4/Mux/13/Reg3"("cirgen/circuit/rv32im/sha.cpp":216:50))
        auto x5646 = args[2][111 * steps + ((cycle - 1) & mask)];
        assert(x5646 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":216:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5646);
          reg = x5646;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":217:50)
        auto x5647 = x5646 + x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5647);
          reg = x5647;
        }
        // loc("Top/Mux/4/Mux/13/Reg4"("cirgen/circuit/rv32im/sha.cpp":218:49))
        auto x5648 = args[2][112 * steps + ((cycle - 1) & mask)];
        assert(x5648 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5648);
          reg = x5648;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5649 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5649 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":221:10)
        auto x5650 = x5649 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5651 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5651 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":222:10)
        auto x5652 = x5651 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5653 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5653 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        auto x5654 = x5653 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5655 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5655 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        auto x5656 = x5655 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5657 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5657 != Fp::invalid());
        host_args.at(0) = x5650;
        host_args.at(1) = x5652;
        host_args.at(2) = x5654;
        host_args.at(3) = x5656;
        host_args.at(4) = x5657;
        host(ctx, "log", "  FromPageFault: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5509 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":228:42))
        auto x5658 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x5658 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":228:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5658);
          reg = x5658;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":229:40))
        auto x5659 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5659 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":229:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5659);
          reg = x5659;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":230:36))
        auto x5660 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5660 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5660);
          reg = x5660;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":231:36))
        auto x5661 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5661 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5661);
          reg = x5661;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":232:38))
        auto x5662 = args[2][138 * steps + ((cycle - 1) & mask)];
        assert(x5662 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":232:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5662);
          reg = x5662;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5663 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x5663 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5663);
          reg = x5663;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5664 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5664 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":236:24)
        auto x5665 = x5664 + x5513;
        {
          host_args.at(0) = x5665;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5666 = host_outs.at(0);
          auto x5667 = host_outs.at(1);
          auto x5668 = host_outs.at(2);
          auto x5669 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5666);
            reg = x5666;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5667);
            reg = x5667;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5668);
            reg = x5668;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5669);
            reg = x5669;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5670 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5670 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5671 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5671 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5672 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5672 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5673 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5673 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5665);
          reg = x5665;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5504);
          reg = x5504;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5670);
          reg = x5670;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5671);
          reg = x5671;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5672);
          reg = x5672;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5673);
          reg = x5673;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":237:24)
        auto x5674 = x5665 + x84;
        {
          host_args.at(0) = x5674;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5675 = host_outs.at(0);
          auto x5676 = host_outs.at(1);
          auto x5677 = host_outs.at(2);
          auto x5678 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5675);
            reg = x5675;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5676);
            reg = x5676;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5677);
            reg = x5677;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5678);
            reg = x5678;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5679 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5679 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5680 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5680 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5681 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5681 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5682 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5682 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5674);
          reg = x5674;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5504);
          reg = x5504;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5679);
          reg = x5679;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5680);
          reg = x5680;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5681);
          reg = x5681;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5682);
          reg = x5682;
        }
      }
      // loc("./cirgen/components/bits.h":18:23)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5683 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x5683 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5684 = (x5683 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5684);
          reg = x5684;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5685 = inv(x5683);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5685);
          reg = x5685;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5686 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x5686 != Fp::invalid());
      if (x5686 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x5683 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x5687 = x101 - x5686;
      if (x5687 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5688 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5688 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5689 = x5683 * x5688;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5690 = x5689 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x5690 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5691 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5691 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5692 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5692 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5693 = x5692 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5694 = x5691 + x5693;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5695 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5695 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5696 = x5695 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5697 = x5694 + x5696;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5698 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x5698 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5699 = x5698 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5700 = x5697 + x5699;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5701 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x5701 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5702 = x5701 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5703 = x5700 + x5702;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5704 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x5704 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5705 = x5704 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5706 = x5703 + x5705;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5707 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x5707 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5708 = x5707 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5709 = x5706 + x5708;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5710 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x5710 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5711 = x5710 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5712 = x5709 + x5711;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5713 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x5713 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5714 = x5713 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5715 = x5712 + x5714;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5716 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x5716 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5717 = x5716 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5718 = x5715 + x5717;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5719 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5719 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5720 = x5719 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5721 = x5718 + x5720;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5722 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5722 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5723 = x5722 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5724 = x5721 + x5723;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5725 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5725 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5726 = x5725 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5727 = x5724 + x5726;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5728 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5728 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5729 = x5728 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5730 = x5727 + x5729;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5731 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5731 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5732 = x5731 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5733 = x5730 + x5732;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5734 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5734 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5735 = x5734 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5736 = x5733 + x5735;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5737 = x100 - x5736;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5738 = x5737 * x15;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5738);
        reg = x5738;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5739 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5739 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5740 = Fp(x5739.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5740);
          reg = x5740;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5741 = Fp(x5739.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5742 = x5741 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5742);
          reg = x5742;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5743 = Fp(x5739.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5744 = x5743 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5744);
          reg = x5744;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5745 = Fp(x5739.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5746 = x5745 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5746);
          reg = x5746;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5747 = Fp(x5739.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5748 = x5747 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5748);
          reg = x5748;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5749 = Fp(x5739.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5750 = x5749 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5750);
          reg = x5750;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5751 = Fp(x5739.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5752 = x5751 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5752);
          reg = x5752;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5753 = Fp(x5739.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5754 = x5753 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5754);
          reg = x5754;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5755 = Fp(x5739.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5756 = x5755 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5756);
          reg = x5756;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5757 = Fp(x5739.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5758 = x5757 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5758);
          reg = x5758;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5759 = Fp(x5739.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5760 = x5759 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5760);
          reg = x5760;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5761 = Fp(x5739.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5762 = x5761 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5762);
          reg = x5762;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5763 = Fp(x5739.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5764 = x5763 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5764);
          reg = x5764;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5765 = Fp(x5739.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5766 = x5765 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5766);
          reg = x5766;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5767 = Fp(x5739.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5768 = x5767 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5768);
          reg = x5768;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5769 = Fp(x5739.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5770 = x5769 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5770);
          reg = x5770;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5771 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5771 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5772 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5772 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5773 = x5772 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5774 = x5771 + x5773;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5775 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5775 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5776 = x5775 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5777 = x5774 + x5776;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5778 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5778 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5779 = x5778 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5780 = x5777 + x5779;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5781 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5781 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5782 = x5781 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5783 = x5780 + x5782;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5784 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5784 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5785 = x5784 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5786 = x5783 + x5785;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5787 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5787 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5788 = x5787 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5789 = x5786 + x5788;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5790 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5790 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5791 = x5790 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5792 = x5789 + x5791;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5793 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5793 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5794 = x5793 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5795 = x5792 + x5794;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5796 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5796 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5797 = x5796 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5798 = x5795 + x5797;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5799 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5799 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5800 = x5799 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5801 = x5798 + x5800;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5802 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5802 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5803 = x5802 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5804 = x5801 + x5803;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5805 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5805 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5806 = x5805 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5807 = x5804 + x5806;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5808 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5808 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5809 = x5808 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5810 = x5807 + x5809;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5811 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5811 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5812 = x5811 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5813 = x5810 + x5812;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5814 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x5814 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5815 = x5814 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5816 = x5813 + x5815;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5817 = x5739 - x5816;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5818 = x5817 * x15;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5818);
        reg = x5818;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5819 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5820 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5820 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5821 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5821 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5822 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5822 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x5823 = x5821 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x5824 = x5822 + x5823;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x5825 = x5819 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x5826 = x5820 + x5825;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5827 = Fp(x5824.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5827);
          reg = x5827;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5828 = Fp(x5824.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5829 = x5828 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5829);
          reg = x5829;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5830 = Fp(x5824.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5831 = x5830 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5831);
          reg = x5831;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5832 = Fp(x5824.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5833 = x5832 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5833);
          reg = x5833;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5834 = Fp(x5824.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5835 = x5834 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5835);
          reg = x5835;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5836 = Fp(x5824.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5837 = x5836 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5837);
          reg = x5837;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5838 = Fp(x5824.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5839 = x5838 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5839);
          reg = x5839;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5840 = Fp(x5824.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5841 = x5840 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5841);
          reg = x5841;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5842 = Fp(x5824.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5843 = x5842 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5843);
          reg = x5843;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5844 = Fp(x5824.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5845 = x5844 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5845);
          reg = x5845;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5846 = Fp(x5824.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5847 = x5846 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5847);
          reg = x5847;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5848 = Fp(x5824.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5849 = x5848 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5849);
          reg = x5849;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5850 = Fp(x5824.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5851 = x5850 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5851);
          reg = x5851;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5852 = Fp(x5824.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5853 = x5852 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5853);
          reg = x5853;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5854 = Fp(x5824.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5855 = x5854 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5855);
          reg = x5855;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5856 = Fp(x5824.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5857 = x5856 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5857);
          reg = x5857;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5858 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x5858 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5859 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x5859 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5860 = x5859 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5861 = x5858 + x5860;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5862 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x5862 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5863 = x5862 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5864 = x5861 + x5863;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5865 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x5865 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5866 = x5865 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5867 = x5864 + x5866;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5868 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x5868 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5869 = x5868 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5870 = x5867 + x5869;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5871 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x5871 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5872 = x5871 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5873 = x5870 + x5872;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5874 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x5874 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5875 = x5874 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5876 = x5873 + x5875;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5877 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x5877 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5878 = x5877 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5879 = x5876 + x5878;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5880 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x5880 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5881 = x5880 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5882 = x5879 + x5881;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5883 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x5883 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5884 = x5883 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5885 = x5882 + x5884;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5886 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x5886 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5887 = x5886 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5888 = x5885 + x5887;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5889 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x5889 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5890 = x5889 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5891 = x5888 + x5890;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5892 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x5892 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5893 = x5892 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5894 = x5891 + x5893;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5895 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x5895 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5896 = x5895 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5897 = x5894 + x5896;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5898 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x5898 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5899 = x5898 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5900 = x5897 + x5899;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5901 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x5901 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5902 = x5901 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5903 = x5900 + x5902;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5904 = x5824 - x5903;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5905 = x5904 * x15;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x5906 = Fp(x5905.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5906);
          reg = x5906;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5907 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5907 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x5908 = x5905 - x5907;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x5909 = x5908 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x5910 = x101 - x5909;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x5911 = x5909 * x5910;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x5911 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x5912 = x5826 + x5905;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5913 = Fp(x5912.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5913);
          reg = x5913;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5914 = Fp(x5912.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5915 = x5914 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5915);
          reg = x5915;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5916 = Fp(x5912.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5917 = x5916 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5917);
          reg = x5917;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5918 = Fp(x5912.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5919 = x5918 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5919);
          reg = x5919;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5920 = Fp(x5912.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5921 = x5920 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5921);
          reg = x5921;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5922 = Fp(x5912.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5923 = x5922 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5923);
          reg = x5923;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5924 = Fp(x5912.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5925 = x5924 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5925);
          reg = x5925;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5926 = Fp(x5912.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5927 = x5926 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5927);
          reg = x5927;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5928 = Fp(x5912.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5929 = x5928 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5929);
          reg = x5929;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5930 = Fp(x5912.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5931 = x5930 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5931);
          reg = x5931;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5932 = Fp(x5912.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5933 = x5932 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5933);
          reg = x5933;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5934 = Fp(x5912.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5935 = x5934 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5935);
          reg = x5935;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5936 = Fp(x5912.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5937 = x5936 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5937);
          reg = x5937;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5938 = Fp(x5912.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5939 = x5938 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5939);
          reg = x5939;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5940 = Fp(x5912.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5941 = x5940 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5941);
          reg = x5941;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5942 = Fp(x5912.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5943 = x5942 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5943);
          reg = x5943;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5944 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x5944 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5945 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x5945 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5946 = x5945 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5947 = x5944 + x5946;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5948 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x5948 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5949 = x5948 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5950 = x5947 + x5949;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5951 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x5951 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5952 = x5951 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5953 = x5950 + x5952;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5954 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x5954 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5955 = x5954 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5956 = x5953 + x5955;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5957 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x5957 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5958 = x5957 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5959 = x5956 + x5958;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5960 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x5960 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5961 = x5960 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5962 = x5959 + x5961;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5963 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x5963 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5964 = x5963 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5965 = x5962 + x5964;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5966 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x5966 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5967 = x5966 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5968 = x5965 + x5967;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5969 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x5969 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5970 = x5969 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5971 = x5968 + x5970;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5972 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5972 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5973 = x5972 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5974 = x5971 + x5973;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5975 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5975 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5976 = x5975 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5977 = x5974 + x5976;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5978 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5978 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5979 = x5978 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5980 = x5977 + x5979;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5981 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5981 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5982 = x5981 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5983 = x5980 + x5982;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5984 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x5984 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5985 = x5984 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5986 = x5983 + x5985;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5987 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x5987 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5988 = x5987 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5989 = x5986 + x5988;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5990 = x5912 - x5989;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5991 = x5990 * x15;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x5992 = Fp(x5991.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5992);
          reg = x5992;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5993 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x5993 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x5994 = x5991 - x5993;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x5995 = x5994 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x5996 = x101 - x5995;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x5997 = x5995 * x5996;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x5997 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5998 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5998 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5999 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5999 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6000 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6000 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6001 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6001 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6002 = x6000 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6003 = x6001 + x6002;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6004 = x5998 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6005 = x5999 + x6004;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6006 = Fp(x6003.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6006);
          reg = x6006;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6007 = Fp(x6003.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6008 = x6007 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6008);
          reg = x6008;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6009 = Fp(x6003.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6010 = x6009 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6010);
          reg = x6010;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6011 = Fp(x6003.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6012 = x6011 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6012);
          reg = x6012;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6013 = Fp(x6003.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6014 = x6013 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6014);
          reg = x6014;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6015 = Fp(x6003.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6016 = x6015 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6016);
          reg = x6016;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6017 = Fp(x6003.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6018 = x6017 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6018);
          reg = x6018;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6019 = Fp(x6003.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6020 = x6019 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6020);
          reg = x6020;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6021 = Fp(x6003.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6022 = x6021 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6022);
          reg = x6022;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6023 = Fp(x6003.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6024 = x6023 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6024);
          reg = x6024;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6025 = Fp(x6003.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6026 = x6025 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6026);
          reg = x6026;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6027 = Fp(x6003.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6028 = x6027 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6028);
          reg = x6028;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6029 = Fp(x6003.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6030 = x6029 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6030);
          reg = x6030;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6031 = Fp(x6003.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6032 = x6031 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6032);
          reg = x6032;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6033 = Fp(x6003.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6034 = x6033 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6034);
          reg = x6034;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6035 = Fp(x6003.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6036 = x6035 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6036);
          reg = x6036;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6037 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x6037 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6038 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x6038 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6039 = x6038 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6040 = x6037 + x6039;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6041 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x6041 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6042 = x6041 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6043 = x6040 + x6042;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6044 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x6044 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6045 = x6044 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6046 = x6043 + x6045;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6047 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x6047 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6048 = x6047 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6049 = x6046 + x6048;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6050 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x6050 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6051 = x6050 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6052 = x6049 + x6051;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6053 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x6053 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6054 = x6053 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6055 = x6052 + x6054;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6056 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x6056 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6057 = x6056 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6058 = x6055 + x6057;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6059 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x6059 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6060 = x6059 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6061 = x6058 + x6060;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6062 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x6062 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6063 = x6062 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6064 = x6061 + x6063;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6065 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x6065 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6066 = x6065 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6067 = x6064 + x6066;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6068 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x6068 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6069 = x6068 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6070 = x6067 + x6069;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6071 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x6071 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6072 = x6071 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6073 = x6070 + x6072;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6074 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x6074 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6075 = x6074 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6076 = x6073 + x6075;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6077 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x6077 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6078 = x6077 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6079 = x6076 + x6078;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6080 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x6080 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6081 = x6080 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6082 = x6079 + x6081;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6083 = x6003 - x6082;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6084 = x6083 * x15;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6085 = Fp(x6084.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6085);
          reg = x6085;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6086 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x6086 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6087 = x6084 - x6086;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6088 = x6087 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6089 = x101 - x6088;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6090 = x6088 * x6089;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6090 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6091 = x6005 + x6084;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6092 = Fp(x6091.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6092);
          reg = x6092;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6093 = Fp(x6091.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6094 = x6093 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6094);
          reg = x6094;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6095 = Fp(x6091.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6096 = x6095 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6096);
          reg = x6096;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6097 = Fp(x6091.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6098 = x6097 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6098);
          reg = x6098;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6099 = Fp(x6091.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6100 = x6099 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6100);
          reg = x6100;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6101 = Fp(x6091.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6102 = x6101 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6102);
          reg = x6102;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6103 = Fp(x6091.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6104 = x6103 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6104);
          reg = x6104;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6105 = Fp(x6091.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6106 = x6105 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6106);
          reg = x6106;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6107 = Fp(x6091.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6108 = x6107 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6108);
          reg = x6108;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6109 = Fp(x6091.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6110 = x6109 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6110);
          reg = x6110;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6111 = Fp(x6091.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6112 = x6111 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6112);
          reg = x6112;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6113 = Fp(x6091.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6114 = x6113 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6114);
          reg = x6114;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6115 = Fp(x6091.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6116 = x6115 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6116);
          reg = x6116;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6117 = Fp(x6091.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6118 = x6117 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6118);
          reg = x6118;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6119 = Fp(x6091.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6120 = x6119 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6120);
          reg = x6120;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6121 = Fp(x6091.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6122 = x6121 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6122);
          reg = x6122;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6123 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x6123 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6124 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x6124 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6125 = x6124 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6126 = x6123 + x6125;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6127 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x6127 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6128 = x6127 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6129 = x6126 + x6128;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6130 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x6130 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6131 = x6130 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6132 = x6129 + x6131;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6133 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x6133 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6134 = x6133 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6135 = x6132 + x6134;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6136 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x6136 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6137 = x6136 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6138 = x6135 + x6137;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6139 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x6139 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6140 = x6139 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6141 = x6138 + x6140;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6142 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x6142 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6143 = x6142 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6144 = x6141 + x6143;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6145 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x6145 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6146 = x6145 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6147 = x6144 + x6146;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6148 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x6148 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6149 = x6148 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6150 = x6147 + x6149;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6151 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x6151 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6152 = x6151 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6153 = x6150 + x6152;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6154 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x6154 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6155 = x6154 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6156 = x6153 + x6155;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6157 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x6157 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6158 = x6157 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6159 = x6156 + x6158;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6160 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x6160 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6161 = x6160 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6162 = x6159 + x6161;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6163 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x6163 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6164 = x6163 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6165 = x6162 + x6164;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6166 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x6166 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6167 = x6166 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6168 = x6165 + x6167;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6169 = x6091 - x6168;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6170 = x6169 * x15;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6171 = Fp(x6170.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6171);
          reg = x6171;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6172 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6173 = x6170 - x6172;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6174 = x6173 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6175 = x101 - x6174;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6176 = x6174 * x6175;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6176 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/components/mux.h":37:25))
    auto x6177 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x6177 != Fp::invalid());
    if (x6177 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6178 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x6178 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg9"("cirgen/circuit/rv32im/sha.cpp":259:70))
      auto x6179 = args[2][103 * steps + ((cycle - 1) & mask)];
      assert(x6179 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg11"("cirgen/circuit/rv32im/sha.cpp":260:70))
      auto x6180 = args[2][105 * steps + ((cycle - 1) & mask)];
      assert(x6180 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":261:29)
      auto x6181 = x6179 + x6180;
      if (x6181 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":263:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6182 = x101 - x6179;
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6183 = x6182 - x6180;
      if (x6183 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6184 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x6184 != Fp::invalid());
        if (x6184 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":269:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":271:20)
        auto x6185 = x101 - x6184;
        if (x6185 != 0) {
          // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6186 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x6186 != Fp::invalid());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6186);
            reg = x6186;
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":274:42))
          auto x6187 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x6187 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":274:42)
          auto x6188 = x6187 - x101;
          // loc("cirgen/circuit/rv32im/sha.cpp":274:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6188);
            reg = x6188;
          }
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6189 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x6189 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6190 = (x6189 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6190);
          reg = x6190;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6191 = inv(x6189);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6191);
          reg = x6191;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6192 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x6192 != Fp::invalid());
      if (x6192 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x6189 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x6193 = x101 - x6192;
      if (x6193 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x6194 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x6194 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6195 = x6189 * x6194;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6196 = x6195 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x6196 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      if (x6192 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6197 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x6197 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":281:17)
        auto x6198 = x101 - x6197;
        if (x6198 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":281:21)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
        }
        if (x6197 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":282:17)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
      }
      if (x6193 != 0) {
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6199 = x2131 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6200 = x1346 + x6199;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6201 = x2835 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6202 = x6200 + x6201;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6203 = x3590 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6204 = x6202 + x6203;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6205 = x4032 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6206 = x6204 + x6205;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6207 = x4397 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6208 = x6206 + x6207;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6209 = x4829 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6210 = x6208 + x6209;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6211 = x5174 * x76;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6212 = x6210 + x6211;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6213 = x5503 * x75;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6214 = x6212 + x6213;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6215 = x6177 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6216 = x6214 + x6215;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x6217 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x6217 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6218 = x6217 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6219 = x6216 + x6218;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x6220 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x6220 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6221 = x6220 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6222 = x6219 + x6221;
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x6223 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x6223 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6224 = x6223 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6225 = x6222 + x6224;
        // loc("cirgen/circuit/rv32im/sha.cpp":284:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6225);
          reg = x6225;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x6226 = x602 + x84;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x6227 = Fp(x6226.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6227);
          reg = x6227;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x6228 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x6228 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x6229 = x6226 - x6228;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x6230 = x6229 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x6231 = Fp(x6230.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6231);
          reg = x6231;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x6232 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x6232 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x6233 = x6230 - x6232;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x6234 = x6233 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x6235 = Fp(x6234.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6235);
          reg = x6235;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x6236 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6236 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x6237 = x6234 - x6236;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x6238 = x6237 * x95;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x6239 = Fp(x6238.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6239);
          reg = x6239;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6240 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x6240 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x6241 = x6238 - x6240;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x6242 = x6241 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6242);
        reg = x6242;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6243 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x6243 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x6244 = x101 - x6243;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x6245 = x6243 * x6244;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6245);
        reg = x6245;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x6246 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x6246 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x6247 = x98 - x6243;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x6248 = x6246 * x6247;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x6248 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":287:40))
      auto x6249 = args[2][131 * steps + ((cycle - 1) & mask)];
      assert(x6249 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":287:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6249);
        reg = x6249;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":288:38))
      auto x6250 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x6250 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":288:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6250);
        reg = x6250;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":289:34))
      auto x6251 = args[2][133 * steps + ((cycle - 1) & mask)];
      assert(x6251 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":289:3)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6251);
        reg = x6251;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":290:34))
      auto x6252 = args[2][134 * steps + ((cycle - 1) & mask)];
      assert(x6252 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":290:3)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6252);
        reg = x6252;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":291:36))
      auto x6253 = args[2][138 * steps + ((cycle - 1) & mask)];
      assert(x6253 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":291:3)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6253);
        reg = x6253;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6254 = args[2][143 * steps + ((cycle - 1) & mask)];
      assert(x6254 != Fp::invalid());
      // loc("./cirgen/components/bits.h":18:23)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6254);
        reg = x6254;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6255 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x6255 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6256 = (x6255 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6256);
          reg = x6256;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6257 = inv(x6255);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6257);
          reg = x6257;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6258 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x6258 != Fp::invalid());
      if (x6258 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x6255 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x6259 = x101 - x6258;
      if (x6259 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x6260 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x6260 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6261 = x6255 * x6260;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6262 = x6261 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x6262 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("./cirgen/components/bits.h":18:23)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x6263 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x6263 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":300:8)
      auto x6264 = x6263 * x84;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x6265 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x6265 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":301:8)
      auto x6266 = x6265 * x84;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x6267 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x6267 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":302:8)
      auto x6268 = x6267 * x84;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6269 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x6269 != Fp::invalid());
      host_args.at(0) = x74;
      host_args.at(1) = x6269;
      host_args.at(2) = x6189;
      host_args.at(3) = x6264;
      host_args.at(4) = x6266;
      host_args.at(5) = x6268;
      host_args.at(6) = x6255;
      host(ctx, "log", "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = 0x%x, data1 = 0x%x, state = 0x%x, repeat: %u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/sha.cpp":306:15)
      auto x6270 = x101 - x6269;
      if (x6270 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6271 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x6271 != Fp::invalid());
        if (x6271 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6272 = x6263 + x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6273 = x6272 - x6189;
          {
            host_args.at(0) = x6273;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6274 = host_outs.at(0);
            auto x6275 = host_outs.at(1);
            auto x6276 = host_outs.at(2);
            auto x6277 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6274);
              reg = x6274;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6275);
              reg = x6275;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6276);
              reg = x6276;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6277);
              reg = x6277;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6278 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6278 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6279 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6279 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6280 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6280 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6281 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6281 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6273);
            reg = x6273;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6178);
            reg = x6178;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6278);
            reg = x6278;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6279);
            reg = x6279;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6280);
            reg = x6280;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6281);
            reg = x6281;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":308:16)
        auto x6282 = x101 - x6271;
        if (x6282 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6283 = x6263 + x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6284 = x6283 - x6189;
          {
            host_args.at(0) = x6284;
            host_args.at(1) = x100;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6285 = host_outs.at(0);
            auto x6286 = host_outs.at(1);
            auto x6287 = host_outs.at(2);
            auto x6288 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6285);
              reg = x6285;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6286);
              reg = x6286;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6287);
              reg = x6287;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6288);
              reg = x6288;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6289 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6289 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6290 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6290 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6291 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6291 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6292 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6292 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6284);
            reg = x6284;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6178);
            reg = x6178;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6289);
            reg = x6289;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6290);
            reg = x6290;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6291);
            reg = x6291;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6292);
            reg = x6292;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
        auto x6293 = x14 - x6189;
        {
          host_args.at(0) = x6293;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6294 = host_outs.at(0);
          auto x6295 = host_outs.at(1);
          auto x6296 = host_outs.at(2);
          auto x6297 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6294);
            reg = x6294;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6295);
            reg = x6295;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6296);
            reg = x6296;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6297);
            reg = x6297;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6298 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6298 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6299 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6299 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6300 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6300 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6301 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6301 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6293);
          reg = x6293;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6178);
          reg = x6178;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6298);
          reg = x6298;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6299);
          reg = x6299;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6300);
          reg = x6300;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6301);
          reg = x6301;
        }
      }
      if (x6269 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6302 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x6302 != Fp::invalid());
        if (x6302 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6303 = x6265 + x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6304 = x6303 - x6189;
          {
            host_args.at(0) = x6304;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6305 = host_outs.at(0);
            auto x6306 = host_outs.at(1);
            auto x6307 = host_outs.at(2);
            auto x6308 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6305);
              reg = x6305;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6306);
              reg = x6306;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6307);
              reg = x6307;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6308);
              reg = x6308;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6309 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6309 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6310 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6310 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6311 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6311 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6312 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6312 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6304);
            reg = x6304;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6178);
            reg = x6178;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6309);
            reg = x6309;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6310);
            reg = x6310;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6311);
            reg = x6311;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6312);
            reg = x6312;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":313:16)
        auto x6313 = x101 - x6302;
        if (x6313 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6314 = x6265 + x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6315 = x6314 - x6189;
          {
            host_args.at(0) = x6315;
            host_args.at(1) = x100;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6316 = host_outs.at(0);
            auto x6317 = host_outs.at(1);
            auto x6318 = host_outs.at(2);
            auto x6319 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6316);
              reg = x6316;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6317);
              reg = x6317;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6318);
              reg = x6318;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6319);
              reg = x6319;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6320 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6320 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6321 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6321 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6322 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6322 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6323 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6323 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6315);
            reg = x6315;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6178);
            reg = x6178;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6320);
            reg = x6320;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6321);
            reg = x6321;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6322);
            reg = x6322;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6323);
            reg = x6323;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
        auto x6324 = x13 - x6189;
        {
          host_args.at(0) = x6324;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6325 = host_outs.at(0);
          auto x6326 = host_outs.at(1);
          auto x6327 = host_outs.at(2);
          auto x6328 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6325);
            reg = x6325;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6326);
            reg = x6326;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6327);
            reg = x6327;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6328);
            reg = x6328;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6329 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6329 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6330 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6330 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6331 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6331 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6332 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6332 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6324);
          reg = x6324;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6178);
          reg = x6178;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6329);
          reg = x6329;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6330);
          reg = x6330;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6331);
          reg = x6331;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6332);
          reg = x6332;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6333 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x6333 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6334 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x6334 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6335 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x6335 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6336 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x6336 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6337 = x6335 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6338 = x6336 + x6337;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6339 = x6333 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6340 = x6334 + x6339;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6341 = Fp(x6338.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6341);
          reg = x6341;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6342 = Fp(x6338.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6343 = x6342 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6343);
          reg = x6343;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6344 = Fp(x6338.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6345 = x6344 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6345);
          reg = x6345;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6346 = Fp(x6338.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6347 = x6346 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6347);
          reg = x6347;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6348 = Fp(x6338.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6349 = x6348 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6349);
          reg = x6349;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6350 = Fp(x6338.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6351 = x6350 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6351);
          reg = x6351;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6352 = Fp(x6338.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6353 = x6352 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6353);
          reg = x6353;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6354 = Fp(x6338.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6355 = x6354 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6355);
          reg = x6355;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6356 = Fp(x6338.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6357 = x6356 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6357);
          reg = x6357;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6358 = Fp(x6338.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6359 = x6358 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6359);
          reg = x6359;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6360 = Fp(x6338.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6361 = x6360 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6361);
          reg = x6361;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6362 = Fp(x6338.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6363 = x6362 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6363);
          reg = x6363;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6364 = Fp(x6338.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6365 = x6364 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6365);
          reg = x6365;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6366 = Fp(x6338.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6367 = x6366 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6367);
          reg = x6367;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6368 = Fp(x6338.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6369 = x6368 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6369);
          reg = x6369;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6370 = Fp(x6338.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6371 = x6370 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6371);
          reg = x6371;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6372 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6372 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6373 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6373 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6374 = x6373 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6375 = x6372 + x6374;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6376 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6376 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6377 = x6376 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6378 = x6375 + x6377;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6379 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6379 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6380 = x6379 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6381 = x6378 + x6380;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6382 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6382 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6383 = x6382 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6384 = x6381 + x6383;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6385 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6385 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6386 = x6385 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6387 = x6384 + x6386;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6388 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6388 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6389 = x6388 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6390 = x6387 + x6389;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6391 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x6391 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6392 = x6391 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6393 = x6390 + x6392;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6394 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x6394 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6395 = x6394 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6396 = x6393 + x6395;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6397 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x6397 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6398 = x6397 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6399 = x6396 + x6398;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6400 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6400 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6401 = x6400 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6402 = x6399 + x6401;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6403 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6403 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6404 = x6403 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6405 = x6402 + x6404;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6406 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6406 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6407 = x6406 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6408 = x6405 + x6407;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6409 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6409 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6410 = x6409 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6411 = x6408 + x6410;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6412 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6412 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6413 = x6412 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6414 = x6411 + x6413;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6415 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6415 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6416 = x6415 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6417 = x6414 + x6416;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6418 = x6338 - x6417;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6419 = x6418 * x15;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6419);
        reg = x6419;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6420 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6420 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
      auto x6421 = x6340 + x6420;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6422 = Fp(x6421.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6422);
          reg = x6422;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6423 = Fp(x6421.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6424 = x6423 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6424);
          reg = x6424;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6425 = Fp(x6421.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6426 = x6425 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6426);
          reg = x6426;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6427 = Fp(x6421.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6428 = x6427 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6428);
          reg = x6428;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6429 = Fp(x6421.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6430 = x6429 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6430);
          reg = x6430;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6431 = Fp(x6421.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6432 = x6431 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6432);
          reg = x6432;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6433 = Fp(x6421.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6434 = x6433 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6434);
          reg = x6434;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6435 = Fp(x6421.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6436 = x6435 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6436);
          reg = x6436;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6437 = Fp(x6421.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6438 = x6437 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6438);
          reg = x6438;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6439 = Fp(x6421.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6440 = x6439 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6440);
          reg = x6440;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6441 = Fp(x6421.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6442 = x6441 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6442);
          reg = x6442;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6443 = Fp(x6421.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6444 = x6443 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6444);
          reg = x6444;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6445 = Fp(x6421.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6446 = x6445 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6446);
          reg = x6446;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6447 = Fp(x6421.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6448 = x6447 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6448);
          reg = x6448;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6449 = Fp(x6421.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6450 = x6449 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6450);
          reg = x6450;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6451 = Fp(x6421.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6452 = x6451 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6452);
          reg = x6452;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6453 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6453 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6454 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6454 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6455 = x6454 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6456 = x6453 + x6455;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6457 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6457 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6458 = x6457 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6459 = x6456 + x6458;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6460 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6460 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6461 = x6460 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6462 = x6459 + x6461;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6463 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6463 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6464 = x6463 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6465 = x6462 + x6464;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6466 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6466 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6467 = x6466 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6468 = x6465 + x6467;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6469 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6469 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6470 = x6469 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6471 = x6468 + x6470;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6472 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6472 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6473 = x6472 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6474 = x6471 + x6473;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6475 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6475 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6476 = x6475 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6477 = x6474 + x6476;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6478 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x6478 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6479 = x6478 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6480 = x6477 + x6479;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6481 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x6481 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6482 = x6481 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6483 = x6480 + x6482;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6484 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x6484 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6485 = x6484 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6486 = x6483 + x6485;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6487 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x6487 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6488 = x6487 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6489 = x6486 + x6488;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6490 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x6490 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6491 = x6490 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6492 = x6489 + x6491;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6493 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x6493 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6494 = x6493 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6495 = x6492 + x6494;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6496 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x6496 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6497 = x6496 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6498 = x6495 + x6497;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6499 = x6421 - x6498;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6500 = x6499 * x15;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6500);
        reg = x6500;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6501 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x6501 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6502 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x6502 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6503 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x6503 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6504 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x6504 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6505 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x6505 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6506 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x6506 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6507 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x6507 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6508 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x6508 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6509 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x6509 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6510 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x6510 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6511 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x6511 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6512 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x6512 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6513 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x6513 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6514 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x6514 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6515 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x6515 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6516 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x6516 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6517 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x6517 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6518 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x6518 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6519 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x6519 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6520 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x6520 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6521 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x6521 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6522 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x6522 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6523 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x6523 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6524 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x6524 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6525 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x6525 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6526 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x6526 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6527 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x6527 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6528 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x6528 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6529 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x6529 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6530 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x6530 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6531 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x6531 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6532 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x6532 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6533 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x6533 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6534 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x6534 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6535 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x6535 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6536 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x6536 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6537 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x6537 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6538 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x6538 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6539 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x6539 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6540 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x6540 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6541 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x6541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6542 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x6542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6543 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x6543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6544 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x6544 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6545 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x6545 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6546 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x6546 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6547 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x6547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6548 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x6548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6549 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x6549 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6550 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x6550 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6551 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x6551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6552 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x6552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6553 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x6553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6554 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x6554 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6555 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x6555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6556 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x6556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6557 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x6557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6558 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x6558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6559 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x6559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6560 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x6560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6561 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x6561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6562 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x6562 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6563 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x6563 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6564 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x6564 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6565 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x6565 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6566 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x6566 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6567 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x6567 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6568 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x6568 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6569 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x6569 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6570 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x6570 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6571 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x6571 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6572 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x6572 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6573 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x6573 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6574 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x6574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6575 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x6575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6576 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x6576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6577 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x6577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6578 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x6578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6579 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x6579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6580 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x6580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6581 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x6581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6582 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x6582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6583 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x6583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6584 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x6584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6585 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x6585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6586 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x6586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6587 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x6587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6588 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x6588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6589 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x6589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6590 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x6590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6591 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x6591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6592 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x6592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6593 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x6593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6594 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x6594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6595 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x6595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6596 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x6596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6597 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x6597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6598 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x6598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6599 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x6599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6600 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x6600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6601 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x6601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6602 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x6602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6603 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x6603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6604 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x6604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6605 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6606 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x6606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6607 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x6607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6608 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6609 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x6609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6610 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x6610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6611 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x6611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6612 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x6612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6613 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x6613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6614 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x6614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6615 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x6615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6616 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x6616 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6617 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x6617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6618 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x6618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6619 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x6619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6620 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x6620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6621 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x6621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6622 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x6622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6623 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x6623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6624 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x6624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6625 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x6625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6626 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x6626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6627 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x6627 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6628 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x6628 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6629 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x6629 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6630 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x6630 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6631 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x6631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6632 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x6632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6633 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x6633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6634 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x6634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6635 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x6635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6636 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x6636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6637 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x6637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6638 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x6638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6639 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x6639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6640 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x6640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6641 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x6641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6642 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x6642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6643 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x6643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6644 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x6644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6645 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x6645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6646 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x6646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6647 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x6647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6648 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x6648 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6649 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x6649 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6650 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x6650 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6651 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x6651 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6652 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x6652 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6653 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x6653 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6654 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x6654 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6655 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x6655 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6656 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x6656 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6657 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x6657 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6658 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x6658 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6659 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x6659 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6660 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x6660 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6661 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x6661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6662 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x6662 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6663 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x6663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6664 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x6664 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6665 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x6665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6666 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x6666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6667 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x6667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6668 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x6668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6669 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x6669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6670 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x6670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6671 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x6671 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6672 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x6672 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6673 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x6673 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6674 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x6674 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6675 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x6675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6676 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x6676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6677 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x6677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6678 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x6678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6679 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x6679 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6680 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x6680 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6681 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x6681 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6682 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x6682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6683 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x6683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6684 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x6684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6685 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x6685 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6686 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x6686 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6687 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x6687 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6688 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x6688 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6689 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x6689 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6690 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x6690 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6691 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x6691 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6692 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x6692 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6693 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x6693 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6694 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x6694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6695 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x6695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6696 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x6696 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6697 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x6697 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6698 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x6698 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6699 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x6699 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6700 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x6700 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6701 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x6701 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6702 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x6702 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6703 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6704 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x6704 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6705 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x6705 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6706 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6707 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6708 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x6708 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6709 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x6709 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6710 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6711 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x6711 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6712 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x6712 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6713 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6714 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x6714 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6715 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x6715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6716 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6717 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x6717 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6718 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x6718 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6719 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6720 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6721 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x6721 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6722 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6723 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6724 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6725 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6726 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6727 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6728 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6729 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6730 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6731 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6732 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6733 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6734 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6735 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6736 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6737 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6738 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6739 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x6739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6740 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x6740 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6741 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x6741 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6742 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x6742 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6743 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x6743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6744 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x6744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6745 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x6745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6746 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x6746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6747 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x6747 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6748 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x6748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6749 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x6749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6750 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x6750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6751 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x6751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6752 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x6752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6753 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x6753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6754 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x6754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6755 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x6755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6756 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x6756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6757 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x6757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6758 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6759 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6760 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6760 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x6761 = x6758 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x6762 = x6757 + x6761;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x6763 = x6760 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x6764 = x6759 + x6763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6765 = x6514 + x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6766 = x6514 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6767 = x6766 * x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6768 = x6765 - x6767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6769 = x6515 + x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6770 = x6515 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6771 = x6770 * x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6772 = x6769 - x6771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6773 = x6516 + x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6774 = x6516 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6775 = x6774 * x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6776 = x6773 - x6775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6777 = x6517 + x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6778 = x6517 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6779 = x6778 * x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6780 = x6777 - x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6781 = x6518 + x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6782 = x6518 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6783 = x6782 * x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6784 = x6781 - x6783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6785 = x6519 + x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6786 = x6519 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6787 = x6786 * x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6788 = x6785 - x6787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6789 = x6520 + x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6790 = x6520 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6791 = x6790 * x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6792 = x6789 - x6791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6793 = x6521 + x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6794 = x6521 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6795 = x6794 * x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6796 = x6793 - x6795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6797 = x6522 + x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6798 = x6522 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6799 = x6798 * x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6800 = x6797 - x6799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6801 = x6523 + x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6802 = x6523 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6803 = x6802 * x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6804 = x6801 - x6803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6805 = x6524 + x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6806 = x6524 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6807 = x6806 * x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6808 = x6805 - x6807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6809 = x6525 + x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6810 = x6525 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6811 = x6810 * x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6812 = x6809 - x6811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6813 = x6526 + x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6814 = x6526 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6815 = x6814 * x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6816 = x6813 - x6815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6817 = x6527 + x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6818 = x6527 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6819 = x6818 * x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6820 = x6817 - x6819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6821 = x6528 + x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6822 = x6528 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6823 = x6822 * x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6824 = x6821 - x6823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6825 = x6529 + x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6826 = x6529 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6827 = x6826 * x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6828 = x6825 - x6827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6829 = x6530 + x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6830 = x6530 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6831 = x6830 * x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6832 = x6829 - x6831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6833 = x6531 + x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6834 = x6531 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6835 = x6834 * x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6836 = x6833 - x6835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6837 = x6532 + x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6838 = x6532 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6839 = x6838 * x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6840 = x6837 - x6839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6841 = x6501 + x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6842 = x6501 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6843 = x6842 * x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6844 = x6841 - x6843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6845 = x6502 + x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6846 = x6502 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6847 = x6846 * x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6848 = x6845 - x6847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6849 = x6503 + x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6850 = x6503 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6851 = x6850 * x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6852 = x6849 - x6851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6853 = x6504 + x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6854 = x6504 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6855 = x6854 * x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6856 = x6853 - x6855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6857 = x6505 + x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6858 = x6505 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6859 = x6858 * x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6860 = x6857 - x6859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6861 = x6506 + x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6862 = x6506 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6863 = x6862 * x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6864 = x6861 - x6863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6865 = x6507 + x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6866 = x6507 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6867 = x6866 * x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6868 = x6865 - x6867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6869 = x6508 + x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6870 = x6508 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6871 = x6870 * x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6872 = x6869 - x6871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6873 = x6509 + x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6874 = x6509 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6875 = x6874 * x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6876 = x6873 - x6875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6877 = x6510 + x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6878 = x6510 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6879 = x6878 * x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6880 = x6877 - x6879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6881 = x6511 + x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6882 = x6511 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6883 = x6882 * x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6884 = x6881 - x6883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6885 = x6512 + x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6886 = x6512 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6887 = x6886 * x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6888 = x6885 - x6887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6889 = x6513 + x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6890 = x6513 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6891 = x6890 * x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6892 = x6889 - x6891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6893 = x6503 + x6768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6894 = x6850 * x6768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6895 = x6893 - x6894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6896 = x6504 + x6772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6897 = x6854 * x6772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6898 = x6896 - x6897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6899 = x6505 + x6776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6900 = x6858 * x6776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6901 = x6899 - x6900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6902 = x6506 + x6780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6903 = x6862 * x6780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6904 = x6902 - x6903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6905 = x6507 + x6784;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6906 = x6866 * x6784;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6907 = x6905 - x6906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6908 = x6508 + x6788;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6909 = x6870 * x6788;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6910 = x6908 - x6909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6911 = x6509 + x6792;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6912 = x6874 * x6792;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6913 = x6911 - x6912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6914 = x6510 + x6796;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6915 = x6878 * x6796;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6916 = x6914 - x6915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6917 = x6511 + x6800;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6918 = x6882 * x6800;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6919 = x6917 - x6918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6920 = x6512 + x6804;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6921 = x6886 * x6804;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6922 = x6920 - x6921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6923 = x6513 + x6808;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6924 = x6890 * x6808;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6925 = x6923 - x6924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6926 = x6514 + x6812;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6927 = x6766 * x6812;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6928 = x6926 - x6927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6929 = x6515 + x6816;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6930 = x6770 * x6816;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6931 = x6929 - x6930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6932 = x6516 + x6820;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6933 = x6774 * x6820;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6934 = x6932 - x6933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6935 = x6517 + x6824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6936 = x6778 * x6824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6937 = x6935 - x6936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6938 = x6518 + x6828;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6939 = x6782 * x6828;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6940 = x6938 - x6939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6941 = x6519 + x6832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6942 = x6786 * x6832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6943 = x6941 - x6942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6944 = x6520 + x6836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6945 = x6790 * x6836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6946 = x6944 - x6945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6947 = x6521 + x6840;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6948 = x6794 * x6840;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6949 = x6947 - x6948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6950 = x6522 + x6844;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6951 = x6798 * x6844;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6952 = x6950 - x6951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6953 = x6523 + x6848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6954 = x6802 * x6848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6955 = x6953 - x6954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6956 = x6524 + x6852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6957 = x6806 * x6852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6958 = x6956 - x6957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6959 = x6525 + x6856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6960 = x6810 * x6856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6961 = x6959 - x6960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6962 = x6526 + x6860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6963 = x6814 * x6860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6964 = x6962 - x6963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6965 = x6527 + x6864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6966 = x6818 * x6864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6967 = x6965 - x6966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6968 = x6528 + x6868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6969 = x6822 * x6868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6970 = x6968 - x6969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6971 = x6529 + x6872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6972 = x6826 * x6872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6973 = x6971 - x6972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6974 = x6530 + x6876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6975 = x6830 * x6876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6976 = x6974 - x6975;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6977 = x6531 + x6880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6978 = x6834 * x6880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6979 = x6977 - x6978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6980 = x6532 + x6884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6981 = x6838 * x6884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6982 = x6980 - x6981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6983 = x6501 + x6888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6984 = x6842 * x6888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6985 = x6983 - x6984;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6986 = x6502 + x6892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6987 = x6846 * x6892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6988 = x6986 - x6987;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6989 = x6640 + x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6990 = x6640 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6991 = x6990 * x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6992 = x6989 - x6991;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6993 = x6641 + x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6994 = x6641 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6995 = x6994 * x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6996 = x6993 - x6995;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6997 = x6642 + x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6998 = x6642 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6999 = x6998 * x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7000 = x6997 - x6999;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7001 = x6643 + x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7002 = x6643 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7003 = x7002 * x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7004 = x7001 - x7003;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7005 = x6644 + x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7006 = x6644 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7007 = x7006 * x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7008 = x7005 - x7007;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7009 = x6645 + x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7010 = x6645 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7011 = x7010 * x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7012 = x7009 - x7011;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7013 = x6646 + x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7014 = x6646 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7015 = x7014 * x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7016 = x7013 - x7015;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7017 = x6647 + x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7018 = x6647 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7019 = x7018 * x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7020 = x7017 - x7019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7021 = x6648 + x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7022 = x6648 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7023 = x7022 * x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7024 = x7021 - x7023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7025 = x6649 + x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7026 = x6649 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7027 = x7026 * x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7028 = x7025 - x7027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7029 = x6650 + x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7030 = x6650 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7031 = x7030 * x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7032 = x7029 - x7031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7033 = x6651 + x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7034 = x6651 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7035 = x7034 * x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7036 = x7033 - x7035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7037 = x6652 + x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7038 = x6652 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7039 = x7038 * x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7040 = x7037 - x7039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7041 = x6653 + x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7042 = x6653 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7043 = x7042 * x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7044 = x7041 - x7043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7045 = x6654 + x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7046 = x6654 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7047 = x7046 * x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7048 = x7045 - x7047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7049 = x6655 + x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7050 = x6655 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7051 = x7050 * x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7052 = x7049 - x7051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7053 = x6656 + x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7054 = x6656 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7055 = x7054 * x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7056 = x7053 - x7055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7057 = x6657 + x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7058 = x6657 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7059 = x7058 * x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7060 = x7057 - x7059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7061 = x6658 + x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7062 = x6658 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7063 = x7062 * x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7064 = x7061 - x7063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7065 = x6659 + x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7066 = x6659 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7067 = x7066 * x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7068 = x7065 - x7067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7069 = x6660 + x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7070 = x6660 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7071 = x7070 * x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7072 = x7069 - x7071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7073 = x6629 + x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7074 = x6629 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7075 = x7074 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7076 = x7073 - x7075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7077 = x6630 + x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7078 = x6630 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7079 = x7078 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7080 = x7077 - x7079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7081 = x6631 + x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7082 = x6631 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7083 = x7082 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7084 = x7081 - x7083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7085 = x6632 + x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7086 = x6632 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7087 = x7086 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7088 = x7085 - x7087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7089 = x6633 + x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7090 = x6633 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7091 = x7090 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7092 = x7089 - x7091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7093 = x6634 + x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7094 = x6634 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7095 = x7094 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7096 = x7093 - x7095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7097 = x6635 + x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7098 = x6635 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7099 = x7098 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7100 = x7097 - x7099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7101 = x6636 + x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7102 = x6636 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7103 = x7102 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7104 = x7101 - x7103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7105 = x6637 + x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7106 = x6637 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7107 = x7106 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7108 = x7105 - x7107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7109 = x6638 + x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7110 = x6638 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7111 = x7110 * x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7112 = x7109 - x7111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7113 = x6639 + x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7114 = x6639 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7115 = x7114 * x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7116 = x7113 - x7115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7117 = x6635 + x6992;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7118 = x7098 * x6992;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7119 = x7117 - x7118;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7120 = x6636 + x6996;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7121 = x7102 * x6996;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7122 = x7120 - x7121;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7123 = x6637 + x7000;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7124 = x7106 * x7000;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7125 = x7123 - x7124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7126 = x6638 + x7004;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7127 = x7110 * x7004;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7128 = x7126 - x7127;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7129 = x6639 + x7008;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7130 = x7114 * x7008;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7131 = x7129 - x7130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7132 = x6640 + x7012;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7133 = x6990 * x7012;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7134 = x7132 - x7133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7135 = x6641 + x7016;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7136 = x6994 * x7016;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7137 = x7135 - x7136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7138 = x6642 + x7020;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7139 = x6998 * x7020;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7140 = x7138 - x7139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7141 = x6643 + x7024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7142 = x7002 * x7024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7143 = x7141 - x7142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7144 = x6644 + x7028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7145 = x7006 * x7028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7146 = x7144 - x7145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7147 = x6645 + x7032;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7148 = x7010 * x7032;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7149 = x7147 - x7148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7150 = x6646 + x7036;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7151 = x7014 * x7036;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7152 = x7150 - x7151;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7153 = x6647 + x7040;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7154 = x7018 * x7040;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7155 = x7153 - x7154;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7156 = x6648 + x7044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7157 = x7022 * x7044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7158 = x7156 - x7157;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7159 = x6649 + x7048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7160 = x7026 * x7048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7161 = x7159 - x7160;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7162 = x6650 + x7052;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7163 = x7030 * x7052;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7164 = x7162 - x7163;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7165 = x6651 + x7056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7166 = x7034 * x7056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7167 = x7165 - x7166;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7168 = x6652 + x7060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7169 = x7038 * x7060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7170 = x7168 - x7169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7171 = x6653 + x7064;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7172 = x7042 * x7064;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7173 = x7171 - x7172;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7174 = x6654 + x7068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7175 = x7046 * x7068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7176 = x7174 - x7175;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7177 = x6655 + x7072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7178 = x7050 * x7072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7179 = x7177 - x7178;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7180 = x6656 + x7076;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7181 = x7054 * x7076;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7182 = x7180 - x7181;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7183 = x6657 + x7080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7184 = x7058 * x7080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7185 = x7183 - x7184;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7186 = x6658 + x7084;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7187 = x7062 * x7084;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7188 = x7186 - x7187;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7189 = x6659 + x7088;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7190 = x7066 * x7088;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7191 = x7189 - x7190;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7192 = x6660 + x7092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7193 = x7070 * x7092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7194 = x7192 - x7193;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7195 = x6629 + x7096;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7196 = x7074 * x7096;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7197 = x7195 - x7196;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7198 = x6630 + x7100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7199 = x7078 * x7100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7200 = x7198 - x7199;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7201 = x6631 + x7104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7202 = x7082 * x7104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7203 = x7201 - x7202;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7204 = x6632 + x7108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7205 = x7086 * x7108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7206 = x7204 - x7205;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7207 = x6633 + x7112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7208 = x7090 * x7112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7209 = x7207 - x7208;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7210 = x6634 + x7116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7211 = x7094 * x7116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7212 = x7210 - x7211;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7213 = x6726 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7214 = x6725 + x7213;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7215 = x6727 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7216 = x7214 + x7215;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7217 = x6728 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7218 = x7216 + x7217;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7219 = x6729 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7220 = x7218 + x7219;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7221 = x6730 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7222 = x7220 + x7221;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7223 = x6731 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7224 = x7222 + x7223;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7225 = x6732 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7226 = x7224 + x7225;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7227 = x6733 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7228 = x7226 + x7227;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7229 = x6734 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7230 = x7228 + x7229;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7231 = x6735 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7232 = x7230 + x7231;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7233 = x6736 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7234 = x7232 + x7233;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7235 = x6737 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7236 = x7234 + x7235;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7237 = x6738 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7238 = x7236 + x7237;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7239 = x6739 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7240 = x7238 + x7239;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7241 = x6740 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7242 = x7240 + x7241;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7243 = x6742 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7244 = x6741 + x7243;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7245 = x6743 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7246 = x7244 + x7245;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7247 = x6744 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7248 = x7246 + x7247;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7249 = x6745 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7250 = x7248 + x7249;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7251 = x6746 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7252 = x7250 + x7251;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7253 = x6747 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7254 = x7252 + x7253;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7255 = x6748 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7256 = x7254 + x7255;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7257 = x6749 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7258 = x7256 + x7257;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7259 = x6750 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7260 = x7258 + x7259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7261 = x6751 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7262 = x7260 + x7261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7263 = x6752 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7264 = x7262 + x7263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7265 = x6753 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7266 = x7264 + x7265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7267 = x6754 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7268 = x7266 + x7267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7269 = x6755 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7270 = x7268 + x7269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7271 = x6756 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7272 = x7270 + x7271;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7273 = x6629 * x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7274 = x101 - x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7275 = x7274 * x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7276 = x7273 + x7275;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7277 = x6630 * x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7278 = x101 - x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7279 = x7278 * x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7280 = x7277 + x7279;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7281 = x6631 * x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7282 = x101 - x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7283 = x7282 * x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7284 = x7281 + x7283;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7285 = x6632 * x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7286 = x101 - x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7287 = x7286 * x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7288 = x7285 + x7287;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7289 = x6633 * x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7290 = x101 - x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7291 = x7290 * x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7292 = x7289 + x7291;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7293 = x6634 * x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7294 = x101 - x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7295 = x7294 * x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7296 = x7293 + x7295;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7297 = x6635 * x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7298 = x101 - x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7299 = x7298 * x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7300 = x7297 + x7299;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7301 = x6636 * x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7302 = x101 - x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7303 = x7302 * x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7304 = x7301 + x7303;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7305 = x6637 * x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7306 = x101 - x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7307 = x7306 * x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7308 = x7305 + x7307;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7309 = x6638 * x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7310 = x101 - x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7311 = x7310 * x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7312 = x7309 + x7311;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7313 = x6639 * x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7314 = x101 - x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7315 = x7314 * x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7316 = x7313 + x7315;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7317 = x6640 * x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7318 = x101 - x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7319 = x7318 * x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7320 = x7317 + x7319;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7321 = x6641 * x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7322 = x101 - x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7323 = x7322 * x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7324 = x7321 + x7323;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7325 = x6642 * x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7326 = x101 - x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7327 = x7326 * x6706;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7328 = x7325 + x7327;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7329 = x6643 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7330 = x101 - x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7331 = x7330 * x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7332 = x7329 + x7331;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7333 = x6644 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7334 = x101 - x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7335 = x7334 * x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7336 = x7333 + x7335;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7337 = x6645 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7338 = x101 - x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7339 = x7338 * x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7340 = x7337 + x7339;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7341 = x6646 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7342 = x101 - x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7343 = x7342 * x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7344 = x7341 + x7343;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7345 = x6647 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7346 = x101 - x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7347 = x7346 * x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7348 = x7345 + x7347;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7349 = x6648 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7350 = x101 - x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7351 = x7350 * x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7352 = x7349 + x7351;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7353 = x6649 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7354 = x101 - x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7355 = x7354 * x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7356 = x7353 + x7355;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7357 = x6650 * x6682;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7358 = x101 - x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7359 = x7358 * x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7360 = x7357 + x7359;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7361 = x6651 * x6683;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7362 = x101 - x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7363 = x7362 * x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7364 = x7361 + x7363;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7365 = x6652 * x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7366 = x101 - x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7367 = x7366 * x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7368 = x7365 + x7367;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7369 = x6653 * x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7370 = x101 - x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7371 = x7370 * x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7372 = x7369 + x7371;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7373 = x6654 * x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7374 = x101 - x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7375 = x7374 * x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7376 = x7373 + x7375;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7377 = x6655 * x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7378 = x101 - x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7379 = x7378 * x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7380 = x7377 + x7379;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7381 = x6656 * x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7382 = x101 - x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7383 = x7382 * x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7384 = x7381 + x7383;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7385 = x6657 * x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7386 = x101 - x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7387 = x7386 * x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7388 = x7385 + x7387;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7389 = x6658 * x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7390 = x101 - x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7391 = x7390 * x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7392 = x7389 + x7391;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7393 = x6659 * x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7394 = x101 - x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7395 = x7394 * x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7396 = x7393 + x7395;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7397 = x6660 * x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7398 = x101 - x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7399 = x7398 * x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7400 = x7397 + x7399;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7401 = x7280 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7402 = x7276 + x7401;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7403 = x7284 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7404 = x7402 + x7403;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7405 = x7288 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7406 = x7404 + x7405;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7407 = x7292 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7408 = x7406 + x7407;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7409 = x7296 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7410 = x7408 + x7409;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7411 = x7300 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7412 = x7410 + x7411;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7413 = x7304 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7414 = x7412 + x7413;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7415 = x7308 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7416 = x7414 + x7415;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7417 = x7312 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7418 = x7416 + x7417;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7419 = x7316 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7420 = x7418 + x7419;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7421 = x7320 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7422 = x7420 + x7421;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7423 = x7324 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7424 = x7422 + x7423;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7425 = x7328 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7426 = x7424 + x7425;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7427 = x7332 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7428 = x7426 + x7427;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7429 = x7336 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7430 = x7428 + x7429;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7431 = x7344 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7432 = x7340 + x7431;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7433 = x7348 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7434 = x7432 + x7433;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7435 = x7352 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7436 = x7434 + x7435;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7437 = x7356 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7438 = x7436 + x7437;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7439 = x7360 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7440 = x7438 + x7439;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7441 = x7364 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7442 = x7440 + x7441;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7443 = x7368 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7444 = x7442 + x7443;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7445 = x7372 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7446 = x7444 + x7445;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7447 = x7376 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7448 = x7446 + x7447;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7449 = x7380 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7450 = x7448 + x7449;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7451 = x7384 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7452 = x7450 + x7451;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7453 = x7388 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7454 = x7452 + x7453;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7455 = x7392 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7456 = x7454 + x7455;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7457 = x7396 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7458 = x7456 + x7457;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7459 = x7400 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7460 = x7458 + x7459;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7461 = x7122 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7462 = x7119 + x7461;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7463 = x7125 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7464 = x7462 + x7463;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7465 = x7128 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7466 = x7464 + x7465;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7467 = x7131 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7468 = x7466 + x7467;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7469 = x7134 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7470 = x7468 + x7469;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7471 = x7137 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7472 = x7470 + x7471;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7473 = x7140 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7474 = x7472 + x7473;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7475 = x7143 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7476 = x7474 + x7475;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7477 = x7146 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7478 = x7476 + x7477;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7479 = x7149 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7480 = x7478 + x7479;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7481 = x7152 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7482 = x7480 + x7481;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7483 = x7155 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7484 = x7482 + x7483;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7485 = x7158 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7486 = x7484 + x7485;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7487 = x7161 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7488 = x7486 + x7487;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7489 = x7164 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7490 = x7488 + x7489;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7491 = x7170 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7492 = x7167 + x7491;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7493 = x7173 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7494 = x7492 + x7493;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7495 = x7176 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7496 = x7494 + x7495;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7497 = x7179 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7498 = x7496 + x7497;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7499 = x7182 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7500 = x7498 + x7499;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7501 = x7185 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7502 = x7500 + x7501;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7503 = x7188 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7504 = x7502 + x7503;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7505 = x7191 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7506 = x7504 + x7505;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7507 = x7194 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7508 = x7506 + x7507;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7509 = x7197 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7510 = x7508 + x7509;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7511 = x7200 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7512 = x7510 + x7511;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7513 = x7203 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7514 = x7512 + x7513;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7515 = x7206 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7516 = x7514 + x7515;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7517 = x7209 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7518 = x7516 + x7517;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7519 = x7212 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7520 = x7518 + x7519;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7521 = x7430 + x7490;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7522 = x7460 + x7520;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7523 = x7242 + x7521;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7524 = x7272 + x7522;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7525 = x6762 + x7523;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7526 = x6764 + x7524;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7527 = x6417 + x7525;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7528 = x6498 + x7526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7529 = x6501 * x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7530 = x101 - x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7531 = x7529 * x7530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7532 = x101 - x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7533 = x6501 * x7532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7534 = x7533 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7535 = x7531 + x7534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7536 = x101 - x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7537 = x7536 * x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7538 = x7537 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7539 = x7535 + x7538;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7540 = x7529 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7541 = x7539 + x7540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7542 = x6502 * x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7543 = x101 - x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7544 = x7542 * x7543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7545 = x101 - x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7546 = x6502 * x7545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7547 = x7546 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7548 = x7544 + x7547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7549 = x101 - x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7550 = x7549 * x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7551 = x7550 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7552 = x7548 + x7551;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7553 = x7542 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7554 = x7552 + x7553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7555 = x6503 * x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7556 = x101 - x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7557 = x7555 * x7556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7558 = x101 - x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7559 = x6503 * x7558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7560 = x7559 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7561 = x7557 + x7560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7562 = x101 - x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7563 = x7562 * x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7564 = x7563 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7565 = x7561 + x7564;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7566 = x7555 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7567 = x7565 + x7566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7568 = x6504 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7569 = x101 - x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7570 = x7568 * x7569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7571 = x101 - x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7572 = x6504 * x7571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7573 = x7572 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7574 = x7570 + x7573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7575 = x101 - x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7576 = x7575 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7577 = x7576 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7578 = x7574 + x7577;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7579 = x7568 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7580 = x7578 + x7579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7581 = x6505 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7582 = x101 - x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7583 = x7581 * x7582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7584 = x101 - x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7585 = x6505 * x7584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7586 = x7585 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7587 = x7583 + x7586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7588 = x101 - x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7589 = x7588 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7590 = x7589 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7591 = x7587 + x7590;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7592 = x7581 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7593 = x7591 + x7592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7594 = x6506 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7595 = x101 - x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7596 = x7594 * x7595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7597 = x101 - x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7598 = x6506 * x7597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7599 = x7598 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7600 = x7596 + x7599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7601 = x101 - x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7602 = x7601 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7603 = x7602 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7604 = x7600 + x7603;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7605 = x7594 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7606 = x7604 + x7605;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7607 = x6507 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7608 = x101 - x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7609 = x7607 * x7608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7610 = x101 - x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7611 = x6507 * x7610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7612 = x7611 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7613 = x7609 + x7612;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7614 = x101 - x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7615 = x7614 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7616 = x7615 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7617 = x7613 + x7616;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7618 = x7607 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7619 = x7617 + x7618;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7620 = x6508 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7621 = x101 - x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7622 = x7620 * x7621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7623 = x101 - x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7624 = x6508 * x7623;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7625 = x7624 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7626 = x7622 + x7625;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7627 = x101 - x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7628 = x7627 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7629 = x7628 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7630 = x7626 + x7629;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7631 = x7620 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7632 = x7630 + x7631;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7633 = x6509 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7634 = x101 - x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7635 = x7633 * x7634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7636 = x101 - x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7637 = x6509 * x7636;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7638 = x7637 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7639 = x7635 + x7638;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7640 = x101 - x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7641 = x7640 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7642 = x7641 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7643 = x7639 + x7642;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7644 = x7633 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7645 = x7643 + x7644;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7646 = x6510 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7647 = x101 - x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7648 = x7646 * x7647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7649 = x101 - x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7650 = x6510 * x7649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7651 = x7650 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7652 = x7648 + x7651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7653 = x101 - x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7654 = x7653 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7655 = x7654 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7656 = x7652 + x7655;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7657 = x7646 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7658 = x7656 + x7657;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7659 = x6511 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7660 = x101 - x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7661 = x7659 * x7660;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7662 = x101 - x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7663 = x6511 * x7662;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7664 = x7663 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7665 = x7661 + x7664;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7666 = x101 - x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7667 = x7666 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7668 = x7667 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7669 = x7665 + x7668;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7670 = x7659 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7671 = x7669 + x7670;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7672 = x6512 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7673 = x101 - x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7674 = x7672 * x7673;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7675 = x101 - x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7676 = x6512 * x7675;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7677 = x7676 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7678 = x7674 + x7677;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7679 = x101 - x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7680 = x7679 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7681 = x7680 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7682 = x7678 + x7681;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7683 = x7672 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7684 = x7682 + x7683;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7685 = x6513 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7686 = x101 - x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7687 = x7685 * x7686;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7688 = x101 - x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7689 = x6513 * x7688;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7690 = x7689 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7691 = x7687 + x7690;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7692 = x101 - x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7693 = x7692 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7694 = x7693 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7695 = x7691 + x7694;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7696 = x7685 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7697 = x7695 + x7696;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7698 = x6514 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7699 = x101 - x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7700 = x7698 * x7699;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7701 = x101 - x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7702 = x6514 * x7701;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7703 = x7702 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7704 = x7700 + x7703;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7705 = x101 - x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7706 = x7705 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7707 = x7706 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7708 = x7704 + x7707;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7709 = x7698 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7710 = x7708 + x7709;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7711 = x6515 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7712 = x101 - x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7713 = x7711 * x7712;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7714 = x101 - x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7715 = x6515 * x7714;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7716 = x7715 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7717 = x7713 + x7716;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7718 = x101 - x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7719 = x7718 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7720 = x7719 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7721 = x7717 + x7720;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7722 = x7711 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7723 = x7721 + x7722;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7724 = x6516 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7725 = x101 - x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7726 = x7724 * x7725;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7727 = x101 - x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7728 = x6516 * x7727;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7729 = x7728 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7730 = x7726 + x7729;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7731 = x101 - x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7732 = x7731 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7733 = x7732 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7734 = x7730 + x7733;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7735 = x7724 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7736 = x7734 + x7735;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7737 = x6517 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7738 = x101 - x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7739 = x7737 * x7738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7740 = x101 - x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7741 = x6517 * x7740;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7742 = x7741 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7743 = x7739 + x7742;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7744 = x101 - x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7745 = x7744 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7746 = x7745 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7747 = x7743 + x7746;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7748 = x7737 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7749 = x7747 + x7748;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7750 = x6518 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7751 = x101 - x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7752 = x7750 * x7751;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7753 = x101 - x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7754 = x6518 * x7753;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7755 = x7754 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7756 = x7752 + x7755;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7757 = x101 - x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7758 = x7757 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7759 = x7758 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7760 = x7756 + x7759;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7761 = x7750 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7762 = x7760 + x7761;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7763 = x6519 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7764 = x101 - x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7765 = x7763 * x7764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7766 = x101 - x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7767 = x6519 * x7766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7768 = x7767 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7769 = x7765 + x7768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7770 = x101 - x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7771 = x7770 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7772 = x7771 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7773 = x7769 + x7772;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7774 = x7763 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7775 = x7773 + x7774;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7776 = x6520 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7777 = x101 - x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7778 = x7776 * x7777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7779 = x101 - x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7780 = x6520 * x7779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7781 = x7780 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7782 = x7778 + x7781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7783 = x101 - x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7784 = x7783 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7785 = x7784 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7786 = x7782 + x7785;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7787 = x7776 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7788 = x7786 + x7787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7789 = x6521 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7790 = x101 - x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7791 = x7789 * x7790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7792 = x101 - x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7793 = x6521 * x7792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7794 = x7793 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7795 = x7791 + x7794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7796 = x101 - x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7797 = x7796 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7798 = x7797 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7799 = x7795 + x7798;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7800 = x7789 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7801 = x7799 + x7800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7802 = x6522 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7803 = x101 - x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7804 = x7802 * x7803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7805 = x101 - x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7806 = x6522 * x7805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7807 = x7806 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7808 = x7804 + x7807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7809 = x101 - x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7810 = x7809 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7811 = x7810 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7812 = x7808 + x7811;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7813 = x7802 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7814 = x7812 + x7813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7815 = x6523 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7816 = x101 - x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7817 = x7815 * x7816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7818 = x101 - x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7819 = x6523 * x7818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7820 = x7819 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7821 = x7817 + x7820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7822 = x101 - x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7823 = x7822 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7824 = x7823 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7825 = x7821 + x7824;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7826 = x7815 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7827 = x7825 + x7826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7828 = x6524 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7829 = x101 - x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7830 = x7828 * x7829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7831 = x101 - x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7832 = x6524 * x7831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7833 = x7832 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7834 = x7830 + x7833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7835 = x101 - x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7836 = x7835 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7837 = x7836 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7838 = x7834 + x7837;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7839 = x7828 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7840 = x7838 + x7839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7841 = x6525 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7842 = x101 - x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7843 = x7841 * x7842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7844 = x101 - x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7845 = x6525 * x7844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7846 = x7845 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7847 = x7843 + x7846;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7848 = x101 - x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7849 = x7848 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7850 = x7849 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7851 = x7847 + x7850;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7852 = x7841 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7853 = x7851 + x7852;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7854 = x6526 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7855 = x101 - x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7856 = x7854 * x7855;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7857 = x101 - x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7858 = x6526 * x7857;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7859 = x7858 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7860 = x7856 + x7859;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7861 = x101 - x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7862 = x7861 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7863 = x7862 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7864 = x7860 + x7863;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7865 = x7854 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7866 = x7864 + x7865;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7867 = x6527 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7868 = x101 - x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7869 = x7867 * x7868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7870 = x101 - x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7871 = x6527 * x7870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7872 = x7871 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7873 = x7869 + x7872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7874 = x101 - x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7875 = x7874 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7876 = x7875 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7877 = x7873 + x7876;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7878 = x7867 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7879 = x7877 + x7878;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7880 = x6528 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7881 = x101 - x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7882 = x7880 * x7881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7883 = x101 - x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7884 = x6528 * x7883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7885 = x7884 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7886 = x7882 + x7885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7887 = x101 - x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7888 = x7887 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7889 = x7888 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7890 = x7886 + x7889;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7891 = x7880 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7892 = x7890 + x7891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7893 = x6529 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7894 = x101 - x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7895 = x7893 * x7894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7896 = x101 - x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7897 = x6529 * x7896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7898 = x7897 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7899 = x7895 + x7898;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7900 = x101 - x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7901 = x7900 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7902 = x7901 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7903 = x7899 + x7902;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7904 = x7893 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7905 = x7903 + x7904;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7906 = x6530 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7907 = x101 - x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7908 = x7906 * x7907;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7909 = x101 - x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7910 = x6530 * x7909;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7911 = x7910 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7912 = x7908 + x7911;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7913 = x101 - x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7914 = x7913 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7915 = x7914 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7916 = x7912 + x7915;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7917 = x7906 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7918 = x7916 + x7917;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7919 = x6531 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7920 = x101 - x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7921 = x7919 * x7920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7922 = x101 - x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7923 = x6531 * x7922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7924 = x7923 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7925 = x7921 + x7924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7926 = x101 - x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7927 = x7926 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7928 = x7927 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7929 = x7925 + x7928;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7930 = x7919 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7931 = x7929 + x7930;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7932 = x6532 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7933 = x101 - x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7934 = x7932 * x7933;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7935 = x101 - x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7936 = x6532 * x7935;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7937 = x7936 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7938 = x7934 + x7937;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7939 = x101 - x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7940 = x7939 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7941 = x7940 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7942 = x7938 + x7941;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7943 = x7932 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7944 = x7942 + x7943;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7945 = x7554 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7946 = x7541 + x7945;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7947 = x7567 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7948 = x7946 + x7947;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7949 = x7580 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7950 = x7948 + x7949;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7951 = x7593 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7952 = x7950 + x7951;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7953 = x7606 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7954 = x7952 + x7953;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7955 = x7619 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7956 = x7954 + x7955;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7957 = x7632 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7958 = x7956 + x7957;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7959 = x7645 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7960 = x7958 + x7959;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7961 = x7658 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7962 = x7960 + x7961;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7963 = x7671 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7964 = x7962 + x7963;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7965 = x7684 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7966 = x7964 + x7965;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7967 = x7697 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7968 = x7966 + x7967;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7969 = x7710 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7970 = x7968 + x7969;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7971 = x7723 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7972 = x7970 + x7971;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7973 = x7736 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7974 = x7972 + x7973;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7975 = x7762 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7976 = x7749 + x7975;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7977 = x7775 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7978 = x7976 + x7977;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7979 = x7788 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7980 = x7978 + x7979;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7981 = x7801 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7982 = x7980 + x7981;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7983 = x7814 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7984 = x7982 + x7983;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7985 = x7827 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7986 = x7984 + x7985;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7987 = x7840 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7988 = x7986 + x7987;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7989 = x7853 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7990 = x7988 + x7989;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7991 = x7866 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7992 = x7990 + x7991;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7993 = x7879 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7994 = x7992 + x7993;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7995 = x7892 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7996 = x7994 + x7995;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7997 = x7905 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7998 = x7996 + x7997;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7999 = x7918 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8000 = x7998 + x7999;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8001 = x7931 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8002 = x8000 + x8001;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8003 = x7944 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8004 = x8002 + x8003;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8005 = x6898 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8006 = x6895 + x8005;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8007 = x6901 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8008 = x8006 + x8007;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8009 = x6904 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8010 = x8008 + x8009;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8011 = x6907 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8012 = x8010 + x8011;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8013 = x6910 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8014 = x8012 + x8013;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8015 = x6913 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8016 = x8014 + x8015;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8017 = x6916 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8018 = x8016 + x8017;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8019 = x6919 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8020 = x8018 + x8019;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8021 = x6922 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8022 = x8020 + x8021;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8023 = x6925 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8024 = x8022 + x8023;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8025 = x6928 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8026 = x8024 + x8025;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8027 = x6931 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8028 = x8026 + x8027;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8029 = x6934 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8030 = x8028 + x8029;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8031 = x6937 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8032 = x8030 + x8031;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8033 = x6940 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8034 = x8032 + x8033;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8035 = x6946 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8036 = x6943 + x8035;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8037 = x6949 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8038 = x8036 + x8037;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8039 = x6952 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8040 = x8038 + x8039;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8041 = x6955 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8042 = x8040 + x8041;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8043 = x6958 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8044 = x8042 + x8043;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8045 = x6961 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8046 = x8044 + x8045;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8047 = x6964 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8048 = x8046 + x8047;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8049 = x6967 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8050 = x8048 + x8049;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8051 = x6970 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8052 = x8050 + x8051;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8053 = x6973 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8054 = x8052 + x8053;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8055 = x6976 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8056 = x8054 + x8055;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8057 = x6979 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8058 = x8056 + x8057;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8059 = x6982 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8060 = x8058 + x8059;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8061 = x6985 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8062 = x8060 + x8061;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8063 = x6988 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8064 = x8062 + x8063;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8065 = x7974 + x8034;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8066 = x8004 + x8064;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8067 = x7527 + x8065;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8068 = x7528 + x8066;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8069 = x6598 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8070 = x6597 + x8069;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8071 = x6599 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8072 = x8070 + x8071;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8073 = x6600 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8074 = x8072 + x8073;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8075 = x6601 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8076 = x8074 + x8075;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8077 = x6602 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8078 = x8076 + x8077;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8079 = x6603 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8080 = x8078 + x8079;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8081 = x6604 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8082 = x8080 + x8081;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8083 = x6605 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8084 = x8082 + x8083;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8085 = x6606 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8086 = x8084 + x8085;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8087 = x6607 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8088 = x8086 + x8087;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8089 = x6608 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8090 = x8088 + x8089;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8091 = x6609 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8092 = x8090 + x8091;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8093 = x6610 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8094 = x8092 + x8093;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8095 = x6611 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8096 = x8094 + x8095;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8097 = x6612 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8098 = x8096 + x8097;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8099 = x6614 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8100 = x6613 + x8099;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8101 = x6615 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8102 = x8100 + x8101;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8103 = x6616 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8104 = x8102 + x8103;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8105 = x6617 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8106 = x8104 + x8105;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8107 = x6618 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8108 = x8106 + x8107;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8109 = x6619 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8110 = x8108 + x8109;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8111 = x6620 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8112 = x8110 + x8111;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8113 = x6621 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8114 = x8112 + x8113;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8115 = x6622 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8116 = x8114 + x8115;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8117 = x6623 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8118 = x8116 + x8117;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8119 = x6624 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8120 = x8118 + x8119;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8121 = x6625 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8122 = x8120 + x8121;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8123 = x6626 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8124 = x8122 + x8123;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8125 = x6627 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8126 = x8124 + x8125;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8127 = x6628 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8128 = x8126 + x8127;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8129 = x7527 + x8098;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8130 = x7528 + x8128;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8067);
        reg = x8067;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8129);
        reg = x8129;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8068);
        reg = x8068;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8130);
        reg = x8130;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8131 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x8131 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8132 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x8132 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8133 = Fp(x8131.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8133);
          reg = x8133;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8134 = Fp(x8131.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8135 = x8134 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8135);
          reg = x8135;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8136 = Fp(x8131.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8137 = x8136 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8137);
          reg = x8137;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8138 = Fp(x8131.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8139 = x8138 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8139);
          reg = x8139;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8140 = Fp(x8131.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8141 = x8140 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8141);
          reg = x8141;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8142 = Fp(x8131.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8143 = x8142 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8143);
          reg = x8143;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8144 = Fp(x8131.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8145 = x8144 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8145);
          reg = x8145;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8146 = Fp(x8131.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8147 = x8146 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8147);
          reg = x8147;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8148 = Fp(x8131.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8149 = x8148 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8149);
          reg = x8149;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8150 = Fp(x8131.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8151 = x8150 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8151);
          reg = x8151;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8152 = Fp(x8131.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8153 = x8152 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8153);
          reg = x8153;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8154 = Fp(x8131.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8155 = x8154 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8155);
          reg = x8155;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8156 = Fp(x8131.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8157 = x8156 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8157);
          reg = x8157;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8158 = Fp(x8131.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8159 = x8158 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8159);
          reg = x8159;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8160 = Fp(x8131.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8161 = x8160 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8161);
          reg = x8161;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8162 = Fp(x8131.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8163 = x8162 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8163);
          reg = x8163;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8164 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x8164 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8165 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x8165 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8166 = x8165 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8167 = x8164 + x8166;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8168 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x8168 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8169 = x8168 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8170 = x8167 + x8169;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8171 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x8171 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8172 = x8171 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8173 = x8170 + x8172;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8174 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x8174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8175 = x8174 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8176 = x8173 + x8175;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8177 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x8177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8178 = x8177 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8179 = x8176 + x8178;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8180 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x8180 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8181 = x8180 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8182 = x8179 + x8181;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8183 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x8183 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8184 = x8183 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8185 = x8182 + x8184;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8186 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x8186 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8187 = x8186 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8188 = x8185 + x8187;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8189 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x8189 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8190 = x8189 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8191 = x8188 + x8190;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8192 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x8192 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8193 = x8192 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8194 = x8191 + x8193;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8195 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x8195 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8196 = x8195 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8197 = x8194 + x8196;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8198 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x8198 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8199 = x8198 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8200 = x8197 + x8199;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8201 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x8201 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8202 = x8201 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8203 = x8200 + x8202;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8204 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x8204 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8205 = x8204 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8206 = x8203 + x8205;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8207 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x8207 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8208 = x8207 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8209 = x8206 + x8208;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8210 = x8131 - x8209;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8211 = x8210 * x15;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8212 = Fp(x8211.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8212);
          reg = x8212;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8213 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8213 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8214 = x8211 - x8213;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8215 = x8214 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8216 = x101 - x8215;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8217 = x8215 * x8216;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8217 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8218 = x8132 + x8211;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8219 = Fp(x8218.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8219);
          reg = x8219;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8220 = Fp(x8218.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8221 = x8220 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8221);
          reg = x8221;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8222 = Fp(x8218.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8223 = x8222 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8223);
          reg = x8223;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8224 = Fp(x8218.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8225 = x8224 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8225);
          reg = x8225;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8226 = Fp(x8218.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8227 = x8226 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8227);
          reg = x8227;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8228 = Fp(x8218.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8229 = x8228 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8229);
          reg = x8229;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8230 = Fp(x8218.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8231 = x8230 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8231);
          reg = x8231;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8232 = Fp(x8218.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8233 = x8232 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8233);
          reg = x8233;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8234 = Fp(x8218.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8235 = x8234 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8235);
          reg = x8235;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8236 = Fp(x8218.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8237 = x8236 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8237);
          reg = x8237;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8238 = Fp(x8218.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8239 = x8238 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8239);
          reg = x8239;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8240 = Fp(x8218.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8241 = x8240 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8241);
          reg = x8241;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8242 = Fp(x8218.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8243 = x8242 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8243);
          reg = x8243;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8244 = Fp(x8218.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8245 = x8244 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8245);
          reg = x8245;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8246 = Fp(x8218.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8247 = x8246 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8247);
          reg = x8247;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8248 = Fp(x8218.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8249 = x8248 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8249);
          reg = x8249;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8250 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x8250 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8251 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x8251 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8252 = x8251 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8253 = x8250 + x8252;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8254 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x8254 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8255 = x8254 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8256 = x8253 + x8255;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8257 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x8257 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8258 = x8257 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8259 = x8256 + x8258;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8260 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x8260 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8261 = x8260 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8262 = x8259 + x8261;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8263 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x8263 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8264 = x8263 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8265 = x8262 + x8264;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8266 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x8266 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8267 = x8266 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8268 = x8265 + x8267;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8269 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x8269 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8270 = x8269 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8271 = x8268 + x8270;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8272 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x8272 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8273 = x8272 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8274 = x8271 + x8273;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8275 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x8275 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8276 = x8275 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8277 = x8274 + x8276;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8278 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x8278 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8279 = x8278 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8280 = x8277 + x8279;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8281 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x8281 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8282 = x8281 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8283 = x8280 + x8282;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8284 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x8284 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8285 = x8284 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8286 = x8283 + x8285;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8287 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x8287 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8288 = x8287 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8289 = x8286 + x8288;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8290 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x8290 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8291 = x8290 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8292 = x8289 + x8291;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8293 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x8293 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8294 = x8293 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8295 = x8292 + x8294;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8296 = x8218 - x8295;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8297 = x8296 * x15;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8298 = Fp(x8297.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8298);
          reg = x8298;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8299 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x8299 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8300 = x8297 - x8299;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8301 = x8300 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8302 = x101 - x8301;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8303 = x8301 * x8302;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8303 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8304 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x8304 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8305 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x8305 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8306 = Fp(x8304.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8306);
          reg = x8306;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8307 = Fp(x8304.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8308 = x8307 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8308);
          reg = x8308;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8309 = Fp(x8304.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8310 = x8309 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8310);
          reg = x8310;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8311 = Fp(x8304.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8312 = x8311 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8312);
          reg = x8312;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8313 = Fp(x8304.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8314 = x8313 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8314);
          reg = x8314;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8315 = Fp(x8304.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8316 = x8315 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8316);
          reg = x8316;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8317 = Fp(x8304.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8318 = x8317 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8318);
          reg = x8318;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8319 = Fp(x8304.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8320 = x8319 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8320);
          reg = x8320;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8321 = Fp(x8304.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8322 = x8321 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8322);
          reg = x8322;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8323 = Fp(x8304.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8324 = x8323 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8324);
          reg = x8324;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8325 = Fp(x8304.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8326 = x8325 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8326);
          reg = x8326;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8327 = Fp(x8304.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8328 = x8327 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8328);
          reg = x8328;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8329 = Fp(x8304.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8330 = x8329 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8330);
          reg = x8330;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8331 = Fp(x8304.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8332 = x8331 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8332);
          reg = x8332;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8333 = Fp(x8304.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8334 = x8333 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8334);
          reg = x8334;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8335 = Fp(x8304.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8336 = x8335 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8336);
          reg = x8336;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8337 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x8337 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8338 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x8338 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8339 = x8338 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8340 = x8337 + x8339;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8341 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x8341 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8342 = x8341 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8343 = x8340 + x8342;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8344 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x8344 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8345 = x8344 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8346 = x8343 + x8345;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8347 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x8347 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8348 = x8347 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8349 = x8346 + x8348;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8350 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x8350 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8351 = x8350 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8352 = x8349 + x8351;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8353 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x8353 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8354 = x8353 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8355 = x8352 + x8354;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8356 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x8356 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8357 = x8356 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8358 = x8355 + x8357;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8359 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x8359 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8360 = x8359 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8361 = x8358 + x8360;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8362 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x8362 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8363 = x8362 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8364 = x8361 + x8363;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8365 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x8365 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8366 = x8365 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8367 = x8364 + x8366;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8368 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x8368 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8369 = x8368 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8370 = x8367 + x8369;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8371 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x8371 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8372 = x8371 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8373 = x8370 + x8372;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8374 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x8374 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8375 = x8374 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8376 = x8373 + x8375;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8377 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x8377 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8378 = x8377 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8379 = x8376 + x8378;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8380 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x8380 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8381 = x8380 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8382 = x8379 + x8381;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8383 = x8304 - x8382;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8384 = x8383 * x15;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8385 = Fp(x8384.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8385);
          reg = x8385;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8386 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x8386 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8387 = x8384 - x8386;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8388 = x8387 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8389 = x101 - x8388;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8390 = x8388 * x8389;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8390 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8391 = x8305 + x8384;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8392 = Fp(x8391.asUInt32() & x101.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8392);
          reg = x8392;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8393 = Fp(x8391.asUInt32() & x98.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8394 = x8393 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8394);
          reg = x8394;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8395 = Fp(x8391.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8396 = x8395 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8396);
          reg = x8396;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8397 = Fp(x8391.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8398 = x8397 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8398);
          reg = x8398;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8399 = Fp(x8391.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8400 = x8399 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8400);
          reg = x8400;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8401 = Fp(x8391.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8402 = x8401 * x66;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8402);
          reg = x8402;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8403 = Fp(x8391.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8404 = x8403 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8404);
          reg = x8404;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8405 = Fp(x8391.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8406 = x8405 * x69;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8406);
          reg = x8406;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8407 = Fp(x8391.asUInt32() & x96.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8408 = x8407 * x95;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8408);
          reg = x8408;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8409 = Fp(x8391.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8410 = x8409 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8410);
          reg = x8410;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8411 = Fp(x8391.asUInt32() & x26.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8412 = x8411 * x25;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8412);
          reg = x8412;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8413 = Fp(x8391.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8414 = x8413 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8414);
          reg = x8414;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8415 = Fp(x8391.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8416 = x8415 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8416);
          reg = x8416;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8417 = Fp(x8391.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8418 = x8417 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8418);
          reg = x8418;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8419 = Fp(x8391.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8420 = x8419 * x18;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8420);
          reg = x8420;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8421 = Fp(x8391.asUInt32() & x17.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8422 = x8421 * x16;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8422);
          reg = x8422;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8423 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x8423 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8424 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x8424 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8425 = x8424 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8426 = x8423 + x8425;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8427 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x8427 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8428 = x8427 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8429 = x8426 + x8428;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8430 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x8430 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8431 = x8430 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8432 = x8429 + x8431;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8433 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x8433 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8434 = x8433 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8435 = x8432 + x8434;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8436 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x8436 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8437 = x8436 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8438 = x8435 + x8437;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8439 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x8439 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8440 = x8439 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8441 = x8438 + x8440;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8442 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x8442 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8443 = x8442 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8444 = x8441 + x8443;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8445 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x8445 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8446 = x8445 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8447 = x8444 + x8446;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8448 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x8448 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8449 = x8448 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8450 = x8447 + x8449;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8451 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x8451 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8452 = x8451 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8453 = x8450 + x8452;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8454 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x8454 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8455 = x8454 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8456 = x8453 + x8455;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8457 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x8457 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8458 = x8457 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8459 = x8456 + x8458;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8460 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x8460 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8461 = x8460 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8462 = x8459 + x8461;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8463 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x8463 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8464 = x8463 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8465 = x8462 + x8464;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8466 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x8466 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8467 = x8466 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8468 = x8465 + x8467;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8469 = x8391 - x8468;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8470 = x8469 * x15;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8471 = Fp(x8470.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8471);
          reg = x8471;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8472 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x8472 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8473 = x8470 - x8472;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8474 = x8473 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8475 = x101 - x8474;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8476 = x8474 * x8475;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8476 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/components/mux.h":37:25))
    auto x8477 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x8477 != Fp::invalid());
    if (x8477 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8478 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x8478 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8479 = args[2][136 * steps + ((cycle - 1) & mask)];
      assert(x8479 != Fp::invalid());
      if (x8479 != 0) {
        // loc("Top/Mux/4/OneHot/Reg10"("cirgen/circuit/rv32im/sha.cpp":339:72))
        auto x8480 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x8480 != Fp::invalid());
        if (x8480 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":342:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12);
            reg = x12;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":343:40))
          auto x8481 = args[2][138 * steps + ((cycle - 1) & mask)];
          assert(x8481 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":343:7)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8481);
            reg = x8481;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":345:22)
        auto x8482 = x101 - x8480;
        if (x8482 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":347:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x83);
            reg = x83;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":348:44))
          auto x8483 = args[2][138 * steps + ((cycle - 1) & mask)];
          assert(x8483 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":348:44)
          auto x8484 = x8483 - x101;
          // loc("cirgen/circuit/rv32im/sha.cpp":348:7)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8484);
            reg = x8484;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":351:18)
      auto x8485 = x101 - x8479;
      if (x8485 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8486 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x8486 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8486);
          reg = x8486;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":354:40))
        auto x8487 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x8487 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":354:40)
        auto x8488 = x8487 - x101;
        // loc("cirgen/circuit/rv32im/sha.cpp":354:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8488);
          reg = x8488;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":355:38))
        auto x8489 = args[2][138 * steps + ((cycle - 1) & mask)];
        assert(x8489 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":355:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8489);
          reg = x8489;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8490 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x8490 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8491 = (x8490 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8491);
          reg = x8491;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8492 = inv(x8490);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8492);
          reg = x8492;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8493 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x8493 != Fp::invalid());
      if (x8493 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x8490 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x8494 = x101 - x8493;
      if (x8494 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x8495 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x8495 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8496 = x8490 * x8495;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8497 = x8496 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x8497 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8498 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x8498 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":359:15)
      auto x8499 = x101 - x8498;
      if (x8493 != 0) {
        if (x8499 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
        if (x8498 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      if (x8494 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":369:38))
      auto x8500 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x8500 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":369:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8500);
        reg = x8500;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":370:40))
      auto x8501 = args[2][131 * steps + ((cycle - 1) & mask)];
      assert(x8501 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":370:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8501);
        reg = x8501;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8502 = args[2][143 * steps + ((cycle - 1) & mask)];
      assert(x8502 != Fp::invalid());
      // loc("./cirgen/components/bits.h":18:23)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8502);
        reg = x8502;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8503 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x8503 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8504 = (x8503 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8504);
          reg = x8504;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8505 = inv(x8503);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8505);
          reg = x8505;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8506 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x8506 != Fp::invalid());
      if (x8506 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x8503 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x8507 = x101 - x8506;
      if (x8507 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x8508 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x8508 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8509 = x8503 * x8508;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8510 = x8509 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x8510 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x8511 = x602 + x84;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x8512 = Fp(x8511.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8512);
          reg = x8512;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x8513 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x8513 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x8514 = x8511 - x8513;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x8515 = x8514 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x8516 = Fp(x8515.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8516);
          reg = x8516;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x8517 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x8517 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x8518 = x8515 - x8517;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x8519 = x8518 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x8520 = Fp(x8519.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8520);
          reg = x8520;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x8521 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x8521 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x8522 = x8519 - x8521;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x8523 = x8522 * x95;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x8524 = Fp(x8523.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8524);
          reg = x8524;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8525 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x8525 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x8526 = x8523 - x8525;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x8527 = x8526 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8527);
        reg = x8527;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8528 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8528 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x8529 = x101 - x8528;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x8530 = x8528 * x8529;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8530);
        reg = x8530;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x8531 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x8531 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x8532 = x98 - x8528;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x8533 = x8531 * x8532;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x8533 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x73;
      host_args.at(1) = x8498;
      host_args.at(2) = x8490;
      host_args.at(3) = x8503;
      host(ctx, "log", "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", host_args.data(), 4, host_outs.data(), 0);
      if (x8499 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
        auto x8534 = x11 - x8490;
        {
          host_args.at(0) = x8534;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x8535 = host_outs.at(0);
          auto x8536 = host_outs.at(1);
          auto x8537 = host_outs.at(2);
          auto x8538 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8535);
            reg = x8535;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8536);
            reg = x8536;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8537);
            reg = x8537;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8538);
            reg = x8538;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8539 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x8539 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8540 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x8540 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8541 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x8541 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8542 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x8542 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8534);
          reg = x8534;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8478);
          reg = x8478;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8539);
          reg = x8539;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8540);
          reg = x8540;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8541);
          reg = x8541;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8542);
          reg = x8542;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8543 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x8543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8544 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x8544 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8545 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x8545 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8546 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x8546 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8547 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x8547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8548 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x8548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8549 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x8549 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8550 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x8550 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8551 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x8551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8552 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x8552 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8553 = args[2][19 * steps + ((cycle - 2) & mask)];
      assert(x8553 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8554 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x8554 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8555 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x8555 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8556 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x8556 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8557 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x8557 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8558 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x8558 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8559 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x8559 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8560 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x8560 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8561 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x8561 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8562 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x8562 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8563 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x8563 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8564 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x8564 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8565 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x8565 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8566 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x8566 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8567 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x8567 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8568 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x8568 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8569 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x8569 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8570 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x8570 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8571 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x8571 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8572 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x8572 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8573 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x8573 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8574 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x8574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8575 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x8575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8576 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x8576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8577 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x8577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8578 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x8578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8579 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x8579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8580 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x8580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8581 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x8581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8582 = args[2][89 * steps + ((cycle - 7) & mask)];
      assert(x8582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8583 = args[2][90 * steps + ((cycle - 7) & mask)];
      assert(x8583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8584 = args[2][91 * steps + ((cycle - 7) & mask)];
      assert(x8584 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8585 = args[2][19 * steps + ((cycle - 7) & mask)];
      assert(x8585 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8586 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x8586 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8587 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x8587 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8588 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x8588 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8589 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x8589 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8590 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x8590 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8591 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x8591 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8592 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x8592 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8593 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x8593 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8594 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x8594 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8595 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x8595 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8596 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x8596 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8597 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x8597 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8598 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x8598 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8599 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x8599 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8600 = args[2][34 * steps + ((cycle - 7) & mask)];
      assert(x8600 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8601 = args[2][35 * steps + ((cycle - 7) & mask)];
      assert(x8601 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8602 = args[2][36 * steps + ((cycle - 7) & mask)];
      assert(x8602 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8603 = args[2][37 * steps + ((cycle - 7) & mask)];
      assert(x8603 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8604 = args[2][38 * steps + ((cycle - 7) & mask)];
      assert(x8604 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8605 = args[2][39 * steps + ((cycle - 7) & mask)];
      assert(x8605 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8606 = args[2][40 * steps + ((cycle - 7) & mask)];
      assert(x8606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8607 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x8607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8608 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x8608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8609 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x8609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8610 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x8610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8611 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x8611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8612 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x8612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8613 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x8613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8614 = args[2][89 * steps + ((cycle - 15) & mask)];
      assert(x8614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8615 = args[2][90 * steps + ((cycle - 15) & mask)];
      assert(x8615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8616 = args[2][91 * steps + ((cycle - 15) & mask)];
      assert(x8616 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8617 = args[2][19 * steps + ((cycle - 15) & mask)];
      assert(x8617 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8618 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x8618 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8619 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x8619 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8620 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x8620 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8621 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x8621 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8622 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x8622 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8623 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x8623 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8624 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x8624 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8625 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x8625 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8626 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x8626 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8627 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x8627 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8628 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x8628 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8629 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x8629 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8630 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x8630 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8631 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x8631 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8632 = args[2][34 * steps + ((cycle - 15) & mask)];
      assert(x8632 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8633 = args[2][35 * steps + ((cycle - 15) & mask)];
      assert(x8633 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8634 = args[2][36 * steps + ((cycle - 15) & mask)];
      assert(x8634 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8635 = args[2][37 * steps + ((cycle - 15) & mask)];
      assert(x8635 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8636 = args[2][38 * steps + ((cycle - 15) & mask)];
      assert(x8636 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8637 = args[2][39 * steps + ((cycle - 15) & mask)];
      assert(x8637 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8638 = args[2][40 * steps + ((cycle - 15) & mask)];
      assert(x8638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8639 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x8639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8640 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x8640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8641 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x8641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8642 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x8642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8643 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x8643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8644 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x8644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8645 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x8645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8646 = args[2][89 * steps + ((cycle - 16) & mask)];
      assert(x8646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8647 = args[2][90 * steps + ((cycle - 16) & mask)];
      assert(x8647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8648 = args[2][91 * steps + ((cycle - 16) & mask)];
      assert(x8648 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8649 = args[2][19 * steps + ((cycle - 16) & mask)];
      assert(x8649 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8650 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x8650 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8651 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x8651 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8652 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x8652 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8653 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x8653 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8654 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x8654 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8655 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x8655 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8656 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x8656 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8657 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x8657 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8658 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x8658 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8659 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x8659 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8660 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x8660 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8661 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x8661 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8662 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x8662 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8663 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x8663 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8664 = args[2][34 * steps + ((cycle - 16) & mask)];
      assert(x8664 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8665 = args[2][35 * steps + ((cycle - 16) & mask)];
      assert(x8665 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8666 = args[2][36 * steps + ((cycle - 16) & mask)];
      assert(x8666 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8667 = args[2][37 * steps + ((cycle - 16) & mask)];
      assert(x8667 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8668 = args[2][38 * steps + ((cycle - 16) & mask)];
      assert(x8668 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8669 = args[2][39 * steps + ((cycle - 16) & mask)];
      assert(x8669 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8670 = args[2][40 * steps + ((cycle - 16) & mask)];
      assert(x8670 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8671 = x8625 + x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8672 = x8625 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8673 = x8672 * x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8674 = x8671 - x8673;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8675 = x8626 + x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8676 = x8626 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8677 = x8676 * x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8678 = x8675 - x8677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8679 = x8627 + x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8680 = x8627 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8681 = x8680 * x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8682 = x8679 - x8681;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8683 = x8628 + x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8684 = x8628 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8685 = x8684 * x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8686 = x8683 - x8685;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8687 = x8629 + x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8688 = x8629 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8689 = x8688 * x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8690 = x8687 - x8689;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8691 = x8630 + x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8692 = x8630 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8693 = x8692 * x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8694 = x8691 - x8693;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8695 = x8631 + x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8696 = x8631 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8697 = x8696 * x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8698 = x8695 - x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8699 = x8632 + x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8700 = x8632 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8701 = x8700 * x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8702 = x8699 - x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8703 = x8633 + x8618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8704 = x8633 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8705 = x8704 * x8618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8706 = x8703 - x8705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8707 = x8634 + x8619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8708 = x8634 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8709 = x8708 * x8619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8710 = x8707 - x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8711 = x8635 + x8620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8712 = x8635 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8713 = x8712 * x8620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8714 = x8711 - x8713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8715 = x8636 + x8621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8716 = x8636 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8717 = x8716 * x8621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8718 = x8715 - x8717;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8719 = x8637 + x8622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8720 = x8637 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8721 = x8720 * x8622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8722 = x8719 - x8721;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8723 = x8638 + x8623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8724 = x8638 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8725 = x8724 * x8623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8726 = x8723 - x8725;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8727 = x8607 + x8624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8728 = x8607 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8729 = x8728 * x8624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8730 = x8727 - x8729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8731 = x8608 + x8625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8732 = x8608 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8733 = x8732 * x8625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8734 = x8731 - x8733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8735 = x8609 + x8626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8736 = x8609 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8737 = x8736 * x8626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8738 = x8735 - x8737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8739 = x8610 + x8627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8740 = x8610 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8741 = x8740 * x8627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8742 = x8739 - x8741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8743 = x8611 + x8628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8744 = x8611 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8745 = x8744 * x8628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8746 = x8743 - x8745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8747 = x8612 + x8629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8748 = x8612 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8749 = x8748 * x8629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8750 = x8747 - x8749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8751 = x8613 + x8630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8752 = x8613 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8753 = x8752 * x8630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8754 = x8751 - x8753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8755 = x8614 + x8631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8756 = x8614 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8757 = x8756 * x8631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8758 = x8755 - x8757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8759 = x8615 + x8632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8760 = x8615 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8761 = x8760 * x8632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8762 = x8759 - x8761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8763 = x8616 + x8633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8764 = x8616 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8765 = x8764 * x8633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8766 = x8763 - x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8767 = x8617 + x8634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8768 = x8617 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8769 = x8768 * x8634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8770 = x8767 - x8769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8771 = x8618 + x8635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8772 = x8618 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8773 = x8772 * x8635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8774 = x8771 - x8773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8775 = x8619 + x8636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8776 = x8619 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8777 = x8776 * x8636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8778 = x8775 - x8777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8779 = x8620 + x8637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8780 = x8620 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8781 = x8780 * x8637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8782 = x8779 - x8781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8783 = x8621 + x8638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8784 = x8621 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8785 = x8784 * x8638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8786 = x8783 - x8785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8787 = x8614 + x8674;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8788 = x8756 * x8674;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8789 = x8787 - x8788;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8790 = x8615 + x8678;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8791 = x8760 * x8678;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8792 = x8790 - x8791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8793 = x8616 + x8682;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8794 = x8764 * x8682;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8795 = x8793 - x8794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8796 = x8617 + x8686;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8797 = x8768 * x8686;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8798 = x8796 - x8797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8799 = x8618 + x8690;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8800 = x8772 * x8690;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8801 = x8799 - x8800;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8802 = x8619 + x8694;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8803 = x8776 * x8694;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8804 = x8802 - x8803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8805 = x8620 + x8698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8806 = x8780 * x8698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8807 = x8805 - x8806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8808 = x8621 + x8702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8809 = x8784 * x8702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8810 = x8808 - x8809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8811 = x8622 + x8706;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8812 = x8622 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8813 = x8812 * x8706;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8814 = x8811 - x8813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8815 = x8623 + x8710;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8816 = x8623 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8817 = x8816 * x8710;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8818 = x8815 - x8817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8819 = x8624 + x8714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8820 = x8624 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8821 = x8820 * x8714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8822 = x8819 - x8821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8823 = x8625 + x8718;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8824 = x8672 * x8718;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8825 = x8823 - x8824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8826 = x8626 + x8722;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8827 = x8676 * x8722;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8828 = x8826 - x8827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8829 = x8627 + x8726;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8830 = x8680 * x8726;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8831 = x8829 - x8830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8832 = x8628 + x8730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8833 = x8684 * x8730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8834 = x8832 - x8833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8835 = x8629 + x8734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8836 = x8688 * x8734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8837 = x8835 - x8836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8838 = x8630 + x8738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8839 = x8692 * x8738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8840 = x8838 - x8839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8841 = x8631 + x8742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8842 = x8696 * x8742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8843 = x8841 - x8842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8844 = x8632 + x8746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8845 = x8700 * x8746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8846 = x8844 - x8845;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8847 = x8633 + x8750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8848 = x8704 * x8750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8849 = x8847 - x8848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8850 = x8634 + x8754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8851 = x8708 * x8754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8852 = x8850 - x8851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8853 = x8635 + x8758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8854 = x8712 * x8758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8855 = x8853 - x8854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8856 = x8636 + x8762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8857 = x8716 * x8762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8858 = x8856 - x8857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8859 = x8637 + x8766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8860 = x8720 * x8766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8861 = x8859 - x8860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8862 = x8638 + x8770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8863 = x8724 * x8770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8864 = x8862 - x8863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8865 = x8607 + x8774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8866 = x8728 * x8774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8867 = x8865 - x8866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8868 = x8608 + x8778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8869 = x8732 * x8778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8870 = x8868 - x8869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8871 = x8609 + x8782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8872 = x8736 * x8782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8873 = x8871 - x8872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8874 = x8610 + x8786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8875 = x8740 * x8786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8876 = x8874 - x8875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8877 = x8611 + x8622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8878 = x8744 * x8622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8879 = x8877 - x8878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8880 = x8612 + x8623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8881 = x8748 * x8623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8882 = x8880 - x8881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8883 = x8613 + x8624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8884 = x8752 * x8624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8885 = x8883 - x8884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8886 = x8562 + x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8887 = x8562 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8888 = x8887 * x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8889 = x8886 - x8888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8890 = x8563 + x8554;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8891 = x8563 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8892 = x8891 * x8554;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8893 = x8890 - x8892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8894 = x8564 + x8555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8895 = x8564 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8896 = x8895 * x8555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8897 = x8894 - x8896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8898 = x8565 + x8556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8899 = x8565 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8900 = x8899 * x8556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8901 = x8898 - x8900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8902 = x8566 + x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8903 = x8566 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8904 = x8903 * x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8905 = x8902 - x8904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8906 = x8567 + x8558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8907 = x8567 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8908 = x8907 * x8558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8909 = x8906 - x8908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8910 = x8568 + x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8911 = x8568 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8912 = x8911 * x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8913 = x8910 - x8912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8914 = x8569 + x8560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8915 = x8569 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8916 = x8915 * x8560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8917 = x8914 - x8916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8918 = x8570 + x8561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8919 = x8570 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8920 = x8919 * x8561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8921 = x8918 - x8920;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8922 = x8571 + x8562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8923 = x8571 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8924 = x8923 * x8562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8925 = x8922 - x8924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8926 = x8572 + x8563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8927 = x8572 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8928 = x8927 * x8563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8929 = x8926 - x8928;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8930 = x8573 + x8564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8931 = x8573 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8932 = x8931 * x8564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8933 = x8930 - x8932;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8934 = x8574 + x8565;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8935 = x8574 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8936 = x8935 * x8565;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8937 = x8934 - x8936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8938 = x8543 + x8566;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8939 = x8543 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8940 = x8939 * x8566;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8941 = x8938 - x8940;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8942 = x8544 + x8567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8943 = x8544 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8944 = x8943 * x8567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8945 = x8942 - x8944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8946 = x8545 + x8568;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8947 = x8545 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8948 = x8947 * x8568;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8949 = x8946 - x8948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8950 = x8546 + x8569;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8951 = x8546 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8952 = x8951 * x8569;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8953 = x8950 - x8952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8954 = x8547 + x8570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8955 = x8547 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8956 = x8955 * x8570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8957 = x8954 - x8956;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8958 = x8548 + x8571;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8959 = x8548 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8960 = x8959 * x8571;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8961 = x8958 - x8960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8962 = x8549 + x8572;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8963 = x8549 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8964 = x8963 * x8572;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8965 = x8962 - x8964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8966 = x8550 + x8573;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8967 = x8550 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8968 = x8967 * x8573;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8969 = x8966 - x8968;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8970 = x8551 + x8574;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8971 = x8551 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8972 = x8971 * x8574;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8973 = x8970 - x8972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8974 = x8560 + x8889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8975 = x8560 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8976 = x8975 * x8889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8977 = x8974 - x8976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8978 = x8561 + x8893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8979 = x8561 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8980 = x8979 * x8893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8981 = x8978 - x8980;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8982 = x8562 + x8897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8983 = x8887 * x8897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8984 = x8982 - x8983;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8985 = x8563 + x8901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8986 = x8891 * x8901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8987 = x8985 - x8986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8988 = x8564 + x8905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8989 = x8895 * x8905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8990 = x8988 - x8989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8991 = x8565 + x8909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8992 = x8899 * x8909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8993 = x8991 - x8992;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8994 = x8566 + x8913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8995 = x8903 * x8913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8996 = x8994 - x8995;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8997 = x8567 + x8917;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8998 = x8907 * x8917;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8999 = x8997 - x8998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9000 = x8568 + x8921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9001 = x8911 * x8921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9002 = x9000 - x9001;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9003 = x8569 + x8925;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9004 = x8915 * x8925;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9005 = x9003 - x9004;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9006 = x8570 + x8929;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9007 = x8919 * x8929;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9008 = x9006 - x9007;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9009 = x8571 + x8933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9010 = x8923 * x8933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9011 = x9009 - x9010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9012 = x8572 + x8937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9013 = x8927 * x8937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9014 = x9012 - x9013;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9015 = x8573 + x8941;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9016 = x8931 * x8941;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9017 = x9015 - x9016;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9018 = x8574 + x8945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9019 = x8935 * x8945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9020 = x9018 - x9019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9021 = x8543 + x8949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9022 = x8939 * x8949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9023 = x9021 - x9022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9024 = x8544 + x8953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9025 = x8943 * x8953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9026 = x9024 - x9025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9027 = x8545 + x8957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9028 = x8947 * x8957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9029 = x9027 - x9028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9030 = x8546 + x8961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9031 = x8951 * x8961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9032 = x9030 - x9031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9033 = x8547 + x8965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9034 = x8955 * x8965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9035 = x9033 - x9034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9036 = x8548 + x8969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9037 = x8959 * x8969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9038 = x9036 - x9037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9039 = x8549 + x8973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9040 = x8963 * x8973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9041 = x9039 - x9040;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9042 = x8550 + x8552;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9043 = x8967 * x8552;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9044 = x9042 - x9043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9045 = x8551 + x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9046 = x8971 * x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9047 = x9045 - x9046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9048 = x8552 + x8554;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9049 = x8552 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9050 = x9049 * x8554;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9051 = x9048 - x9050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9052 = x8553 + x8555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9053 = x8553 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9054 = x9053 * x8555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9055 = x9052 - x9054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9056 = x8554 + x8556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9057 = x8554 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9058 = x9057 * x8556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9059 = x9056 - x9058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9060 = x8555 + x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9061 = x8555 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9062 = x9061 * x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9063 = x9060 - x9062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9064 = x8556 + x8558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9065 = x8556 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9066 = x9065 * x8558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9067 = x9064 - x9066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9068 = x8557 + x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9069 = x8557 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9070 = x9069 * x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9071 = x9068 - x9070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9072 = x8558 + x8560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9073 = x8558 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9074 = x9073 * x8560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9075 = x9072 - x9074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9076 = x8559 + x8561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9077 = x8559 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9078 = x9077 * x8561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9079 = x9076 - x9078;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9080 = x8640 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9081 = x8639 + x9080;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9082 = x8641 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9083 = x9081 + x9082;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9084 = x8642 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9085 = x9083 + x9084;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9086 = x8643 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9087 = x9085 + x9086;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9088 = x8644 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9089 = x9087 + x9088;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9090 = x8645 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9091 = x9089 + x9090;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9092 = x8646 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9093 = x9091 + x9092;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9094 = x8647 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9095 = x9093 + x9094;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9096 = x8648 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9097 = x9095 + x9096;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9098 = x8649 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9099 = x9097 + x9098;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9100 = x8650 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9101 = x9099 + x9100;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9102 = x8651 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9103 = x9101 + x9102;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9104 = x8652 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9105 = x9103 + x9104;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9106 = x8653 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9107 = x9105 + x9106;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9108 = x8654 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9109 = x9107 + x9108;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9110 = x8656 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9111 = x8655 + x9110;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9112 = x8657 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9113 = x9111 + x9112;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9114 = x8658 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9115 = x9113 + x9114;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9116 = x8659 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9117 = x9115 + x9116;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9118 = x8660 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9119 = x9117 + x9118;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9120 = x8661 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9121 = x9119 + x9120;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9122 = x8662 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9123 = x9121 + x9122;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9124 = x8663 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9125 = x9123 + x9124;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9126 = x8664 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9127 = x9125 + x9126;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9128 = x8665 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9129 = x9127 + x9128;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9130 = x8666 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9131 = x9129 + x9130;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9132 = x8667 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9133 = x9131 + x9132;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9134 = x8668 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9135 = x9133 + x9134;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9136 = x8669 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9137 = x9135 + x9136;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9138 = x8670 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9139 = x9137 + x9138;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9140 = x8792 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9141 = x8789 + x9140;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9142 = x8795 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9143 = x9141 + x9142;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9144 = x8798 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9145 = x9143 + x9144;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9146 = x8801 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9147 = x9145 + x9146;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9148 = x8804 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9149 = x9147 + x9148;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9150 = x8807 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9151 = x9149 + x9150;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9152 = x8810 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9153 = x9151 + x9152;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9154 = x8814 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9155 = x9153 + x9154;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9156 = x8818 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9157 = x9155 + x9156;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9158 = x8822 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9159 = x9157 + x9158;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9160 = x8825 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9161 = x9159 + x9160;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9162 = x8828 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9163 = x9161 + x9162;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9164 = x8831 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9165 = x9163 + x9164;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9166 = x8834 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9167 = x9165 + x9166;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9168 = x8837 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9169 = x9167 + x9168;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9170 = x8843 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9171 = x8840 + x9170;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9172 = x8846 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9173 = x9171 + x9172;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9174 = x8849 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9175 = x9173 + x9174;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9176 = x8852 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9177 = x9175 + x9176;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9178 = x8855 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9179 = x9177 + x9178;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9180 = x8858 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9181 = x9179 + x9180;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9182 = x8861 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9183 = x9181 + x9182;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9184 = x8864 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9185 = x9183 + x9184;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9186 = x8867 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9187 = x9185 + x9186;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9188 = x8870 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9189 = x9187 + x9188;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9190 = x8873 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9191 = x9189 + x9190;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9192 = x8876 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9193 = x9191 + x9192;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9194 = x8879 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9195 = x9193 + x9194;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9196 = x8882 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9197 = x9195 + x9196;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9198 = x8885 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9199 = x9197 + x9198;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9200 = x8576 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9201 = x8575 + x9200;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9202 = x8577 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9203 = x9201 + x9202;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9204 = x8578 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9205 = x9203 + x9204;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9206 = x8579 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9207 = x9205 + x9206;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9208 = x8580 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9209 = x9207 + x9208;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9210 = x8581 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9211 = x9209 + x9210;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9212 = x8582 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9213 = x9211 + x9212;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9214 = x8583 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9215 = x9213 + x9214;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9216 = x8584 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9217 = x9215 + x9216;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9218 = x8585 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9219 = x9217 + x9218;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9220 = x8586 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9221 = x9219 + x9220;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9222 = x8587 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9223 = x9221 + x9222;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9224 = x8588 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9225 = x9223 + x9224;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9226 = x8589 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9227 = x9225 + x9226;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9228 = x8590 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9229 = x9227 + x9228;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9230 = x8592 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9231 = x8591 + x9230;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9232 = x8593 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9233 = x9231 + x9232;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9234 = x8594 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9235 = x9233 + x9234;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9236 = x8595 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9237 = x9235 + x9236;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9238 = x8596 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9239 = x9237 + x9238;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9240 = x8597 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9241 = x9239 + x9240;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9242 = x8598 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9243 = x9241 + x9242;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9244 = x8599 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9245 = x9243 + x9244;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9246 = x8600 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9247 = x9245 + x9246;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9248 = x8601 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9249 = x9247 + x9248;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9250 = x8602 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9251 = x9249 + x9250;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9252 = x8603 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9253 = x9251 + x9252;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9254 = x8604 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9255 = x9253 + x9254;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9256 = x8605 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9257 = x9255 + x9256;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9258 = x8606 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9259 = x9257 + x9258;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9260 = x8981 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9261 = x8977 + x9260;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9262 = x8984 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9263 = x9261 + x9262;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9264 = x8987 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9265 = x9263 + x9264;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9266 = x8990 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9267 = x9265 + x9266;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9268 = x8993 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9269 = x9267 + x9268;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9270 = x8996 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9271 = x9269 + x9270;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9272 = x8999 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9273 = x9271 + x9272;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9274 = x9002 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9275 = x9273 + x9274;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9276 = x9005 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9277 = x9275 + x9276;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9278 = x9008 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9279 = x9277 + x9278;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9280 = x9011 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9281 = x9279 + x9280;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9282 = x9014 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9283 = x9281 + x9282;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9284 = x9017 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9285 = x9283 + x9284;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9286 = x9020 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9287 = x9285 + x9286;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9288 = x9023 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9289 = x9287 + x9288;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9290 = x9029 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9291 = x9026 + x9290;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9292 = x9032 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9293 = x9291 + x9292;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9294 = x9035 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9295 = x9293 + x9294;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9296 = x9038 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9297 = x9295 + x9296;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9298 = x9041 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9299 = x9297 + x9298;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9300 = x9044 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9301 = x9299 + x9300;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9302 = x9047 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9303 = x9301 + x9302;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9304 = x9051 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9305 = x9303 + x9304;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9306 = x9055 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9307 = x9305 + x9306;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9308 = x9059 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9309 = x9307 + x9308;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9310 = x9063 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9311 = x9309 + x9310;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9312 = x9067 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9313 = x9311 + x9312;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9314 = x9071 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9315 = x9313 + x9314;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9316 = x9075 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9317 = x9315 + x9316;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9318 = x9079 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9319 = x9317 + x9318;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9320 = x9229 + x9289;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9321 = x9259 + x9319;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9322 = x9169 + x9320;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9323 = x9199 + x9321;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9324 = x9109 + x9322;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9325 = x9139 + x9323;
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      {
        auto& reg = args[2][148 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9324);
        reg = x9324;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      {
        auto& reg = args[2][149 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9325);
        reg = x9325;
      }
      if (x8498 != 0) {
        {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9326 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9326 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9327 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9327 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9328 = x9327 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9329 = x9326 + x9328;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9330 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9330 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9331 = x9330 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9332 = x9329 + x9331;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9333 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9333 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9334 = x9333 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9335 = x9332 + x9334;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9336 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9336 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9337 = x9336 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9338 = x9335 + x9337;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9339 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9339 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9340 = x9339 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9341 = x9338 + x9340;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9342 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9342 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9343 = x9342 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9344 = x9341 + x9343;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9345 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9345 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9346 = x9345 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9347 = x9344 + x9346;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9348 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9348 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9349 = x9348 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9350 = x9347 + x9349;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9351 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9351 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9352 = x9351 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9353 = x9350 + x9352;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9354 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9354 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9355 = x9354 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9356 = x9353 + x9355;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9357 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9357 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9358 = x9357 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9359 = x9356 + x9358;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9360 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9360 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9361 = x9360 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9362 = x9359 + x9361;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9363 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9363 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9364 = x9363 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9365 = x9362 + x9364;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9366 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9366 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9367 = x9366 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9368 = x9365 + x9367;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9369 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9369 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9370 = x9369 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9371 = x9368 + x9370;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9372 = x100 - x9371;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9373 = x9372 * x15;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9373);
          reg = x9373;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9374 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9374 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9375 = Fp(x9374.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9375);
            reg = x9375;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9376 = Fp(x9374.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9377 = x9376 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9377);
            reg = x9377;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9378 = Fp(x9374.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9379 = x9378 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9379);
            reg = x9379;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9380 = Fp(x9374.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9381 = x9380 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9381);
            reg = x9381;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9382 = Fp(x9374.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9383 = x9382 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9383);
            reg = x9383;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9384 = Fp(x9374.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9385 = x9384 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9385);
            reg = x9385;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9386 = Fp(x9374.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9387 = x9386 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9387);
            reg = x9387;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9388 = Fp(x9374.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9389 = x9388 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9389);
            reg = x9389;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9390 = Fp(x9374.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9391 = x9390 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9391);
            reg = x9391;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9392 = Fp(x9374.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9393 = x9392 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9393);
            reg = x9393;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9394 = Fp(x9374.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9395 = x9394 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9395);
            reg = x9395;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9396 = Fp(x9374.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9397 = x9396 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9397);
            reg = x9397;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9398 = Fp(x9374.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9399 = x9398 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9399);
            reg = x9399;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9400 = Fp(x9374.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9401 = x9400 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9401);
            reg = x9401;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9402 = Fp(x9374.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9403 = x9402 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9403);
            reg = x9403;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9404 = Fp(x9374.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9405 = x9404 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9405);
            reg = x9405;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9406 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9406 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9407 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9407 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9408 = x9407 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9409 = x9406 + x9408;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9410 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9410 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9411 = x9410 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9412 = x9409 + x9411;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9413 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9413 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9414 = x9413 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9415 = x9412 + x9414;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9416 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9416 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9417 = x9416 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9418 = x9415 + x9417;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9419 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9419 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9420 = x9419 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9421 = x9418 + x9420;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9422 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9422 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9423 = x9422 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9424 = x9421 + x9423;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9425 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9425 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9426 = x9425 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9427 = x9424 + x9426;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9428 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9428 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9429 = x9428 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9430 = x9427 + x9429;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9431 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9431 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9432 = x9431 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9433 = x9430 + x9432;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9434 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9434 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9435 = x9434 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9436 = x9433 + x9435;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9437 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9437 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9438 = x9437 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9439 = x9436 + x9438;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9440 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9440 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9441 = x9440 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9442 = x9439 + x9441;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9443 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9443 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9444 = x9443 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9445 = x9442 + x9444;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9446 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9446 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9447 = x9446 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9448 = x9445 + x9447;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9449 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9449 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9450 = x9449 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9451 = x9448 + x9450;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9452 = x9374 - x9451;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9453 = x9452 * x15;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9453);
          reg = x9453;
        }
      }
      if (x8499 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg10"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x9454 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x9454 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg11"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x9455 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x9455 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9456 = Fp(x9454.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9456);
            reg = x9456;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9457 = Fp(x9454.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9458 = x9457 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9458);
            reg = x9458;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9459 = Fp(x9454.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9460 = x9459 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9460);
            reg = x9460;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9461 = Fp(x9454.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9462 = x9461 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9462);
            reg = x9462;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9463 = Fp(x9454.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9464 = x9463 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9464);
            reg = x9464;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9465 = Fp(x9454.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9466 = x9465 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9466);
            reg = x9466;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9467 = Fp(x9454.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9468 = x9467 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9468);
            reg = x9468;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9469 = Fp(x9454.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9470 = x9469 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9470);
            reg = x9470;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9471 = Fp(x9454.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9472 = x9471 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9472);
            reg = x9472;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9473 = Fp(x9454.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9474 = x9473 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9474);
            reg = x9474;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9475 = Fp(x9454.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9476 = x9475 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9476);
            reg = x9476;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9477 = Fp(x9454.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9478 = x9477 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9478);
            reg = x9478;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9479 = Fp(x9454.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9480 = x9479 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9480);
            reg = x9480;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9481 = Fp(x9454.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9482 = x9481 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9482);
            reg = x9482;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9483 = Fp(x9454.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9484 = x9483 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9484);
            reg = x9484;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9485 = Fp(x9454.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9486 = x9485 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9486);
            reg = x9486;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9487 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9487 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9488 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9488 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9489 = x9488 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9490 = x9487 + x9489;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9491 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9491 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9492 = x9491 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9493 = x9490 + x9492;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9494 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9494 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9495 = x9494 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9496 = x9493 + x9495;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9497 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9497 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9498 = x9497 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9499 = x9496 + x9498;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9500 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9500 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9501 = x9500 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9502 = x9499 + x9501;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9503 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9503 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9504 = x9503 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9505 = x9502 + x9504;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9506 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9506 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9507 = x9506 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9508 = x9505 + x9507;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9509 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9509 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9510 = x9509 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9511 = x9508 + x9510;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9512 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9512 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9513 = x9512 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9514 = x9511 + x9513;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9515 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9515 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9516 = x9515 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9517 = x9514 + x9516;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9518 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9518 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9519 = x9518 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9520 = x9517 + x9519;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9521 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9521 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9522 = x9521 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9523 = x9520 + x9522;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9524 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9524 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9525 = x9524 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9526 = x9523 + x9525;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9527 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9527 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9528 = x9527 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9529 = x9526 + x9528;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9530 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9530 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9531 = x9530 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9532 = x9529 + x9531;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9533 = x9454 - x9532;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9534 = x9533 * x15;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9534);
          reg = x9534;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9535 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9535 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
        auto x9536 = x9455 + x9535;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9537 = Fp(x9536.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9537);
            reg = x9537;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9538 = Fp(x9536.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9539 = x9538 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9539);
            reg = x9539;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9540 = Fp(x9536.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9541 = x9540 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9541);
            reg = x9541;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9542 = Fp(x9536.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9543 = x9542 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9543);
            reg = x9543;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9544 = Fp(x9536.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9545 = x9544 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9545);
            reg = x9545;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9546 = Fp(x9536.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9547 = x9546 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9547);
            reg = x9547;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9548 = Fp(x9536.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9549 = x9548 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9549);
            reg = x9549;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9550 = Fp(x9536.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9551 = x9550 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9551);
            reg = x9551;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9552 = Fp(x9536.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9553 = x9552 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9553);
            reg = x9553;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9554 = Fp(x9536.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9555 = x9554 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9555);
            reg = x9555;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9556 = Fp(x9536.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9557 = x9556 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9557);
            reg = x9557;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9558 = Fp(x9536.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9559 = x9558 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9559);
            reg = x9559;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9560 = Fp(x9536.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9561 = x9560 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9561);
            reg = x9561;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9562 = Fp(x9536.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9563 = x9562 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9563);
            reg = x9563;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9564 = Fp(x9536.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9565 = x9564 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9565);
            reg = x9565;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9566 = Fp(x9536.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9567 = x9566 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9567);
            reg = x9567;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9568 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9568 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9569 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9569 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9570 = x9569 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9571 = x9568 + x9570;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9572 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9572 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9573 = x9572 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9574 = x9571 + x9573;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9575 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9575 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9576 = x9575 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9577 = x9574 + x9576;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9578 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9578 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9579 = x9578 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9580 = x9577 + x9579;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9581 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9581 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9582 = x9581 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9583 = x9580 + x9582;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9584 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9584 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9585 = x9584 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9586 = x9583 + x9585;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9587 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9587 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9588 = x9587 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9589 = x9586 + x9588;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9590 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9590 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9591 = x9590 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9592 = x9589 + x9591;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9593 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9593 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9594 = x9593 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9595 = x9592 + x9594;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9596 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9596 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9597 = x9596 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9598 = x9595 + x9597;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9599 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9599 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9600 = x9599 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9601 = x9598 + x9600;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9602 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9602 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9603 = x9602 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9604 = x9601 + x9603;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9605 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9605 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9606 = x9605 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9607 = x9604 + x9606;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9608 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9608 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9609 = x9608 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9610 = x9607 + x9609;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9611 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9611 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9612 = x9611 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9613 = x9610 + x9612;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9614 = x9536 - x9613;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9615 = x9614 * x15;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9615);
          reg = x9615;
        }
      }
      if (x8498 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9616 = args[2][150 * steps + ((cycle - 4) & mask)];
        assert(x9616 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9617 = args[2][151 * steps + ((cycle - 4) & mask)];
        assert(x9617 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9618 = args[2][152 * steps + ((cycle - 4) & mask)];
        assert(x9618 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9619 = args[2][153 * steps + ((cycle - 4) & mask)];
        assert(x9619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9620 = args[2][154 * steps + ((cycle - 4) & mask)];
        assert(x9620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9621 = args[2][155 * steps + ((cycle - 4) & mask)];
        assert(x9621 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9622 = args[2][156 * steps + ((cycle - 4) & mask)];
        assert(x9622 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9623 = args[2][157 * steps + ((cycle - 4) & mask)];
        assert(x9623 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9624 = args[2][158 * steps + ((cycle - 4) & mask)];
        assert(x9624 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9625 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x9625 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9626 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x9626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9627 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x9627 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9628 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x9628 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9629 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x9629 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9630 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x9630 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9631 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x9631 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9632 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x9632 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9633 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x9633 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9634 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x9634 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9635 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x9635 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9636 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x9636 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9637 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x9637 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9638 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x9638 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9639 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x9639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9640 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x9640 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9641 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x9641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9642 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x9642 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9643 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x9643 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9644 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x9644 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9645 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x9645 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9646 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x9646 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9647 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x9647 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9648 = x9617 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9649 = x9616 + x9648;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9650 = x9618 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9651 = x9649 + x9650;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9652 = x9619 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9653 = x9651 + x9652;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9654 = x9620 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9655 = x9653 + x9654;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9656 = x9621 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9657 = x9655 + x9656;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9658 = x9622 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9659 = x9657 + x9658;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9660 = x9623 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9661 = x9659 + x9660;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9662 = x9624 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9663 = x9661 + x9662;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9664 = x9625 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9665 = x9663 + x9664;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9666 = x9626 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9667 = x9665 + x9666;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9668 = x9627 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9669 = x9667 + x9668;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9670 = x9628 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9671 = x9669 + x9670;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9672 = x9629 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9673 = x9671 + x9672;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9674 = x9630 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9675 = x9673 + x9674;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9676 = x9631 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9677 = x9675 + x9676;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9678 = x9633 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9679 = x9632 + x9678;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9680 = x9634 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9681 = x9679 + x9680;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9682 = x9635 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9683 = x9681 + x9682;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9684 = x9636 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9685 = x9683 + x9684;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9686 = x9637 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9687 = x9685 + x9686;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9688 = x9638 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9689 = x9687 + x9688;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9690 = x9639 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9691 = x9689 + x9690;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9692 = x9640 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9693 = x9691 + x9692;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9694 = x9641 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9695 = x9693 + x9694;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9696 = x9642 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9697 = x9695 + x9696;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9698 = x9643 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9699 = x9697 + x9698;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9700 = x9644 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9701 = x9699 + x9700;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9702 = x9645 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9703 = x9701 + x9702;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9704 = x9646 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9705 = x9703 + x9704;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9706 = x9647 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9707 = x9705 + x9706;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9708 = args[2][150 * steps + ((cycle - 68) & mask)];
        assert(x9708 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9709 = args[2][151 * steps + ((cycle - 68) & mask)];
        assert(x9709 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9710 = args[2][152 * steps + ((cycle - 68) & mask)];
        assert(x9710 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9711 = args[2][153 * steps + ((cycle - 68) & mask)];
        assert(x9711 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9712 = args[2][154 * steps + ((cycle - 68) & mask)];
        assert(x9712 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9713 = args[2][155 * steps + ((cycle - 68) & mask)];
        assert(x9713 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9714 = args[2][156 * steps + ((cycle - 68) & mask)];
        assert(x9714 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9715 = args[2][157 * steps + ((cycle - 68) & mask)];
        assert(x9715 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9716 = args[2][158 * steps + ((cycle - 68) & mask)];
        assert(x9716 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9717 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x9717 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9718 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x9718 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9719 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x9719 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9720 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x9720 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9721 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x9721 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9722 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x9722 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9723 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x9723 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9724 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x9724 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9725 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x9725 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9726 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x9726 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9727 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x9727 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9728 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x9728 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9729 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x9729 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9730 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x9730 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9731 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x9731 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9732 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x9732 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9733 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x9733 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9734 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x9734 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9735 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x9735 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9736 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x9736 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9737 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x9737 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9738 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x9738 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9739 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x9739 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9740 = x9709 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9741 = x9708 + x9740;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9742 = x9710 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9743 = x9741 + x9742;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9744 = x9711 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9745 = x9743 + x9744;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9746 = x9712 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9747 = x9745 + x9746;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9748 = x9713 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9749 = x9747 + x9748;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9750 = x9714 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9751 = x9749 + x9750;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9752 = x9715 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9753 = x9751 + x9752;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9754 = x9716 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9755 = x9753 + x9754;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9756 = x9717 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9757 = x9755 + x9756;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9758 = x9718 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9759 = x9757 + x9758;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9760 = x9719 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9761 = x9759 + x9760;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9762 = x9720 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9763 = x9761 + x9762;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9764 = x9721 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9765 = x9763 + x9764;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9766 = x9722 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9767 = x9765 + x9766;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9768 = x9723 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9769 = x9767 + x9768;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9770 = x9725 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9771 = x9724 + x9770;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9772 = x9726 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9773 = x9771 + x9772;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9774 = x9727 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9775 = x9773 + x9774;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9776 = x9728 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9777 = x9775 + x9776;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9778 = x9729 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9779 = x9777 + x9778;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9780 = x9730 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9781 = x9779 + x9780;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9782 = x9731 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9783 = x9781 + x9782;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9784 = x9732 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9785 = x9783 + x9784;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9786 = x9733 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9787 = x9785 + x9786;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9788 = x9734 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9789 = x9787 + x9788;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9790 = x9735 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9791 = x9789 + x9790;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9792 = x9736 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9793 = x9791 + x9792;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9794 = x9737 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9795 = x9793 + x9794;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9796 = x9738 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9797 = x9795 + x9796;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9798 = x9739 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9799 = x9797 + x9798;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9800 = x9677 + x9769;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9801 = x9707 + x9799;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9802 = Fp(x9800.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9802);
            reg = x9802;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9803 = Fp(x9800.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9804 = x9803 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9804);
            reg = x9804;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9805 = Fp(x9800.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9806 = x9805 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9806);
            reg = x9806;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9807 = Fp(x9800.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9808 = x9807 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9808);
            reg = x9808;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9809 = Fp(x9800.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9810 = x9809 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9810);
            reg = x9810;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9811 = Fp(x9800.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9812 = x9811 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9812);
            reg = x9812;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9813 = Fp(x9800.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9814 = x9813 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9814);
            reg = x9814;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9815 = Fp(x9800.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9816 = x9815 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9816);
            reg = x9816;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9817 = Fp(x9800.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9818 = x9817 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9818);
            reg = x9818;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9819 = Fp(x9800.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9820 = x9819 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9820);
            reg = x9820;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9821 = Fp(x9800.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9822 = x9821 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9822);
            reg = x9822;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9823 = Fp(x9800.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9824 = x9823 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9824);
            reg = x9824;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9825 = Fp(x9800.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9826 = x9825 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9826);
            reg = x9826;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9827 = Fp(x9800.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9828 = x9827 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9828);
            reg = x9828;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9829 = Fp(x9800.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9830 = x9829 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9830);
            reg = x9830;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9831 = Fp(x9800.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9832 = x9831 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9832);
            reg = x9832;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9833 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x9833 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9834 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x9834 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9835 = x9834 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9836 = x9833 + x9835;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9837 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x9837 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9838 = x9837 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9839 = x9836 + x9838;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9840 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x9840 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9841 = x9840 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9842 = x9839 + x9841;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9843 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x9843 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9844 = x9843 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9845 = x9842 + x9844;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9846 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x9846 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9847 = x9846 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9848 = x9845 + x9847;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9849 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x9849 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9850 = x9849 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9851 = x9848 + x9850;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9852 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x9852 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9853 = x9852 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9854 = x9851 + x9853;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9855 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x9855 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9856 = x9855 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9857 = x9854 + x9856;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9858 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x9858 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9859 = x9858 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9860 = x9857 + x9859;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9861 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x9861 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9862 = x9861 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9863 = x9860 + x9862;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9864 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x9864 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9865 = x9864 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9866 = x9863 + x9865;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9867 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x9867 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9868 = x9867 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9869 = x9866 + x9868;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9870 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x9870 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9871 = x9870 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9872 = x9869 + x9871;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9873 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x9873 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9874 = x9873 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9875 = x9872 + x9874;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9876 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x9876 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9877 = x9876 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9878 = x9875 + x9877;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9879 = x9800 - x9878;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9880 = x9879 * x15;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x9881 = Fp(x9880.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9881);
            reg = x9881;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9882 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x9882 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x9883 = x9880 - x9882;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x9884 = x9883 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x9885 = x101 - x9884;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x9886 = x9884 * x9885;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x9886 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x9887 = x9801 + x9880;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9888 = Fp(x9887.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9888);
            reg = x9888;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9889 = Fp(x9887.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9890 = x9889 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9890);
            reg = x9890;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9891 = Fp(x9887.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9892 = x9891 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9892);
            reg = x9892;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9893 = Fp(x9887.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9894 = x9893 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9894);
            reg = x9894;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9895 = Fp(x9887.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9896 = x9895 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9896);
            reg = x9896;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9897 = Fp(x9887.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9898 = x9897 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9898);
            reg = x9898;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9899 = Fp(x9887.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9900 = x9899 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9900);
            reg = x9900;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9901 = Fp(x9887.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9902 = x9901 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9902);
            reg = x9902;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9903 = Fp(x9887.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9904 = x9903 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9904);
            reg = x9904;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9905 = Fp(x9887.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9906 = x9905 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9906);
            reg = x9906;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9907 = Fp(x9887.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9908 = x9907 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9908);
            reg = x9908;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9909 = Fp(x9887.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9910 = x9909 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9910);
            reg = x9910;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9911 = Fp(x9887.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9912 = x9911 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9912);
            reg = x9912;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9913 = Fp(x9887.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9914 = x9913 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9914);
            reg = x9914;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9915 = Fp(x9887.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9916 = x9915 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9916);
            reg = x9916;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9917 = Fp(x9887.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9918 = x9917 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9918);
            reg = x9918;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9919 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x9919 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9920 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x9920 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9921 = x9920 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9922 = x9919 + x9921;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9923 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x9923 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9924 = x9923 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9925 = x9922 + x9924;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9926 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x9926 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9927 = x9926 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9928 = x9925 + x9927;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9929 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x9929 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9930 = x9929 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9931 = x9928 + x9930;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9932 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x9932 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9933 = x9932 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9934 = x9931 + x9933;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9935 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x9935 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9936 = x9935 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9937 = x9934 + x9936;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9938 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x9938 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9939 = x9938 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9940 = x9937 + x9939;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9941 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x9941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9942 = x9941 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9943 = x9940 + x9942;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9944 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x9944 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9945 = x9944 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9946 = x9943 + x9945;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9947 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x9947 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9948 = x9947 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9949 = x9946 + x9948;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9950 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x9950 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9951 = x9950 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9952 = x9949 + x9951;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9953 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x9953 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9954 = x9953 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9955 = x9952 + x9954;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9956 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x9956 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9957 = x9956 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9958 = x9955 + x9957;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9959 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x9959 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9960 = x9959 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9961 = x9958 + x9960;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9962 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x9962 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9963 = x9962 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9964 = x9961 + x9963;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9965 = x9887 - x9964;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9966 = x9965 * x15;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x9967 = Fp(x9966.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9967);
            reg = x9967;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9968 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9968 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x9969 = x9966 - x9968;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x9970 = x9969 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x9971 = x101 - x9970;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x9972 = x9970 * x9971;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x9972 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9973 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x9973 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9974 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x9974 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9975 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x9975 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9976 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x9976 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9977 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x9977 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9978 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x9978 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9979 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x9979 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9980 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x9980 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9981 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x9981 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9982 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x9982 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9983 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x9983 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9984 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x9984 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9985 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x9985 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9986 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x9986 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9987 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x9987 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9988 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x9988 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9989 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x9989 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9990 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x9990 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9991 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x9991 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9992 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x9992 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9993 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x9993 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9994 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x9994 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9995 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x9995 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9996 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x9996 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9997 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x9997 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9998 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x9998 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9999 = args[2][208 * steps + ((cycle - 4) & mask)];
        assert(x9999 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10000 = args[2][209 * steps + ((cycle - 4) & mask)];
        assert(x10000 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10001 = args[2][210 * steps + ((cycle - 4) & mask)];
        assert(x10001 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10002 = args[2][211 * steps + ((cycle - 4) & mask)];
        assert(x10002 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10003 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x10003 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10004 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x10004 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10005 = x9974 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10006 = x9973 + x10005;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10007 = x9975 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10008 = x10006 + x10007;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10009 = x9976 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10010 = x10008 + x10009;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10011 = x9977 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10012 = x10010 + x10011;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10013 = x9978 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10014 = x10012 + x10013;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10015 = x9979 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10016 = x10014 + x10015;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10017 = x9980 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10018 = x10016 + x10017;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10019 = x9981 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10020 = x10018 + x10019;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10021 = x9982 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10022 = x10020 + x10021;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10023 = x9983 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10024 = x10022 + x10023;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10025 = x9984 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10026 = x10024 + x10025;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10027 = x9985 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10028 = x10026 + x10027;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10029 = x9986 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10030 = x10028 + x10029;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10031 = x9987 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10032 = x10030 + x10031;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10033 = x9988 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10034 = x10032 + x10033;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10035 = x9990 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10036 = x9989 + x10035;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10037 = x9991 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10038 = x10036 + x10037;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10039 = x9992 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10040 = x10038 + x10039;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10041 = x9993 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10042 = x10040 + x10041;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10043 = x9994 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10044 = x10042 + x10043;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10045 = x9995 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10046 = x10044 + x10045;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10047 = x9996 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10048 = x10046 + x10047;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10049 = x9997 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10050 = x10048 + x10049;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10051 = x9998 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10052 = x10050 + x10051;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10053 = x9999 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10054 = x10052 + x10053;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10055 = x10000 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10056 = x10054 + x10055;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10057 = x10001 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10058 = x10056 + x10057;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10059 = x10002 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10060 = x10058 + x10059;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10061 = x10003 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10062 = x10060 + x10061;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10063 = x10004 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10064 = x10062 + x10063;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10065 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x10065 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10066 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x10066 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10067 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x10067 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10068 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x10068 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10069 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x10069 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10070 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x10070 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10071 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x10071 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10072 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x10072 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10073 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x10073 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10074 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x10074 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10075 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x10075 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10076 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x10076 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10077 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x10077 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10078 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x10078 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10079 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x10079 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10080 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x10080 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10081 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x10081 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10082 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x10082 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10083 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x10083 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10084 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x10084 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10085 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x10085 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10086 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x10086 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10087 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x10087 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10088 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x10088 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10089 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x10089 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10090 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x10090 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10091 = args[2][208 * steps + ((cycle - 68) & mask)];
        assert(x10091 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10092 = args[2][209 * steps + ((cycle - 68) & mask)];
        assert(x10092 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10093 = args[2][210 * steps + ((cycle - 68) & mask)];
        assert(x10093 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10094 = args[2][211 * steps + ((cycle - 68) & mask)];
        assert(x10094 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10095 = args[2][212 * steps + ((cycle - 68) & mask)];
        assert(x10095 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10096 = args[2][213 * steps + ((cycle - 68) & mask)];
        assert(x10096 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10097 = x10066 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10098 = x10065 + x10097;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10099 = x10067 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10100 = x10098 + x10099;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10101 = x10068 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10102 = x10100 + x10101;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10103 = x10069 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10104 = x10102 + x10103;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10105 = x10070 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10106 = x10104 + x10105;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10107 = x10071 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10108 = x10106 + x10107;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10109 = x10072 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10110 = x10108 + x10109;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10111 = x10073 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10112 = x10110 + x10111;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10113 = x10074 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10114 = x10112 + x10113;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10115 = x10075 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10116 = x10114 + x10115;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10117 = x10076 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10118 = x10116 + x10117;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10119 = x10077 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10120 = x10118 + x10119;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10121 = x10078 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10122 = x10120 + x10121;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10123 = x10079 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10124 = x10122 + x10123;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10125 = x10080 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10126 = x10124 + x10125;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10127 = x10082 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10128 = x10081 + x10127;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10129 = x10083 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10130 = x10128 + x10129;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10131 = x10084 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10132 = x10130 + x10131;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10133 = x10085 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10134 = x10132 + x10133;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10135 = x10086 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10136 = x10134 + x10135;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10137 = x10087 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10138 = x10136 + x10137;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10139 = x10088 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10140 = x10138 + x10139;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10141 = x10089 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10142 = x10140 + x10141;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10143 = x10090 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10144 = x10142 + x10143;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10145 = x10091 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10146 = x10144 + x10145;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10147 = x10092 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10148 = x10146 + x10147;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10149 = x10093 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10150 = x10148 + x10149;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10151 = x10094 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10152 = x10150 + x10151;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10153 = x10095 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10154 = x10152 + x10153;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10155 = x10096 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10156 = x10154 + x10155;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10157 = x10034 + x10126;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10158 = x10064 + x10156;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10159 = Fp(x10157.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10159);
            reg = x10159;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10160 = Fp(x10157.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10161 = x10160 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10161);
            reg = x10161;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10162 = Fp(x10157.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10163 = x10162 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10163);
            reg = x10163;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10164 = Fp(x10157.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10165 = x10164 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10165);
            reg = x10165;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10166 = Fp(x10157.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10167 = x10166 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10167);
            reg = x10167;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10168 = Fp(x10157.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10169 = x10168 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10169);
            reg = x10169;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10170 = Fp(x10157.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10171 = x10170 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10171);
            reg = x10171;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10172 = Fp(x10157.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10173 = x10172 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10173);
            reg = x10173;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10174 = Fp(x10157.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10175 = x10174 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10175);
            reg = x10175;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10176 = Fp(x10157.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10177 = x10176 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10177);
            reg = x10177;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10178 = Fp(x10157.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10179 = x10178 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10179);
            reg = x10179;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10180 = Fp(x10157.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10181 = x10180 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10181);
            reg = x10181;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10182 = Fp(x10157.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10183 = x10182 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10183);
            reg = x10183;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10184 = Fp(x10157.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10185 = x10184 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10185);
            reg = x10185;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10186 = Fp(x10157.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10187 = x10186 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10187);
            reg = x10187;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10188 = Fp(x10157.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10189 = x10188 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10189);
            reg = x10189;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10190 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x10190 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10191 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x10191 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10192 = x10191 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10193 = x10190 + x10192;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10194 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x10194 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10195 = x10194 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10196 = x10193 + x10195;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10197 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x10197 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10198 = x10197 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10199 = x10196 + x10198;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10200 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x10200 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10201 = x10200 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10202 = x10199 + x10201;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10203 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x10203 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10204 = x10203 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10205 = x10202 + x10204;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10206 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x10206 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10207 = x10206 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10208 = x10205 + x10207;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10209 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x10209 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10210 = x10209 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10211 = x10208 + x10210;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10212 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x10212 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10213 = x10212 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10214 = x10211 + x10213;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10215 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x10215 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10216 = x10215 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10217 = x10214 + x10216;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10218 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x10218 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10219 = x10218 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10220 = x10217 + x10219;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10221 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x10221 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10222 = x10221 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10223 = x10220 + x10222;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10224 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x10224 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10225 = x10224 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10226 = x10223 + x10225;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10227 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x10227 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10228 = x10227 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10229 = x10226 + x10228;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10230 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x10230 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10231 = x10230 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10232 = x10229 + x10231;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10233 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x10233 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10234 = x10233 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10235 = x10232 + x10234;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10236 = x10157 - x10235;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10237 = x10236 * x15;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10238 = Fp(x10237.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10238);
            reg = x10238;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10239 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x10239 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10240 = x10237 - x10239;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10241 = x10240 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10242 = x101 - x10241;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10243 = x10241 * x10242;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10243 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10244 = x10158 + x10237;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10245 = Fp(x10244.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10245);
            reg = x10245;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10246 = Fp(x10244.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10247 = x10246 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10247);
            reg = x10247;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10248 = Fp(x10244.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10249 = x10248 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10249);
            reg = x10249;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10250 = Fp(x10244.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10251 = x10250 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10251);
            reg = x10251;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10252 = Fp(x10244.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10253 = x10252 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10253);
            reg = x10253;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10254 = Fp(x10244.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10255 = x10254 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10255);
            reg = x10255;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10256 = Fp(x10244.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10257 = x10256 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10257);
            reg = x10257;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10258 = Fp(x10244.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10259 = x10258 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10259);
            reg = x10259;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10260 = Fp(x10244.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10261 = x10260 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10261);
            reg = x10261;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10262 = Fp(x10244.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10263 = x10262 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10263);
            reg = x10263;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10264 = Fp(x10244.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10265 = x10264 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10265);
            reg = x10265;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10266 = Fp(x10244.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10267 = x10266 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10267);
            reg = x10267;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10268 = Fp(x10244.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10269 = x10268 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10269);
            reg = x10269;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10270 = Fp(x10244.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10271 = x10270 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10271);
            reg = x10271;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10272 = Fp(x10244.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10273 = x10272 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10273);
            reg = x10273;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10274 = Fp(x10244.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10275 = x10274 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10275);
            reg = x10275;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10276 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x10276 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10277 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x10277 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10278 = x10277 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10279 = x10276 + x10278;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10280 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x10280 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10281 = x10280 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10282 = x10279 + x10281;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10283 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x10283 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10284 = x10283 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10285 = x10282 + x10284;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10286 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x10286 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10287 = x10286 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10288 = x10285 + x10287;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10289 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x10289 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10290 = x10289 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10291 = x10288 + x10290;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10292 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x10292 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10293 = x10292 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10294 = x10291 + x10293;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10295 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x10295 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10296 = x10295 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10297 = x10294 + x10296;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10298 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x10298 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10299 = x10298 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10300 = x10297 + x10299;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10301 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x10301 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10302 = x10301 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10303 = x10300 + x10302;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10304 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x10304 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10305 = x10304 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10306 = x10303 + x10305;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10307 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x10307 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10308 = x10307 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10309 = x10306 + x10308;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10310 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x10310 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10311 = x10310 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10312 = x10309 + x10311;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10313 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x10313 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10314 = x10313 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10315 = x10312 + x10314;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10316 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x10316 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10317 = x10316 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10318 = x10315 + x10317;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10319 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x10319 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10320 = x10319 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10321 = x10318 + x10320;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10322 = x10244 - x10321;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10323 = x10322 * x15;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10324 = Fp(x10323.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10324);
            reg = x10324;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10325 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x10325 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10326 = x10323 - x10325;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10327 = x10326 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10328 = x101 - x10327;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10329 = x10327 * x10328;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10329 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10330 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x10330 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":399:17)
      auto x10331 = x101 - x10330;
      if (x8506 != 0) {
        if (x10330 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
          auto x10332 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x10332 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":403:26)
          auto x10333 = x10332 + x8490;
          {
            host_args.at(0) = x10333;
            host_args.at(1) = x100;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10334 = host_outs.at(0);
            auto x10335 = host_outs.at(1);
            auto x10336 = host_outs.at(2);
            auto x10337 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10334);
              reg = x10334;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10335);
              reg = x10335;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10336);
              reg = x10336;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10337);
              reg = x10337;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10338 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x10338 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10339 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10339 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10340 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10340 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10341 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x10341 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10333);
            reg = x10333;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8478);
            reg = x8478;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10338);
            reg = x10338;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10339);
            reg = x10339;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10340);
            reg = x10340;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10341);
            reg = x10341;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          auto x10342 = x10332 + x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          auto x10343 = x10342 + x8490;
          {
            host_args.at(0) = x10343;
            host_args.at(1) = x100;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10344 = host_outs.at(0);
            auto x10345 = host_outs.at(1);
            auto x10346 = host_outs.at(2);
            auto x10347 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10344);
              reg = x10344;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10345);
              reg = x10345;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10346);
              reg = x10346;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10347);
              reg = x10347;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10348 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10348 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10349 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10349 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10350 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10350 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10351 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10351 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10343);
            reg = x10343;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8478);
            reg = x8478;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10348);
            reg = x10348;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10349);
            reg = x10349;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10350);
            reg = x10350;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10351);
            reg = x10351;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":144:10))
          auto x10352 = args[2][108 * steps + ((cycle - 0) & mask)];
          assert(x10352 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":405:39)
          auto x10353 = x10352 * x84;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10354 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x10354 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10355 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10355 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10356 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10356 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10357 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10357 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10358 = args[2][151 * steps + ((cycle - 0) & mask)];
          assert(x10358 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10359 = x10358 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10360 = x10354 + x10359;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10361 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10361 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10362 = x10361 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10363 = x10355 + x10362;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10364 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10364 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10365 = x10364 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10366 = x10356 + x10365;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10367 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10367 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10368 = x10367 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10369 = x10357 + x10368;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10370 = args[2][152 * steps + ((cycle - 0) & mask)];
          assert(x10370 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10371 = x10370 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10372 = x10360 + x10371;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10373 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10373 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10374 = x10373 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10375 = x10363 + x10374;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10376 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10376 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10377 = x10376 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10378 = x10366 + x10377;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10379 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10379 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10380 = x10379 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10381 = x10369 + x10380;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10382 = args[2][153 * steps + ((cycle - 0) & mask)];
          assert(x10382 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10383 = x10382 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10384 = x10372 + x10383;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10385 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10385 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10386 = x10385 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10387 = x10375 + x10386;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10388 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10388 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10389 = x10388 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10390 = x10378 + x10389;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10391 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10391 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10392 = x10391 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10393 = x10381 + x10392;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10394 = args[2][154 * steps + ((cycle - 0) & mask)];
          assert(x10394 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10395 = x10394 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10396 = x10384 + x10395;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10397 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10397 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10398 = x10397 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10399 = x10387 + x10398;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10400 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10400 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10401 = x10400 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10402 = x10390 + x10401;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10403 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10403 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10404 = x10403 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10405 = x10393 + x10404;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10406 = args[2][155 * steps + ((cycle - 0) & mask)];
          assert(x10406 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10407 = x10406 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10408 = x10396 + x10407;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10409 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10409 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10410 = x10409 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10411 = x10399 + x10410;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10412 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10412 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10413 = x10412 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10414 = x10402 + x10413;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10415 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10415 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10416 = x10415 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10417 = x10405 + x10416;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10418 = args[2][156 * steps + ((cycle - 0) & mask)];
          assert(x10418 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10419 = x10418 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10420 = x10408 + x10419;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10421 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10421 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10422 = x10421 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10423 = x10411 + x10422;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10424 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10424 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10425 = x10424 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10426 = x10414 + x10425;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10427 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10427 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10428 = x10427 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10429 = x10417 + x10428;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10430 = args[2][157 * steps + ((cycle - 0) & mask)];
          assert(x10430 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10431 = x10430 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10432 = x10420 + x10431;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10433 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10433 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10434 = x10433 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10435 = x10423 + x10434;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10436 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10436 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10437 = x10436 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10438 = x10426 + x10437;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10439 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10439 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10440 = x10439 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10441 = x10429 + x10440;
          host_args.at(0) = x10353;
          host_args.at(1) = x10338;
          host_args.at(2) = x10339;
          host_args.at(3) = x10340;
          host_args.at(4) = x10341;
          host_args.at(5) = x10441;
          host_args.at(6) = x10438;
          host_args.at(7) = x10435;
          host_args.at(8) = x10432;
          host(ctx, "log", "  io0: [0x%x] %w, a: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":144:10))
          auto x10442 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x10442 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":406:39)
          auto x10443 = x10442 * x84;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10444 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10444 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10445 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10445 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10446 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10446 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10447 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10447 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10448 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10448 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10449 = x10448 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10450 = x10444 + x10449;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10451 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10451 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10452 = x10451 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10453 = x10445 + x10452;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10454 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10454 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10455 = x10454 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10456 = x10446 + x10455;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10457 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10457 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10458 = x10457 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10459 = x10447 + x10458;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10460 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10460 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10461 = x10460 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10462 = x10450 + x10461;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10463 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10463 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10464 = x10463 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10465 = x10453 + x10464;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10466 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10466 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10467 = x10466 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10468 = x10456 + x10467;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10469 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10469 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10470 = x10469 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10471 = x10459 + x10470;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10472 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10472 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10473 = x10472 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10474 = x10462 + x10473;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10475 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10475 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10476 = x10475 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10477 = x10465 + x10476;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10478 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10478 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10479 = x10478 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10480 = x10468 + x10479;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10481 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10481 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10482 = x10481 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10483 = x10471 + x10482;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10484 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10484 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10485 = x10484 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10486 = x10474 + x10485;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10487 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10487 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10488 = x10487 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10489 = x10477 + x10488;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10490 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10490 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10491 = x10490 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10492 = x10480 + x10491;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10493 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10493 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10494 = x10493 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10495 = x10483 + x10494;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10496 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10496 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10497 = x10496 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10498 = x10486 + x10497;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10499 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10499 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10500 = x10499 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10501 = x10489 + x10500;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10502 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10502 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10503 = x10502 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10504 = x10492 + x10503;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10505 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10505 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10506 = x10505 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10507 = x10495 + x10506;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10508 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10508 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10509 = x10508 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10510 = x10498 + x10509;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10511 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10511 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10512 = x10511 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10513 = x10501 + x10512;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10514 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10514 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10515 = x10514 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10516 = x10504 + x10515;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10517 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10517 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10518 = x10517 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10519 = x10507 + x10518;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10520 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10520 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10521 = x10520 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10522 = x10510 + x10521;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10523 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10523 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10524 = x10523 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10525 = x10513 + x10524;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10526 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10526 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10527 = x10526 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10528 = x10516 + x10527;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10529 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10529 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10530 = x10529 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10531 = x10519 + x10530;
          host_args.at(0) = x10443;
          host_args.at(1) = x10348;
          host_args.at(2) = x10349;
          host_args.at(3) = x10350;
          host_args.at(4) = x10351;
          host_args.at(5) = x10531;
          host_args.at(6) = x10528;
          host_args.at(7) = x10525;
          host_args.at(8) = x10522;
          host(ctx, "log", "  io1: [0x%x] %w, e: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("./cirgen/components/u32.h":25:12)
          auto x10532 = x10339 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10533 = x10338 + x10532;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10534 = x10340 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10535 = x10533 + x10534;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10536 = x10341 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10537 = x10535 + x10536;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10538 = x10438 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10539 = x10441 + x10538;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10540 = x10435 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10541 = x10539 + x10540;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10542 = x10432 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10543 = x10541 + x10542;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          auto x10544 = x10537 - x10543;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          if (x10544 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:407");
          // loc("./cirgen/components/u32.h":25:12)
          auto x10545 = x10349 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10546 = x10348 + x10545;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10547 = x10350 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10548 = x10546 + x10547;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10549 = x10351 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10550 = x10548 + x10549;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10551 = x10528 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10552 = x10531 + x10551;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10553 = x10525 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10554 = x10552 + x10553;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10555 = x10522 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10556 = x10554 + x10555;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          auto x10557 = x10550 - x10556;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          if (x10557 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:408");
        }
        if (x10331 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
          auto x10558 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x10558 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":411:27)
          auto x10559 = x10558 + x8490;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10560 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x10560 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10561 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10561 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10562 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10562 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10563 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10563 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10564 = args[2][151 * steps + ((cycle - 0) & mask)];
          assert(x10564 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10565 = x10564 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10566 = x10560 + x10565;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10567 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10567 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10568 = x10567 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10569 = x10561 + x10568;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10570 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10570 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10571 = x10570 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10572 = x10562 + x10571;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10573 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10573 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10574 = x10573 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10575 = x10563 + x10574;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10576 = args[2][152 * steps + ((cycle - 0) & mask)];
          assert(x10576 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10577 = x10576 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10578 = x10566 + x10577;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10579 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10579 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10580 = x10579 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10581 = x10569 + x10580;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10582 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10582 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10583 = x10582 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10584 = x10572 + x10583;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10585 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10585 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10586 = x10585 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10587 = x10575 + x10586;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10588 = args[2][153 * steps + ((cycle - 0) & mask)];
          assert(x10588 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10589 = x10588 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10590 = x10578 + x10589;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10591 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10591 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10592 = x10591 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10593 = x10581 + x10592;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10594 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10594 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10595 = x10594 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10596 = x10584 + x10595;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10597 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10597 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10598 = x10597 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10599 = x10587 + x10598;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10600 = args[2][154 * steps + ((cycle - 0) & mask)];
          assert(x10600 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10601 = x10600 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10602 = x10590 + x10601;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10603 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10603 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10604 = x10603 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10605 = x10593 + x10604;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10606 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10606 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10607 = x10606 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10608 = x10596 + x10607;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10609 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10609 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10610 = x10609 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10611 = x10599 + x10610;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10612 = args[2][155 * steps + ((cycle - 0) & mask)];
          assert(x10612 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10613 = x10612 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10614 = x10602 + x10613;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10615 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10615 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10616 = x10615 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10617 = x10605 + x10616;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10618 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10618 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10619 = x10618 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10620 = x10608 + x10619;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10621 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10621 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10622 = x10621 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10623 = x10611 + x10622;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10624 = args[2][156 * steps + ((cycle - 0) & mask)];
          assert(x10624 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10625 = x10624 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10626 = x10614 + x10625;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10627 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10627 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10628 = x10627 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10629 = x10617 + x10628;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10630 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10630 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10631 = x10630 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10632 = x10620 + x10631;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10633 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10633 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10634 = x10633 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10635 = x10623 + x10634;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10636 = args[2][157 * steps + ((cycle - 0) & mask)];
          assert(x10636 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10637 = x10636 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10638 = x10626 + x10637;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10639 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10639 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10640 = x10639 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10641 = x10629 + x10640;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10642 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10642 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10643 = x10642 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10644 = x10632 + x10643;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10645 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10645 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10646 = x10645 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10647 = x10635 + x10646;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10647);
            reg = x10647;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10644);
            reg = x10644;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10641);
            reg = x10641;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10638);
            reg = x10638;
          }
          {
            host_args.at(0) = x10559;
            host_args.at(1) = x10647;
            host_args.at(2) = x10644;
            host_args.at(3) = x10641;
            host_args.at(4) = x10638;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10648 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x10648 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10649 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10649 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10650 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10650 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10651 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x10651 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10559);
            reg = x10559;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8478);
            reg = x8478;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10648);
            reg = x10648;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10649);
            reg = x10649;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10650);
            reg = x10650;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10651);
            reg = x10651;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          auto x10652 = x10558 + x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          auto x10653 = x10652 + x8490;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10654 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10654 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10655 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10655 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10656 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10656 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10657 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10657 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10658 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10658 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10659 = x10658 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10660 = x10654 + x10659;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10661 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10661 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10662 = x10661 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10663 = x10655 + x10662;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10664 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10664 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10665 = x10664 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10666 = x10656 + x10665;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10667 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10667 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10668 = x10667 * x98;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10669 = x10657 + x10668;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10670 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10670 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10671 = x10670 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10672 = x10660 + x10671;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10673 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10673 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10674 = x10673 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10675 = x10663 + x10674;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10676 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10676 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10677 = x10676 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10678 = x10666 + x10677;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10679 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10679 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10680 = x10679 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10681 = x10669 + x10680;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10682 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10682 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10683 = x10682 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10684 = x10672 + x10683;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10685 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10685 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10686 = x10685 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10687 = x10675 + x10686;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10688 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10688 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10689 = x10688 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10690 = x10678 + x10689;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10691 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10691 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10692 = x10691 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10693 = x10681 + x10692;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10694 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10694 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10695 = x10694 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10696 = x10684 + x10695;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10697 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10697 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10698 = x10697 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10699 = x10687 + x10698;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10700 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10700 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10701 = x10700 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10702 = x10690 + x10701;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10703 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10703 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10704 = x10703 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10705 = x10693 + x10704;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10706 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10706 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10707 = x10706 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10708 = x10696 + x10707;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10709 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10709 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10710 = x10709 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10711 = x10699 + x10710;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10712 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10712 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10713 = x10712 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10714 = x10702 + x10713;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10715 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10715 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10716 = x10715 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10717 = x10705 + x10716;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10718 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10718 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10719 = x10718 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10720 = x10708 + x10719;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10721 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10721 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10722 = x10721 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10723 = x10711 + x10722;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10724 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10724 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10725 = x10724 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10726 = x10714 + x10725;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10727 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10727 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10728 = x10727 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10729 = x10717 + x10728;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10730 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10730 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10731 = x10730 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10732 = x10720 + x10731;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10733 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10733 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10734 = x10733 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10735 = x10723 + x10734;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10736 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10736 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10737 = x10736 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10738 = x10726 + x10737;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10739 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10739 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10740 = x10739 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10741 = x10729 + x10740;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10741);
            reg = x10741;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10738);
            reg = x10738;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10735);
            reg = x10735;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10732);
            reg = x10732;
          }
          {
            host_args.at(0) = x10653;
            host_args.at(1) = x10741;
            host_args.at(2) = x10738;
            host_args.at(3) = x10735;
            host_args.at(4) = x10732;
            host_args.at(5) = x100;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10742 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10742 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10743 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10743 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10744 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10744 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10745 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10745 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10653);
            reg = x10653;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8478);
            reg = x8478;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10742);
            reg = x10742;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10743);
            reg = x10743;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10744);
            reg = x10744;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10745);
            reg = x10745;
          }
        }
      }
      if (x8507 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        if (x8498 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10746 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x10746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10747 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x10747 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10748 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x10748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10749 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x10749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10750 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x10750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10751 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x10751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10752 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x10752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10753 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x10753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10754 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x10754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10755 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x10755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10756 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x10756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10757 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x10757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10758 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x10758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10759 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x10759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10760 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x10760 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10761 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x10761 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10762 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x10762 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10763 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x10763 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10764 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x10764 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10765 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x10765 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10766 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x10766 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10767 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x10767 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10768 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x10768 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10769 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x10769 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10770 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x10770 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10771 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x10771 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10772 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x10772 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10773 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x10773 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10774 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x10774 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10775 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x10775 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10776 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x10776 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10777 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x10777 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10778 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x10778 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10779 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x10779 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10780 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x10780 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10781 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x10781 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10782 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x10782 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10783 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x10783 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10784 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x10784 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10785 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x10785 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10786 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x10786 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10787 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x10787 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10788 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x10788 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10789 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x10789 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10790 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x10790 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10791 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x10791 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10792 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x10792 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10793 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x10793 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10794 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x10794 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10795 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x10795 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10796 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x10796 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10797 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x10797 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10798 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x10798 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10799 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x10799 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10800 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x10800 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10801 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x10801 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10802 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x10802 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10803 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x10803 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10804 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x10804 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10805 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x10805 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10806 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x10806 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10807 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x10807 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10808 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x10808 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10809 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x10809 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10810 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x10810 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10811 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x10811 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10812 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x10812 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10813 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x10813 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10814 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x10814 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10815 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x10815 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10816 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x10816 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10817 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x10817 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10818 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x10818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10819 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x10819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10820 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x10820 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10821 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x10821 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10822 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x10822 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10823 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x10823 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10824 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x10824 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10825 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x10825 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10826 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x10826 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10827 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x10827 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10828 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x10828 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10829 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x10829 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10830 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x10830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10831 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x10831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10832 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x10832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10833 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x10833 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10834 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x10834 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10835 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x10835 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10836 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x10836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10837 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x10837 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10838 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x10838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10839 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x10839 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10840 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x10840 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10841 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x10841 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10842 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x10842 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10843 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x10843 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10844 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x10844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10845 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x10845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10846 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x10846 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10847 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x10847 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10848 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x10848 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10849 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x10849 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10850 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x10850 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10851 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x10851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10852 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x10852 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10853 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x10853 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10854 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x10854 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10855 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x10855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10856 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x10856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10857 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x10857 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10858 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x10858 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10859 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x10859 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10860 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x10860 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10861 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x10861 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10862 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x10862 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10863 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x10863 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10864 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x10864 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10865 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x10865 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10866 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x10866 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10867 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x10867 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10868 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x10868 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10869 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x10869 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10870 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x10870 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10871 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x10871 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10872 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x10872 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10873 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x10873 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10874 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x10874 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10875 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x10875 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10876 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x10876 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10877 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x10877 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10878 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x10878 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10879 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x10879 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10880 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x10880 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10881 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x10881 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10882 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x10882 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10883 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x10883 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10884 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x10884 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10885 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x10885 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10886 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x10886 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10887 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x10887 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10888 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x10888 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10889 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x10889 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10890 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x10890 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10891 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x10891 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10892 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x10892 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10893 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x10893 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10894 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x10894 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10895 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x10895 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10896 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x10896 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10897 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x10897 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10898 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x10898 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10899 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x10899 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10900 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x10900 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10901 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x10901 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10902 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x10902 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10903 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x10903 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10904 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x10904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10905 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x10905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10906 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x10906 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10907 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x10907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10908 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x10908 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10909 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x10909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10910 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x10910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10911 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x10911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10912 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x10912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10913 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x10913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10914 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x10914 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10915 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x10915 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10916 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x10916 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10917 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x10917 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10918 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x10918 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10919 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x10919 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10920 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x10920 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10921 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x10921 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10922 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x10922 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10923 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x10923 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10924 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x10924 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10925 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x10925 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10926 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x10926 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10927 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x10927 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10928 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x10928 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10929 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x10929 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10930 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x10930 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10931 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x10931 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10932 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x10932 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10933 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x10933 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10934 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x10934 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10935 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x10935 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10936 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x10936 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10937 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x10937 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10938 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x10938 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10939 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x10939 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10940 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x10940 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10941 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x10941 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10942 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x10942 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10943 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x10943 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10944 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x10944 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10945 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x10945 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10946 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x10946 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10947 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x10947 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10948 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x10948 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10949 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x10949 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10950 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x10950 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10951 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x10951 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10952 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x10952 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10953 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x10953 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10954 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x10954 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10955 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x10955 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10956 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x10956 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10957 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x10957 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10958 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x10958 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10959 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x10959 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10960 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x10960 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10961 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x10961 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10962 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x10962 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10963 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x10963 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10964 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x10964 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10965 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x10965 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10966 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x10966 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10967 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x10967 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10968 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x10968 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10969 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x10969 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10970 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x10970 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10971 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x10971 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10972 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x10972 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10973 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x10973 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10974 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x10974 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10975 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x10975 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10976 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x10976 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10977 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x10977 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10978 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x10978 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10979 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x10979 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10980 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x10980 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10981 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x10981 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10982 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x10982 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10983 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x10983 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10984 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x10984 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10985 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x10985 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10986 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x10986 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10987 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x10987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10988 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x10988 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10989 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x10989 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10990 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x10990 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10991 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x10991 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10992 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x10992 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10993 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x10993 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10994 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x10994 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10995 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x10995 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10996 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x10996 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10997 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x10997 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10998 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x10998 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10999 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x10999 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11000 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x11000 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11001 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x11001 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11002 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x11002 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11003 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x11003 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11004 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x11004 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11005 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x11005 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11006 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x11006 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11007 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x11007 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11008 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x11008 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11009 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x11009 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11010 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x11010 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11011 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x11011 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11012 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11012 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11013 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11013 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11014 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11014 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11015 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11015 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11016 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11016 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11017 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11017 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11018 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11018 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11019 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11019 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11020 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11020 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11021 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11021 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11022 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11022 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11023 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11023 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11024 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11024 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11025 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11025 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11026 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11026 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11027 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x11027 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11028 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x11028 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11029 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x11029 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11030 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x11030 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11031 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x11031 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11032 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x11032 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11033 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x11033 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11034 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x11034 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11035 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x11035 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11036 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x11036 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11037 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x11037 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x11038 = x11035 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x11039 = x11034 + x11038;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x11040 = x11037 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x11041 = x11036 + x11040;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11042 = x10759 + x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11043 = x10759 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11044 = x11043 * x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11045 = x11042 - x11044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11046 = x10760 + x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11047 = x10760 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11048 = x11047 * x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11049 = x11046 - x11048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11050 = x10761 + x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11051 = x10761 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11052 = x11051 * x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11053 = x11050 - x11052;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11054 = x10762 + x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11055 = x10762 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11056 = x11055 * x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11057 = x11054 - x11056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11058 = x10763 + x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11059 = x10763 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11060 = x11059 * x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11061 = x11058 - x11060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11062 = x10764 + x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11063 = x10764 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11064 = x11063 * x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11065 = x11062 - x11064;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11066 = x10765 + x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11067 = x10765 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11068 = x11067 * x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11069 = x11066 - x11068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11070 = x10766 + x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11071 = x10766 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11072 = x11071 * x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11073 = x11070 - x11072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11074 = x10767 + x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11075 = x10767 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11076 = x11075 * x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11077 = x11074 - x11076;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11078 = x10768 + x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11079 = x10768 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11080 = x11079 * x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11081 = x11078 - x11080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11082 = x10769 + x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11083 = x10769 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11084 = x11083 * x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11085 = x11082 - x11084;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11086 = x10770 + x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11087 = x10770 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11088 = x11087 * x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11089 = x11086 - x11088;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11090 = x10771 + x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11091 = x10771 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11092 = x11091 * x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11093 = x11090 - x11092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11094 = x10772 + x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11095 = x10772 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11096 = x11095 * x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11097 = x11094 - x11096;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11098 = x10773 + x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11099 = x10773 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11100 = x11099 * x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11101 = x11098 - x11100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11102 = x10774 + x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11103 = x10774 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11104 = x11103 * x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11105 = x11102 - x11104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11106 = x10775 + x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11107 = x10775 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11108 = x11107 * x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11109 = x11106 - x11108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11110 = x10776 + x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11111 = x10776 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11112 = x11111 * x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11113 = x11110 - x11112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11114 = x10777 + x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11115 = x10777 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11116 = x11115 * x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11117 = x11114 - x11116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11118 = x10746 + x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11119 = x10746 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11120 = x11119 * x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11121 = x11118 - x11120;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11122 = x10747 + x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11123 = x10747 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11124 = x11123 * x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11125 = x11122 - x11124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11126 = x10748 + x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11127 = x10748 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11128 = x11127 * x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11129 = x11126 - x11128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11130 = x10749 + x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11131 = x10749 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11132 = x11131 * x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11133 = x11130 - x11132;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11134 = x10750 + x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11135 = x10750 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11136 = x11135 * x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11137 = x11134 - x11136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11138 = x10751 + x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11139 = x10751 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11140 = x11139 * x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11141 = x11138 - x11140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11142 = x10752 + x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11143 = x10752 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11144 = x11143 * x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11145 = x11142 - x11144;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11146 = x10753 + x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11147 = x10753 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11148 = x11147 * x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11149 = x11146 - x11148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11150 = x10754 + x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11151 = x10754 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11152 = x11151 * x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11153 = x11150 - x11152;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11154 = x10755 + x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11155 = x10755 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11156 = x11155 * x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11157 = x11154 - x11156;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11158 = x10756 + x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11159 = x10756 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11160 = x11159 * x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11161 = x11158 - x11160;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11162 = x10757 + x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11163 = x10757 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11164 = x11163 * x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11165 = x11162 - x11164;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11166 = x10758 + x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11167 = x10758 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11168 = x11167 * x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11169 = x11166 - x11168;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11170 = x10748 + x11045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11171 = x11127 * x11045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11172 = x11170 - x11171;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11173 = x10749 + x11049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11174 = x11131 * x11049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11175 = x11173 - x11174;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11176 = x10750 + x11053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11177 = x11135 * x11053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11178 = x11176 - x11177;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11179 = x10751 + x11057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11180 = x11139 * x11057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11181 = x11179 - x11180;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11182 = x10752 + x11061;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11183 = x11143 * x11061;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11184 = x11182 - x11183;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11185 = x10753 + x11065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11186 = x11147 * x11065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11187 = x11185 - x11186;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11188 = x10754 + x11069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11189 = x11151 * x11069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11190 = x11188 - x11189;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11191 = x10755 + x11073;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11192 = x11155 * x11073;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11193 = x11191 - x11192;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11194 = x10756 + x11077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11195 = x11159 * x11077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11196 = x11194 - x11195;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11197 = x10757 + x11081;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11198 = x11163 * x11081;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11199 = x11197 - x11198;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11200 = x10758 + x11085;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11201 = x11167 * x11085;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11202 = x11200 - x11201;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11203 = x10759 + x11089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11204 = x11043 * x11089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11205 = x11203 - x11204;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11206 = x10760 + x11093;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11207 = x11047 * x11093;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11208 = x11206 - x11207;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11209 = x10761 + x11097;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11210 = x11051 * x11097;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11211 = x11209 - x11210;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11212 = x10762 + x11101;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11213 = x11055 * x11101;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11214 = x11212 - x11213;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11215 = x10763 + x11105;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11216 = x11059 * x11105;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11217 = x11215 - x11216;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11218 = x10764 + x11109;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11219 = x11063 * x11109;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11220 = x11218 - x11219;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11221 = x10765 + x11113;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11222 = x11067 * x11113;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11223 = x11221 - x11222;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11224 = x10766 + x11117;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11225 = x11071 * x11117;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11226 = x11224 - x11225;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11227 = x10767 + x11121;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11228 = x11075 * x11121;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11229 = x11227 - x11228;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11230 = x10768 + x11125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11231 = x11079 * x11125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11232 = x11230 - x11231;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11233 = x10769 + x11129;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11234 = x11083 * x11129;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11235 = x11233 - x11234;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11236 = x10770 + x11133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11237 = x11087 * x11133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11238 = x11236 - x11237;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11239 = x10771 + x11137;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11240 = x11091 * x11137;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11241 = x11239 - x11240;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11242 = x10772 + x11141;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11243 = x11095 * x11141;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11244 = x11242 - x11243;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11245 = x10773 + x11145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11246 = x11099 * x11145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11247 = x11245 - x11246;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11248 = x10774 + x11149;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11249 = x11103 * x11149;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11250 = x11248 - x11249;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11251 = x10775 + x11153;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11252 = x11107 * x11153;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11253 = x11251 - x11252;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11254 = x10776 + x11157;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11255 = x11111 * x11157;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11256 = x11254 - x11255;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11257 = x10777 + x11161;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11258 = x11115 * x11161;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11259 = x11257 - x11258;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11260 = x10746 + x11165;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11261 = x11119 * x11165;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11262 = x11260 - x11261;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11263 = x10747 + x11169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11264 = x11123 * x11169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11265 = x11263 - x11264;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11266 = x10885 + x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11267 = x10885 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11268 = x11267 * x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11269 = x11266 - x11268;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11270 = x10886 + x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11271 = x10886 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11272 = x11271 * x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11273 = x11270 - x11272;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11274 = x10887 + x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11275 = x10887 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11276 = x11275 * x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11277 = x11274 - x11276;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11278 = x10888 + x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11279 = x10888 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11280 = x11279 * x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11281 = x11278 - x11280;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11282 = x10889 + x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11283 = x10889 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11284 = x11283 * x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11285 = x11282 - x11284;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11286 = x10890 + x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11287 = x10890 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11288 = x11287 * x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11289 = x11286 - x11288;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11290 = x10891 + x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11291 = x10891 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11292 = x11291 * x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11293 = x11290 - x11292;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11294 = x10892 + x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11295 = x10892 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11296 = x11295 * x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11297 = x11294 - x11296;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11298 = x10893 + x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11299 = x10893 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11300 = x11299 * x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11301 = x11298 - x11300;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11302 = x10894 + x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11303 = x10894 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11304 = x11303 * x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11305 = x11302 - x11304;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11306 = x10895 + x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11307 = x10895 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11308 = x11307 * x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11309 = x11306 - x11308;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11310 = x10896 + x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11311 = x10896 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11312 = x11311 * x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11313 = x11310 - x11312;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11314 = x10897 + x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11315 = x10897 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11316 = x11315 * x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11317 = x11314 - x11316;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11318 = x10898 + x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11319 = x10898 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11320 = x11319 * x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11321 = x11318 - x11320;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11322 = x10899 + x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11323 = x10899 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11324 = x11323 * x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11325 = x11322 - x11324;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11326 = x10900 + x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11327 = x10900 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11328 = x11327 * x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11329 = x11326 - x11328;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11330 = x10901 + x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11331 = x10901 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11332 = x11331 * x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11333 = x11330 - x11332;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11334 = x10902 + x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11335 = x10902 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11336 = x11335 * x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11337 = x11334 - x11336;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11338 = x10903 + x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11339 = x10903 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11340 = x11339 * x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11341 = x11338 - x11340;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11342 = x10904 + x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11343 = x10904 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11344 = x11343 * x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11345 = x11342 - x11344;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11346 = x10905 + x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11347 = x10905 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11348 = x11347 * x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11349 = x11346 - x11348;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11350 = x10874 + x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11351 = x10874 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11352 = x11351 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11353 = x11350 - x11352;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11354 = x10875 + x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11355 = x10875 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11356 = x11355 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11357 = x11354 - x11356;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11358 = x10876 + x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11359 = x10876 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11360 = x11359 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11361 = x11358 - x11360;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11362 = x10877 + x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11363 = x10877 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11364 = x11363 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11365 = x11362 - x11364;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11366 = x10878 + x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11367 = x10878 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11368 = x11367 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11369 = x11366 - x11368;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11370 = x10879 + x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11371 = x10879 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11372 = x11371 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11373 = x11370 - x11372;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11374 = x10880 + x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11375 = x10880 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11376 = x11375 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11377 = x11374 - x11376;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11378 = x10881 + x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11379 = x10881 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11380 = x11379 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11381 = x11378 - x11380;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11382 = x10882 + x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11383 = x10882 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11384 = x11383 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11385 = x11382 - x11384;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11386 = x10883 + x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11387 = x10883 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11388 = x11387 * x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11389 = x11386 - x11388;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11390 = x10884 + x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11391 = x10884 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11392 = x11391 * x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11393 = x11390 - x11392;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11394 = x10880 + x11269;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11395 = x11375 * x11269;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11396 = x11394 - x11395;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11397 = x10881 + x11273;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11398 = x11379 * x11273;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11399 = x11397 - x11398;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11400 = x10882 + x11277;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11401 = x11383 * x11277;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11402 = x11400 - x11401;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11403 = x10883 + x11281;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11404 = x11387 * x11281;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11405 = x11403 - x11404;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11406 = x10884 + x11285;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11407 = x11391 * x11285;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11408 = x11406 - x11407;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11409 = x10885 + x11289;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11410 = x11267 * x11289;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11411 = x11409 - x11410;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11412 = x10886 + x11293;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11413 = x11271 * x11293;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11414 = x11412 - x11413;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11415 = x10887 + x11297;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11416 = x11275 * x11297;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11417 = x11415 - x11416;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11418 = x10888 + x11301;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11419 = x11279 * x11301;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11420 = x11418 - x11419;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11421 = x10889 + x11305;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11422 = x11283 * x11305;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11423 = x11421 - x11422;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11424 = x10890 + x11309;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11425 = x11287 * x11309;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11426 = x11424 - x11425;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11427 = x10891 + x11313;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11428 = x11291 * x11313;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11429 = x11427 - x11428;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11430 = x10892 + x11317;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11431 = x11295 * x11317;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11432 = x11430 - x11431;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11433 = x10893 + x11321;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11434 = x11299 * x11321;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11435 = x11433 - x11434;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11436 = x10894 + x11325;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11437 = x11303 * x11325;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11438 = x11436 - x11437;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11439 = x10895 + x11329;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11440 = x11307 * x11329;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11441 = x11439 - x11440;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11442 = x10896 + x11333;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11443 = x11311 * x11333;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11444 = x11442 - x11443;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11445 = x10897 + x11337;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11446 = x11315 * x11337;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11447 = x11445 - x11446;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11448 = x10898 + x11341;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11449 = x11319 * x11341;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11450 = x11448 - x11449;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11451 = x10899 + x11345;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11452 = x11323 * x11345;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11453 = x11451 - x11452;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11454 = x10900 + x11349;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11455 = x11327 * x11349;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11456 = x11454 - x11455;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11457 = x10901 + x11353;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11458 = x11331 * x11353;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11459 = x11457 - x11458;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11460 = x10902 + x11357;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11461 = x11335 * x11357;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11462 = x11460 - x11461;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11463 = x10903 + x11361;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11464 = x11339 * x11361;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11465 = x11463 - x11464;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11466 = x10904 + x11365;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11467 = x11343 * x11365;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11468 = x11466 - x11467;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11469 = x10905 + x11369;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11470 = x11347 * x11369;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11471 = x11469 - x11470;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11472 = x10874 + x11373;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11473 = x11351 * x11373;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11474 = x11472 - x11473;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11475 = x10875 + x11377;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11476 = x11355 * x11377;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11477 = x11475 - x11476;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11478 = x10876 + x11381;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11479 = x11359 * x11381;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11480 = x11478 - x11479;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11481 = x10877 + x11385;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11482 = x11363 * x11385;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11483 = x11481 - x11482;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11484 = x10878 + x11389;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11485 = x11367 * x11389;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11486 = x11484 - x11485;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11487 = x10879 + x11393;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11488 = x11371 * x11393;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11489 = x11487 - x11488;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11490 = x11003 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11491 = x11002 + x11490;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11492 = x11004 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11493 = x11491 + x11492;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11494 = x11005 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11495 = x11493 + x11494;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11496 = x11006 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11497 = x11495 + x11496;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11498 = x11007 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11499 = x11497 + x11498;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11500 = x11008 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11501 = x11499 + x11500;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11502 = x11009 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11503 = x11501 + x11502;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11504 = x11010 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11505 = x11503 + x11504;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11506 = x11011 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11507 = x11505 + x11506;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11508 = x11012 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11509 = x11507 + x11508;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11510 = x11013 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11511 = x11509 + x11510;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11512 = x11014 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11513 = x11511 + x11512;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11514 = x11015 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11515 = x11513 + x11514;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11516 = x11016 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11517 = x11515 + x11516;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11518 = x11017 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11519 = x11517 + x11518;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11520 = x11019 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11521 = x11018 + x11520;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11522 = x11020 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11523 = x11521 + x11522;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11524 = x11021 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11525 = x11523 + x11524;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11526 = x11022 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11527 = x11525 + x11526;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11528 = x11023 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11529 = x11527 + x11528;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11530 = x11024 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11531 = x11529 + x11530;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11532 = x11025 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11533 = x11531 + x11532;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11534 = x11026 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11535 = x11533 + x11534;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11536 = x11027 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11537 = x11535 + x11536;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11538 = x11028 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11539 = x11537 + x11538;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11540 = x11029 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11541 = x11539 + x11540;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11542 = x11030 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11543 = x11541 + x11542;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11544 = x11031 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11545 = x11543 + x11544;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11546 = x11032 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11547 = x11545 + x11546;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11548 = x11033 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11549 = x11547 + x11548;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11550 = x10971 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11551 = x10970 + x11550;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11552 = x10972 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11553 = x11551 + x11552;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11554 = x10973 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11555 = x11553 + x11554;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11556 = x10974 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11557 = x11555 + x11556;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11558 = x10975 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11559 = x11557 + x11558;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11560 = x10976 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11561 = x11559 + x11560;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11562 = x10977 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11563 = x11561 + x11562;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11564 = x10978 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11565 = x11563 + x11564;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11566 = x10979 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11567 = x11565 + x11566;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11568 = x10980 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11569 = x11567 + x11568;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11570 = x10981 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11571 = x11569 + x11570;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11572 = x10982 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11573 = x11571 + x11572;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11574 = x10983 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11575 = x11573 + x11574;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11576 = x10984 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11577 = x11575 + x11576;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11578 = x10985 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11579 = x11577 + x11578;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11580 = x10987 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11581 = x10986 + x11580;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11582 = x10988 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11583 = x11581 + x11582;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11584 = x10989 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11585 = x11583 + x11584;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11586 = x10990 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11587 = x11585 + x11586;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11588 = x10991 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11589 = x11587 + x11588;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11590 = x10992 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11591 = x11589 + x11590;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11592 = x10993 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11593 = x11591 + x11592;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11594 = x10994 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11595 = x11593 + x11594;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11596 = x10995 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11597 = x11595 + x11596;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11598 = x10996 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11599 = x11597 + x11598;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11600 = x10997 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11601 = x11599 + x11600;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11602 = x10998 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11603 = x11601 + x11602;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11604 = x10999 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11605 = x11603 + x11604;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11606 = x11000 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11607 = x11605 + x11606;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11608 = x11001 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11609 = x11607 + x11608;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11610 = x10874 * x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11611 = x101 - x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11612 = x11611 * x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11613 = x11610 + x11612;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11614 = x10875 * x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11615 = x101 - x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11616 = x11615 * x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11617 = x11614 + x11616;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11618 = x10876 * x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11619 = x101 - x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11620 = x11619 * x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11621 = x11618 + x11620;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11622 = x10877 * x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11623 = x101 - x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11624 = x11623 * x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11625 = x11622 + x11624;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11626 = x10878 * x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11627 = x101 - x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11628 = x11627 * x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11629 = x11626 + x11628;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11630 = x10879 * x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11631 = x101 - x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11632 = x11631 * x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11633 = x11630 + x11632;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11634 = x10880 * x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11635 = x101 - x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11636 = x11635 * x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11637 = x11634 + x11636;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11638 = x10881 * x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11639 = x101 - x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11640 = x11639 * x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11641 = x11638 + x11640;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11642 = x10882 * x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11643 = x101 - x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11644 = x11643 * x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11645 = x11642 + x11644;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11646 = x10883 * x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11647 = x101 - x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11648 = x11647 * x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11649 = x11646 + x11648;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11650 = x10884 * x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11651 = x101 - x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11652 = x11651 * x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11653 = x11650 + x11652;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11654 = x10885 * x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11655 = x101 - x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11656 = x11655 * x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11657 = x11654 + x11656;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11658 = x10886 * x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11659 = x101 - x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11660 = x11659 * x10950;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11661 = x11658 + x11660;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11662 = x10887 * x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11663 = x101 - x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11664 = x11663 * x10951;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11665 = x11662 + x11664;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11666 = x10888 * x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11667 = x101 - x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11668 = x11667 * x10952;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11669 = x11666 + x11668;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11670 = x10889 * x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11671 = x101 - x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11672 = x11671 * x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11673 = x11670 + x11672;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11674 = x10890 * x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11675 = x101 - x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11676 = x11675 * x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11677 = x11674 + x11676;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11678 = x10891 * x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11679 = x101 - x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11680 = x11679 * x10955;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11681 = x11678 + x11680;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11682 = x10892 * x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11683 = x101 - x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11684 = x11683 * x10956;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11685 = x11682 + x11684;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11686 = x10893 * x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11687 = x101 - x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11688 = x11687 * x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11689 = x11686 + x11688;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11690 = x10894 * x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11691 = x101 - x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11692 = x11691 * x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11693 = x11690 + x11692;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11694 = x10895 * x10927;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11695 = x101 - x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11696 = x11695 * x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11697 = x11694 + x11696;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11698 = x10896 * x10928;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11699 = x101 - x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11700 = x11699 * x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11701 = x11698 + x11700;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11702 = x10897 * x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11703 = x101 - x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11704 = x11703 * x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11705 = x11702 + x11704;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11706 = x10898 * x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11707 = x101 - x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11708 = x11707 * x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11709 = x11706 + x11708;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11710 = x10899 * x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11711 = x101 - x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11712 = x11711 * x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11713 = x11710 + x11712;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11714 = x10900 * x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11715 = x101 - x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11716 = x11715 * x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11717 = x11714 + x11716;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11718 = x10901 * x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11719 = x101 - x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11720 = x11719 * x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11721 = x11718 + x11720;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11722 = x10902 * x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11723 = x101 - x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11724 = x11723 * x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11725 = x11722 + x11724;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11726 = x10903 * x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11727 = x101 - x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11728 = x11727 * x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11729 = x11726 + x11728;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11730 = x10904 * x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11731 = x101 - x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11732 = x11731 * x10968;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11733 = x11730 + x11732;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11734 = x10905 * x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11735 = x101 - x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11736 = x11735 * x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11737 = x11734 + x11736;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11738 = x11617 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11739 = x11613 + x11738;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11740 = x11621 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11741 = x11739 + x11740;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11742 = x11625 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11743 = x11741 + x11742;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11744 = x11629 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11745 = x11743 + x11744;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11746 = x11633 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11747 = x11745 + x11746;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11748 = x11637 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11749 = x11747 + x11748;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11750 = x11641 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11751 = x11749 + x11750;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11752 = x11645 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11753 = x11751 + x11752;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11754 = x11649 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11755 = x11753 + x11754;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11756 = x11653 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11757 = x11755 + x11756;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11758 = x11657 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11759 = x11757 + x11758;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11760 = x11661 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11761 = x11759 + x11760;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11762 = x11665 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11763 = x11761 + x11762;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11764 = x11669 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11765 = x11763 + x11764;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11766 = x11673 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11767 = x11765 + x11766;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11768 = x11681 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11769 = x11677 + x11768;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11770 = x11685 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11771 = x11769 + x11770;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11772 = x11689 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11773 = x11771 + x11772;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11774 = x11693 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11775 = x11773 + x11774;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11776 = x11697 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11777 = x11775 + x11776;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11778 = x11701 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11779 = x11777 + x11778;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11780 = x11705 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11781 = x11779 + x11780;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11782 = x11709 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11783 = x11781 + x11782;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11784 = x11713 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11785 = x11783 + x11784;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11786 = x11717 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11787 = x11785 + x11786;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11788 = x11721 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11789 = x11787 + x11788;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11790 = x11725 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11791 = x11789 + x11790;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11792 = x11729 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11793 = x11791 + x11792;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11794 = x11733 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11795 = x11793 + x11794;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11796 = x11737 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11797 = x11795 + x11796;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11798 = x11399 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11799 = x11396 + x11798;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11800 = x11402 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11801 = x11799 + x11800;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11802 = x11405 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11803 = x11801 + x11802;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11804 = x11408 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11805 = x11803 + x11804;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11806 = x11411 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11807 = x11805 + x11806;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11808 = x11414 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11809 = x11807 + x11808;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11810 = x11417 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11811 = x11809 + x11810;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11812 = x11420 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11813 = x11811 + x11812;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11814 = x11423 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11815 = x11813 + x11814;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11816 = x11426 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11817 = x11815 + x11816;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11818 = x11429 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11819 = x11817 + x11818;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11820 = x11432 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11821 = x11819 + x11820;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11822 = x11435 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11823 = x11821 + x11822;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11824 = x11438 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11825 = x11823 + x11824;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11826 = x11441 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11827 = x11825 + x11826;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11828 = x11447 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11829 = x11444 + x11828;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11830 = x11450 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11831 = x11829 + x11830;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11832 = x11453 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11833 = x11831 + x11832;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11834 = x11456 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11835 = x11833 + x11834;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11836 = x11459 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11837 = x11835 + x11836;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11838 = x11462 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11839 = x11837 + x11838;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11840 = x11465 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11841 = x11839 + x11840;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11842 = x11468 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11843 = x11841 + x11842;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11844 = x11471 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11845 = x11843 + x11844;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11846 = x11474 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11847 = x11845 + x11846;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11848 = x11477 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11849 = x11847 + x11848;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11850 = x11480 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11851 = x11849 + x11850;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11852 = x11483 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11853 = x11851 + x11852;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11854 = x11486 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11855 = x11853 + x11854;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11856 = x11489 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11857 = x11855 + x11856;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11858 = x11767 + x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11859 = x11797 + x11857;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11860 = x11579 + x11858;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11861 = x11609 + x11859;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11862 = x11039 + x11860;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11863 = x11041 + x11861;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11864 = x11519 + x11862;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11865 = x11549 + x11863;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11866 = x10746 * x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11867 = x101 - x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11868 = x11866 * x11867;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11869 = x101 - x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11870 = x10746 * x11869;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11871 = x11870 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11872 = x11868 + x11871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11873 = x101 - x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11874 = x11873 * x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11875 = x11874 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11876 = x11872 + x11875;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11877 = x11866 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11878 = x11876 + x11877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11879 = x10747 * x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11880 = x101 - x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11881 = x11879 * x11880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11882 = x101 - x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11883 = x10747 * x11882;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11884 = x11883 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11885 = x11881 + x11884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11886 = x101 - x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11887 = x11886 * x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11888 = x11887 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11889 = x11885 + x11888;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11890 = x11879 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11891 = x11889 + x11890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11892 = x10748 * x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11893 = x101 - x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11894 = x11892 * x11893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11895 = x101 - x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11896 = x10748 * x11895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11897 = x11896 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11898 = x11894 + x11897;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11899 = x101 - x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11900 = x11899 * x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11901 = x11900 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11902 = x11898 + x11901;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11903 = x11892 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11904 = x11902 + x11903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11905 = x10749 * x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11906 = x101 - x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11907 = x11905 * x11906;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11908 = x101 - x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11909 = x10749 * x11908;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11910 = x11909 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11911 = x11907 + x11910;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11912 = x101 - x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11913 = x11912 * x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11914 = x11913 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11915 = x11911 + x11914;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11916 = x11905 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11917 = x11915 + x11916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11918 = x10750 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11919 = x101 - x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11920 = x11918 * x11919;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11921 = x101 - x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11922 = x10750 * x11921;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11923 = x11922 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11924 = x11920 + x11923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11925 = x101 - x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11926 = x11925 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11927 = x11926 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11928 = x11924 + x11927;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11929 = x11918 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11930 = x11928 + x11929;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11931 = x10751 * x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11932 = x101 - x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11933 = x11931 * x11932;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11934 = x101 - x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11935 = x10751 * x11934;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11936 = x11935 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11937 = x11933 + x11936;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11938 = x101 - x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11939 = x11938 * x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11940 = x11939 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11941 = x11937 + x11940;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11942 = x11931 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11943 = x11941 + x11942;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11944 = x10752 * x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11945 = x101 - x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11946 = x11944 * x11945;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11947 = x101 - x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11948 = x10752 * x11947;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11949 = x11948 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11950 = x11946 + x11949;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11951 = x101 - x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11952 = x11951 * x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11953 = x11952 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11954 = x11950 + x11953;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11955 = x11944 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11956 = x11954 + x11955;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11957 = x10753 * x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11958 = x101 - x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11959 = x11957 * x11958;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11960 = x101 - x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11961 = x10753 * x11960;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11962 = x11961 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11963 = x11959 + x11962;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11964 = x101 - x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11965 = x11964 * x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11966 = x11965 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11967 = x11963 + x11966;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11968 = x11957 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11969 = x11967 + x11968;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11970 = x10754 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11971 = x101 - x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11972 = x11970 * x11971;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11973 = x101 - x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11974 = x10754 * x11973;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11975 = x11974 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11976 = x11972 + x11975;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11977 = x101 - x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11978 = x11977 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11979 = x11978 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11980 = x11976 + x11979;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11981 = x11970 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11982 = x11980 + x11981;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11983 = x10755 * x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11984 = x101 - x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11985 = x11983 * x11984;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11986 = x101 - x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11987 = x10755 * x11986;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11988 = x11987 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11989 = x11985 + x11988;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11990 = x101 - x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11991 = x11990 * x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11992 = x11991 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11993 = x11989 + x11992;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11994 = x11983 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11995 = x11993 + x11994;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11996 = x10756 * x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11997 = x101 - x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11998 = x11996 * x11997;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11999 = x101 - x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12000 = x10756 * x11999;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12001 = x12000 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12002 = x11998 + x12001;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12003 = x101 - x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12004 = x12003 * x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12005 = x12004 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12006 = x12002 + x12005;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12007 = x11996 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12008 = x12006 + x12007;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12009 = x10757 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12010 = x101 - x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12011 = x12009 * x12010;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12012 = x101 - x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12013 = x10757 * x12012;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12014 = x12013 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12015 = x12011 + x12014;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12016 = x101 - x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12017 = x12016 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12018 = x12017 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12019 = x12015 + x12018;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12020 = x12009 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12021 = x12019 + x12020;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12022 = x10758 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12023 = x101 - x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12024 = x12022 * x12023;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12025 = x101 - x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12026 = x10758 * x12025;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12027 = x12026 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12028 = x12024 + x12027;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12029 = x101 - x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12030 = x12029 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12031 = x12030 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12032 = x12028 + x12031;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12033 = x12022 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12034 = x12032 + x12033;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12035 = x10759 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12036 = x101 - x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12037 = x12035 * x12036;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12038 = x101 - x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12039 = x10759 * x12038;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12040 = x12039 * x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12041 = x12037 + x12040;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12042 = x101 - x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12043 = x12042 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12044 = x12043 * x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12045 = x12041 + x12044;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12046 = x12035 * x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12047 = x12045 + x12046;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12048 = x10760 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12049 = x101 - x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12050 = x12048 * x12049;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12051 = x101 - x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12052 = x10760 * x12051;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12053 = x12052 * x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12054 = x12050 + x12053;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12055 = x101 - x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12056 = x12055 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12057 = x12056 * x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12058 = x12054 + x12057;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12059 = x12048 * x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12060 = x12058 + x12059;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12061 = x10761 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12062 = x101 - x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12063 = x12061 * x12062;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12064 = x101 - x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12065 = x10761 * x12064;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12066 = x12065 * x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12067 = x12063 + x12066;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12068 = x101 - x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12069 = x12068 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12070 = x12069 * x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12071 = x12067 + x12070;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12072 = x12061 * x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12073 = x12071 + x12072;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12074 = x10762 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12075 = x101 - x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12076 = x12074 * x12075;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12077 = x101 - x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12078 = x10762 * x12077;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12079 = x12078 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12080 = x12076 + x12079;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12081 = x101 - x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12082 = x12081 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12083 = x12082 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12084 = x12080 + x12083;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12085 = x12074 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12086 = x12084 + x12085;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12087 = x10763 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12088 = x101 - x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12089 = x12087 * x12088;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12090 = x101 - x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12091 = x10763 * x12090;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12092 = x12091 * x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12093 = x12089 + x12092;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12094 = x101 - x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12095 = x12094 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12096 = x12095 * x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12097 = x12093 + x12096;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12098 = x12087 * x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12099 = x12097 + x12098;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12100 = x10764 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12101 = x101 - x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12102 = x12100 * x12101;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12103 = x101 - x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12104 = x10764 * x12103;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12105 = x12104 * x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12106 = x12102 + x12105;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12107 = x101 - x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12108 = x12107 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12109 = x12108 * x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12110 = x12106 + x12109;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12111 = x12100 * x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12112 = x12110 + x12111;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12113 = x10765 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12114 = x101 - x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12115 = x12113 * x12114;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12116 = x101 - x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12117 = x10765 * x12116;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12118 = x12117 * x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12119 = x12115 + x12118;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12120 = x101 - x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12121 = x12120 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12122 = x12121 * x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12123 = x12119 + x12122;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12124 = x12113 * x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12125 = x12123 + x12124;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12126 = x10766 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12127 = x101 - x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12128 = x12126 * x12127;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12129 = x101 - x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12130 = x10766 * x12129;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12131 = x12130 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12132 = x12128 + x12131;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12133 = x101 - x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12134 = x12133 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12135 = x12134 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12136 = x12132 + x12135;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12137 = x12126 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12138 = x12136 + x12137;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12139 = x10767 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12140 = x101 - x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12141 = x12139 * x12140;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12142 = x101 - x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12143 = x10767 * x12142;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12144 = x12143 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12145 = x12141 + x12144;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12146 = x101 - x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12147 = x12146 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12148 = x12147 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12149 = x12145 + x12148;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12150 = x12139 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12151 = x12149 + x12150;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12152 = x10768 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12153 = x101 - x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12154 = x12152 * x12153;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12155 = x101 - x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12156 = x10768 * x12155;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12157 = x12156 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12158 = x12154 + x12157;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12159 = x101 - x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12160 = x12159 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12161 = x12160 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12162 = x12158 + x12161;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12163 = x12152 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12164 = x12162 + x12163;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12165 = x10769 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12166 = x101 - x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12167 = x12165 * x12166;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12168 = x101 - x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12169 = x10769 * x12168;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12170 = x12169 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12171 = x12167 + x12170;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12172 = x101 - x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12173 = x12172 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12174 = x12173 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12175 = x12171 + x12174;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12176 = x12165 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12177 = x12175 + x12176;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12178 = x10770 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12179 = x101 - x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12180 = x12178 * x12179;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12181 = x101 - x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12182 = x10770 * x12181;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12183 = x12182 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12184 = x12180 + x12183;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12185 = x101 - x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12186 = x12185 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12187 = x12186 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12188 = x12184 + x12187;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12189 = x12178 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12190 = x12188 + x12189;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12191 = x10771 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12192 = x101 - x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12193 = x12191 * x12192;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12194 = x101 - x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12195 = x10771 * x12194;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12196 = x12195 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12197 = x12193 + x12196;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12198 = x101 - x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12199 = x12198 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12200 = x12199 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12201 = x12197 + x12200;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12202 = x12191 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12203 = x12201 + x12202;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12204 = x10772 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12205 = x101 - x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12206 = x12204 * x12205;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12207 = x101 - x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12208 = x10772 * x12207;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12209 = x12208 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12210 = x12206 + x12209;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12211 = x101 - x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12212 = x12211 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12213 = x12212 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12214 = x12210 + x12213;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12215 = x12204 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12216 = x12214 + x12215;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12217 = x10773 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12218 = x101 - x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12219 = x12217 * x12218;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12220 = x101 - x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12221 = x10773 * x12220;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12222 = x12221 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12223 = x12219 + x12222;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12224 = x101 - x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12225 = x12224 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12226 = x12225 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12227 = x12223 + x12226;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12228 = x12217 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12229 = x12227 + x12228;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12230 = x10774 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12231 = x101 - x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12232 = x12230 * x12231;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12233 = x101 - x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12234 = x10774 * x12233;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12235 = x12234 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12236 = x12232 + x12235;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12237 = x101 - x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12238 = x12237 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12239 = x12238 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12240 = x12236 + x12239;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12241 = x12230 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12242 = x12240 + x12241;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12243 = x10775 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12244 = x101 - x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12245 = x12243 * x12244;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12246 = x101 - x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12247 = x10775 * x12246;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12248 = x12247 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12249 = x12245 + x12248;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12250 = x101 - x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12251 = x12250 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12252 = x12251 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12253 = x12249 + x12252;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12254 = x12243 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12255 = x12253 + x12254;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12256 = x10776 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12257 = x101 - x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12258 = x12256 * x12257;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12259 = x101 - x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12260 = x10776 * x12259;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12261 = x12260 * x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12262 = x12258 + x12261;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12263 = x101 - x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12264 = x12263 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12265 = x12264 * x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12266 = x12262 + x12265;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12267 = x12256 * x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12268 = x12266 + x12267;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12269 = x10777 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12270 = x101 - x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12271 = x12269 * x12270;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12272 = x101 - x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12273 = x10777 * x12272;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12274 = x12273 * x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12275 = x12271 + x12274;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12276 = x101 - x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12277 = x12276 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12278 = x12277 * x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12279 = x12275 + x12278;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12280 = x12269 * x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12281 = x12279 + x12280;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12282 = x11891 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12283 = x11878 + x12282;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12284 = x11904 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12285 = x12283 + x12284;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12286 = x11917 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12287 = x12285 + x12286;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12288 = x11930 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12289 = x12287 + x12288;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12290 = x11943 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12291 = x12289 + x12290;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12292 = x11956 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12293 = x12291 + x12292;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12294 = x11969 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12295 = x12293 + x12294;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12296 = x11982 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12297 = x12295 + x12296;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12298 = x11995 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12299 = x12297 + x12298;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12300 = x12008 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12301 = x12299 + x12300;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12302 = x12021 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12303 = x12301 + x12302;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12304 = x12034 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12305 = x12303 + x12304;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12306 = x12047 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12307 = x12305 + x12306;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12308 = x12060 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12309 = x12307 + x12308;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12310 = x12073 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12311 = x12309 + x12310;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12312 = x12099 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12313 = x12086 + x12312;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12314 = x12112 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12315 = x12313 + x12314;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12316 = x12125 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12317 = x12315 + x12316;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12318 = x12138 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12319 = x12317 + x12318;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12320 = x12151 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12321 = x12319 + x12320;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12322 = x12164 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12323 = x12321 + x12322;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12324 = x12177 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12325 = x12323 + x12324;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12326 = x12190 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12327 = x12325 + x12326;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12328 = x12203 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12329 = x12327 + x12328;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12330 = x12216 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12331 = x12329 + x12330;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12332 = x12229 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12333 = x12331 + x12332;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12334 = x12242 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12335 = x12333 + x12334;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12336 = x12255 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12337 = x12335 + x12336;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12338 = x12268 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12339 = x12337 + x12338;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12340 = x12281 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12341 = x12339 + x12340;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12342 = x11175 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12343 = x11172 + x12342;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12344 = x11178 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12345 = x12343 + x12344;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12346 = x11181 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12347 = x12345 + x12346;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12348 = x11184 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12349 = x12347 + x12348;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12350 = x11187 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12351 = x12349 + x12350;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12352 = x11190 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12353 = x12351 + x12352;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12354 = x11193 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12355 = x12353 + x12354;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12356 = x11196 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12357 = x12355 + x12356;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12358 = x11199 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12359 = x12357 + x12358;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12360 = x11202 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12361 = x12359 + x12360;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12362 = x11205 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12363 = x12361 + x12362;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12364 = x11208 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12365 = x12363 + x12364;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12366 = x11211 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12367 = x12365 + x12366;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12368 = x11214 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12369 = x12367 + x12368;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12370 = x11217 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12371 = x12369 + x12370;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12372 = x11223 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12373 = x11220 + x12372;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12374 = x11226 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12375 = x12373 + x12374;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12376 = x11229 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12377 = x12375 + x12376;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12378 = x11232 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12379 = x12377 + x12378;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12380 = x11235 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12381 = x12379 + x12380;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12382 = x11238 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12383 = x12381 + x12382;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12384 = x11241 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12385 = x12383 + x12384;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12386 = x11244 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12387 = x12385 + x12386;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12388 = x11247 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12389 = x12387 + x12388;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12390 = x11250 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12391 = x12389 + x12390;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12392 = x11253 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12393 = x12391 + x12392;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12394 = x11256 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12395 = x12393 + x12394;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12396 = x11259 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12397 = x12395 + x12396;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12398 = x11262 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12399 = x12397 + x12398;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12400 = x11265 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12401 = x12399 + x12400;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12402 = x12311 + x12371;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12403 = x12341 + x12401;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12404 = x11864 + x12402;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12405 = x11865 + x12403;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12406 = x10843 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12407 = x10842 + x12406;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12408 = x10844 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12409 = x12407 + x12408;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12410 = x10845 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12411 = x12409 + x12410;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12412 = x10846 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12413 = x12411 + x12412;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12414 = x10847 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12415 = x12413 + x12414;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12416 = x10848 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12417 = x12415 + x12416;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12418 = x10849 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12419 = x12417 + x12418;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12420 = x10850 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12421 = x12419 + x12420;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12422 = x10851 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12423 = x12421 + x12422;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12424 = x10852 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12425 = x12423 + x12424;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12426 = x10853 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12427 = x12425 + x12426;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12428 = x10854 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12429 = x12427 + x12428;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12430 = x10855 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12431 = x12429 + x12430;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12432 = x10856 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12433 = x12431 + x12432;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12434 = x10857 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12435 = x12433 + x12434;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12436 = x10859 * x98;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12437 = x10858 + x12436;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12438 = x10860 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12439 = x12437 + x12438;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12440 = x10861 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12441 = x12439 + x12440;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12442 = x10862 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12443 = x12441 + x12442;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12444 = x10863 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12445 = x12443 + x12444;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12446 = x10864 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12447 = x12445 + x12446;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12448 = x10865 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12449 = x12447 + x12448;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12450 = x10866 * x96;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12451 = x12449 + x12450;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12452 = x10867 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12453 = x12451 + x12452;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12454 = x10868 * x26;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12455 = x12453 + x12454;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12456 = x10869 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12457 = x12455 + x12456;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12458 = x10870 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12459 = x12457 + x12458;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12460 = x10871 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12461 = x12459 + x12460;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12462 = x10872 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12463 = x12461 + x12462;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12464 = x10873 * x17;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12465 = x12463 + x12464;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12466 = x11864 + x12435;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12467 = x11865 + x12465;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12404);
        reg = x12404;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12466);
        reg = x12466;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12405);
        reg = x12405;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12467);
        reg = x12467;
      }
      if (x8499 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12468 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x12468 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12469 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x12469 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12470 = Fp(x12468.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12470);
            reg = x12470;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12471 = Fp(x12468.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12472 = x12471 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12472);
            reg = x12472;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12473 = Fp(x12468.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12474 = x12473 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12474);
            reg = x12474;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12475 = Fp(x12468.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12476 = x12475 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12476);
            reg = x12476;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12477 = Fp(x12468.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12478 = x12477 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12478);
            reg = x12478;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12479 = Fp(x12468.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12480 = x12479 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12480);
            reg = x12480;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12481 = Fp(x12468.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12482 = x12481 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12482);
            reg = x12482;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12483 = Fp(x12468.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12484 = x12483 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12484);
            reg = x12484;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12485 = Fp(x12468.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12486 = x12485 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12486);
            reg = x12486;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12487 = Fp(x12468.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12488 = x12487 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12488);
            reg = x12488;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12489 = Fp(x12468.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12490 = x12489 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12490);
            reg = x12490;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12491 = Fp(x12468.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12492 = x12491 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12492);
            reg = x12492;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12493 = Fp(x12468.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12494 = x12493 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12494);
            reg = x12494;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12495 = Fp(x12468.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12496 = x12495 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12496);
            reg = x12496;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12497 = Fp(x12468.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12498 = x12497 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12498);
            reg = x12498;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12499 = Fp(x12468.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12500 = x12499 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12500);
            reg = x12500;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12501 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x12501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12502 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x12502 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12503 = x12502 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12504 = x12501 + x12503;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12505 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x12505 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12506 = x12505 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12507 = x12504 + x12506;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12508 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x12508 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12509 = x12508 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12510 = x12507 + x12509;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12511 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x12511 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12512 = x12511 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12513 = x12510 + x12512;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12514 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x12514 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12515 = x12514 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12516 = x12513 + x12515;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12517 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x12517 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12518 = x12517 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12519 = x12516 + x12518;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12520 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x12520 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12521 = x12520 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12522 = x12519 + x12521;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12523 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x12523 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12524 = x12523 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12525 = x12522 + x12524;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12526 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x12526 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12527 = x12526 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12528 = x12525 + x12527;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12529 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12529 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12530 = x12529 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12531 = x12528 + x12530;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12532 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12532 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12533 = x12532 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12534 = x12531 + x12533;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12535 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12535 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12536 = x12535 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12537 = x12534 + x12536;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12538 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12538 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12539 = x12538 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12540 = x12537 + x12539;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12541 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12541 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12542 = x12541 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12543 = x12540 + x12542;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12544 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12544 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12545 = x12544 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12546 = x12543 + x12545;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12547 = x12468 - x12546;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12548 = x12547 * x15;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12549 = Fp(x12548.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12549);
            reg = x12549;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12550 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x12550 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12551 = x12548 - x12550;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12552 = x12551 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12553 = x101 - x12552;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12554 = x12552 * x12553;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12554 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12555 = x12469 + x12548;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12556 = Fp(x12555.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12556);
            reg = x12556;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12557 = Fp(x12555.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12558 = x12557 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12558);
            reg = x12558;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12559 = Fp(x12555.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12560 = x12559 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12560);
            reg = x12560;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12561 = Fp(x12555.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12562 = x12561 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12562);
            reg = x12562;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12563 = Fp(x12555.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12564 = x12563 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12564);
            reg = x12564;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12565 = Fp(x12555.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12566 = x12565 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12566);
            reg = x12566;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12567 = Fp(x12555.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12568 = x12567 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12568);
            reg = x12568;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12569 = Fp(x12555.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12570 = x12569 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12570);
            reg = x12570;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12571 = Fp(x12555.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12572 = x12571 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12572);
            reg = x12572;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12573 = Fp(x12555.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12574 = x12573 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12574);
            reg = x12574;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12575 = Fp(x12555.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12576 = x12575 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12576);
            reg = x12576;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12577 = Fp(x12555.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12578 = x12577 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12578);
            reg = x12578;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12579 = Fp(x12555.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12580 = x12579 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12580);
            reg = x12580;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12581 = Fp(x12555.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12582 = x12581 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12582);
            reg = x12582;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12583 = Fp(x12555.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12584 = x12583 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12584);
            reg = x12584;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12585 = Fp(x12555.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12586 = x12585 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12586);
            reg = x12586;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12587 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12587 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12588 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12588 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12589 = x12588 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12590 = x12587 + x12589;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12591 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12591 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12592 = x12591 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12593 = x12590 + x12592;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12594 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12594 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12595 = x12594 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12596 = x12593 + x12595;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12597 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12597 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12598 = x12597 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12599 = x12596 + x12598;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12600 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12600 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12601 = x12600 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12602 = x12599 + x12601;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12603 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12603 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12604 = x12603 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12605 = x12602 + x12604;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12606 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x12606 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12607 = x12606 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12608 = x12605 + x12607;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12609 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12609 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12610 = x12609 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12611 = x12608 + x12610;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12612 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x12612 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12613 = x12612 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12614 = x12611 + x12613;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12615 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x12615 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12616 = x12615 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12617 = x12614 + x12616;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12618 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x12618 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12619 = x12618 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12620 = x12617 + x12619;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12621 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x12621 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12622 = x12621 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12623 = x12620 + x12622;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12624 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x12624 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12625 = x12624 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12626 = x12623 + x12625;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12627 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x12627 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12628 = x12627 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12629 = x12626 + x12628;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12630 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x12630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12631 = x12630 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12632 = x12629 + x12631;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12633 = x12555 - x12632;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12634 = x12633 * x15;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12635 = Fp(x12634.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12635);
            reg = x12635;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12636 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x12636 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12637 = x12634 - x12636;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12638 = x12637 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12639 = x101 - x12638;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12640 = x12638 * x12639;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12640 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12641 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x12641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12642 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x12642 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12643 = Fp(x12641.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12643);
            reg = x12643;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12644 = Fp(x12641.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12645 = x12644 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12645);
            reg = x12645;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12646 = Fp(x12641.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12647 = x12646 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12647);
            reg = x12647;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12648 = Fp(x12641.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12649 = x12648 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12649);
            reg = x12649;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12650 = Fp(x12641.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12651 = x12650 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12651);
            reg = x12651;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12652 = Fp(x12641.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12653 = x12652 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12653);
            reg = x12653;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12654 = Fp(x12641.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12655 = x12654 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12655);
            reg = x12655;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12656 = Fp(x12641.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12657 = x12656 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12657);
            reg = x12657;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12658 = Fp(x12641.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12659 = x12658 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12659);
            reg = x12659;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12660 = Fp(x12641.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12661 = x12660 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12661);
            reg = x12661;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12662 = Fp(x12641.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12663 = x12662 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12663);
            reg = x12663;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12664 = Fp(x12641.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12665 = x12664 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12665);
            reg = x12665;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12666 = Fp(x12641.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12667 = x12666 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12667);
            reg = x12667;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12668 = Fp(x12641.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12669 = x12668 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12669);
            reg = x12669;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12670 = Fp(x12641.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12671 = x12670 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12671);
            reg = x12671;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12672 = Fp(x12641.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12673 = x12672 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12673);
            reg = x12673;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12674 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x12674 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12675 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x12675 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12676 = x12675 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12677 = x12674 + x12676;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12678 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x12678 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12679 = x12678 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12680 = x12677 + x12679;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12681 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x12681 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12682 = x12681 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12683 = x12680 + x12682;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12684 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x12684 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12685 = x12684 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12686 = x12683 + x12685;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12687 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x12687 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12688 = x12687 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12689 = x12686 + x12688;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12690 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x12690 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12691 = x12690 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12692 = x12689 + x12691;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12693 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x12693 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12694 = x12693 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12695 = x12692 + x12694;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12696 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x12696 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12697 = x12696 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12698 = x12695 + x12697;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12699 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x12699 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12700 = x12699 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12701 = x12698 + x12700;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12702 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x12702 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12703 = x12702 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12704 = x12701 + x12703;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12705 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x12705 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12706 = x12705 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12707 = x12704 + x12706;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12708 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x12708 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12709 = x12708 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12710 = x12707 + x12709;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12711 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x12711 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12712 = x12711 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12713 = x12710 + x12712;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12714 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x12714 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12715 = x12714 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12716 = x12713 + x12715;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12717 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x12717 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12718 = x12717 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12719 = x12716 + x12718;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12720 = x12641 - x12719;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12721 = x12720 * x15;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12722 = Fp(x12721.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12722);
            reg = x12722;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12723 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x12723 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12724 = x12721 - x12723;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12725 = x12724 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12726 = x101 - x12725;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12727 = x12725 * x12726;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12727 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12728 = x12642 + x12721;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12729 = Fp(x12728.asUInt32() & x101.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12729);
            reg = x12729;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12730 = Fp(x12728.asUInt32() & x98.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12731 = x12730 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12731);
            reg = x12731;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12732 = Fp(x12728.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12733 = x12732 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12733);
            reg = x12733;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12734 = Fp(x12728.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12735 = x12734 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12735);
            reg = x12735;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12736 = Fp(x12728.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12737 = x12736 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12737);
            reg = x12737;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12738 = Fp(x12728.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12739 = x12738 * x66;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12739);
            reg = x12739;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12740 = Fp(x12728.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12741 = x12740 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12741);
            reg = x12741;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12742 = Fp(x12728.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12743 = x12742 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12743);
            reg = x12743;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12744 = Fp(x12728.asUInt32() & x96.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12745 = x12744 * x95;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12745);
            reg = x12745;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12746 = Fp(x12728.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12747 = x12746 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12747);
            reg = x12747;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12748 = Fp(x12728.asUInt32() & x26.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12749 = x12748 * x25;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12749);
            reg = x12749;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12750 = Fp(x12728.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12751 = x12750 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12751);
            reg = x12751;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12752 = Fp(x12728.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12753 = x12752 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12753);
            reg = x12753;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12754 = Fp(x12728.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12755 = x12754 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12755);
            reg = x12755;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12756 = Fp(x12728.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12757 = x12756 * x18;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12757);
            reg = x12757;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12758 = Fp(x12728.asUInt32() & x17.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12759 = x12758 * x16;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12759);
            reg = x12759;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12760 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x12760 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12761 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x12761 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12762 = x12761 * x98;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12763 = x12760 + x12762;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12764 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x12764 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12765 = x12764 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12766 = x12763 + x12765;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12767 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x12767 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12768 = x12767 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12769 = x12766 + x12768;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12770 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x12770 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12771 = x12770 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12772 = x12769 + x12771;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12773 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x12773 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12774 = x12773 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12775 = x12772 + x12774;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12776 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x12776 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12777 = x12776 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12778 = x12775 + x12777;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12779 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x12779 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12780 = x12779 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12781 = x12778 + x12780;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12782 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x12782 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12783 = x12782 * x96;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12784 = x12781 + x12783;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12785 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x12785 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12786 = x12785 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12787 = x12784 + x12786;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12788 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x12788 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12789 = x12788 * x26;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12790 = x12787 + x12789;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12791 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x12791 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12792 = x12791 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12793 = x12790 + x12792;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12794 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x12794 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12795 = x12794 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12796 = x12793 + x12795;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12797 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x12797 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12798 = x12797 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12799 = x12796 + x12798;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12800 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x12800 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12801 = x12800 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12802 = x12799 + x12801;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12803 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x12803 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12804 = x12803 * x17;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12805 = x12802 + x12804;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12806 = x12728 - x12805;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12807 = x12806 * x15;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12808 = Fp(x12807.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12808);
            reg = x12808;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12809 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x12809 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12810 = x12807 - x12809;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12811 = x12810 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12812 = x101 - x12811;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12813 = x12811 * x12812;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12813 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12814 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x12814 != Fp::invalid());
      if (x12814 != 0) {
        if (x8506 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":430:38))
          auto x12815 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12815 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":430:7)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12815);
            reg = x12815;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":431:38))
          auto x12816 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12816 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":431:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12816);
            reg = x12816;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":432:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        if (x8507 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":436:51))
          auto x12817 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12817 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":436:51)
          auto x12818 = x12817 + x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":436:7)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12818);
            reg = x12818;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":437:51))
          auto x12819 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12819 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":437:51)
          auto x12820 = x12819 + x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":437:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12820);
            reg = x12820;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":438:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":441:27)
      auto x12821 = x101 - x12814;
      if (x12821 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":442:36))
        auto x12822 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x12822 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":442:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12822);
          reg = x12822;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":443:36))
        auto x12823 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x12823 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":443:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12823);
          reg = x12823;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":444:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/components/mux.h":37:25))
    auto x12824 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x12824 != Fp::invalid());
    if (x12824 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12825 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x12825 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":251:41)
      auto x12826 = x602 * x82;
      {
        host_args.at(0) = x12826;
        host_args.at(1) = x100;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x12827 = host_outs.at(0);
        auto x12828 = host_outs.at(1);
        auto x12829 = host_outs.at(2);
        auto x12830 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12827);
          reg = x12827;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12829);
          reg = x12829;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12830);
          reg = x12830;
        }
      }
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12831 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x12831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12832 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x12832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12833 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x12833 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12834 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x12834 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12826);
        reg = x12826;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12825);
        reg = x12825;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12831);
        reg = x12831;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12832);
        reg = x12832;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12833);
        reg = x12833;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12834);
        reg = x12834;
      }
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/ffpu.cpp":253:70))
      auto x12835 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x12835 != Fp::invalid());
      if (x12835 != 0) {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12836 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x12836 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12837 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x12837 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12838 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x12838 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12839 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x12839 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x12840 = x12837 * x96;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12841 = x12836 + x12840;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12842 = x12838 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12843 = x12841 + x12842;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12844 = x12839 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12845 = x12843 + x12844;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":259:27)
        auto x12846 = x12845 * x82;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":259:5)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12846);
          reg = x12846;
        }
        {
          host_args.at(0) = x30;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x12847 = host_outs.at(0);
          auto x12848 = host_outs.at(1);
          auto x12849 = host_outs.at(2);
          auto x12850 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12847);
            reg = x12847;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12848);
            reg = x12848;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12849);
            reg = x12849;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12850);
            reg = x12850;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12851 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x12851 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12852 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x12852 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12853 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x12853 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12854 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x12854 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x30);
          reg = x30;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12851);
          reg = x12851;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12852);
          reg = x12852;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12853);
          reg = x12853;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12854);
          reg = x12854;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x12855 = x12852 * x96;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12856 = x12851 + x12855;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12857 = x12853 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12858 = x12856 + x12857;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12859 = x12854 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12860 = x12858 + x12859;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":262:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12860);
          reg = x12860;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("Top/Mux/4/Mux/8/Mux/4/Reg"("cirgen/circuit/rv32im/ffpu.cpp":266:50))
        auto x12861 = args[2][181 * steps + ((cycle - 1) & mask)];
        assert(x12861 != Fp::invalid());
        host_args.at(0) = x12861;
        host(ctx, "log", "origPc: %u", host_args.data(), 1, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":268:24)
        auto x12862 = x12861 + x84;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":268:5)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12862);
          reg = x12862;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12863 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12863 != Fp::invalid());
        host_args.at(0) = x12845;
        host_args.at(1) = x12863;
        host_args.at(2) = x12861;
        host(ctx, "log", "FFPU INIT, baseAddr = %u, haltPos = %u, origPc = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":276:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":277:5)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        {
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12864 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12864 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12865 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12865 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12866 = x12865 * x98;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12867 = x12864 + x12866;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12868 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12868 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12869 = x12868 * x83;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12870 = x12867 + x12869;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12871 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12871 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12872 = x12871 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12873 = x12870 + x12872;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12874 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12874 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12875 = x12874 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12876 = x12873 + x12875;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12877 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12877 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12878 = x12877 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12879 = x12876 + x12878;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12880 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12880 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12881 = x12880 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12882 = x12879 + x12881;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x12882 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("cirgen/circuit/rv32im/ffpu.cpp":282:22)
      auto x12883 = x101 - x12835;
      if (x12883 != 0) {
        // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":284:58))
        auto x12884 = args[2][175 * steps + ((cycle - 1) & mask)];
        assert(x12884 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":284:5)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12884);
          reg = x12884;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":285:40))
        auto x12885 = args[2][169 * steps + ((cycle - 1) & mask)];
        assert(x12885 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":285:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12885);
          reg = x12885;
        }
        // loc("Top/Mux/4/Mux/12/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":286:52))
        auto x12886 = args[2][174 * steps + ((cycle - 1) & mask)];
        assert(x12886 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":286:5)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12886);
          reg = x12886;
        }
        // loc("Top/Mux/4/Mux/12/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12887 = args[2][179 * steps + ((cycle - 1) & mask)];
        assert(x12887 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12887);
          reg = x12887;
        }
        // loc("Top/Mux/4/Mux/12/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":289:60))
        auto x12888 = args[2][173 * steps + ((cycle - 1) & mask)];
        assert(x12888 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":289:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12888);
          reg = x12888;
        }
      }
      {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":304:20)
        auto x12889 = Fp(x12831.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12889);
          reg = x12889;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":305:23)
        auto x12890 = Fp(x12831.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":305:22)
        auto x12891 = x12890 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12891);
          reg = x12891;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":306:25)
        auto x12892 = Fp(x12831.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":306:24)
        auto x12893 = x12892 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12893);
          reg = x12893;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":307:21)
        auto x12894 = Fp(x12831.asUInt32() & x49.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":307:20)
        auto x12895 = x12894 * x64;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x12896 = Fp(x12895.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12896);
            reg = x12896;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12897 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x12897 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12898 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x12898 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:18)
      auto x12899 = x12898 * x84;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12900 = x12897 + x12899;
      // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12901 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x12901 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:43)
      auto x12902 = x12901 * x76;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12903 = x12900 + x12902;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x12904 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x12904 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:70)
      auto x12905 = x12904 * x65;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12906 = x12903 + x12905;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12907 = x12906 - x12831;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      if (x12907 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:309");
      // loc("cirgen/circuit/rv32im/ffpu.cpp":323:17)
      auto x12908 = x12834 * x96;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":323:17)
      auto x12909 = x12908 + x12833;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12910 = x12832 * x61;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:34)
      auto x12911 = x12904 * x84;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12912 = x12910 + x12911;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:57)
      auto x12913 = x12901 * x98;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12914 = x12912 + x12913;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12915 = x12914 + x12898;
      {
        if (x12883 != 0) {
          // loc("cirgen/circuit/rv32im/ffpu.cpp":343:31)
          auto x12916 = x12897 - x101;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":343:31)
          auto x12917 = (x12916 == 0) ? Fp(1) : Fp(0);
          if (x12917 != 0) {
            {
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][168 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12918 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x12918 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12919 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12919 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12920 = x12919 * x98;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12921 = x12918 + x12920;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12922 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12922 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12923 = x12922 * x83;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12924 = x12921 + x12923;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12925 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12925 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12926 = x12925 * x84;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12927 = x12924 + x12926;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12928 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x12928 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12929 = x12928 * x79;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12930 = x12927 + x12929;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12931 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x12931 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12932 = x12931 * x78;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12933 = x12930 + x12932;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12934 = args[2][168 * steps + ((cycle - 0) & mask)];
            assert(x12934 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12935 = x12934 * x77;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12936 = x12933 + x12935;
            // loc("./cirgen/components/onehot.h":38:8)
            auto x12937 = x12936 - x101;
            // loc("./cirgen/components/onehot.h":38:8)
            if (x12937 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":344:31)
          auto x12938 = x12897 - x98;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":344:31)
          auto x12939 = (x12938 == 0) ? Fp(1) : Fp(0);
          if (x12939 != 0) {
            {
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][168 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12940 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x12940 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12941 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12941 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12942 = x12941 * x98;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12943 = x12940 + x12942;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12944 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12944 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12945 = x12944 * x83;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12946 = x12943 + x12945;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12947 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12947 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12948 = x12947 * x84;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12949 = x12946 + x12948;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12950 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x12950 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12951 = x12950 * x79;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12952 = x12949 + x12951;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12953 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x12953 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12954 = x12953 * x78;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12955 = x12952 + x12954;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12956 = args[2][168 * steps + ((cycle - 0) & mask)];
            assert(x12956 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12957 = x12956 * x77;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12958 = x12955 + x12957;
            // loc("./cirgen/components/onehot.h":38:8)
            auto x12959 = x12958 - x98;
            // loc("./cirgen/components/onehot.h":38:8)
            if (x12959 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":345:31)
          auto x12960 = x12897 - x83;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":345:31)
          auto x12961 = (x12960 == 0) ? Fp(1) : Fp(0);
          if (x12961 != 0) {
            {
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][168 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x100);
                reg = x100;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12962 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x12962 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12963 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12963 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12964 = x12963 * x98;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12965 = x12962 + x12964;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12966 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12966 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12967 = x12966 * x83;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12968 = x12965 + x12967;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12969 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12969 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12970 = x12969 * x84;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12971 = x12968 + x12970;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12972 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x12972 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12973 = x12972 * x79;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12974 = x12971 + x12973;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12975 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x12975 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12976 = x12975 * x78;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12977 = x12974 + x12976;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12978 = args[2][168 * steps + ((cycle - 0) & mask)];
            assert(x12978 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12979 = x12978 * x77;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12980 = x12977 + x12979;
            // loc("./cirgen/components/onehot.h":38:8)
            auto x12981 = x12980 - x83;
            // loc("./cirgen/components/onehot.h":38:8)
            if (x12981 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":346:24)
          auto x12982 = (x12897 == 0) ? Fp(1) : Fp(0);
          if (x12982 != 0) {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":347:29)
            auto x12983 = x101 - x12901;
            if (x12983 != 0) {
              if (x12898 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12984 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x12984 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12985 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x12985 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12986 = x12985 * x98;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12987 = x12984 + x12986;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12988 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x12988 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12989 = x12988 * x83;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12990 = x12987 + x12989;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12991 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x12991 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12992 = x12991 * x84;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12993 = x12990 + x12992;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12994 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x12994 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12995 = x12994 * x79;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12996 = x12993 + x12995;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12997 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x12997 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12998 = x12997 * x78;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12999 = x12996 + x12998;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13000 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13000 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13001 = x13000 * x77;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13002 = x12999 + x13001;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x13003 = x13002 - x84;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x13003 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
              // loc("cirgen/circuit/rv32im/ffpu.cpp":349:29)
              auto x13004 = x101 - x12898;
              if (x13004 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13005 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x13005 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13006 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x13006 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13007 = x13006 * x98;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13008 = x13005 + x13007;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13009 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x13009 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13010 = x13009 * x83;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13011 = x13008 + x13010;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13012 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x13012 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13013 = x13012 * x84;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13014 = x13011 + x13013;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13015 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x13015 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13016 = x13015 * x79;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13017 = x13014 + x13016;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13018 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13018 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13019 = x13018 * x78;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13020 = x13017 + x13019;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13021 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13021 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13022 = x13021 * x77;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13023 = x13020 + x13022;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x13024 = x13023 - x79;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x13024 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
            }
            if (x12901 != 0) {
              // loc("cirgen/circuit/rv32im/ffpu.cpp":352:30)
              auto x13025 = (x12832 == 0) ? Fp(1) : Fp(0);
              if (x13025 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13026 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x13026 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13027 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x13027 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13028 = x13027 * x98;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13029 = x13026 + x13028;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13030 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x13030 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13031 = x13030 * x83;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13032 = x13029 + x13031;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13033 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x13033 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13034 = x13033 * x84;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13035 = x13032 + x13034;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13036 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x13036 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13037 = x13036 * x79;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13038 = x13035 + x13037;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13039 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13039 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13040 = x13039 * x78;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13041 = x13038 + x13040;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13042 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13042 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13043 = x13042 * x77;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13044 = x13041 + x13043;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x13045 = x13044 - x78;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x13045 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
              // loc("cirgen/circuit/rv32im/ffpu.cpp":353:34)
              auto x13046 = x12832 - x101;
              // loc("cirgen/circuit/rv32im/ffpu.cpp":353:34)
              auto x13047 = (x13046 == 0) ? Fp(1) : Fp(0);
              if (x13047 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x100);
                    reg = x100;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13048 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x13048 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13049 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x13049 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13050 = x13049 * x98;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13051 = x13048 + x13050;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13052 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x13052 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13053 = x13052 * x83;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13054 = x13051 + x13053;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13055 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x13055 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13056 = x13055 * x84;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13057 = x13054 + x13056;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13058 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x13058 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13059 = x13058 * x79;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13060 = x13057 + x13059;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13061 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13061 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13062 = x13061 * x78;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13063 = x13060 + x13062;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13064 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13064 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13065 = x13064 * x77;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13066 = x13063 + x13065;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x13067 = x13066 - x77;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x13067 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
            }
          }
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg"("cirgen/circuit/rv32im/ffpu.cpp":364:21))
        auto x13068 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x13068 != Fp::invalid());
        if (x13068 != 0) {
          host_args.at(0) = x12831;
          host_args.at(1) = x12832;
          host_args.at(2) = x12833;
          host_args.at(3) = x12834;
          host_args.at(4) = x602;
          host(ctx, "log", "FFPU Decoded INIT from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":365:26))
        auto x13069 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13069 != Fp::invalid());
        if (x13069 != 0) {
          host_args.at(0) = x12831;
          host_args.at(1) = x12832;
          host_args.at(2) = x12833;
          host_args.at(3) = x12834;
          host_args.at(4) = x602;
          host(ctx, "log", "FFPU Decoded BINOP_ADD from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":366:26))
        auto x13070 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x13070 != Fp::invalid());
        if (x13070 != 0) {
          host_args.at(0) = x12831;
          host_args.at(1) = x12832;
          host_args.at(2) = x12833;
          host_args.at(3) = x12834;
          host_args.at(4) = x602;
          host(ctx, "log", "FFPU Decoded BINOP_SUB from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":367:26))
        auto x13071 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x13071 != Fp::invalid());
        if (x13071 != 0) {
          host_args.at(0) = x12831;
          host_args.at(1) = x12832;
          host_args.at(2) = x12833;
          host_args.at(3) = x12834;
          host_args.at(4) = x602;
          host(ctx, "log", "FFPU Decoded BINOP_MUL from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":368:20))
        auto x13072 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x13072 != Fp::invalid());
        if (x13072 != 0) {
          host_args.at(0) = x12831;
          host_args.at(1) = x12832;
          host_args.at(2) = x12833;
          host_args.at(3) = x12834;
          host_args.at(4) = x602;
          host(ctx, "log", "FFPU Decoded SET from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("cirgen/circuit/rv32im/ffpu.cpp":369:20))
        auto x13073 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x13073 != Fp::invalid());
        if (x13073 != 0) {
          host_args.at(0) = x12831;
          host_args.at(1) = x12832;
          host_args.at(2) = x12833;
          host_args.at(3) = x12834;
          host_args.at(4) = x602;
          host(ctx, "log", "FFPU Decoded GET from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("cirgen/circuit/rv32im/ffpu.cpp":370:30))
        auto x13074 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x13074 != Fp::invalid());
        if (x13074 != 0) {
          host_args.at(0) = x12831;
          host_args.at(1) = x12832;
          host_args.at(2) = x12833;
          host_args.at(3) = x12834;
          host_args.at(4) = x602;
          host(ctx, "log", "FFPU Decoded UNOP_IDENTITY from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("cirgen/circuit/rv32im/ffpu.cpp":371:25))
        auto x13075 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x13075 != Fp::invalid());
        if (x13075 != 0) {
          host_args.at(0) = x12831;
          host_args.at(1) = x12832;
          host_args.at(2) = x12833;
          host_args.at(3) = x12834;
          host_args.at(4) = x602;
          host(ctx, "log", "FFPU Decoded UNOP_INV from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":376:32))
      auto x13076 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x13076 != Fp::invalid());
      if (x13076 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":377:8)
        auto x13077 = x12897 - x101;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":377:8)
        if (x13077 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:377");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13078 = x12909 + x10;
        {
          host_args.at(0) = x13078;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13079 = host_outs.at(0);
          auto x13080 = host_outs.at(1);
          auto x13081 = host_outs.at(2);
          auto x13082 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13079);
            reg = x13079;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13080);
            reg = x13080;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13081);
            reg = x13081;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13082);
            reg = x13082;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13083 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13083 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13084 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13084 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13085 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13085 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13086 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13086 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13078);
          reg = x13078;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13083);
          reg = x13083;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13084);
          reg = x13084;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13085);
          reg = x13085;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13086);
          reg = x13086;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13087 = x12915 + x10;
        {
          host_args.at(0) = x13087;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13088 = host_outs.at(0);
          auto x13089 = host_outs.at(1);
          auto x13090 = host_outs.at(2);
          auto x13091 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13088);
            reg = x13088;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13089);
            reg = x13089;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13090);
            reg = x13090;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13091);
            reg = x13091;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13092 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13092 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13093 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13093 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13094 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13094 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13095 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13095 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13087);
          reg = x13087;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13092);
          reg = x13092;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13093);
          reg = x13093;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13094);
          reg = x13094;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13095);
          reg = x13095;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x13096 = x13083 + x13092;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x13097 = x13084 + x13093;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x13098 = x13085 + x13094;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x13099 = x13086 + x13095;
        host_args.at(0) = x12909;
        host_args.at(1) = x13083;
        host_args.at(2) = x13084;
        host_args.at(3) = x13085;
        host_args.at(4) = x13086;
        host_args.at(5) = x12915;
        host_args.at(6) = x13092;
        host_args.at(7) = x13093;
        host_args.at(8) = x13094;
        host_args.at(9) = x13095;
        host_args.at(10) = x13096;
        host_args.at(11) = x13097;
        host_args.at(12) = x13098;
        host_args.at(13) = x13099;
        host(ctx, "log", "FFPU: Add %%%u (%w) + %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13100 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13100 != Fp::invalid());
        host_args.at(0) = x13100;
        host_args.at(1) = x13096;
        host_args.at(2) = x13097;
        host_args.at(3) = x13098;
        host_args.at(4) = x13099;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13101 = x13100 + x10;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13096);
          reg = x13096;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13097);
          reg = x13097;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13098);
          reg = x13098;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13099);
          reg = x13099;
        }
        {
          host_args.at(0) = x13101;
          host_args.at(1) = x13096;
          host_args.at(2) = x13097;
          host_args.at(3) = x13098;
          host_args.at(4) = x13099;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13102 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13102 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13103 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13103 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13104 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13104 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13105 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13105 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13101);
          reg = x13101;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13102);
          reg = x13102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13103);
          reg = x13103;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13104);
          reg = x13104;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13105);
          reg = x13105;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13106 = x13100 + x101;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13106);
          reg = x13106;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":380:32))
      auto x13107 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x13107 != Fp::invalid());
      if (x13107 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":381:8)
        auto x13108 = x12897 - x98;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":381:8)
        if (x13108 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:381");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13109 = x12909 + x10;
        {
          host_args.at(0) = x13109;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13110 = host_outs.at(0);
          auto x13111 = host_outs.at(1);
          auto x13112 = host_outs.at(2);
          auto x13113 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13110);
            reg = x13110;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13111);
            reg = x13111;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13112);
            reg = x13112;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13113);
            reg = x13113;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13114 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13114 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13115 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13115 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13116 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13116 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13117 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13117 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13109);
          reg = x13109;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13114);
          reg = x13114;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13115);
          reg = x13115;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13116);
          reg = x13116;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13117);
          reg = x13117;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13118 = x12915 + x10;
        {
          host_args.at(0) = x13118;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13119 = host_outs.at(0);
          auto x13120 = host_outs.at(1);
          auto x13121 = host_outs.at(2);
          auto x13122 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13119);
            reg = x13119;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13120);
            reg = x13120;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13121);
            reg = x13121;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13122);
            reg = x13122;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13123 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13123 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13124 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13124 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13125 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13125 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13126 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13126 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13118);
          reg = x13118;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13123);
          reg = x13123;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13124);
          reg = x13124;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13125);
          reg = x13125;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13126);
          reg = x13126;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x13127 = x13114 - x13123;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x13128 = x13115 - x13124;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x13129 = x13116 - x13125;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x13130 = x13117 - x13126;
        host_args.at(0) = x12909;
        host_args.at(1) = x13114;
        host_args.at(2) = x13115;
        host_args.at(3) = x13116;
        host_args.at(4) = x13117;
        host_args.at(5) = x12915;
        host_args.at(6) = x13123;
        host_args.at(7) = x13124;
        host_args.at(8) = x13125;
        host_args.at(9) = x13126;
        host_args.at(10) = x13127;
        host_args.at(11) = x13128;
        host_args.at(12) = x13129;
        host_args.at(13) = x13130;
        host(ctx, "log", "FFPU: Sub %%%u (%w) - %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13131 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13131 != Fp::invalid());
        host_args.at(0) = x13131;
        host_args.at(1) = x13127;
        host_args.at(2) = x13128;
        host_args.at(3) = x13129;
        host_args.at(4) = x13130;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13132 = x13131 + x10;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13127);
          reg = x13127;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13128);
          reg = x13128;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13129);
          reg = x13129;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13130);
          reg = x13130;
        }
        {
          host_args.at(0) = x13132;
          host_args.at(1) = x13127;
          host_args.at(2) = x13128;
          host_args.at(3) = x13129;
          host_args.at(4) = x13130;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13133 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13133 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13134 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13134 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13135 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13135 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13136 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13136 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13132);
          reg = x13132;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13133);
          reg = x13133;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13134);
          reg = x13134;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13135);
          reg = x13135;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13136);
          reg = x13136;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13137 = x13131 + x101;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13137);
          reg = x13137;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":384:32))
      auto x13138 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x13138 != Fp::invalid());
      if (x13138 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":385:8)
        auto x13139 = x12897 - x83;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":385:8)
        if (x13139 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:385");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13140 = x12909 + x10;
        {
          host_args.at(0) = x13140;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13141 = host_outs.at(0);
          auto x13142 = host_outs.at(1);
          auto x13143 = host_outs.at(2);
          auto x13144 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13141);
            reg = x13141;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13142);
            reg = x13142;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13143);
            reg = x13143;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13144);
            reg = x13144;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13145 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13145 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13146 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13146 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13147 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13147 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13148 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13148 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13140);
          reg = x13140;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13145);
          reg = x13145;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13146);
          reg = x13146;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13147);
          reg = x13147;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13148);
          reg = x13148;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13149 = x12915 + x10;
        {
          host_args.at(0) = x13149;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13150 = host_outs.at(0);
          auto x13151 = host_outs.at(1);
          auto x13152 = host_outs.at(2);
          auto x13153 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13150);
            reg = x13150;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13151);
            reg = x13151;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13152);
            reg = x13152;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13153);
            reg = x13153;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13154 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13154 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13155 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13155 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13156 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13156 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13157 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13157 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13149);
          reg = x13149;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13154);
          reg = x13154;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13155);
          reg = x13155;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13156);
          reg = x13156;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13157);
          reg = x13157;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13158 = x13145 * x13154;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13159 = x13146 * x13157;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13160 = x13147 * x13156;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13161 = x13159 + x13160;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13162 = x13148 * x13155;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13163 = x13161 + x13162;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13164 = x13163 * x9;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13165 = x13158 + x13164;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13166 = x13145 * x13155;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13167 = x13146 * x13154;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13168 = x13166 + x13167;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13169 = x13147 * x13157;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13170 = x13148 * x13156;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13171 = x13169 + x13170;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13172 = x13171 * x9;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13173 = x13168 + x13172;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13174 = x13145 * x13156;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13175 = x13146 * x13155;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13176 = x13174 + x13175;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13177 = x13147 * x13154;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13178 = x13176 + x13177;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13179 = x13148 * x13157;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13180 = x13179 * x9;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13181 = x13178 + x13180;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13182 = x13145 * x13157;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13183 = x13146 * x13156;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13184 = x13182 + x13183;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13185 = x13147 * x13155;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13186 = x13184 + x13185;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13187 = x13148 * x13154;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13188 = x13186 + x13187;
        host_args.at(0) = x12909;
        host_args.at(1) = x13145;
        host_args.at(2) = x13146;
        host_args.at(3) = x13147;
        host_args.at(4) = x13148;
        host_args.at(5) = x12915;
        host_args.at(6) = x13154;
        host_args.at(7) = x13155;
        host_args.at(8) = x13156;
        host_args.at(9) = x13157;
        host_args.at(10) = x13165;
        host_args.at(11) = x13173;
        host_args.at(12) = x13181;
        host_args.at(13) = x13188;
        host(ctx, "log", "FFPU: Mul %%%u (%w) * %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13189 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13189 != Fp::invalid());
        host_args.at(0) = x13189;
        host_args.at(1) = x13165;
        host_args.at(2) = x13173;
        host_args.at(3) = x13181;
        host_args.at(4) = x13188;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13190 = x13189 + x10;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13165);
          reg = x13165;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13173);
          reg = x13173;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13181);
          reg = x13181;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13188);
          reg = x13188;
        }
        {
          host_args.at(0) = x13190;
          host_args.at(1) = x13165;
          host_args.at(2) = x13173;
          host_args.at(3) = x13181;
          host_args.at(4) = x13188;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13191 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13191 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13192 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13192 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13193 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13193 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13194 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13194 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13190);
          reg = x13190;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13191);
          reg = x13191;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13192);
          reg = x13192;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13193);
          reg = x13193;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13194);
          reg = x13194;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13195 = x13189 + x101;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13195);
          reg = x13195;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":388:26))
      auto x13196 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x13196 != Fp::invalid());
      if (x13196 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":389:8)
        if (x12897 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:389");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":390:8)
        auto x13197 = x12898 - x101;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":390:8)
        if (x13197 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:390");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":391:8)
        if (x12901 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:391");
        // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":165:46))
        auto x13198 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13198 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":165:46)
        auto x13199 = x13198 + x12832;
        {
          host_args.at(0) = x13199;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13200 = host_outs.at(0);
          auto x13201 = host_outs.at(1);
          auto x13202 = host_outs.at(2);
          auto x13203 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13200);
            reg = x13200;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13201);
            reg = x13201;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13202);
            reg = x13202;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13203);
            reg = x13203;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13204 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13204 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13205 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13205 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13206 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13206 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13207 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13207 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13199);
          reg = x13199;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13204);
          reg = x13204;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13205);
          reg = x13205;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13206);
          reg = x13206;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13207);
          reg = x13207;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x13208 = x13205 * x96;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13209 = x13204 + x13208;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13210 = x13206 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13211 = x13209 + x13210;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13212 = x13207 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13213 = x13211 + x13212;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":165:18)
        auto x13214 = x13213 * x82;
        // loc("Top/Mux/4/Mux/12/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13215 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x13215 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":167:27)
        auto x13216 = x101 - x13215;
        if (x13216 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13217 = args[2][132 * steps + ((cycle - 1) & mask)];
          assert(x13217 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13218 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x13218 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13219 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x13219 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13220 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x13220 != Fp::invalid());
          {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":183:38)
            auto x13221 = x12909 * x84;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":183:27)
            auto x13222 = x13214 + x13221;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x13223 = x13217 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13224 = Fp(x13223.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13225 = Fp(x13223.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13226 = Fp(x13223.asUInt32() & x7.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13227 = x13223 - x13224;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13228 = x13227 - x13225;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13229 = x13228 - x13226;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13230 = x13225 * x95;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13231 = x13226 * x15;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13232 = x13229 * x6;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13224);
              reg = x13224;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13230);
              reg = x13230;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13231);
              reg = x13231;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13232);
              reg = x13232;
            }
            {
              host_args.at(0) = x13222;
              host_args.at(1) = x13224;
              host_args.at(2) = x13230;
              host_args.at(3) = x13231;
              host_args.at(4) = x13232;
              host_args.at(5) = x100;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13233 = args[2][118 * steps + ((cycle - 0) & mask)];
            assert(x13233 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13234 = args[2][119 * steps + ((cycle - 0) & mask)];
            assert(x13234 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13235 = args[2][120 * steps + ((cycle - 0) & mask)];
            assert(x13235 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13236 = args[2][121 * steps + ((cycle - 0) & mask)];
            assert(x13236 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":137:3)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13222);
              reg = x13222;
            }
            // loc("cirgen/components/ram.cpp":138:3)
            {
              auto& reg = args[2][116 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12825);
              reg = x12825;
            }
            // loc("cirgen/components/ram.cpp":139:3)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13233);
              reg = x13233;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13234);
              reg = x13234;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13235);
              reg = x13235;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13236);
              reg = x13236;
            }
            // loc("cirgen/circuit/rv32im/ffpu.cpp":184:27)
            auto x13237 = x13222 + x101;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x13238 = x13218 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13239 = Fp(x13238.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13240 = Fp(x13238.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13241 = Fp(x13238.asUInt32() & x7.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13242 = x13238 - x13239;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13243 = x13242 - x13240;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13244 = x13243 - x13241;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13245 = x13240 * x95;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13246 = x13241 * x15;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13247 = x13244 * x6;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13239);
              reg = x13239;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13245);
              reg = x13245;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13246);
              reg = x13246;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13247);
              reg = x13247;
            }
            {
              host_args.at(0) = x13237;
              host_args.at(1) = x13239;
              host_args.at(2) = x13245;
              host_args.at(3) = x13246;
              host_args.at(4) = x13247;
              host_args.at(5) = x100;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13248 = args[2][125 * steps + ((cycle - 0) & mask)];
            assert(x13248 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13249 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x13249 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13250 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x13250 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13251 = args[2][128 * steps + ((cycle - 0) & mask)];
            assert(x13251 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":137:3)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13237);
              reg = x13237;
            }
            // loc("cirgen/components/ram.cpp":138:3)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12825);
              reg = x12825;
            }
            // loc("cirgen/components/ram.cpp":139:3)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13248);
              reg = x13248;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13249);
              reg = x13249;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13250);
              reg = x13250;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13251);
              reg = x13251;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("cirgen/components/ram.cpp":148:10))
          auto x13252 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x13252 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":186:8)
          auto x13253 = x13252 - x12825;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":186:8)
          if (x13253 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:186");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":144:10))
          auto x13254 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x13254 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:32)
          auto x13255 = x12909 * x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:21)
          auto x13256 = x13214 + x13255;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:8)
          auto x13257 = x13254 - x13256;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:8)
          if (x13257 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:187");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13258 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13258 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13259 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13259 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13260 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13260 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13261 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13261 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13262 = x13259 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13263 = x13258 + x13262;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13264 = x13260 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13265 = x13263 + x13264;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13266 = x13261 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13267 = x13265 + x13266;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x13268 = x13217 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":188:8)
          auto x13269 = x13267 - x13268;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":188:8)
          if (x13269 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:188");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":148:10))
          auto x13270 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x13270 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":190:8)
          auto x13271 = x13270 - x12825;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":190:8)
          if (x13271 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:190");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":144:10))
          auto x13272 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13272 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":191:21)
          auto x13273 = x13256 + x101;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":191:8)
          auto x13274 = x13272 - x13273;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":191:8)
          if (x13274 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:191");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13275 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13275 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13276 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13276 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13277 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13277 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13278 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13278 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13279 = x13276 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13280 = x13275 + x13279;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13281 = x13277 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13282 = x13280 + x13281;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13283 = x13278 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13284 = x13282 + x13283;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x13285 = x13218 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":192:8)
          auto x13286 = x13284 - x13285;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":192:8)
          if (x13286 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:192");
          // loc("cirgen/circuit/rv32im/ffpu.cpp":196:10)
          auto x13287 = x13214 * x84;
          host_args.at(0) = x12832;
          host_args.at(1) = x13287;
          host_args.at(2) = x12909;
          host_args.at(3) = x13217;
          host_args.at(4) = x13218;
          host_args.at(5) = x13219;
          host_args.at(6) = x13220;
          host_args.at(7) = x13217;
          host_args.at(8) = x13218;
          host(ctx, "log", "FFPU: Set to arg[%u] (%x) [%u] <- %w (%u, %u, ...)", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":32:28))
          auto x13288 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x13288 != Fp::invalid());
          host_args.at(0) = x13288;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13288);
            reg = x13288;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        if (x13215 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13289 = args[2][132 * steps + ((cycle - 2) & mask)];
          assert(x13289 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13290 = args[2][133 * steps + ((cycle - 2) & mask)];
          assert(x13290 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13291 = args[2][134 * steps + ((cycle - 2) & mask)];
          assert(x13291 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13292 = args[2][135 * steps + ((cycle - 2) & mask)];
          assert(x13292 != Fp::invalid());
          {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":221:38)
            auto x13293 = x12909 * x84;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":221:27)
            auto x13294 = x13214 + x13293;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":221:27)
            auto x13295 = x13294 + x98;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x13296 = x13291 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13297 = Fp(x13296.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13298 = Fp(x13296.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13299 = Fp(x13296.asUInt32() & x7.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13300 = x13296 - x13297;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13301 = x13300 - x13298;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13302 = x13301 - x13299;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13303 = x13298 * x95;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13304 = x13299 * x15;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13305 = x13302 * x6;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13297);
              reg = x13297;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13303);
              reg = x13303;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13304);
              reg = x13304;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13305);
              reg = x13305;
            }
            {
              host_args.at(0) = x13295;
              host_args.at(1) = x13297;
              host_args.at(2) = x13303;
              host_args.at(3) = x13304;
              host_args.at(4) = x13305;
              host_args.at(5) = x100;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13306 = args[2][118 * steps + ((cycle - 0) & mask)];
            assert(x13306 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13307 = args[2][119 * steps + ((cycle - 0) & mask)];
            assert(x13307 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13308 = args[2][120 * steps + ((cycle - 0) & mask)];
            assert(x13308 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13309 = args[2][121 * steps + ((cycle - 0) & mask)];
            assert(x13309 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":137:3)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13295);
              reg = x13295;
            }
            // loc("cirgen/components/ram.cpp":138:3)
            {
              auto& reg = args[2][116 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12825);
              reg = x12825;
            }
            // loc("cirgen/components/ram.cpp":139:3)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13306);
              reg = x13306;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13307);
              reg = x13307;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13308);
              reg = x13308;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13309);
              reg = x13309;
            }
            // loc("cirgen/circuit/rv32im/ffpu.cpp":222:27)
            auto x13310 = x13294 + x83;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x13311 = x13292 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13312 = Fp(x13311.asUInt32() & x97.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13313 = Fp(x13311.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13314 = Fp(x13311.asUInt32() & x7.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13315 = x13311 - x13312;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13316 = x13315 - x13313;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13317 = x13316 - x13314;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13318 = x13313 * x95;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13319 = x13314 * x15;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13320 = x13317 * x6;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13312);
              reg = x13312;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13318);
              reg = x13318;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13319);
              reg = x13319;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13320);
              reg = x13320;
            }
            {
              host_args.at(0) = x13310;
              host_args.at(1) = x13312;
              host_args.at(2) = x13318;
              host_args.at(3) = x13319;
              host_args.at(4) = x13320;
              host_args.at(5) = x100;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13321 = args[2][125 * steps + ((cycle - 0) & mask)];
            assert(x13321 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13322 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x13322 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13323 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x13323 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13324 = args[2][128 * steps + ((cycle - 0) & mask)];
            assert(x13324 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":137:3)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13310);
              reg = x13310;
            }
            // loc("cirgen/components/ram.cpp":138:3)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12825);
              reg = x12825;
            }
            // loc("cirgen/components/ram.cpp":139:3)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13321);
              reg = x13321;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13322);
              reg = x13322;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13323);
              reg = x13323;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13324);
              reg = x13324;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("cirgen/components/ram.cpp":148:10))
          auto x13325 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x13325 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":224:8)
          auto x13326 = x13325 - x12825;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":224:8)
          if (x13326 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:224");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":144:10))
          auto x13327 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x13327 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:32)
          auto x13328 = x12909 * x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:21)
          auto x13329 = x13214 + x13328;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:21)
          auto x13330 = x13329 + x98;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:8)
          auto x13331 = x13327 - x13330;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:8)
          if (x13331 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:225");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13332 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13332 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13333 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13333 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13334 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13334 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13335 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13335 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13336 = x13333 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13337 = x13332 + x13336;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13338 = x13334 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13339 = x13337 + x13338;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13340 = x13335 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13341 = x13339 + x13340;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x13342 = x13291 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":226:8)
          auto x13343 = x13341 - x13342;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":226:8)
          if (x13343 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:226");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":148:10))
          auto x13344 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x13344 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":228:8)
          auto x13345 = x13344 - x12825;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":228:8)
          if (x13345 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:228");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":144:10))
          auto x13346 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13346 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":229:21)
          auto x13347 = x13329 + x83;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":229:8)
          auto x13348 = x13346 - x13347;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":229:8)
          if (x13348 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:229");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13349 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13349 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13350 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13350 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13351 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13351 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13352 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13352 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13353 = x13350 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13354 = x13349 + x13353;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13355 = x13351 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13356 = x13354 + x13355;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13357 = x13352 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13358 = x13356 + x13357;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x13359 = x13292 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":230:8)
          auto x13360 = x13358 - x13359;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":230:8)
          if (x13360 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:230");
          // loc("cirgen/circuit/rv32im/ffpu.cpp":234:10)
          auto x13361 = x13214 * x84;
          host_args.at(0) = x12832;
          host_args.at(1) = x13361;
          host_args.at(2) = x12909;
          host_args.at(3) = x13289;
          host_args.at(4) = x13290;
          host_args.at(5) = x13291;
          host_args.at(6) = x13292;
          host_args.at(7) = x13291;
          host_args.at(8) = x13292;
          host(ctx, "log", "FFPU: Set to arg[%u] (%x) [%u] <- %w (... %u, %u)", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":32:28))
          auto x13362 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x13362 != Fp::invalid());
          host_args.at(0) = x13362;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13362);
            reg = x13362;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("cirgen/circuit/rv32im/ffpu.cpp":394:26))
      auto x13363 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x13363 != Fp::invalid());
      if (x13363 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":395:8)
        if (x12897 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:395");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":396:8)
        if (x12898 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:396");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":397:8)
        if (x12901 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:397");
        // loc("Top/Mux/4/Mux/12/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13364 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x13364 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":115:27)
        auto x13365 = x101 - x13364;
        if (x13365 != 0) {
          // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":118:48))
          auto x13366 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x13366 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":118:48)
          auto x13367 = x13366 + x12832;
          {
            host_args.at(0) = x13367;
            host_args.at(1) = x100;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13368 = host_outs.at(0);
            auto x13369 = host_outs.at(1);
            auto x13370 = host_outs.at(2);
            auto x13371 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][132 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13368);
              reg = x13368;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][133 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13369);
              reg = x13369;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][134 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13370);
              reg = x13370;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][135 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13371);
              reg = x13371;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13372 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13372 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13373 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13373 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13374 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13374 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13375 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13375 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13367);
            reg = x13367;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12825);
            reg = x12825;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13372);
            reg = x13372;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13373);
            reg = x13373;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13374);
            reg = x13374;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13375);
            reg = x13375;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13376 = x13373 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13377 = x13372 + x13376;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13378 = x13374 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13379 = x13377 + x13378;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13380 = x13375 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13381 = x13379 + x13380;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":118:20)
          auto x13382 = x13381 * x82;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":120:64)
          auto x13383 = x12909 * x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":120:53)
          auto x13384 = x13382 + x13383;
          {
            host_args.at(0) = x13384;
            host_args.at(1) = x100;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13385 = host_outs.at(0);
            auto x13386 = host_outs.at(1);
            auto x13387 = host_outs.at(2);
            auto x13388 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13385);
              reg = x13385;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13386);
              reg = x13386;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13387);
              reg = x13387;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13388);
              reg = x13388;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13389 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13389 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13390 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13390 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13391 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13391 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13392 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13392 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13384);
            reg = x13384;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12825);
            reg = x12825;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13389);
            reg = x13389;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13390);
            reg = x13390;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13391);
            reg = x13391;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13392);
            reg = x13392;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13393 = x13390 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13394 = x13389 + x13393;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13395 = x13391 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13396 = x13394 + x13395;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13397 = x13392 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13398 = x13396 + x13397;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13399 = x13398 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":121:53)
          auto x13400 = x13384 + x101;
          {
            host_args.at(0) = x13400;
            host_args.at(1) = x100;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13401 = host_outs.at(0);
            auto x13402 = host_outs.at(1);
            auto x13403 = host_outs.at(2);
            auto x13404 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13401);
              reg = x13401;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13402);
              reg = x13402;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13403);
              reg = x13403;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13404);
              reg = x13404;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13405 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13405 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13406 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13406 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13407 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13407 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13408 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13408 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13400);
            reg = x13400;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12825);
            reg = x12825;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13405);
            reg = x13405;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13406);
            reg = x13406;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13407);
            reg = x13407;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13408);
            reg = x13408;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13409 = x13406 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13410 = x13405 + x13409;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13411 = x13407 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13412 = x13410 + x13411;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13413 = x13408 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13414 = x13412 + x13413;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13415 = x13414 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":125:10)
          auto x13416 = x13382 * x84;
          host_args.at(0) = x12832;
          host_args.at(1) = x13416;
          host_args.at(2) = x12909;
          host_args.at(3) = x13399;
          host_args.at(4) = x13415;
          host(ctx, "log", "FFPU: Get from arg[%u] (%x) [%u] -> %u, %u, ..", host_args.data(), 5, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":32:28))
          auto x13417 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x13417 != Fp::invalid());
          host_args.at(0) = x13417;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13417);
            reg = x13417;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        if (x13364 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13418 = args[2][132 * steps + ((cycle - 1) & mask)];
          assert(x13418 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13419 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x13419 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13420 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x13420 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13421 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x13421 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13422 = x13419 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13423 = x13418 + x13422;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13424 = x13420 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13425 = x13423 + x13424;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13426 = x13421 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13427 = x13425 + x13426;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":138:59)
          auto x13428 = x13427 * x82;
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13429 = args[2][118 * steps + ((cycle - 1) & mask)];
          assert(x13429 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13430 = args[2][119 * steps + ((cycle - 1) & mask)];
          assert(x13430 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13431 = args[2][120 * steps + ((cycle - 1) & mask)];
          assert(x13431 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13432 = args[2][121 * steps + ((cycle - 1) & mask)];
          assert(x13432 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13433 = x13430 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13434 = x13429 + x13433;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13435 = x13431 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13436 = x13434 + x13435;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13437 = x13432 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13438 = x13436 + x13437;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13439 = x13438 * x0;
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13440 = args[2][125 * steps + ((cycle - 1) & mask)];
          assert(x13440 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13441 = args[2][126 * steps + ((cycle - 1) & mask)];
          assert(x13441 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13442 = args[2][127 * steps + ((cycle - 1) & mask)];
          assert(x13442 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13443 = args[2][128 * steps + ((cycle - 1) & mask)];
          assert(x13443 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13444 = x13441 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13445 = x13440 + x13444;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13446 = x13442 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13447 = x13445 + x13446;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13448 = x13443 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13449 = x13447 + x13448;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13450 = x13449 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":142:64)
          auto x13451 = x12909 * x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":142:53)
          auto x13452 = x13428 + x13451;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":142:53)
          auto x13453 = x13452 + x98;
          {
            host_args.at(0) = x13453;
            host_args.at(1) = x100;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13454 = host_outs.at(0);
            auto x13455 = host_outs.at(1);
            auto x13456 = host_outs.at(2);
            auto x13457 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13454);
              reg = x13454;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13455);
              reg = x13455;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13456);
              reg = x13456;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13457);
              reg = x13457;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13458 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13458 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13459 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13459 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13460 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13460 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13461 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13461 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13453);
            reg = x13453;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12825);
            reg = x12825;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13458);
            reg = x13458;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13459);
            reg = x13459;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13460);
            reg = x13460;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13461);
            reg = x13461;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13462 = x13459 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13463 = x13458 + x13462;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13464 = x13460 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13465 = x13463 + x13464;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13466 = x13461 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13467 = x13465 + x13466;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13468 = x13467 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":143:53)
          auto x13469 = x13452 + x83;
          {
            host_args.at(0) = x13469;
            host_args.at(1) = x100;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13470 = host_outs.at(0);
            auto x13471 = host_outs.at(1);
            auto x13472 = host_outs.at(2);
            auto x13473 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13470);
              reg = x13470;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13471);
              reg = x13471;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13472);
              reg = x13472;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13473);
              reg = x13473;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13474 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13474 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13475 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13475 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13476 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13476 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13477 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13477 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13469);
            reg = x13469;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12825);
            reg = x12825;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13474);
            reg = x13474;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13475);
            reg = x13475;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13476);
            reg = x13476;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13477);
            reg = x13477;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13478 = x13475 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13479 = x13474 + x13478;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13480 = x13476 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13481 = x13479 + x13480;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13482 = x13477 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13483 = x13481 + x13482;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13484 = x13483 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":148:10)
          auto x13485 = x13428 * x84;
          host_args.at(0) = x12832;
          host_args.at(1) = x13485;
          host_args.at(2) = x12909;
          host_args.at(3) = x13439;
          host_args.at(4) = x13450;
          host_args.at(5) = x13468;
          host_args.at(6) = x13484;
          host(ctx, "log", "FFPU: Get from arg[%u] (%x) [%u] -> %u, %u, %u, %u", host_args.data(), 7, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
          auto x13486 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x13486 != Fp::invalid());
          host_args.at(0) = x13486;
          host_args.at(1) = x13439;
          host_args.at(2) = x13450;
          host_args.at(3) = x13468;
          host_args.at(4) = x13484;
          host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
          auto x13487 = x13486 + x10;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13439);
            reg = x13439;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13450);
            reg = x13450;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13468);
            reg = x13468;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13484);
            reg = x13484;
          }
          {
            host_args.at(0) = x13487;
            host_args.at(1) = x13439;
            host_args.at(2) = x13450;
            host_args.at(3) = x13468;
            host_args.at(4) = x13484;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13488 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13488 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13489 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13489 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13490 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13490 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13491 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13491 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13487);
            reg = x13487;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12825);
            reg = x12825;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13488);
            reg = x13488;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13489);
            reg = x13489;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13490);
            reg = x13490;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13491);
            reg = x13491;
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
          auto x13492 = x13486 + x101;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13492);
            reg = x13492;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("cirgen/circuit/rv32im/ffpu.cpp":400:36))
      auto x13493 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x13493 != Fp::invalid());
      if (x13493 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":401:8)
        if (x12897 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:401");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":402:8)
        if (x12898 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:402");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":403:8)
        auto x13494 = x12901 - x101;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":403:8)
        if (x13494 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:403");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":404:8)
        if (x12832 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:404");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13495 = x12909 + x10;
        {
          host_args.at(0) = x13495;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13496 = host_outs.at(0);
          auto x13497 = host_outs.at(1);
          auto x13498 = host_outs.at(2);
          auto x13499 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13496);
            reg = x13496;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13497);
            reg = x13497;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13498);
            reg = x13498;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13499);
            reg = x13499;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13500 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13500 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13501 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13502 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13502 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13503 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13503 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13495);
          reg = x13495;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13500);
          reg = x13500;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13501);
          reg = x13501;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13502);
          reg = x13502;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13503);
          reg = x13503;
        }
        host_args.at(0) = x12909;
        host_args.at(1) = x13500;
        host_args.at(2) = x13501;
        host_args.at(3) = x13502;
        host_args.at(4) = x13503;
        host(ctx, "log", "FFPU: Identity %%%u (%w)", host_args.data(), 5, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13504 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13504 != Fp::invalid());
        host_args.at(0) = x13504;
        host_args.at(1) = x13500;
        host_args.at(2) = x13501;
        host_args.at(3) = x13502;
        host_args.at(4) = x13503;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13505 = x13504 + x10;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13500);
          reg = x13500;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13501);
          reg = x13501;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13502);
          reg = x13502;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13503);
          reg = x13503;
        }
        {
          host_args.at(0) = x13505;
          host_args.at(1) = x13500;
          host_args.at(2) = x13501;
          host_args.at(3) = x13502;
          host_args.at(4) = x13503;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13506 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13506 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13507 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13507 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13508 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13508 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13509 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13509 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13505);
          reg = x13505;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13506);
          reg = x13506;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13507);
          reg = x13507;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13508);
          reg = x13508;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13509);
          reg = x13509;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13510 = x13504 + x101;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13510);
          reg = x13510;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("cirgen/circuit/rv32im/ffpu.cpp":407:31))
      auto x13511 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x13511 != Fp::invalid());
      if (x13511 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":408:8)
        if (x12897 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:408");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":409:8)
        if (x12898 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:409");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":410:8)
        auto x13512 = x12901 - x101;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":410:8)
        if (x13512 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:410");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":411:8)
        auto x13513 = x12832 - x101;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":411:8)
        if (x13513 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:411");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13514 = x12909 + x10;
        {
          host_args.at(0) = x13514;
          host_args.at(1) = x100;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13515 = host_outs.at(0);
          auto x13516 = host_outs.at(1);
          auto x13517 = host_outs.at(2);
          auto x13518 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13515);
            reg = x13515;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13516);
            reg = x13516;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13517);
            reg = x13517;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13518);
            reg = x13518;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13519 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13519 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13520 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13521 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13522 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13522 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13514);
          reg = x13514;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13519);
          reg = x13519;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13520);
          reg = x13520;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13521);
          reg = x13521;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13522);
          reg = x13522;
        }
        {
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13523 = x13519 * x13519;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13524 = x13522 + x13522;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13525 = x13520 * x13524;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13526 = x13521 * x13521;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13527 = x13525 - x13526;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13528 = x13527 * x73;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13529 = x13523 + x13528;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13530 = x13521 + x13521;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13531 = x13519 * x13530;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13532 = x13520 * x13520;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13533 = x13531 - x13532;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13534 = x13522 * x13522;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13535 = x13534 * x73;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13536 = x13533 + x13535;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13537 = x13529 * x13529;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13538 = x13536 * x73;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13539 = x13538 * x13536;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13540 = x13537 + x13539;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13541 = inv(x13540);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13542 = x13529 * x13541;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13543 = x13536 * x13541;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13544 = x13519 * x13542;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13545 = x13521 * x73;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13546 = x13545 * x13543;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13547 = x13544 + x13546;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13548 = -x13520;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13549 = x13548 * x13542;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13550 = x13522 * x73;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13551 = x13550 * x13543;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13552 = x13549 - x13551;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13553 = -x13519;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13554 = x13553 * x13543;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13555 = x13521 * x13542;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13556 = x13554 + x13555;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13557 = x13520 * x13543;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13558 = x13522 * x13542;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13559 = x13557 - x13558;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13547);
            reg = x13547;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13552);
            reg = x13552;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13556);
            reg = x13556;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13559);
            reg = x13559;
          }
        }
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13560 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x13560 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13561 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x13561 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13562 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x13562 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13563 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x13563 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13564 = x13560 * x13519;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13565 = x13561 * x13522;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13566 = x13562 * x13521;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13567 = x13565 + x13566;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13568 = x13563 * x13520;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13569 = x13567 + x13568;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13570 = x13569 * x9;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13571 = x13564 + x13570;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13572 = x13560 * x13520;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13573 = x13561 * x13519;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13574 = x13572 + x13573;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13575 = x13562 * x13522;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13576 = x13563 * x13521;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13577 = x13575 + x13576;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13578 = x13577 * x9;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13579 = x13574 + x13578;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13580 = x13560 * x13521;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13581 = x13561 * x13520;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13582 = x13580 + x13581;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13583 = x13562 * x13519;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13584 = x13582 + x13583;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13585 = x13563 * x13522;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13586 = x13585 * x9;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13587 = x13584 + x13586;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13588 = x13560 * x13522;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13589 = x13561 * x13521;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13590 = x13588 + x13589;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13591 = x13562 * x13520;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13592 = x13590 + x13591;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13593 = x13563 * x13519;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13594 = x13592 + x13593;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13595 = x101 - x13571;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13595 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13596 = x100 - x13579;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13596 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13597 = x100 - x13587;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13597 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13598 = x100 - x13594;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13598 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        host_args.at(0) = x12909;
        host_args.at(1) = x13519;
        host_args.at(2) = x13520;
        host_args.at(3) = x13521;
        host_args.at(4) = x13522;
        host_args.at(5) = x13560;
        host_args.at(6) = x13561;
        host_args.at(7) = x13562;
        host_args.at(8) = x13563;
        host(ctx, "log", "FFPU: Inv %%%u (%w) -> %w", host_args.data(), 9, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13599 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13599 != Fp::invalid());
        host_args.at(0) = x13599;
        host_args.at(1) = x13560;
        host_args.at(2) = x13561;
        host_args.at(3) = x13562;
        host_args.at(4) = x13563;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13600 = x13599 + x10;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13560);
          reg = x13560;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13561);
          reg = x13561;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13562);
          reg = x13562;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13563);
          reg = x13563;
        }
        {
          host_args.at(0) = x13600;
          host_args.at(1) = x13560;
          host_args.at(2) = x13561;
          host_args.at(3) = x13562;
          host_args.at(4) = x13563;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13601 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13601 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13602 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13602 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13603 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13604 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13604 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13600);
          reg = x13600;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13601);
          reg = x13601;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13602);
          reg = x13602;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13603);
          reg = x13603;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13604);
          reg = x13604;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13605 = x13599 + x101;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13605);
          reg = x13605;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
      // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x13606 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x13606 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":416:57)
      auto x13607 = x602 + x84;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":416:20)
      auto x13608 = x13606 - x13607;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13609 = (x13608 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13609);
          reg = x13609;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13610 = inv(x13608);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13610);
          reg = x13610;
        }
      }
      // loc("Top/Mux/4/Mux/12/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13611 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x13611 != Fp::invalid());
      if (x13611 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x13608 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x13612 = x101 - x13611;
      if (x13612 != 0) {
        // loc("Top/Mux/4/Mux/12/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13613 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13613 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13614 = x13608 * x13613;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13615 = x13614 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x13615 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/12/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13616 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13616 != Fp::invalid());
      if (x13616 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":419:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13617 = Fp(x13607.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13617);
            reg = x13617;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13618 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13618 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13619 = x13607 - x13618;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13620 = x13619 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13621 = Fp(x13620.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13621);
            reg = x13621;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13622 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13622 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13623 = x13620 - x13622;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13624 = x13623 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13625 = Fp(x13624.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13625);
            reg = x13625;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13626 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13626 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13627 = x13624 - x13626;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13628 = x13627 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13629 = Fp(x13628.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13629);
            reg = x13629;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13630 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13631 = x13628 - x13630;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13632 = x13631 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13632);
          reg = x13632;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13633 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13633 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13634 = x101 - x13633;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13635 = x13633 * x13634;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13635);
          reg = x13635;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13636 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13636 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13637 = x98 - x13633;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13638 = x13636 * x13637;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13638 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
      // loc("cirgen/circuit/rv32im/ffpu.cpp":425:25)
      auto x13639 = x101 - x13616;
      if (x13639 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13612);
          reg = x13612;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13611);
          reg = x13611;
        }
      }
      // loc("Top/Mux/4/Mux/12/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13640 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x13640 != Fp::invalid());
      if (x13640 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":431:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13641 = x13607 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13642 = Fp(x13641.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13642);
            reg = x13642;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13643 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13643 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13644 = x13641 - x13643;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13645 = x13644 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13646 = Fp(x13645.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13646);
            reg = x13646;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13647 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13647 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13648 = x13645 - x13647;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13649 = x13648 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13650 = Fp(x13649.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13650);
            reg = x13650;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13651 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13651 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13652 = x13649 - x13651;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13653 = x13652 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13654 = Fp(x13653.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13654);
            reg = x13654;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13655 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13655 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13656 = x13653 - x13655;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13657 = x13656 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13657);
          reg = x13657;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13658 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13658 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13659 = x101 - x13658;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13660 = x13658 * x13659;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13660);
          reg = x13660;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13661 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13661 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13662 = x98 - x13658;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13663 = x13661 * x13662;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13663 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      }
      // loc("Top/Mux/4/Mux/12/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13664 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x13664 != Fp::invalid());
      if (x13664 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":436:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("Top/Mux/4/Mux/12/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":437:29))
        auto x13665 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13665 != Fp::invalid());
        host_args.at(0) = x13665;
        host(ctx, "log", "Returning to %x", host_args.data(), 1, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13666 = x13665 + x84;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13667 = Fp(x13666.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13667);
            reg = x13667;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13668 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13668 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13669 = x13666 - x13668;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13670 = x13669 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13671 = Fp(x13670.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13671);
            reg = x13671;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13672 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13672 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13673 = x13670 - x13672;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13674 = x13673 * x95;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13675 = Fp(x13674.asUInt32() & x97.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13675);
            reg = x13675;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13676 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13676 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13677 = x13674 - x13676;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13678 = x13677 * x95;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13679 = Fp(x13678.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13679);
            reg = x13679;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13680 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13680 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13681 = x13678 - x13680;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13682 = x13681 * x82;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13682);
          reg = x13682;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13683 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13683 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13684 = x101 - x13683;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13685 = x13683 * x13684;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13685);
          reg = x13685;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13686 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13686 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13687 = x98 - x13683;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13688 = x13686 * x13687;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13688 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/components/mux.h":37:25))
    auto x13689 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x13689 != Fp::invalid());
    if (x13689 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13690 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x13690 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x13691 = x602 + x84;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x13692 = Fp(x13691.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13692);
          reg = x13692;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x13693 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x13693 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x13694 = x13691 - x13693;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x13695 = x13694 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x13696 = Fp(x13695.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13696);
          reg = x13696;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x13697 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x13697 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x13698 = x13695 - x13697;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x13699 = x13698 * x95;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x13700 = Fp(x13699.asUInt32() & x97.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13700);
          reg = x13700;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x13701 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x13701 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x13702 = x13699 - x13701;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x13703 = x13702 * x95;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x13704 = Fp(x13703.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13704);
          reg = x13704;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13705 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x13705 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x13706 = x13703 - x13705;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x13707 = x13706 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13707);
        reg = x13707;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13708 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x13708 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x13709 = x101 - x13708;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x13710 = x13708 * x13709;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13710);
        reg = x13710;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x13711 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x13711 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x13712 = x98 - x13708;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x13713 = x13711 * x13712;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x13713 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x602;
      host(ctx, "log", "  PageFault: PC = 0x%x", host_args.data(), 1, host_outs.data(), 0);
      // loc("Top/Code/OneHot/Reg4"("cirgen/circuit/rv32im/page_fault.cpp":61:67))
      auto x13714 = args[0][5 * steps + ((cycle - 1) & mask)];
      assert(x13714 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg13"("cirgen/circuit/rv32im/page_fault.cpp":62:77))
      auto x13715 = args[2][107 * steps + ((cycle - 1) & mask)];
      assert(x13715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/13/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13716 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x13716 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":64:19)
      auto x13717 = x13714 * x13715;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":64:51)
      auto x13718 = x101 - x13716;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":64:19)
      auto x13719 = x13717 * x13718;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":64:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13719);
        reg = x13719;
      }
      // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x13720 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x13720 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":69:20)
      auto x13721 = x101 - x13720;
      if (x13721 != 0) {
        {
          host_args.at(0) = x602;
          host(ctx, "pageRead", "", host_args.data(), 1, host_outs.data(), 6);
          auto x13722 = host_outs.at(0);
          auto x13723 = host_outs.at(1);
          auto x13724 = host_outs.at(2);
          auto x13725 = host_outs.at(3);
          auto x13726 = host_outs.at(4);
          auto x13727 = host_outs.at(5);
          // loc("cirgen/circuit/rv32im/page_fault.cpp":74:21)
          auto x13728 = Fp(x13724.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":74:20)
          auto x13729 = x13728 * x69;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13729);
            reg = x13729;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":76:25)
          auto x13730 = (x13725 == 0) ? Fp(1) : Fp(0);
          // loc("Top/Mux/4/Mux/13/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13731 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x13731 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":76:39)
          auto x13732 = (x13731 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/circuit/rv32im/page_fault.cpp":76:21)
          auto x13733 = x13730 * x13732;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":76:7)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13733);
            reg = x13733;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13734 = x13723 * x96;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13735 = x13722 + x13734;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13736 = x13724 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13737 = x13735 + x13736;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13738 = x13725 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13739 = x13737 + x13738;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":77:7)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13739);
            reg = x13739;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":78:7)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13726);
            reg = x13726;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":79:7)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13727);
            reg = x13727;
          }
        }
        // loc("Top/Mux/4/Mux/13/Reg6"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13740 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13740 != Fp::invalid());
        if (x13740 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":84:7)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5);
            reg = x5;
          }
          // loc("Top/Mux/4/Mux/13/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
          auto x13741 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x13741 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":85:19)
          auto x13742 = x13741 * x84;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":85:7)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13742);
            reg = x13742;
          }
          // loc("Top/Mux/4/Mux/13/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
          auto x13743 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x13743 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/Reg8"("./cirgen/compiler/edsl/edsl.h":111:61))
          auto x13744 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x13744 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":88:36)
          auto x13745 = x13743 + x13744;
          {
            host_args.at(0) = x13745;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13746 = host_outs.at(0);
            auto x13747 = host_outs.at(1);
            auto x13748 = host_outs.at(2);
            auto x13749 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13746);
              reg = x13746;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13747);
              reg = x13747;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13748);
              reg = x13748;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13749);
              reg = x13749;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13750 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x13750 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13751 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x13751 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13752 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13752 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13753 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13753 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13745);
            reg = x13745;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13690);
            reg = x13690;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13750);
            reg = x13750;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13751);
            reg = x13751;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13752);
            reg = x13752;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13753);
            reg = x13753;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":88:36)
          auto x13754 = x13745 + x101;
          {
            host_args.at(0) = x13754;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13755 = host_outs.at(0);
            auto x13756 = host_outs.at(1);
            auto x13757 = host_outs.at(2);
            auto x13758 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][130 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13755);
              reg = x13755;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][131 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13756);
              reg = x13756;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][132 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13757);
              reg = x13757;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][133 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13758);
              reg = x13758;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13759 = args[2][130 * steps + ((cycle - 0) & mask)];
          assert(x13759 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13760 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x13760 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13761 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13761 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13762 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13762 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13754);
            reg = x13754;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13690);
            reg = x13690;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13759);
            reg = x13759;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13760);
            reg = x13760;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13761);
            reg = x13761;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13762);
            reg = x13762;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":88:36)
          auto x13763 = x13745 + x98;
          {
            host_args.at(0) = x13763;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13764 = host_outs.at(0);
            auto x13765 = host_outs.at(1);
            auto x13766 = host_outs.at(2);
            auto x13767 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][137 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13764);
              reg = x13764;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][138 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13765);
              reg = x13765;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][139 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13766);
              reg = x13766;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][140 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13767);
              reg = x13767;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13768 = args[2][137 * steps + ((cycle - 0) & mask)];
          assert(x13768 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13769 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x13769 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13770 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x13770 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13771 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x13771 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13763);
            reg = x13763;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13690);
            reg = x13690;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13768);
            reg = x13768;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13769);
            reg = x13769;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13770);
            reg = x13770;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13771);
            reg = x13771;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":88:36)
          auto x13772 = x13745 + x83;
          {
            host_args.at(0) = x13772;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13773 = host_outs.at(0);
            auto x13774 = host_outs.at(1);
            auto x13775 = host_outs.at(2);
            auto x13776 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][144 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13773);
              reg = x13773;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][145 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13774);
              reg = x13774;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][146 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13775);
              reg = x13775;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][147 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13776);
              reg = x13776;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13777 = args[2][144 * steps + ((cycle - 0) & mask)];
          assert(x13777 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13778 = args[2][145 * steps + ((cycle - 0) & mask)];
          assert(x13778 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13779 = args[2][146 * steps + ((cycle - 0) & mask)];
          assert(x13779 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13780 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x13780 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13772);
            reg = x13772;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13690);
            reg = x13690;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13777);
            reg = x13777;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13778);
            reg = x13778;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13779);
            reg = x13779;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13780);
            reg = x13780;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":90:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":92:20)
        auto x13781 = x101 - x13740;
        if (x13781 != 0) {
          // loc("Top/Mux/4/Mux/13/Reg3"("cirgen/circuit/rv32im/page_fault.cpp":93:36))
          auto x13782 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x13782 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":48:11)
          auto x13783 = x13782 * x84;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":48:11)
          auto x13784 = x13783 - x4;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":48:10)
          auto x13785 = x13784 * x25;
          // loc("Top/Mux/4/Mux/13/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
          auto x13786 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x13786 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":93:23)
          auto x13787 = x13785 + x13786;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":94:38)
          auto x13788 = x13787 * x76;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":94:21)
          auto x13789 = x13788 + x3;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":94:7)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13789);
            reg = x13789;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":95:7)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2);
            reg = x2;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":99:7)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":100:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x75);
            reg = x75;
          }
        }
      }
      if (x13720 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("Top/Mux/4/Mux/13/Reg3"("cirgen/circuit/rv32im/page_fault.cpp":106:42))
        auto x13790 = args[2][111 * steps + ((cycle - 1) & mask)];
        assert(x13790 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":106:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13790);
          reg = x13790;
        }
        // loc("Top/Mux/4/Mux/13/Reg7"("cirgen/circuit/rv32im/page_fault.cpp":107:40))
        auto x13791 = args[2][116 * steps + ((cycle - 1) & mask)];
        assert(x13791 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":107:40)
        auto x13792 = x13791 - x101;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":107:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13792);
          reg = x13792;
        }
        // loc("Top/Mux/4/Mux/13/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13793 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13793 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":108:17)
        auto x13794 = x13793 * x84;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":108:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13794);
          reg = x13794;
        }
        // loc("Top/Mux/4/Mux/13/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13795 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13795 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/Reg8"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13796 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13796 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":111:34)
        auto x13797 = x13795 + x13796;
        {
          host_args.at(0) = x13797;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13798 = host_outs.at(0);
          auto x13799 = host_outs.at(1);
          auto x13800 = host_outs.at(2);
          auto x13801 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13798);
            reg = x13798;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13799);
            reg = x13799;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13800);
            reg = x13800;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13801);
            reg = x13801;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13802 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13802 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13803 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13803 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13804 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13804 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13805 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13805 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13797);
          reg = x13797;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13690);
          reg = x13690;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13802);
          reg = x13802;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13803);
          reg = x13803;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13804);
          reg = x13804;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13805);
          reg = x13805;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":111:34)
        auto x13806 = x13797 + x101;
        {
          host_args.at(0) = x13806;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13807 = host_outs.at(0);
          auto x13808 = host_outs.at(1);
          auto x13809 = host_outs.at(2);
          auto x13810 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13807);
            reg = x13807;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13808);
            reg = x13808;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13809);
            reg = x13809;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13810);
            reg = x13810;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13811 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13811 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13812 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13812 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13813 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13813 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13814 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13814 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13806);
          reg = x13806;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13690);
          reg = x13690;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13811);
          reg = x13811;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13812);
          reg = x13812;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13813);
          reg = x13813;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13814);
          reg = x13814;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":111:34)
        auto x13815 = x13797 + x98;
        {
          host_args.at(0) = x13815;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13816 = host_outs.at(0);
          auto x13817 = host_outs.at(1);
          auto x13818 = host_outs.at(2);
          auto x13819 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13816);
            reg = x13816;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13817);
            reg = x13817;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13818);
            reg = x13818;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13819);
            reg = x13819;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13820 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13820 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13821 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13821 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13822 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13822 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13823 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13823 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13815);
          reg = x13815;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13690);
          reg = x13690;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13820);
          reg = x13820;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13821);
          reg = x13821;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13822);
          reg = x13822;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13823);
          reg = x13823;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":111:34)
        auto x13824 = x13797 + x83;
        {
          host_args.at(0) = x13824;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13825 = host_outs.at(0);
          auto x13826 = host_outs.at(1);
          auto x13827 = host_outs.at(2);
          auto x13828 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13825);
            reg = x13825;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13826);
            reg = x13826;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13827);
            reg = x13827;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13828);
            reg = x13828;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13829 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x13829 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13830 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x13830 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13831 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x13831 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13832 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x13832 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13824);
          reg = x13824;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13690);
          reg = x13690;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13829);
          reg = x13829;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13830);
          reg = x13830;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13831);
          reg = x13831;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13832);
          reg = x13832;
        }
      }
      // loc("Top/Mux/4/Mux/13/Reg7"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13833 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x13833 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13834 = (x13833 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13834);
          reg = x13834;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13835 = inv(x13833);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13835);
          reg = x13835;
        }
      }
      // loc("Top/Mux/4/Mux/13/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13836 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x13836 != Fp::invalid());
      if (x13836 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x13833 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x13837 = x101 - x13836;
      if (x13837 != 0) {
        // loc("Top/Mux/4/Mux/13/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13838 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13838 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13839 = x13833 * x13838;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13840 = x13839 - x101;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x13840 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      if (x13720 != 0) {
        if (x13836 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":118:31)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x81);
            reg = x81;
          }
        }
        if (x13837 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":119:35)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
      }
    }
  }
  // loc("Top/Code/OneHot/Reg5"("./cirgen/components/mux.h":37:25))
  auto x13841 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x13841 != Fp::invalid());
  if (x13841 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x13842 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13842 != Fp::invalid());
    host_args.at(0) = x13842;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
    // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13843 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x13843 != Fp::invalid());
    // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13844 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x13844 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13845 = x13844 * x98;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13846 = x13843 + x13845;
    // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13847 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x13847 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13848 = x13847 * x83;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13849 = x13846 + x13848;
    // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13850 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x13850 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13851 = x13850 * x84;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13852 = x13849 + x13851;
    // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13853 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x13853 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13854 = x13853 * x79;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13855 = x13852 + x13854;
    // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13856 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x13856 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13857 = x13856 * x78;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13858 = x13855 + x13857;
    // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13859 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x13859 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13860 = x13859 * x77;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13861 = x13858 + x13860;
    // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13862 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x13862 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13863 = x13862 * x76;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13864 = x13861 + x13863;
    // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13865 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x13865 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13866 = x13865 * x75;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13867 = x13864 + x13866;
    // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13868 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x13868 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13869 = x13868 * x74;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13870 = x13867 + x13869;
    // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13871 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x13871 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13872 = x13871 * x73;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13873 = x13870 + x13872;
    // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13874 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x13874 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13875 = x13874 * x72;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13876 = x13873 + x13875;
    // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13877 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x13877 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13878 = x13877 * x71;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13879 = x13876 + x13878;
    // loc("cirgen/circuit/rv32im/top.cpp":49:38)
    auto x13880 = x13879 - x76;
    // loc("cirgen/circuit/rv32im/top.cpp":49:38)
    if (x13880 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:49");
    // loc("Top/Mux/4/Mux/8/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13881 = args[2][177 * steps + ((cycle - 1) & mask)];
    assert(x13881 != Fp::invalid());
    // loc("Top/Mux/4/Mux/8/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13882 = args[2][178 * steps + ((cycle - 1) & mask)];
    assert(x13882 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13883 = x13882 * x98;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13884 = x13881 + x13883;
    // loc("Top/Mux/4/Mux/8/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13885 = args[2][179 * steps + ((cycle - 1) & mask)];
    assert(x13885 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13886 = x13885 * x83;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13887 = x13884 + x13886;
    // loc("Top/Mux/4/Mux/8/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13888 = args[2][180 * steps + ((cycle - 1) & mask)];
    assert(x13888 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13889 = x13888 * x84;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13890 = x13887 + x13889;
    // loc("cirgen/circuit/rv32im/top.cpp":51:39)
    if (x13890 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:51");
  }
  // loc("Top/Code/OneHot/Reg6"("./cirgen/components/mux.h":37:25))
  auto x13891 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x13891 != Fp::invalid());
  if (x13891 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x13892 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13892 != Fp::invalid());
    host_args.at(0) = x13892;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/Reg"("cirgen/circuit/rv32im/top.cpp":72:27))
  auto x13893 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x13893 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13894 = x13893 + x102;
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13895 = x13894 + x427;
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13896 = x13895 + x480;
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13897 = x13896 + x588;
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13898 = x13897 + x13841;
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13899 = x13898 + x13891;
  if (x588 != 0) {
    // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/top.cpp":80:19))
    auto x13900 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13900 != Fp::invalid());
    if (x13900 != 0) {
      // loc("Top/Mux/4/Mux/8/OneHot/Reg"("cirgen/circuit/rv32im/top.cpp":83:20))
      auto x13901 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13901 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/top.cpp":84:7)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13901);
        reg = x13901;
      }
    }
    // loc("cirgen/circuit/rv32im/top.cpp":86:19)
    auto x13902 = x101 - x13900;
    if (x13902 != 0) {
      // loc("cirgen/circuit/rv32im/top.cpp":86:23)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
    }
  }
  // loc("cirgen/circuit/rv32im/top.cpp":88:23)
  auto x13903 = x13899 - x588;
  if (x13903 != 0) {
    // loc("cirgen/circuit/rv32im/top.cpp":88:27)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x100);
      reg = x100;
    }
  }
  // loc("Top/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
  auto x13904 = args[2][9 * steps + ((cycle - 0) & mask)];
  assert(x13904 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":89:10)
  auto x13905 = x101 - x13904;
  if (x427 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
    }
  }
  if (x480 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
    }
  }
  if (x588 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13906 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x13906 != Fp::invalid());
    if (x13906 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13907 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x13907 != Fp::invalid());
    if (x13907 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13908 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x13908 != Fp::invalid());
    if (x13908 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13909 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x13909 != Fp::invalid());
    if (x13909 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13910 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x13910 != Fp::invalid());
    if (x13910 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13911 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x13911 != Fp::invalid());
    if (x13911 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13912 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x13912 != Fp::invalid());
    if (x13912 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13913 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x13913 != Fp::invalid());
    if (x13913 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13914 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13914 != Fp::invalid());
    if (x13914 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13915 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13915 != Fp::invalid());
      if (x13915 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13916 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13916 != Fp::invalid());
      if (x13916 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13917 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13917 != Fp::invalid());
      if (x13917 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13918 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13918 != Fp::invalid());
      if (x13918 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13919 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x13919 != Fp::invalid());
      if (x13919 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13920 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x13920 != Fp::invalid());
    if (x13920 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13921 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x13921 != Fp::invalid());
    if (x13921 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13922 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x13922 != Fp::invalid());
    if (x13922 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13923 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x13923 != Fp::invalid());
    if (x13923 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13924 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x13924 != Fp::invalid());
    if (x13924 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x100);
          reg = x100;
        }
      }
    }
  }
  if (x13841 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x100);
        reg = x100;
      }
    }
  }
  if (x427 != 0) {
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13925 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x13925 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13926 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x13926 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13927 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x13927 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13928 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x13928 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13929 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x13929 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13930 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x13930 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13931 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x13931 != Fp::invalid());
      host_args.at(0) = x13925;
      host_args.at(1) = x13926;
      host_args.at(2) = x13927;
      host_args.at(3) = x13928;
      host_args.at(4) = x13929;
      host_args.at(5) = x13930;
      host_args.at(6) = x13931;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13932 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x13932 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13933 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x13933 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13934 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x13934 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13935 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x13935 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13936 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x13936 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13937 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x13937 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13938 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x13938 != Fp::invalid());
      host_args.at(0) = x13932;
      host_args.at(1) = x13933;
      host_args.at(2) = x13934;
      host_args.at(3) = x13935;
      host_args.at(4) = x13936;
      host_args.at(5) = x13937;
      host_args.at(6) = x13938;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13939 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x13939 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13940 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x13940 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13941 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x13941 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13942 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x13942 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13943 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x13943 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13944 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x13944 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13945 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x13945 != Fp::invalid());
      host_args.at(0) = x13939;
      host_args.at(1) = x13940;
      host_args.at(2) = x13941;
      host_args.at(3) = x13942;
      host_args.at(4) = x13943;
      host_args.at(5) = x13944;
      host_args.at(6) = x13945;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x480 != 0) {
    {
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13946 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x13946 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13947 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x13947 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13948 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x13948 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13949 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x13949 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13950 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x13950 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13951 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x13951 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13952 = args[2][100 * steps + ((cycle - 0) & mask)];
      assert(x13952 != Fp::invalid());
      host_args.at(0) = x13946;
      host_args.at(1) = x13947;
      host_args.at(2) = x13948;
      host_args.at(3) = x13949;
      host_args.at(4) = x13950;
      host_args.at(5) = x13951;
      host_args.at(6) = x13952;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13953 = args[2][101 * steps + ((cycle - 0) & mask)];
      assert(x13953 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13954 = args[2][102 * steps + ((cycle - 0) & mask)];
      assert(x13954 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13955 = args[2][103 * steps + ((cycle - 0) & mask)];
      assert(x13955 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13956 = args[2][104 * steps + ((cycle - 0) & mask)];
      assert(x13956 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13957 = args[2][105 * steps + ((cycle - 0) & mask)];
      assert(x13957 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13958 = args[2][106 * steps + ((cycle - 0) & mask)];
      assert(x13958 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13959 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x13959 != Fp::invalid());
      host_args.at(0) = x13953;
      host_args.at(1) = x13954;
      host_args.at(2) = x13955;
      host_args.at(3) = x13956;
      host_args.at(4) = x13957;
      host_args.at(5) = x13958;
      host_args.at(6) = x13959;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13960 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x13960 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13961 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x13961 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13962 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x13962 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13963 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x13963 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13964 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x13964 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13965 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x13965 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13966 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x13966 != Fp::invalid());
      host_args.at(0) = x13960;
      host_args.at(1) = x13961;
      host_args.at(2) = x13962;
      host_args.at(3) = x13963;
      host_args.at(4) = x13964;
      host_args.at(5) = x13965;
      host_args.at(6) = x13966;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13967 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x13967 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13968 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x13968 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13969 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x13969 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13970 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x13970 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13971 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13971 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13972 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x13972 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13973 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x13973 != Fp::invalid());
      host_args.at(0) = x13967;
      host_args.at(1) = x13968;
      host_args.at(2) = x13969;
      host_args.at(3) = x13970;
      host_args.at(4) = x13971;
      host_args.at(5) = x13972;
      host_args.at(6) = x13973;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13974 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13974 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13975 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x13975 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13976 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x13976 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13977 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x13977 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13978 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x13978 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13979 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x13979 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13980 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x13980 != Fp::invalid());
      host_args.at(0) = x13974;
      host_args.at(1) = x13975;
      host_args.at(2) = x13976;
      host_args.at(3) = x13977;
      host_args.at(4) = x13978;
      host_args.at(5) = x13979;
      host_args.at(6) = x13980;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13981 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x13981 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13982 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x13982 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13983 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x13983 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13984 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x13984 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13985 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x13985 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13986 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x13986 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13987 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x13987 != Fp::invalid());
      host_args.at(0) = x13981;
      host_args.at(1) = x13982;
      host_args.at(2) = x13983;
      host_args.at(3) = x13984;
      host_args.at(4) = x13985;
      host_args.at(5) = x13986;
      host_args.at(6) = x13987;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13988 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x13988 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13989 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x13989 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13990 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x13990 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13991 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x13991 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13992 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x13992 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13993 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x13993 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13994 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x13994 != Fp::invalid());
      host_args.at(0) = x13988;
      host_args.at(1) = x13989;
      host_args.at(2) = x13990;
      host_args.at(3) = x13991;
      host_args.at(4) = x13992;
      host_args.at(5) = x13993;
      host_args.at(6) = x13994;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13995 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x13995 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13996 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x13996 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13997 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x13997 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13998 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x13998 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13999 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x13999 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14000 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x14000 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14001 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x14001 != Fp::invalid());
      host_args.at(0) = x13995;
      host_args.at(1) = x13996;
      host_args.at(2) = x13997;
      host_args.at(3) = x13998;
      host_args.at(4) = x13999;
      host_args.at(5) = x14000;
      host_args.at(6) = x14001;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x588 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14002 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x14002 != Fp::invalid());
    if (x14002 != 0) {
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14003 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14003 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14004 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14004 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14005 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14005 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14006 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14006 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14007 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14007 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14008 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14008 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14009 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14009 != Fp::invalid());
        host_args.at(0) = x14003;
        host_args.at(1) = x14004;
        host_args.at(2) = x14005;
        host_args.at(3) = x14006;
        host_args.at(4) = x14007;
        host_args.at(5) = x14008;
        host_args.at(6) = x14009;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14010 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14010 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14011 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14011 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14012 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14012 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14013 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14013 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14014 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14014 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14015 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14015 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14016 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14016 != Fp::invalid());
        host_args.at(0) = x14010;
        host_args.at(1) = x14011;
        host_args.at(2) = x14012;
        host_args.at(3) = x14013;
        host_args.at(4) = x14014;
        host_args.at(5) = x14015;
        host_args.at(6) = x14016;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14017 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14017 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14018 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14018 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14019 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14019 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14020 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14020 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14021 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14021 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14022 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14022 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14023 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14023 != Fp::invalid());
        host_args.at(0) = x14017;
        host_args.at(1) = x14018;
        host_args.at(2) = x14019;
        host_args.at(3) = x14020;
        host_args.at(4) = x14021;
        host_args.at(5) = x14022;
        host_args.at(6) = x14023;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14024 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14024 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14025 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14025 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14026 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14026 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14027 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14027 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14028 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14028 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14029 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14029 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14030 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14030 != Fp::invalid());
        host_args.at(0) = x14024;
        host_args.at(1) = x14025;
        host_args.at(2) = x14026;
        host_args.at(3) = x14027;
        host_args.at(4) = x14028;
        host_args.at(5) = x14029;
        host_args.at(6) = x14030;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14031 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x14031 != Fp::invalid());
    if (x14031 != 0) {
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14032 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14032 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14033 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14033 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14034 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14034 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14035 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14035 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14036 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14036 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14037 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14037 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14038 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14038 != Fp::invalid());
        host_args.at(0) = x14032;
        host_args.at(1) = x14033;
        host_args.at(2) = x14034;
        host_args.at(3) = x14035;
        host_args.at(4) = x14036;
        host_args.at(5) = x14037;
        host_args.at(6) = x14038;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14039 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14039 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14040 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14040 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14041 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14041 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14042 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14042 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14043 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14043 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14044 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14044 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14045 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14045 != Fp::invalid());
        host_args.at(0) = x14039;
        host_args.at(1) = x14040;
        host_args.at(2) = x14041;
        host_args.at(3) = x14042;
        host_args.at(4) = x14043;
        host_args.at(5) = x14044;
        host_args.at(6) = x14045;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14046 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14046 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14047 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14047 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14048 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14048 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14049 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14049 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14050 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14050 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14051 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14051 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14052 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14052 != Fp::invalid());
        host_args.at(0) = x14046;
        host_args.at(1) = x14047;
        host_args.at(2) = x14048;
        host_args.at(3) = x14049;
        host_args.at(4) = x14050;
        host_args.at(5) = x14051;
        host_args.at(6) = x14052;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14053 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14053 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14054 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14054 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14055 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14055 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14056 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14056 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14057 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14057 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14058 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14058 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14059 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14059 != Fp::invalid());
        host_args.at(0) = x14053;
        host_args.at(1) = x14054;
        host_args.at(2) = x14055;
        host_args.at(3) = x14056;
        host_args.at(4) = x14057;
        host_args.at(5) = x14058;
        host_args.at(6) = x14059;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14060 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x14060 != Fp::invalid());
    if (x14060 != 0) {
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14061 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14061 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14062 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14062 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14063 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14063 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14064 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14064 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14065 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14065 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14066 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14066 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14067 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14067 != Fp::invalid());
        host_args.at(0) = x14061;
        host_args.at(1) = x14062;
        host_args.at(2) = x14063;
        host_args.at(3) = x14064;
        host_args.at(4) = x14065;
        host_args.at(5) = x14066;
        host_args.at(6) = x14067;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14068 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14068 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14069 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14069 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14070 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14070 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14071 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14071 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14072 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14072 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14073 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14073 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14074 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14074 != Fp::invalid());
        host_args.at(0) = x14068;
        host_args.at(1) = x14069;
        host_args.at(2) = x14070;
        host_args.at(3) = x14071;
        host_args.at(4) = x14072;
        host_args.at(5) = x14073;
        host_args.at(6) = x14074;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14075 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14075 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14076 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14076 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14077 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14077 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14078 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14078 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14079 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14079 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14080 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14080 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14081 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14081 != Fp::invalid());
        host_args.at(0) = x14075;
        host_args.at(1) = x14076;
        host_args.at(2) = x14077;
        host_args.at(3) = x14078;
        host_args.at(4) = x14079;
        host_args.at(5) = x14080;
        host_args.at(6) = x14081;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14082 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14082 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14083 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14083 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14084 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14084 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14085 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14085 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14086 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14086 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14087 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14087 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14088 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14088 != Fp::invalid());
        host_args.at(0) = x14082;
        host_args.at(1) = x14083;
        host_args.at(2) = x14084;
        host_args.at(3) = x14085;
        host_args.at(4) = x14086;
        host_args.at(5) = x14087;
        host_args.at(6) = x14088;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14089 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x14089 != Fp::invalid());
    if (x14089 != 0) {
      {
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14090 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14090 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14091 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14091 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14092 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14092 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14093 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14093 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14094 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14094 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14095 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14095 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14096 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14096 != Fp::invalid());
        host_args.at(0) = x14090;
        host_args.at(1) = x14091;
        host_args.at(2) = x14092;
        host_args.at(3) = x14093;
        host_args.at(4) = x14094;
        host_args.at(5) = x14095;
        host_args.at(6) = x14096;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14097 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14097 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14098 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14098 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14099 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14099 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14100 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14100 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14101 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14101 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14102 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14102 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14103 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14103 != Fp::invalid());
        host_args.at(0) = x14097;
        host_args.at(1) = x14098;
        host_args.at(2) = x14099;
        host_args.at(3) = x14100;
        host_args.at(4) = x14101;
        host_args.at(5) = x14102;
        host_args.at(6) = x14103;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14104 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14104 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14105 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14105 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14106 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14106 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14107 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14107 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14108 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14108 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14109 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14109 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14110 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14110 != Fp::invalid());
        host_args.at(0) = x14104;
        host_args.at(1) = x14105;
        host_args.at(2) = x14106;
        host_args.at(3) = x14107;
        host_args.at(4) = x14108;
        host_args.at(5) = x14109;
        host_args.at(6) = x14110;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14111 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14111 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14112 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14112 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14113 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14113 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14114 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14114 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14115 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14115 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14116 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14116 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14117 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14117 != Fp::invalid());
        host_args.at(0) = x14111;
        host_args.at(1) = x14112;
        host_args.at(2) = x14113;
        host_args.at(3) = x14114;
        host_args.at(4) = x14115;
        host_args.at(5) = x14116;
        host_args.at(6) = x14117;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14118 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14118 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14119 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x14119 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14120 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x14120 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14121 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x14121 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14122 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x14122 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14123 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x14123 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14124 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x14124 != Fp::invalid());
        host_args.at(0) = x14118;
        host_args.at(1) = x14119;
        host_args.at(2) = x14120;
        host_args.at(3) = x14121;
        host_args.at(4) = x14122;
        host_args.at(5) = x14123;
        host_args.at(6) = x14124;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14125 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x14125 != Fp::invalid());
    if (x14125 != 0) {
      {
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14126 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14126 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14127 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14127 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14128 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14128 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14129 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14129 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14130 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14130 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14131 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14131 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14132 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14132 != Fp::invalid());
        host_args.at(0) = x14126;
        host_args.at(1) = x14127;
        host_args.at(2) = x14128;
        host_args.at(3) = x14129;
        host_args.at(4) = x14130;
        host_args.at(5) = x14131;
        host_args.at(6) = x14132;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14133 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14133 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14134 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14134 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14135 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14135 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14136 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14136 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14137 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14137 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14138 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14138 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14139 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14139 != Fp::invalid());
        host_args.at(0) = x14133;
        host_args.at(1) = x14134;
        host_args.at(2) = x14135;
        host_args.at(3) = x14136;
        host_args.at(4) = x14137;
        host_args.at(5) = x14138;
        host_args.at(6) = x14139;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14140 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14140 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14141 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14141 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14142 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14142 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14143 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14143 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14144 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14144 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14145 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14145 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14146 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14146 != Fp::invalid());
        host_args.at(0) = x14140;
        host_args.at(1) = x14141;
        host_args.at(2) = x14142;
        host_args.at(3) = x14143;
        host_args.at(4) = x14144;
        host_args.at(5) = x14145;
        host_args.at(6) = x14146;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14147 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14147 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14148 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14148 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14149 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14149 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14150 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14150 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14151 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14151 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14152 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14152 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14153 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14153 != Fp::invalid());
        host_args.at(0) = x14147;
        host_args.at(1) = x14148;
        host_args.at(2) = x14149;
        host_args.at(3) = x14150;
        host_args.at(4) = x14151;
        host_args.at(5) = x14152;
        host_args.at(6) = x14153;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14154 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14154 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14155 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x14155 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14156 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x14156 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14157 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x14157 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14158 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x14158 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14159 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x14159 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14160 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x14160 != Fp::invalid());
        host_args.at(0) = x14154;
        host_args.at(1) = x14155;
        host_args.at(2) = x14156;
        host_args.at(3) = x14157;
        host_args.at(4) = x14158;
        host_args.at(5) = x14159;
        host_args.at(6) = x14160;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14161 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x14161 != Fp::invalid());
    if (x14161 != 0) {
      {
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14162 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14162 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14163 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14163 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14164 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14164 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14165 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14165 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14166 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14166 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14167 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14167 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14168 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14168 != Fp::invalid());
        host_args.at(0) = x14162;
        host_args.at(1) = x14163;
        host_args.at(2) = x14164;
        host_args.at(3) = x14165;
        host_args.at(4) = x14166;
        host_args.at(5) = x14167;
        host_args.at(6) = x14168;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14169 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14169 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14170 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14170 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14171 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14171 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14172 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14172 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14173 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14173 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14174 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14174 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14175 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14175 != Fp::invalid());
        host_args.at(0) = x14169;
        host_args.at(1) = x14170;
        host_args.at(2) = x14171;
        host_args.at(3) = x14172;
        host_args.at(4) = x14173;
        host_args.at(5) = x14174;
        host_args.at(6) = x14175;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14176 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14176 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14177 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14177 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14178 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14178 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14179 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14179 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14180 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14180 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14181 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14181 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14182 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14182 != Fp::invalid());
        host_args.at(0) = x14176;
        host_args.at(1) = x14177;
        host_args.at(2) = x14178;
        host_args.at(3) = x14179;
        host_args.at(4) = x14180;
        host_args.at(5) = x14181;
        host_args.at(6) = x14182;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14183 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14183 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14184 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14184 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14185 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14185 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14186 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14186 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14187 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14187 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14188 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14188 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14189 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14189 != Fp::invalid());
        host_args.at(0) = x14183;
        host_args.at(1) = x14184;
        host_args.at(2) = x14185;
        host_args.at(3) = x14186;
        host_args.at(4) = x14187;
        host_args.at(5) = x14188;
        host_args.at(6) = x14189;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14190 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x14190 != Fp::invalid());
    if (x14190 != 0) {
      {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14191 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14191 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14192 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14192 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14193 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14193 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14194 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14194 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14195 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14195 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14196 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14196 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14197 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14197 != Fp::invalid());
        host_args.at(0) = x14191;
        host_args.at(1) = x14192;
        host_args.at(2) = x14193;
        host_args.at(3) = x14194;
        host_args.at(4) = x14195;
        host_args.at(5) = x14196;
        host_args.at(6) = x14197;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14198 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14198 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14199 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14199 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14200 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14200 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14201 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14201 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14202 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14202 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14203 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14203 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14204 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14204 != Fp::invalid());
        host_args.at(0) = x14198;
        host_args.at(1) = x14199;
        host_args.at(2) = x14200;
        host_args.at(3) = x14201;
        host_args.at(4) = x14202;
        host_args.at(5) = x14203;
        host_args.at(6) = x14204;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14205 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14205 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14206 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14206 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14207 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14207 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14208 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14208 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14209 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14209 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14210 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14210 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14211 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14211 != Fp::invalid());
        host_args.at(0) = x14205;
        host_args.at(1) = x14206;
        host_args.at(2) = x14207;
        host_args.at(3) = x14208;
        host_args.at(4) = x14209;
        host_args.at(5) = x14210;
        host_args.at(6) = x14211;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14212 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14212 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14213 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14213 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14214 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14214 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14215 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14215 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14216 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14216 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14217 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14217 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14218 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14218 != Fp::invalid());
        host_args.at(0) = x14212;
        host_args.at(1) = x14213;
        host_args.at(2) = x14214;
        host_args.at(3) = x14215;
        host_args.at(4) = x14216;
        host_args.at(5) = x14217;
        host_args.at(6) = x14218;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14219 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14219 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14220 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x14220 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14221 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x14221 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14222 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x14222 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14223 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x14223 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14224 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x14224 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14225 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x14225 != Fp::invalid());
        host_args.at(0) = x14219;
        host_args.at(1) = x14220;
        host_args.at(2) = x14221;
        host_args.at(3) = x14222;
        host_args.at(4) = x14223;
        host_args.at(5) = x14224;
        host_args.at(6) = x14225;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14226 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x14226 != Fp::invalid());
    if (x14226 != 0) {
      {
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14227 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14227 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14228 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14228 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14229 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14229 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14230 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14230 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14231 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14231 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14232 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14232 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14233 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14233 != Fp::invalid());
        host_args.at(0) = x14227;
        host_args.at(1) = x14228;
        host_args.at(2) = x14229;
        host_args.at(3) = x14230;
        host_args.at(4) = x14231;
        host_args.at(5) = x14232;
        host_args.at(6) = x14233;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14234 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14234 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14235 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14235 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14236 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14236 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14237 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14237 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14238 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14238 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14239 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14239 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14240 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14240 != Fp::invalid());
        host_args.at(0) = x14234;
        host_args.at(1) = x14235;
        host_args.at(2) = x14236;
        host_args.at(3) = x14237;
        host_args.at(4) = x14238;
        host_args.at(5) = x14239;
        host_args.at(6) = x14240;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14241 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x14241 != Fp::invalid());
    if (x14241 != 0) {
      {
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14242 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14242 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14243 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14243 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14244 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14244 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14245 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14245 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14246 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14246 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14247 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14247 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14248 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14248 != Fp::invalid());
        host_args.at(0) = x14242;
        host_args.at(1) = x14243;
        host_args.at(2) = x14244;
        host_args.at(3) = x14245;
        host_args.at(4) = x14246;
        host_args.at(5) = x14247;
        host_args.at(6) = x14248;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14249 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14249 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14250 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14250 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14251 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14251 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14252 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14252 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14253 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14253 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14254 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14254 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14255 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14255 != Fp::invalid());
        host_args.at(0) = x14249;
        host_args.at(1) = x14250;
        host_args.at(2) = x14251;
        host_args.at(3) = x14252;
        host_args.at(4) = x14253;
        host_args.at(5) = x14254;
        host_args.at(6) = x14255;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14256 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x14256 != Fp::invalid());
    if (x14256 != 0) {
      {
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14257 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14257 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14258 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14258 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14259 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14259 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14260 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14260 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14261 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14261 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14262 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14262 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14263 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14263 != Fp::invalid());
        host_args.at(0) = x14257;
        host_args.at(1) = x14258;
        host_args.at(2) = x14259;
        host_args.at(3) = x14260;
        host_args.at(4) = x14261;
        host_args.at(5) = x14262;
        host_args.at(6) = x14263;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14264 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14264 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14265 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14265 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14266 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14266 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14267 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14267 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14268 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14268 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14269 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14269 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14270 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14270 != Fp::invalid());
        host_args.at(0) = x14264;
        host_args.at(1) = x14265;
        host_args.at(2) = x14266;
        host_args.at(3) = x14267;
        host_args.at(4) = x14268;
        host_args.at(5) = x14269;
        host_args.at(6) = x14270;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14271 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x14271 != Fp::invalid());
    if (x14271 != 0) {
      {
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14272 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14272 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14273 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14273 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14274 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14274 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14275 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14275 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14276 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14276 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14277 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14277 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14278 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14278 != Fp::invalid());
        host_args.at(0) = x14272;
        host_args.at(1) = x14273;
        host_args.at(2) = x14274;
        host_args.at(3) = x14275;
        host_args.at(4) = x14276;
        host_args.at(5) = x14277;
        host_args.at(6) = x14278;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14279 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14279 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14280 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14280 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14281 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14281 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14282 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14282 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14283 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14283 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14284 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14284 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14285 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14285 != Fp::invalid());
        host_args.at(0) = x14279;
        host_args.at(1) = x14280;
        host_args.at(2) = x14281;
        host_args.at(3) = x14282;
        host_args.at(4) = x14283;
        host_args.at(5) = x14284;
        host_args.at(6) = x14285;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14286 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14286 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14287 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14287 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14288 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14288 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14289 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14289 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14290 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14290 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14291 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14291 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14292 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14292 != Fp::invalid());
        host_args.at(0) = x14286;
        host_args.at(1) = x14287;
        host_args.at(2) = x14288;
        host_args.at(3) = x14289;
        host_args.at(4) = x14290;
        host_args.at(5) = x14291;
        host_args.at(6) = x14292;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14293 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14293 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14294 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14294 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14295 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14295 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14296 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14296 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14297 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14297 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14298 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14298 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14299 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14299 != Fp::invalid());
        host_args.at(0) = x14293;
        host_args.at(1) = x14294;
        host_args.at(2) = x14295;
        host_args.at(3) = x14296;
        host_args.at(4) = x14297;
        host_args.at(5) = x14298;
        host_args.at(6) = x14299;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14300 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x14300 != Fp::invalid());
    if (x14300 != 0) {
      {
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14301 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14301 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14302 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14302 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14303 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14303 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14304 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14304 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14305 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14305 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14306 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14306 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14307 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14307 != Fp::invalid());
        host_args.at(0) = x14301;
        host_args.at(1) = x14302;
        host_args.at(2) = x14303;
        host_args.at(3) = x14304;
        host_args.at(4) = x14305;
        host_args.at(5) = x14306;
        host_args.at(6) = x14307;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14308 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14308 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14309 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14309 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14310 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14310 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14311 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14311 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14312 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14312 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14313 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14313 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14314 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14314 != Fp::invalid());
        host_args.at(0) = x14308;
        host_args.at(1) = x14309;
        host_args.at(2) = x14310;
        host_args.at(3) = x14311;
        host_args.at(4) = x14312;
        host_args.at(5) = x14313;
        host_args.at(6) = x14314;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14315 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14315 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14316 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14316 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14317 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14317 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14318 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x14318 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14319 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x14319 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14320 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x14320 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14321 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x14321 != Fp::invalid());
        host_args.at(0) = x14315;
        host_args.at(1) = x14316;
        host_args.at(2) = x14317;
        host_args.at(3) = x14318;
        host_args.at(4) = x14319;
        host_args.at(5) = x14320;
        host_args.at(6) = x14321;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14322 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x14322 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14323 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x14323 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14324 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x14324 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14325 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x14325 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14326 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x14326 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14327 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x14327 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14328 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x14328 != Fp::invalid());
        host_args.at(0) = x14322;
        host_args.at(1) = x14323;
        host_args.at(2) = x14324;
        host_args.at(3) = x14325;
        host_args.at(4) = x14326;
        host_args.at(5) = x14327;
        host_args.at(6) = x14328;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x13905;
}

} // namespace risc0::circuit::rv32im
// clang-format on
